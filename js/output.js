// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 81872;
  /* global initializers */ __ATINIT__.push();
  

var memoryInitializer = "output.js.mem";




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  function _gsl_matrix_alloc() {
  Module['printErr']('missing function: gsl_matrix_alloc'); abort(-1);
  }

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _GSL_MODE_PREC() {
  Module['printErr']('missing function: GSL_MODE_PREC'); abort(-1);
  }

   
  Module["_memset"] = _memset;

  function _gsl_pow_3() {
  Module['printErr']('missing function: gsl_pow_3'); abort(-1);
  }

  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _hypot(a, b) {
       return Math.sqrt(a*a + b*b);
    }

  function _GSL_MAX_DBL() {
  Module['printErr']('missing function: GSL_MAX_DBL'); abort(-1);
  }

  function _GSL_MIN_DBL() {
  Module['printErr']('missing function: GSL_MIN_DBL'); abort(-1);
  }

  var _tan=Math_tan;

  function _gsl_error() {
  Module['printErr']('missing function: gsl_error'); abort(-1);
  }

  var _asin=Math_asin;

  function _gsl_vector_free() {
  Module['printErr']('missing function: gsl_vector_free'); abort(-1);
  }

  var _log=Math_log;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  var _sqrt=Math_sqrt;

  function _gsl_pow_uint() {
  Module['printErr']('missing function: gsl_pow_uint'); abort(-1);
  }

  var _abs=Math_abs;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _gsl_coerce_double() {
  Module['printErr']('missing function: gsl_coerce_double'); abort(-1);
  }

  function _acosh(x) {
      return Math.log(x * 1 + Math.sqrt(x * x - 1));
    }

  function _finite(x) {
      return isFinite(x);
    }

  var _sin=Math_sin;

  function _gsl_eigen_symmv() {
  Module['printErr']('missing function: gsl_eigen_symmv'); abort(-1);
  }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  var _exp=Math_exp;

  var _atan=Math_atan;

  function _gsl_vector_get() {
  Module['printErr']('missing function: gsl_vector_get'); abort(-1);
  }

  function _expm1(x) {
      return Math.exp(x) - 1;
    }

  var _ceil=Math_ceil;

  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }

  function _gsl_eigen_symmv_alloc() {
  Module['printErr']('missing function: gsl_eigen_symmv_alloc'); abort(-1);
  }

   
  Module["_strlen"] = _strlen;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _cos=Math_cos;

  function _gsl_eigen_symmv_free() {
  Module['printErr']('missing function: gsl_eigen_symmv_free'); abort(-1);
  }

  function _gsl_hypot() {
  Module['printErr']('missing function: gsl_hypot'); abort(-1);
  }

  var _llvm_pow_f64=Math_pow;

  function _gsl_vector_subvector() {
  Module['printErr']('missing function: gsl_vector_subvector'); abort(-1);
  }

  function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  function _gsl_matrix_view_array() {
  Module['printErr']('missing function: gsl_matrix_view_array'); abort(-1);
  }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _gsl_vector_alloc() {
  Module['printErr']('missing function: gsl_vector_alloc'); abort(-1);
  }

  var _atan2=Math_atan2;

  function _abort() {
      Module['abort']();
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _fmod(x, y) {
      return x % y;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _gsl_matrix_free() {
  Module['printErr']('missing function: gsl_matrix_free'); abort(-1);
  }

  function _gsl_eigen_symmv_sort() {
  Module['printErr']('missing function: gsl_eigen_symmv_sort'); abort(-1);
  }

  var _acos=Math_acos;

  function _log1p(x) {
      return Math.log(1 + x);
    }

  function _gsl_matrix_submatrix() {
  Module['printErr']('missing function: gsl_matrix_submatrix'); abort(-1);
  }

  function _gsl_prec_eps() {
  Module['printErr']('missing function: gsl_prec_eps'); abort(-1);
  }
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "invoke_ii": invoke_ii, "invoke_vii": invoke_vii, "invoke_di": invoke_di, "_fabs": _fabs, "_sin": _sin, "_exp": _exp, "_gsl_hypot": _gsl_hypot, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_cosh": _cosh, "_finite": _finite, "_fmod": _fmod, "_atan2": _atan2, "___setErrNo": ___setErrNo, "_gsl_eigen_symmv_alloc": _gsl_eigen_symmv_alloc, "_gsl_vector_alloc": _gsl_vector_alloc, "_gsl_matrix_alloc": _gsl_matrix_alloc, "_asin": _asin, "_floor": _floor, "_gsl_matrix_free": _gsl_matrix_free, "_gsl_eigen_symmv": _gsl_eigen_symmv, "_fflush": _fflush, "_time": _time, "_cos": _cos, "_pwrite": _pwrite, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_gsl_pow_3": _gsl_pow_3, "_acos": _acos, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_acosh": _acosh, "_sinh": _sinh, "_GSL_MAX_DBL": _GSL_MAX_DBL, "_sysconf": _sysconf, "_gsl_vector_get": _gsl_vector_get, "_gsl_error": _gsl_error, "_abs": _abs, "_gsl_vector_free": _gsl_vector_free, "_GSL_MODE_PREC": _GSL_MODE_PREC, "_gsl_coerce_double": _gsl_coerce_double, "_gsl_matrix_view_array": _gsl_matrix_view_array, "_atan": _atan, "_fileno": _fileno, "_tanh": _tanh, "_fread": _fread, "_mkport": _mkport, "_gsl_pow_uint": _gsl_pow_uint, "_GSL_MIN_DBL": _GSL_MIN_DBL, "_log": _log, "_gsl_matrix_submatrix": _gsl_matrix_submatrix, "_write": _write, "_pread": _pread, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_recv": _recv, "_gsl_eigen_symmv_sort": _gsl_eigen_symmv_sort, "_tan": _tan, "_hypot": _hypot, "_sbrk": _sbrk, "_read": _read, "_expm1": _expm1, "_abort": _abort, "_log1p": _log1p, "_fwrite": _fwrite, "_gsl_vector_subvector": _gsl_vector_subvector, "_ceil": _ceil, "_sqrt": _sqrt, "_gsl_eigen_symmv_free": _gsl_eigen_symmv_free, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity, "_gsl_prec_eps": _gsl_prec_eps };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var _gsl_prec_eps=env._gsl_prec_eps|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var invoke_ii=env.invoke_ii;
  var invoke_vii=env.invoke_vii;
  var invoke_di=env.invoke_di;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _exp=env._exp;
  var _gsl_hypot=env._gsl_hypot;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _cosh=env._cosh;
  var _finite=env._finite;
  var _fmod=env._fmod;
  var _atan2=env._atan2;
  var ___setErrNo=env.___setErrNo;
  var _gsl_eigen_symmv_alloc=env._gsl_eigen_symmv_alloc;
  var _gsl_vector_alloc=env._gsl_vector_alloc;
  var _gsl_matrix_alloc=env._gsl_matrix_alloc;
  var _asin=env._asin;
  var _floor=env._floor;
  var _gsl_matrix_free=env._gsl_matrix_free;
  var _gsl_eigen_symmv=env._gsl_eigen_symmv;
  var _fflush=env._fflush;
  var _time=env._time;
  var _cos=env._cos;
  var _pwrite=env._pwrite;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _gsl_pow_3=env._gsl_pow_3;
  var _acos=env._acos;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _acosh=env._acosh;
  var _sinh=env._sinh;
  var _GSL_MAX_DBL=env._GSL_MAX_DBL;
  var _sysconf=env._sysconf;
  var _gsl_vector_get=env._gsl_vector_get;
  var _gsl_error=env._gsl_error;
  var _abs=env._abs;
  var _gsl_vector_free=env._gsl_vector_free;
  var _GSL_MODE_PREC=env._GSL_MODE_PREC;
  var _gsl_coerce_double=env._gsl_coerce_double;
  var _gsl_matrix_view_array=env._gsl_matrix_view_array;
  var _atan=env._atan;
  var _fileno=env._fileno;
  var _tanh=env._tanh;
  var _fread=env._fread;
  var _mkport=env._mkport;
  var _gsl_pow_uint=env._gsl_pow_uint;
  var _GSL_MIN_DBL=env._GSL_MIN_DBL;
  var _log=env._log;
  var _gsl_matrix_submatrix=env._gsl_matrix_submatrix;
  var _write=env._write;
  var _pread=env._pread;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _gsl_eigen_symmv_sort=env._gsl_eigen_symmv_sort;
  var _tan=env._tan;
  var _hypot=env._hypot;
  var _sbrk=env._sbrk;
  var _read=env._read;
  var _expm1=env._expm1;
  var _abort=env._abort;
  var _log1p=env._log1p;
  var _fwrite=env._fwrite;
  var _gsl_vector_subvector=env._gsl_vector_subvector;
  var _ceil=env._ceil;
  var _sqrt=env._sqrt;
  var _gsl_eigen_symmv_free=env._gsl_eigen_symmv_free;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i21$i = 0, $$sum2$i23$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1004 = 0, $1005 = 0, $1008 = 0, $1010 = 0, $1013 = 0, $1018 = 0, $1024 = 0, $1028 = 0, $1029 = 0, $1036 = 0, $1045 = 0, $1048 = 0, $1053 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1069 = 0, $1071 = 0, $1072 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $201 = 0, $208 = 0, $215 = 0, $218 = 0, $226 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $237 = 0, $238 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $277 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $301 = 0, $304 = 0, $308 = 0, $31 = 0, $310 = 0, $311 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $325 = 0, $335 = 0, $336 = 0, $338 = 0, $347 = 0, $349 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $365 = 0, $366 = 0, $368 = 0, $369 = 0, $371 = 0, $372 = 0, $374 = 0, $375 = 0, $38 = 0, $380 = 0, $381 = 0, $390 = 0, $399 = 0, $4 = 0, $406 = 0, $41 = 0, $413 = 0, $416 = 0, $424 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $433 = 0, $434 = 0, $44 = 0, $440 = 0, $445 = 0, $446 = 0, $449 = 0, $451 = 0, $454 = 0, $459 = 0, $46 = 0, $465 = 0, $469 = 0, $47 = 0, $470 = 0, $477 = 0, $486 = 0, $489 = 0, $49 = 0, $494 = 0, $5 = 0, $501 = 0, $502 = 0, $503 = 0, $51 = 0, $511 = 0, $513 = 0, $514 = 0, $524 = 0, $528 = 0, $53 = 0, $530 = 0, $531 = 0, $540 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $554 = 0, $556 = 0, $557 = 0, $563 = 0, $565 = 0, $567 = 0, $57 = 0, $572 = 0, $575 = 0, $577 = 0, $578 = 0, $579 = 0, $587 = 0, $588 = 0, $59 = 0, $591 = 0, $595 = 0, $596 = 0, $599 = 0, $6 = 0, $601 = 0, $605 = 0, $606 = 0, $61 = 0, $611 = 0, $615 = 0, $624 = 0, $625 = 0, $629 = 0, $631 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $643 = 0, $649 = 0, $65 = 0, $655 = 0, $656 = 0, $66 = 0, $661 = 0, $662 = 0, $663 = 0, $667 = 0, $67 = 0, $677 = 0, $679 = 0, $68 = 0, $685 = 0, $686 = 0, $69 = 0, $693 = 0, $697 = 0, $7 = 0, $70 = 0, $703 = 0, $707 = 0, $713 = 0, $715 = 0, $720 = 0, $721 = 0, $725 = 0, $726 = 0, $732 = 0, $738 = 0, $743 = 0, $746 = 0, $747 = 0, $750 = 0, $752 = 0, $754 = 0, $769 = 0, $77 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $785 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $794 = 0, $795 = 0, $797 = 0, $798 = 0, $80 = 0, $804 = 0, $805 = 0, $81 = 0, $814 = 0, $823 = 0, $830 = 0, $838 = 0, $84 = 0, $844 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $853 = 0, $854 = 0, $860 = 0, $865 = 0, $866 = 0, $869 = 0, $871 = 0, $874 = 0, $879 = 0, $88 = 0, $885 = 0, $889 = 0, $890 = 0, $897 = 0, $90 = 0, $906 = 0, $909 = 0, $91 = 0, $914 = 0, $92 = 0, $921 = 0, $922 = 0, $923 = 0, $93 = 0, $931 = 0, $934 = 0, $935 = 0, $94 = 0, $940 = 0, $945 = 0, $946 = 0, $949 = 0, $95 = 0, $950 = 0, $953 = 0, $959 = 0, $960 = 0, $966 = 0, $970 = 0, $976 = 0, $978 = 0, $983 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $99 = 0, $992 = 0, $993 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0, $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$330$i = 0, label = 0, sp = 0, $970$looptemp = 0;
 sp = STACKTOP;
 do if ($bytes >>> 0 < 245) {
  if ($bytes >>> 0 < 11) $5 = 16; else $5 = $bytes + 11 & -8;
  $4 = $5 >>> 3;
  $6 = HEAP32[20344] | 0;
  $7 = $6 >>> $4;
  if ($7 & 3) {
   $12 = ($7 & 1 ^ 1) + $4 | 0;
   $13 = $12 << 1;
   $14 = 81416 + ($13 << 2) | 0;
   $15 = 81416 + ($13 + 2 << 2) | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[20344] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $31 = $16 + ($28 | 4) | 0;
   HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1;
   $mem$0 = $17;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
  if ($5 >>> 0 > (HEAP32[20346] | 0) >>> 0) {
   if ($7) {
    $38 = 2 << $4;
    $41 = $7 << $4 & ($38 | 0 - $38);
    $44 = ($41 & 0 - $41) + -1 | 0;
    $46 = $44 >>> 12 & 16;
    $47 = $44 >>> $46;
    $49 = $47 >>> 5 & 8;
    $51 = $47 >>> $49;
    $53 = $51 >>> 2 & 4;
    $55 = $51 >>> $53;
    $57 = $55 >>> 1 & 2;
    $59 = $55 >>> $57;
    $61 = $59 >>> 1 & 1;
    $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0;
    $65 = $64 << 1;
    $66 = 81416 + ($65 << 2) | 0;
    $67 = 81416 + ($65 + 2 << 2) | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $68 + 8 | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    do if (($66 | 0) == ($70 | 0)) HEAP32[20344] = $6 & ~(1 << $64); else {
     if ($70 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
     $77 = $70 + 12 | 0;
     if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
      HEAP32[$77 >> 2] = $66;
      HEAP32[$67 >> 2] = $70;
      break;
     } else _abort();
    } while (0);
    $80 = $64 << 3;
    $81 = $80 - $5 | 0;
    HEAP32[$68 + 4 >> 2] = $5 | 3;
    $84 = $68 + $5 | 0;
    HEAP32[$68 + ($5 | 4) >> 2] = $81 | 1;
    HEAP32[$68 + $80 >> 2] = $81;
    $88 = HEAP32[20346] | 0;
    if ($88) {
     $90 = HEAP32[20349] | 0;
     $91 = $88 >>> 3;
     $92 = $91 << 1;
     $93 = 81416 + ($92 << 2) | 0;
     $94 = HEAP32[20344] | 0;
     $95 = 1 << $91;
     if (!($94 & $95)) {
      HEAP32[20344] = $94 | $95;
      $$pre$phiZ2D = 81416 + ($92 + 2 << 2) | 0;
      $F4$0 = $93;
     } else {
      $99 = 81416 + ($92 + 2 << 2) | 0;
      $100 = HEAP32[$99 >> 2] | 0;
      if ($100 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $99;
       $F4$0 = $100;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $90;
     HEAP32[$F4$0 + 12 >> 2] = $90;
     HEAP32[$90 + 8 >> 2] = $F4$0;
     HEAP32[$90 + 12 >> 2] = $93;
    }
    HEAP32[20346] = $81;
    HEAP32[20349] = $84;
    $mem$0 = $69;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
   $106 = HEAP32[20345] | 0;
   if (!$106) $nb$0 = $5; else {
    $110 = ($106 & 0 - $106) + -1 | 0;
    $112 = $110 >>> 12 & 16;
    $113 = $110 >>> $112;
    $115 = $113 >>> 5 & 8;
    $117 = $113 >>> $115;
    $119 = $117 >>> 2 & 4;
    $121 = $117 >>> $119;
    $123 = $121 >>> 1 & 2;
    $125 = $121 >>> $123;
    $127 = $125 >>> 1 & 1;
    $132 = HEAP32[81680 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $5 | 0;
    $t$0$i = $132;
    $v$0$i = $132;
    while (1) {
     $138 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$138) {
      $141 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$141) break; else $144 = $141;
     } else $144 = $138;
     $147 = (HEAP32[$144 + 4 >> 2] & -8) - $5 | 0;
     $148 = $147 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $148 ? $147 : $rsize$0$i;
     $t$0$i = $144;
     $v$0$i = $148 ? $144 : $v$0$i;
    }
    $149 = HEAP32[20348] | 0;
    if ($v$0$i >>> 0 < $149 >>> 0) _abort();
    $151 = $v$0$i + $5 | 0;
    if ($v$0$i >>> 0 >= $151 >>> 0) _abort();
    $154 = HEAP32[$v$0$i + 24 >> 2] | 0;
    $156 = HEAP32[$v$0$i + 12 >> 2] | 0;
    do if (($156 | 0) == ($v$0$i | 0)) {
     $167 = $v$0$i + 20 | 0;
     $168 = HEAP32[$167 >> 2] | 0;
     if (!$168) {
      $170 = $v$0$i + 16 | 0;
      $171 = HEAP32[$170 >> 2] | 0;
      if (!$171) {
       $R$1$i = 0;
       break;
      } else {
       $R$0$i = $171;
       $RP$0$i = $170;
      }
     } else {
      $R$0$i = $168;
      $RP$0$i = $167;
     }
     while (1) {
      $173 = $R$0$i + 20 | 0;
      $174 = HEAP32[$173 >> 2] | 0;
      if ($174) {
       $R$0$i = $174;
       $RP$0$i = $173;
       continue;
      }
      $176 = $R$0$i + 16 | 0;
      $177 = HEAP32[$176 >> 2] | 0;
      if (!$177) break; else {
       $R$0$i = $177;
       $RP$0$i = $176;
      }
     }
     if ($RP$0$i >>> 0 < $149 >>> 0) _abort(); else {
      HEAP32[$RP$0$i >> 2] = 0;
      $R$1$i = $R$0$i;
      break;
     }
    } else {
     $159 = HEAP32[$v$0$i + 8 >> 2] | 0;
     if ($159 >>> 0 < $149 >>> 0) _abort();
     $161 = $159 + 12 | 0;
     if ((HEAP32[$161 >> 2] | 0) != ($v$0$i | 0)) _abort();
     $164 = $156 + 8 | 0;
     if ((HEAP32[$164 >> 2] | 0) == ($v$0$i | 0)) {
      HEAP32[$161 >> 2] = $156;
      HEAP32[$164 >> 2] = $159;
      $R$1$i = $156;
      break;
     } else _abort();
    } while (0);
    do if ($154) {
     $182 = HEAP32[$v$0$i + 28 >> 2] | 0;
     $183 = 81680 + ($182 << 2) | 0;
     if (($v$0$i | 0) == (HEAP32[$183 >> 2] | 0)) {
      HEAP32[$183 >> 2] = $R$1$i;
      if (!$R$1$i) {
       HEAP32[20345] = HEAP32[20345] & ~(1 << $182);
       break;
      }
     } else {
      if ($154 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
      $192 = $154 + 16 | 0;
      if ((HEAP32[$192 >> 2] | 0) == ($v$0$i | 0)) HEAP32[$192 >> 2] = $R$1$i; else HEAP32[$154 + 20 >> 2] = $R$1$i;
      if (!$R$1$i) break;
     }
     if ($R$1$i >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
     HEAP32[$R$1$i + 24 >> 2] = $154;
     $201 = HEAP32[$v$0$i + 16 >> 2] | 0;
     do if ($201) if ($201 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i + 16 >> 2] = $201;
      HEAP32[$201 + 24 >> 2] = $R$1$i;
      break;
     } while (0);
     $208 = HEAP32[$v$0$i + 20 >> 2] | 0;
     if ($208) if ($208 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $R$1$i;
      break;
     }
    } while (0);
    if ($rsize$0$i >>> 0 < 16) {
     $215 = $rsize$0$i + $5 | 0;
     HEAP32[$v$0$i + 4 >> 2] = $215 | 3;
     $218 = $v$0$i + ($215 + 4) | 0;
     HEAP32[$218 >> 2] = HEAP32[$218 >> 2] | 1;
    } else {
     HEAP32[$v$0$i + 4 >> 2] = $5 | 3;
     HEAP32[$v$0$i + ($5 | 4) >> 2] = $rsize$0$i | 1;
     HEAP32[$v$0$i + ($rsize$0$i + $5) >> 2] = $rsize$0$i;
     $226 = HEAP32[20346] | 0;
     if ($226) {
      $228 = HEAP32[20349] | 0;
      $229 = $226 >>> 3;
      $230 = $229 << 1;
      $231 = 81416 + ($230 << 2) | 0;
      $232 = HEAP32[20344] | 0;
      $233 = 1 << $229;
      if (!($232 & $233)) {
       HEAP32[20344] = $232 | $233;
       $$pre$phi$iZ2D = 81416 + ($230 + 2 << 2) | 0;
       $F1$0$i = $231;
      } else {
       $237 = 81416 + ($230 + 2 << 2) | 0;
       $238 = HEAP32[$237 >> 2] | 0;
       if ($238 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $237;
        $F1$0$i = $238;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $228;
      HEAP32[$F1$0$i + 12 >> 2] = $228;
      HEAP32[$228 + 8 >> 2] = $F1$0$i;
      HEAP32[$228 + 12 >> 2] = $231;
     }
     HEAP32[20346] = $rsize$0$i;
     HEAP32[20349] = $151;
    }
    $mem$0 = $v$0$i + 8 | 0;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
  } else $nb$0 = $5;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $246 = $bytes + 11 | 0;
  $247 = $246 & -8;
  $248 = HEAP32[20345] | 0;
  if (!$248) $nb$0 = $247; else {
   $250 = 0 - $247 | 0;
   $251 = $246 >>> 8;
   if (!$251) $idx$0$i = 0; else if ($247 >>> 0 > 16777215) $idx$0$i = 31; else {
    $256 = ($251 + 1048320 | 0) >>> 16 & 8;
    $257 = $251 << $256;
    $260 = ($257 + 520192 | 0) >>> 16 & 4;
    $262 = $257 << $260;
    $265 = ($262 + 245760 | 0) >>> 16 & 2;
    $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0;
    $idx$0$i = $247 >>> ($270 + 7 | 0) & 1 | $270 << 1;
   }
   $277 = HEAP32[81680 + ($idx$0$i << 2) >> 2] | 0;
   L126 : do if (!$277) {
    $rsize$2$i = $250;
    $t$1$i = 0;
    $v$2$i = 0;
   } else {
    if (($idx$0$i | 0) == 31) $283 = 0; else $283 = 25 - ($idx$0$i >>> 1) | 0;
    $rsize$0$i15 = $250;
    $rst$0$i = 0;
    $sizebits$0$i = $247 << $283;
    $t$0$i14 = $277;
    $v$0$i16 = 0;
    while (1) {
     $286 = HEAP32[$t$0$i14 + 4 >> 2] & -8;
     $287 = $286 - $247 | 0;
     if ($287 >>> 0 < $rsize$0$i15 >>> 0) if (($286 | 0) == ($247 | 0)) {
      $rsize$2$i = $287;
      $t$1$i = $t$0$i14;
      $v$2$i = $t$0$i14;
      break L126;
     } else {
      $rsize$1$i = $287;
      $v$1$i = $t$0$i14;
     } else {
      $rsize$1$i = $rsize$0$i15;
      $v$1$i = $v$0$i16;
     }
     $291 = HEAP32[$t$0$i14 + 20 >> 2] | 0;
     $t$0$i14 = HEAP32[$t$0$i14 + ($sizebits$0$i >>> 31 << 2) + 16 >> 2] | 0;
     $rst$1$i = ($291 | 0) == 0 | ($291 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $291;
     if (!$t$0$i14) {
      $rsize$2$i = $rsize$1$i;
      $t$1$i = $rst$1$i;
      $v$2$i = $v$1$i;
      break;
     } else {
      $rsize$0$i15 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i16 = $v$1$i;
     }
    }
   } while (0);
   if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
    $301 = 2 << $idx$0$i;
    $304 = $248 & ($301 | 0 - $301);
    if (!$304) {
     $nb$0 = $247;
     break;
    }
    $308 = ($304 & 0 - $304) + -1 | 0;
    $310 = $308 >>> 12 & 16;
    $311 = $308 >>> $310;
    $313 = $311 >>> 5 & 8;
    $315 = $311 >>> $313;
    $317 = $315 >>> 2 & 4;
    $319 = $315 >>> $317;
    $321 = $319 >>> 1 & 2;
    $323 = $319 >>> $321;
    $325 = $323 >>> 1 & 1;
    $t$2$ph$i = HEAP32[81680 + (($313 | $310 | $317 | $321 | $325) + ($323 >>> $325) << 2) >> 2] | 0;
   } else $t$2$ph$i = $t$1$i;
   if (!$t$2$ph$i) {
    $rsize$3$lcssa$i = $rsize$2$i;
    $v$3$lcssa$i = $v$2$i;
   } else {
    $rsize$329$i = $rsize$2$i;
    $t$228$i = $t$2$ph$i;
    $v$330$i = $v$2$i;
    while (1) {
     $335 = (HEAP32[$t$228$i + 4 >> 2] & -8) - $247 | 0;
     $336 = $335 >>> 0 < $rsize$329$i >>> 0;
     $$rsize$3$i = $336 ? $335 : $rsize$329$i;
     $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
     $338 = HEAP32[$t$228$i + 16 >> 2] | 0;
     if ($338) {
      $rsize$329$i = $$rsize$3$i;
      $t$228$i = $338;
      $v$330$i = $t$2$v$3$i;
      continue;
     }
     $t$228$i = HEAP32[$t$228$i + 20 >> 2] | 0;
     if (!$t$228$i) {
      $rsize$3$lcssa$i = $$rsize$3$i;
      $v$3$lcssa$i = $t$2$v$3$i;
      break;
     } else {
      $rsize$329$i = $$rsize$3$i;
      $v$330$i = $t$2$v$3$i;
     }
    }
   }
   if (!$v$3$lcssa$i) $nb$0 = $247; else if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[20346] | 0) - $247 | 0) >>> 0) {
    $347 = HEAP32[20348] | 0;
    if ($v$3$lcssa$i >>> 0 < $347 >>> 0) _abort();
    $349 = $v$3$lcssa$i + $247 | 0;
    if ($v$3$lcssa$i >>> 0 >= $349 >>> 0) _abort();
    $352 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0;
    $354 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0;
    do if (($354 | 0) == ($v$3$lcssa$i | 0)) {
     $365 = $v$3$lcssa$i + 20 | 0;
     $366 = HEAP32[$365 >> 2] | 0;
     if (!$366) {
      $368 = $v$3$lcssa$i + 16 | 0;
      $369 = HEAP32[$368 >> 2] | 0;
      if (!$369) {
       $R$1$i20 = 0;
       break;
      } else {
       $R$0$i18 = $369;
       $RP$0$i17 = $368;
      }
     } else {
      $R$0$i18 = $366;
      $RP$0$i17 = $365;
     }
     while (1) {
      $371 = $R$0$i18 + 20 | 0;
      $372 = HEAP32[$371 >> 2] | 0;
      if ($372) {
       $R$0$i18 = $372;
       $RP$0$i17 = $371;
       continue;
      }
      $374 = $R$0$i18 + 16 | 0;
      $375 = HEAP32[$374 >> 2] | 0;
      if (!$375) break; else {
       $R$0$i18 = $375;
       $RP$0$i17 = $374;
      }
     }
     if ($RP$0$i17 >>> 0 < $347 >>> 0) _abort(); else {
      HEAP32[$RP$0$i17 >> 2] = 0;
      $R$1$i20 = $R$0$i18;
      break;
     }
    } else {
     $357 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0;
     if ($357 >>> 0 < $347 >>> 0) _abort();
     $359 = $357 + 12 | 0;
     if ((HEAP32[$359 >> 2] | 0) != ($v$3$lcssa$i | 0)) _abort();
     $362 = $354 + 8 | 0;
     if ((HEAP32[$362 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
      HEAP32[$359 >> 2] = $354;
      HEAP32[$362 >> 2] = $357;
      $R$1$i20 = $354;
      break;
     } else _abort();
    } while (0);
    do if ($352) {
     $380 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0;
     $381 = 81680 + ($380 << 2) | 0;
     if (($v$3$lcssa$i | 0) == (HEAP32[$381 >> 2] | 0)) {
      HEAP32[$381 >> 2] = $R$1$i20;
      if (!$R$1$i20) {
       HEAP32[20345] = HEAP32[20345] & ~(1 << $380);
       break;
      }
     } else {
      if ($352 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
      $390 = $352 + 16 | 0;
      if ((HEAP32[$390 >> 2] | 0) == ($v$3$lcssa$i | 0)) HEAP32[$390 >> 2] = $R$1$i20; else HEAP32[$352 + 20 >> 2] = $R$1$i20;
      if (!$R$1$i20) break;
     }
     if ($R$1$i20 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
     HEAP32[$R$1$i20 + 24 >> 2] = $352;
     $399 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0;
     do if ($399) if ($399 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 16 >> 2] = $399;
      HEAP32[$399 + 24 >> 2] = $R$1$i20;
      break;
     } while (0);
     $406 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0;
     if ($406) if ($406 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 20 >> 2] = $406;
      HEAP32[$406 + 24 >> 2] = $R$1$i20;
      break;
     }
    } while (0);
    L204 : do if ($rsize$3$lcssa$i >>> 0 < 16) {
     $413 = $rsize$3$lcssa$i + $247 | 0;
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $413 | 3;
     $416 = $v$3$lcssa$i + ($413 + 4) | 0;
     HEAP32[$416 >> 2] = HEAP32[$416 >> 2] | 1;
    } else {
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $247 | 3;
     HEAP32[$v$3$lcssa$i + ($247 | 4) >> 2] = $rsize$3$lcssa$i | 1;
     HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $247) >> 2] = $rsize$3$lcssa$i;
     $424 = $rsize$3$lcssa$i >>> 3;
     if ($rsize$3$lcssa$i >>> 0 < 256) {
      $426 = $424 << 1;
      $427 = 81416 + ($426 << 2) | 0;
      $428 = HEAP32[20344] | 0;
      $429 = 1 << $424;
      do if (!($428 & $429)) {
       HEAP32[20344] = $428 | $429;
       $$pre$phi$i26Z2D = 81416 + ($426 + 2 << 2) | 0;
       $F5$0$i = $427;
      } else {
       $433 = 81416 + ($426 + 2 << 2) | 0;
       $434 = HEAP32[$433 >> 2] | 0;
       if ($434 >>> 0 >= (HEAP32[20348] | 0) >>> 0) {
        $$pre$phi$i26Z2D = $433;
        $F5$0$i = $434;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i26Z2D >> 2] = $349;
      HEAP32[$F5$0$i + 12 >> 2] = $349;
      HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $F5$0$i;
      HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $427;
      break;
     }
     $440 = $rsize$3$lcssa$i >>> 8;
     if (!$440) $I7$0$i = 0; else if ($rsize$3$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $445 = ($440 + 1048320 | 0) >>> 16 & 8;
      $446 = $440 << $445;
      $449 = ($446 + 520192 | 0) >>> 16 & 4;
      $451 = $446 << $449;
      $454 = ($451 + 245760 | 0) >>> 16 & 2;
      $459 = 14 - ($449 | $445 | $454) + ($451 << $454 >>> 15) | 0;
      $I7$0$i = $rsize$3$lcssa$i >>> ($459 + 7 | 0) & 1 | $459 << 1;
     }
     $465 = 81680 + ($I7$0$i << 2) | 0;
     HEAP32[$v$3$lcssa$i + ($247 + 28) >> 2] = $I7$0$i;
     HEAP32[$v$3$lcssa$i + ($247 + 20) >> 2] = 0;
     HEAP32[$v$3$lcssa$i + ($247 + 16) >> 2] = 0;
     $469 = HEAP32[20345] | 0;
     $470 = 1 << $I7$0$i;
     if (!($469 & $470)) {
      HEAP32[20345] = $469 | $470;
      HEAP32[$465 >> 2] = $349;
      HEAP32[$v$3$lcssa$i + ($247 + 24) >> 2] = $465;
      HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $349;
      HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $349;
      break;
     }
     $477 = HEAP32[$465 >> 2] | 0;
     if (($I7$0$i | 0) == 31) $486 = 0; else $486 = 25 - ($I7$0$i >>> 1) | 0;
     L225 : do if ((HEAP32[$477 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) $T$0$lcssa$i = $477; else {
      $K12$025$i = $rsize$3$lcssa$i << $486;
      $T$024$i = $477;
      while (1) {
       $494 = $T$024$i + ($K12$025$i >>> 31 << 2) + 16 | 0;
       $489 = HEAP32[$494 >> 2] | 0;
       if (!$489) break;
       if ((HEAP32[$489 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
        $T$0$lcssa$i = $489;
        break L225;
       } else {
        $K12$025$i = $K12$025$i << 1;
        $T$024$i = $489;
       }
      }
      if ($494 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
       HEAP32[$494 >> 2] = $349;
       HEAP32[$v$3$lcssa$i + ($247 + 24) >> 2] = $T$024$i;
       HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $349;
       HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $349;
       break L204;
      }
     } while (0);
     $501 = $T$0$lcssa$i + 8 | 0;
     $502 = HEAP32[$501 >> 2] | 0;
     $503 = HEAP32[20348] | 0;
     if ($T$0$lcssa$i >>> 0 < $503 >>> 0) _abort();
     if ($502 >>> 0 < $503 >>> 0) _abort(); else {
      HEAP32[$502 + 12 >> 2] = $349;
      HEAP32[$501 >> 2] = $349;
      HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $502;
      HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $T$0$lcssa$i;
      HEAP32[$v$3$lcssa$i + ($247 + 24) >> 2] = 0;
      break;
     }
    } while (0);
    $mem$0 = $v$3$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $mem$0 | 0;
   } else $nb$0 = $247;
  }
 } while (0);
 $511 = HEAP32[20346] | 0;
 if ($nb$0 >>> 0 <= $511 >>> 0) {
  $513 = $511 - $nb$0 | 0;
  $514 = HEAP32[20349] | 0;
  if ($513 >>> 0 > 15) {
   HEAP32[20349] = $514 + $nb$0;
   HEAP32[20346] = $513;
   HEAP32[$514 + ($nb$0 + 4) >> 2] = $513 | 1;
   HEAP32[$514 + $511 >> 2] = $513;
   HEAP32[$514 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[20346] = 0;
   HEAP32[20349] = 0;
   HEAP32[$514 + 4 >> 2] = $511 | 3;
   $524 = $514 + ($511 + 4) | 0;
   HEAP32[$524 >> 2] = HEAP32[$524 >> 2] | 1;
  }
  $mem$0 = $514 + 8 | 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 $528 = HEAP32[20347] | 0;
 if ($nb$0 >>> 0 < $528 >>> 0) {
  $530 = $528 - $nb$0 | 0;
  HEAP32[20347] = $530;
  $531 = HEAP32[20350] | 0;
  HEAP32[20350] = $531 + $nb$0;
  HEAP32[$531 + ($nb$0 + 4) >> 2] = $530 | 1;
  HEAP32[$531 + 4 >> 2] = $nb$0 | 3;
  $mem$0 = $531 + 8 | 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 do if (!(HEAP32[20462] | 0)) {
  $540 = _sysconf(30) | 0;
  if (!($540 + -1 & $540)) {
   HEAP32[20464] = $540;
   HEAP32[20463] = $540;
   HEAP32[20465] = -1;
   HEAP32[20466] = -1;
   HEAP32[20467] = 0;
   HEAP32[20455] = 0;
   HEAP32[20462] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 $547 = $nb$0 + 48 | 0;
 $548 = HEAP32[20464] | 0;
 $549 = $nb$0 + 47 | 0;
 $550 = $548 + $549 | 0;
 $551 = 0 - $548 | 0;
 $552 = $550 & $551;
 if ($552 >>> 0 <= $nb$0 >>> 0) {
  $mem$0 = 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 $554 = HEAP32[20454] | 0;
 if ($554) {
  $556 = HEAP32[20452] | 0;
  $557 = $556 + $552 | 0;
  if ($557 >>> 0 <= $556 >>> 0 | $557 >>> 0 > $554 >>> 0) {
   $mem$0 = 0;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
 }
 L269 : do if (!(HEAP32[20455] & 4)) {
  $563 = HEAP32[20350] | 0;
  L271 : do if (!$563) label = 182; else {
   $sp$0$i$i = 81824 | 0;
   while (1) {
    $565 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($565 >>> 0 <= $563 >>> 0) {
     $567 = $sp$0$i$i + 4 | 0;
     if (($565 + (HEAP32[$567 >> 2] | 0) | 0) >>> 0 > $563 >>> 0) break;
    }
    $572 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$572) {
     label = 182;
     break L271;
    } else $sp$0$i$i = $572;
   }
   if (!$sp$0$i$i) label = 182; else {
    $599 = $550 - (HEAP32[20347] | 0) & $551;
    if ($599 >>> 0 < 2147483647) {
     $601 = _sbrk($599 | 0) | 0;
     $605 = ($601 | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$567 >> 2] | 0) | 0);
     $br$0$i = $601;
     $ssize$1$i = $599;
     $tbase$0$i = $605 ? $601 : -1;
     $tsize$0$i = $605 ? $599 : 0;
     label = 191;
    } else $tsize$0323841$i = 0;
   }
  } while (0);
  do if ((label | 0) == 182) {
   $575 = _sbrk(0) | 0;
   if (($575 | 0) == (-1 | 0)) $tsize$0323841$i = 0; else {
    $577 = $575;
    $578 = HEAP32[20463] | 0;
    $579 = $578 + -1 | 0;
    if (!($579 & $577)) $ssize$0$i = $552; else $ssize$0$i = $552 - $577 + ($579 + $577 & 0 - $578) | 0;
    $587 = HEAP32[20452] | 0;
    $588 = $587 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $591 = HEAP32[20454] | 0;
     if ($591) if ($588 >>> 0 <= $587 >>> 0 | $588 >>> 0 > $591 >>> 0) {
      $tsize$0323841$i = 0;
      break;
     }
     $595 = _sbrk($ssize$0$i | 0) | 0;
     $596 = ($595 | 0) == ($575 | 0);
     $br$0$i = $595;
     $ssize$1$i = $ssize$0$i;
     $tbase$0$i = $596 ? $575 : -1;
     $tsize$0$i = $596 ? $ssize$0$i : 0;
     label = 191;
    } else $tsize$0323841$i = 0;
   }
  } while (0);
  L291 : do if ((label | 0) == 191) {
   $606 = 0 - $ssize$1$i | 0;
   if (($tbase$0$i | 0) != (-1 | 0)) {
    $tbase$247$i = $tbase$0$i;
    $tsize$246$i = $tsize$0$i;
    label = 202;
    break L269;
   }
   do if (($br$0$i | 0) != (-1 | 0) & $ssize$1$i >>> 0 < 2147483647 & $ssize$1$i >>> 0 < $547 >>> 0) {
    $611 = HEAP32[20464] | 0;
    $615 = $549 - $ssize$1$i + $611 & 0 - $611;
    if ($615 >>> 0 < 2147483647) if ((_sbrk($615 | 0) | 0) == (-1 | 0)) {
     _sbrk($606 | 0) | 0;
     $tsize$0323841$i = $tsize$0$i;
     break L291;
    } else {
     $ssize$2$i = $615 + $ssize$1$i | 0;
     break;
    } else $ssize$2$i = $ssize$1$i;
   } else $ssize$2$i = $ssize$1$i; while (0);
   if (($br$0$i | 0) == (-1 | 0)) $tsize$0323841$i = $tsize$0$i; else {
    $tbase$247$i = $br$0$i;
    $tsize$246$i = $ssize$2$i;
    label = 202;
    break L269;
   }
  } while (0);
  HEAP32[20455] = HEAP32[20455] | 4;
  $tsize$1$i = $tsize$0323841$i;
  label = 199;
 } else {
  $tsize$1$i = 0;
  label = 199;
 } while (0);
 if ((label | 0) == 199) if ($552 >>> 0 < 2147483647) {
  $624 = _sbrk($552 | 0) | 0;
  $625 = _sbrk(0) | 0;
  if (($625 | 0) != (-1 | 0) & ($624 | 0) != (-1 | 0) & $624 >>> 0 < $625 >>> 0) {
   $629 = $625 - $624 | 0;
   $631 = $629 >>> 0 > ($nb$0 + 40 | 0) >>> 0;
   if ($631) {
    $tbase$247$i = $624;
    $tsize$246$i = $631 ? $629 : $tsize$1$i;
    label = 202;
   }
  }
 }
 if ((label | 0) == 202) {
  $633 = (HEAP32[20452] | 0) + $tsize$246$i | 0;
  HEAP32[20452] = $633;
  if ($633 >>> 0 > (HEAP32[20453] | 0) >>> 0) HEAP32[20453] = $633;
  $636 = HEAP32[20350] | 0;
  L311 : do if (!$636) {
   $638 = HEAP32[20348] | 0;
   if (($638 | 0) == 0 | $tbase$247$i >>> 0 < $638 >>> 0) HEAP32[20348] = $tbase$247$i;
   HEAP32[20456] = $tbase$247$i;
   HEAP32[20457] = $tsize$246$i;
   HEAP32[20459] = 0;
   HEAP32[20353] = HEAP32[20462];
   HEAP32[20352] = -1;
   $i$02$i$i = 0;
   do {
    $642 = $i$02$i$i << 1;
    $643 = 81416 + ($642 << 2) | 0;
    HEAP32[81416 + ($642 + 3 << 2) >> 2] = $643;
    HEAP32[81416 + ($642 + 2 << 2) >> 2] = $643;
    $i$02$i$i = $i$02$i$i + 1 | 0;
   } while (($i$02$i$i | 0) != 32);
   $649 = $tbase$247$i + 8 | 0;
   if (!($649 & 7)) $655 = 0; else $655 = 0 - $649 & 7;
   $656 = $tsize$246$i + -40 - $655 | 0;
   HEAP32[20350] = $tbase$247$i + $655;
   HEAP32[20347] = $656;
   HEAP32[$tbase$247$i + ($655 + 4) >> 2] = $656 | 1;
   HEAP32[$tbase$247$i + ($tsize$246$i + -36) >> 2] = 40;
   HEAP32[20351] = HEAP32[20466];
  } else {
   $sp$075$i = 81824 | 0;
   while (1) {
    $661 = HEAP32[$sp$075$i >> 2] | 0;
    $662 = $sp$075$i + 4 | 0;
    $663 = HEAP32[$662 >> 2] | 0;
    if (($tbase$247$i | 0) == ($661 + $663 | 0)) {
     label = 214;
     break;
    }
    $667 = HEAP32[$sp$075$i + 8 >> 2] | 0;
    if (!$667) break; else $sp$075$i = $667;
   }
   if ((label | 0) == 214) if (!(HEAP32[$sp$075$i + 12 >> 2] & 8)) if ($636 >>> 0 >= $661 >>> 0 & $636 >>> 0 < $tbase$247$i >>> 0) {
    HEAP32[$662 >> 2] = $663 + $tsize$246$i;
    $677 = (HEAP32[20347] | 0) + $tsize$246$i | 0;
    $679 = $636 + 8 | 0;
    if (!($679 & 7)) $685 = 0; else $685 = 0 - $679 & 7;
    $686 = $677 - $685 | 0;
    HEAP32[20350] = $636 + $685;
    HEAP32[20347] = $686;
    HEAP32[$636 + ($685 + 4) >> 2] = $686 | 1;
    HEAP32[$636 + ($677 + 4) >> 2] = 40;
    HEAP32[20351] = HEAP32[20466];
    break;
   }
   if ($tbase$247$i >>> 0 < (HEAP32[20348] | 0) >>> 0) HEAP32[20348] = $tbase$247$i;
   $693 = $tbase$247$i + $tsize$246$i | 0;
   $sp$168$i = 81824 | 0;
   while (1) {
    if ((HEAP32[$sp$168$i >> 2] | 0) == ($693 | 0)) {
     label = 224;
     break;
    }
    $697 = HEAP32[$sp$168$i + 8 >> 2] | 0;
    if (!$697) break; else $sp$168$i = $697;
   }
   if ((label | 0) == 224) if (!(HEAP32[$sp$168$i + 12 >> 2] & 8)) {
    HEAP32[$sp$168$i >> 2] = $tbase$247$i;
    $703 = $sp$168$i + 4 | 0;
    HEAP32[$703 >> 2] = (HEAP32[$703 >> 2] | 0) + $tsize$246$i;
    $707 = $tbase$247$i + 8 | 0;
    if (!($707 & 7)) $713 = 0; else $713 = 0 - $707 & 7;
    $715 = $tbase$247$i + ($tsize$246$i + 8) | 0;
    if (!($715 & 7)) $720 = 0; else $720 = 0 - $715 & 7;
    $721 = $tbase$247$i + ($720 + $tsize$246$i) | 0;
    $$sum$i21$i = $713 + $nb$0 | 0;
    $725 = $tbase$247$i + $$sum$i21$i | 0;
    $726 = $721 - ($tbase$247$i + $713) - $nb$0 | 0;
    HEAP32[$tbase$247$i + ($713 + 4) >> 2] = $nb$0 | 3;
    L348 : do if (($721 | 0) == (HEAP32[20350] | 0)) {
     $732 = (HEAP32[20347] | 0) + $726 | 0;
     HEAP32[20347] = $732;
     HEAP32[20350] = $725;
     HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $732 | 1;
    } else {
     if (($721 | 0) == (HEAP32[20349] | 0)) {
      $738 = (HEAP32[20346] | 0) + $726 | 0;
      HEAP32[20346] = $738;
      HEAP32[20349] = $725;
      HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $738 | 1;
      HEAP32[$tbase$247$i + ($738 + $$sum$i21$i) >> 2] = $738;
      break;
     }
     $$sum2$i23$i = $tsize$246$i + 4 | 0;
     $743 = HEAP32[$tbase$247$i + ($$sum2$i23$i + $720) >> 2] | 0;
     if (($743 & 3 | 0) == 1) {
      $746 = $743 & -8;
      $747 = $743 >>> 3;
      L356 : do if ($743 >>> 0 < 256) {
       $750 = HEAP32[$tbase$247$i + (($720 | 8) + $tsize$246$i) >> 2] | 0;
       $752 = HEAP32[$tbase$247$i + ($tsize$246$i + 12 + $720) >> 2] | 0;
       $754 = 81416 + ($747 << 1 << 2) | 0;
       do if (($750 | 0) != ($754 | 0)) {
        if ($750 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
        if ((HEAP32[$750 + 12 >> 2] | 0) == ($721 | 0)) break;
        _abort();
       } while (0);
       if (($752 | 0) == ($750 | 0)) {
        HEAP32[20344] = HEAP32[20344] & ~(1 << $747);
        break;
       }
       do if (($752 | 0) == ($754 | 0)) $$pre$phi58$i$iZ2D = $752 + 8 | 0; else {
        if ($752 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
        $769 = $752 + 8 | 0;
        if ((HEAP32[$769 >> 2] | 0) == ($721 | 0)) {
         $$pre$phi58$i$iZ2D = $769;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$750 + 12 >> 2] = $752;
       HEAP32[$$pre$phi58$i$iZ2D >> 2] = $750;
      } else {
       $774 = HEAP32[$tbase$247$i + (($720 | 24) + $tsize$246$i) >> 2] | 0;
       $776 = HEAP32[$tbase$247$i + ($tsize$246$i + 12 + $720) >> 2] | 0;
       do if (($776 | 0) == ($721 | 0)) {
        $$sum67$i$i = $720 | 16;
        $788 = $tbase$247$i + ($$sum2$i23$i + $$sum67$i$i) | 0;
        $789 = HEAP32[$788 >> 2] | 0;
        if (!$789) {
         $791 = $tbase$247$i + ($$sum67$i$i + $tsize$246$i) | 0;
         $792 = HEAP32[$791 >> 2] | 0;
         if (!$792) {
          $R$1$i$i = 0;
          break;
         } else {
          $R$0$i$i = $792;
          $RP$0$i$i = $791;
         }
        } else {
         $R$0$i$i = $789;
         $RP$0$i$i = $788;
        }
        while (1) {
         $794 = $R$0$i$i + 20 | 0;
         $795 = HEAP32[$794 >> 2] | 0;
         if ($795) {
          $R$0$i$i = $795;
          $RP$0$i$i = $794;
          continue;
         }
         $797 = $R$0$i$i + 16 | 0;
         $798 = HEAP32[$797 >> 2] | 0;
         if (!$798) break; else {
          $R$0$i$i = $798;
          $RP$0$i$i = $797;
         }
        }
        if ($RP$0$i$i >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
         HEAP32[$RP$0$i$i >> 2] = 0;
         $R$1$i$i = $R$0$i$i;
         break;
        }
       } else {
        $779 = HEAP32[$tbase$247$i + (($720 | 8) + $tsize$246$i) >> 2] | 0;
        if ($779 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
        $782 = $779 + 12 | 0;
        if ((HEAP32[$782 >> 2] | 0) != ($721 | 0)) _abort();
        $785 = $776 + 8 | 0;
        if ((HEAP32[$785 >> 2] | 0) == ($721 | 0)) {
         HEAP32[$782 >> 2] = $776;
         HEAP32[$785 >> 2] = $779;
         $R$1$i$i = $776;
         break;
        } else _abort();
       } while (0);
       if (!$774) break;
       $804 = HEAP32[$tbase$247$i + ($tsize$246$i + 28 + $720) >> 2] | 0;
       $805 = 81680 + ($804 << 2) | 0;
       do if (($721 | 0) == (HEAP32[$805 >> 2] | 0)) {
        HEAP32[$805 >> 2] = $R$1$i$i;
        if ($R$1$i$i) break;
        HEAP32[20345] = HEAP32[20345] & ~(1 << $804);
        break L356;
       } else {
        if ($774 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
        $814 = $774 + 16 | 0;
        if ((HEAP32[$814 >> 2] | 0) == ($721 | 0)) HEAP32[$814 >> 2] = $R$1$i$i; else HEAP32[$774 + 20 >> 2] = $R$1$i$i;
        if (!$R$1$i$i) break L356;
       } while (0);
       if ($R$1$i$i >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
       HEAP32[$R$1$i$i + 24 >> 2] = $774;
       $$sum3132$i$i = $720 | 16;
       $823 = HEAP32[$tbase$247$i + ($$sum3132$i$i + $tsize$246$i) >> 2] | 0;
       do if ($823) if ($823 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 16 >> 2] = $823;
        HEAP32[$823 + 24 >> 2] = $R$1$i$i;
        break;
       } while (0);
       $830 = HEAP32[$tbase$247$i + ($$sum2$i23$i + $$sum3132$i$i) >> 2] | 0;
       if (!$830) break;
       if ($830 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 20 >> 2] = $830;
        HEAP32[$830 + 24 >> 2] = $R$1$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $tbase$247$i + (($746 | $720) + $tsize$246$i) | 0;
      $qsize$0$i$i = $746 + $726 | 0;
     } else {
      $oldfirst$0$i$i = $721;
      $qsize$0$i$i = $726;
     }
     $838 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$838 >> 2] = HEAP32[$838 >> 2] & -2;
     HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $qsize$0$i$i | 1;
     HEAP32[$tbase$247$i + ($qsize$0$i$i + $$sum$i21$i) >> 2] = $qsize$0$i$i;
     $844 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $846 = $844 << 1;
      $847 = 81416 + ($846 << 2) | 0;
      $848 = HEAP32[20344] | 0;
      $849 = 1 << $844;
      do if (!($848 & $849)) {
       HEAP32[20344] = $848 | $849;
       $$pre$phi$i26$iZ2D = 81416 + ($846 + 2 << 2) | 0;
       $F4$0$i$i = $847;
      } else {
       $853 = 81416 + ($846 + 2 << 2) | 0;
       $854 = HEAP32[$853 >> 2] | 0;
       if ($854 >>> 0 >= (HEAP32[20348] | 0) >>> 0) {
        $$pre$phi$i26$iZ2D = $853;
        $F4$0$i$i = $854;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i26$iZ2D >> 2] = $725;
      HEAP32[$F4$0$i$i + 12 >> 2] = $725;
      HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $F4$0$i$i;
      HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $847;
      break;
     }
     $860 = $qsize$0$i$i >>> 8;
     do if (!$860) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $865 = ($860 + 1048320 | 0) >>> 16 & 8;
      $866 = $860 << $865;
      $869 = ($866 + 520192 | 0) >>> 16 & 4;
      $871 = $866 << $869;
      $874 = ($871 + 245760 | 0) >>> 16 & 2;
      $879 = 14 - ($869 | $865 | $874) + ($871 << $874 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($879 + 7 | 0) & 1 | $879 << 1;
     } while (0);
     $885 = 81680 + ($I7$0$i$i << 2) | 0;
     HEAP32[$tbase$247$i + ($$sum$i21$i + 28) >> 2] = $I7$0$i$i;
     HEAP32[$tbase$247$i + ($$sum$i21$i + 20) >> 2] = 0;
     HEAP32[$tbase$247$i + ($$sum$i21$i + 16) >> 2] = 0;
     $889 = HEAP32[20345] | 0;
     $890 = 1 << $I7$0$i$i;
     if (!($889 & $890)) {
      HEAP32[20345] = $889 | $890;
      HEAP32[$885 >> 2] = $725;
      HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = $885;
      HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $725;
      HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $725;
      break;
     }
     $897 = HEAP32[$885 >> 2] | 0;
     if (($I7$0$i$i | 0) == 31) $906 = 0; else $906 = 25 - ($I7$0$i$i >>> 1) | 0;
     L445 : do if ((HEAP32[$897 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i28$i = $897; else {
      $K8$052$i$i = $qsize$0$i$i << $906;
      $T$051$i$i = $897;
      while (1) {
       $914 = $T$051$i$i + ($K8$052$i$i >>> 31 << 2) + 16 | 0;
       $909 = HEAP32[$914 >> 2] | 0;
       if (!$909) break;
       if ((HEAP32[$909 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i28$i = $909;
        break L445;
       } else {
        $K8$052$i$i = $K8$052$i$i << 1;
        $T$051$i$i = $909;
       }
      }
      if ($914 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
       HEAP32[$914 >> 2] = $725;
       HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = $T$051$i$i;
       HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $725;
       HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $725;
       break L348;
      }
     } while (0);
     $921 = $T$0$lcssa$i28$i + 8 | 0;
     $922 = HEAP32[$921 >> 2] | 0;
     $923 = HEAP32[20348] | 0;
     if ($T$0$lcssa$i28$i >>> 0 < $923 >>> 0) _abort();
     if ($922 >>> 0 < $923 >>> 0) _abort(); else {
      HEAP32[$922 + 12 >> 2] = $725;
      HEAP32[$921 >> 2] = $725;
      HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $922;
      HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $T$0$lcssa$i28$i;
      HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = 0;
      break;
     }
    } while (0);
    $mem$0 = $tbase$247$i + ($713 | 8) | 0;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
   $sp$0$i$i$i = 81824 | 0;
   while (1) {
    $931 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($931 >>> 0 <= $636 >>> 0) {
     $934 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0;
     $935 = $931 + $934 | 0;
     if ($935 >>> 0 > $636 >>> 0) break;
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $940 = $931 + ($934 + -39) | 0;
   if (!($940 & 7)) $945 = 0; else $945 = 0 - $940 & 7;
   $946 = $931 + ($934 + -47 + $945) | 0;
   $949 = $946 >>> 0 < ($636 + 16 | 0) >>> 0 ? $636 : $946;
   $950 = $949 + 8 | 0;
   $953 = $tbase$247$i + 8 | 0;
   if (!($953 & 7)) $959 = 0; else $959 = 0 - $953 & 7;
   $960 = $tsize$246$i + -40 - $959 | 0;
   HEAP32[20350] = $tbase$247$i + $959;
   HEAP32[20347] = $960;
   HEAP32[$tbase$247$i + ($959 + 4) >> 2] = $960 | 1;
   HEAP32[$tbase$247$i + ($tsize$246$i + -36) >> 2] = 40;
   HEAP32[20351] = HEAP32[20466];
   HEAP32[$949 + 4 >> 2] = 27;
   HEAP32[$950 + 0 >> 2] = HEAP32[20456];
   HEAP32[$950 + 4 >> 2] = HEAP32[20457];
   HEAP32[$950 + 8 >> 2] = HEAP32[20458];
   HEAP32[$950 + 12 >> 2] = HEAP32[20459];
   HEAP32[20456] = $tbase$247$i;
   HEAP32[20457] = $tsize$246$i;
   HEAP32[20459] = 0;
   HEAP32[20458] = $950;
   $966 = $949 + 28 | 0;
   HEAP32[$966 >> 2] = 7;
   if (($949 + 32 | 0) >>> 0 < $935 >>> 0) {
    $970 = $966;
    do {
     $970$looptemp = $970;
     $970 = $970 + 4 | 0;
     HEAP32[$970 >> 2] = 7;
    } while (($970$looptemp + 8 | 0) >>> 0 < $935 >>> 0);
   }
   if (($949 | 0) != ($636 | 0)) {
    $976 = $949 - $636 | 0;
    $978 = $636 + ($976 + 4) | 0;
    HEAP32[$978 >> 2] = HEAP32[$978 >> 2] & -2;
    HEAP32[$636 + 4 >> 2] = $976 | 1;
    HEAP32[$636 + $976 >> 2] = $976;
    $983 = $976 >>> 3;
    if ($976 >>> 0 < 256) {
     $985 = $983 << 1;
     $986 = 81416 + ($985 << 2) | 0;
     $987 = HEAP32[20344] | 0;
     $988 = 1 << $983;
     do if (!($987 & $988)) {
      HEAP32[20344] = $987 | $988;
      $$pre$phi$i$iZ2D = 81416 + ($985 + 2 << 2) | 0;
      $F$0$i$i = $986;
     } else {
      $992 = 81416 + ($985 + 2 << 2) | 0;
      $993 = HEAP32[$992 >> 2] | 0;
      if ($993 >>> 0 >= (HEAP32[20348] | 0) >>> 0) {
       $$pre$phi$i$iZ2D = $992;
       $F$0$i$i = $993;
       break;
      }
      _abort();
     } while (0);
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $636;
     HEAP32[$F$0$i$i + 12 >> 2] = $636;
     HEAP32[$636 + 8 >> 2] = $F$0$i$i;
     HEAP32[$636 + 12 >> 2] = $986;
     break;
    }
    $999 = $976 >>> 8;
    if (!$999) $I1$0$i$i = 0; else if ($976 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $1004 = ($999 + 1048320 | 0) >>> 16 & 8;
     $1005 = $999 << $1004;
     $1008 = ($1005 + 520192 | 0) >>> 16 & 4;
     $1010 = $1005 << $1008;
     $1013 = ($1010 + 245760 | 0) >>> 16 & 2;
     $1018 = 14 - ($1008 | $1004 | $1013) + ($1010 << $1013 >>> 15) | 0;
     $I1$0$i$i = $976 >>> ($1018 + 7 | 0) & 1 | $1018 << 1;
    }
    $1024 = 81680 + ($I1$0$i$i << 2) | 0;
    HEAP32[$636 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$636 + 20 >> 2] = 0;
    HEAP32[$636 + 16 >> 2] = 0;
    $1028 = HEAP32[20345] | 0;
    $1029 = 1 << $I1$0$i$i;
    if (!($1028 & $1029)) {
     HEAP32[20345] = $1028 | $1029;
     HEAP32[$1024 >> 2] = $636;
     HEAP32[$636 + 24 >> 2] = $1024;
     HEAP32[$636 + 12 >> 2] = $636;
     HEAP32[$636 + 8 >> 2] = $636;
     break;
    }
    $1036 = HEAP32[$1024 >> 2] | 0;
    if (($I1$0$i$i | 0) == 31) $1045 = 0; else $1045 = 25 - ($I1$0$i$i >>> 1) | 0;
    L499 : do if ((HEAP32[$1036 + 4 >> 2] & -8 | 0) == ($976 | 0)) $T$0$lcssa$i$i = $1036; else {
     $K2$014$i$i = $976 << $1045;
     $T$013$i$i = $1036;
     while (1) {
      $1053 = $T$013$i$i + ($K2$014$i$i >>> 31 << 2) + 16 | 0;
      $1048 = HEAP32[$1053 >> 2] | 0;
      if (!$1048) break;
      if ((HEAP32[$1048 + 4 >> 2] & -8 | 0) == ($976 | 0)) {
       $T$0$lcssa$i$i = $1048;
       break L499;
      } else {
       $K2$014$i$i = $K2$014$i$i << 1;
       $T$013$i$i = $1048;
      }
     }
     if ($1053 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
      HEAP32[$1053 >> 2] = $636;
      HEAP32[$636 + 24 >> 2] = $T$013$i$i;
      HEAP32[$636 + 12 >> 2] = $636;
      HEAP32[$636 + 8 >> 2] = $636;
      break L311;
     }
    } while (0);
    $1060 = $T$0$lcssa$i$i + 8 | 0;
    $1061 = HEAP32[$1060 >> 2] | 0;
    $1062 = HEAP32[20348] | 0;
    if ($T$0$lcssa$i$i >>> 0 < $1062 >>> 0) _abort();
    if ($1061 >>> 0 < $1062 >>> 0) _abort(); else {
     HEAP32[$1061 + 12 >> 2] = $636;
     HEAP32[$1060 >> 2] = $636;
     HEAP32[$636 + 8 >> 2] = $1061;
     HEAP32[$636 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$636 + 24 >> 2] = 0;
     break;
    }
   }
  } while (0);
  $1069 = HEAP32[20347] | 0;
  if ($1069 >>> 0 > $nb$0 >>> 0) {
   $1071 = $1069 - $nb$0 | 0;
   HEAP32[20347] = $1071;
   $1072 = HEAP32[20350] | 0;
   HEAP32[20350] = $1072 + $nb$0;
   HEAP32[$1072 + ($nb$0 + 4) >> 2] = $1071 | 1;
   HEAP32[$1072 + 4 >> 2] = $nb$0 | 3;
   $mem$0 = $1072 + 8 | 0;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;
 return $mem$0 | 0;
}
function _hyperg_U_bge1($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0, $102 = 0, $103 = 0.0, $110 = 0.0, $123 = 0, $16 = 0, $182 = 0.0, $188 = 0.0, $2 = 0, $245 = 0.0, $259 = 0.0, $268 = 0.0, $271 = 0.0, $272 = 0, $280 = 0.0, $283 = 0.0, $284 = 0, $291 = 0.0, $292 = 0, $299 = 0.0, $3 = 0, $300 = 0, $314 = 0.0, $389 = 0.0, $4 = 0, $406 = 0.0, $418 = 0.0, $421 = 0.0, $422 = 0, $429 = 0.0, $430 = 0, $437 = 0.0, $438 = 0, $445 = 0.0, $446 = 0, $467 = 0, $498 = 0.0, $504 = 0.0, $560 = 0.0, $574 = 0.0, $583 = 0.0, $586 = 0.0, $587 = 0, $59 = 0, $595 = 0.0, $598 = 0.0, $599 = 0, $606 = 0.0, $607 = 0, $614 = 0.0, $615 = 0, $62 = 0.0, $636 = 0, $69 = 0.0, $711 = 0.0, $73 = 0, $734 = 0.0, $74 = 0.0, $742 = 0.0, $743 = 0, $764 = 0, $859 = 0.0, $865 = 0.0, $921 = 0, $932 = 0.0, $937 = 0.0, $951 = 0.0, $979 = 0, $980 = 0, $CF1_count = 0, $CF1_count45 = 0, $L = 0, $U0 = 0, $Ua = 0, $Ua1_bck = 0, $Ua1_for = 0, $Ua22 = 0, $Ua34 = 0, $Ua47 = 0, $Ua61 = 0, $Uam1 = 0, $Uam121 = 0, $Uam135 = 0, $Uam148 = 0, $Uam160 = 0, $Uap1 = 0, $Uap123 = 0, $Uap133 = 0, $Uap146 = 0, $Uap162 = 0, $Ub = 0, $Ubm1 = 0, $Ubp1 = 0, $a0 = 0, $a026 = 0, $a040 = 0, $a09 = 0, $a1 = 0, $a_neg_integer = 0, $ap = 0, $ap24 = 0, $ap36 = 0, $ap49 = 0, $ap63 = 0, $asymp = 0, $au0 = 0, $au025 = 0, $au038 = 0, $au053 = 0, $au064 = 0, $au07 = 0, $b0 = 0, $bp = 0, $eps = 0, $err_mult = 0, $lm_0 = 0, $lm_012 = 0, $lm_032 = 0, $lm_056 = 0, $lm_1 = 0, $lm_113 = 0, $lm_157 = 0, $lm_for = 0, $lm_max = 0, $lm_max14 = 0, $ln_multiplier = 0, $ln_pre_err = 0, $ln_pre_val = 0, $lnfact = 0, $lnm = 0, $lnm19 = 0, $lnm29 = 0, $lnm41 = 0, $lnm5 = 0, $lnscale = 0, $lnscale11 = 0, $lnscale31 = 0, $lnscale4 = 0, $lnscale43 = 0, $n = 0, $r = 0, $r51 = 0, $rU = 0, $r_Ua = 0, $r_Ua15 = 0, $r_Ua55 = 0, $r_Uam1 = 0, $r_Uam154 = 0, $r_Uap1 = 0, $rinta = 0, $ru = 0, $ru50 = 0, $scale_count = 0, $scale_count28 = 0, $scale_count8 = 0, $scale_count_bck = 0, $scale_count_for = 0, $scale_factor = 0, $scale_factor10 = 0, $scale_factor27 = 0, $scale_factor39 = 0, $ser = 0, $sgn = 0, $stat_0 = 0, $stat_016 = 0, $stat_058 = 0, $stat_1 = 0, $stat_117 = 0, $stat_159 = 0, $stat_CF1 = 0, $stat_CF152 = 0, $stat_L = 0, $stat_U = 0, $stat_U0 = 0, $stat_asymp = 0, $stat_bck = 0, $stat_e = 0, $stat_e1 = 0, $stat_e18 = 0, $stat_e2 = 0, $stat_e3 = 0, $stat_e37 = 0, $stat_e44 = 0, $stat_for = 0, $stat_ser = 0, $y = 0, $y20 = 0, $y30 = 0, $y42 = 0, $y6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $0 = sp + 1048 | 0;
 $1 = sp + 912 | 0;
 $2 = sp + 904 | 0;
 $3 = sp + 896 | 0;
 $4 = sp + 1044 | 0;
 $rinta = sp + 888 | 0;
 $a_neg_integer = sp + 1040 | 0;
 $n = sp + 1036 | 0;
 $sgn = sp + 880 | 0;
 $lnfact = sp + 864 | 0;
 $L = sp + 848 | 0;
 $stat_L = sp + 1032 | 0;
 $stat_e = sp + 1028 | 0;
 $ln_pre_val = sp + 840 | 0;
 $ln_pre_err = sp + 832 | 0;
 $asymp = sp + 816 | 0;
 $stat_asymp = sp + 1024 | 0;
 $stat_e1 = sp + 1020 | 0;
 $rU = sp + 800 | 0;
 $ln_multiplier = sp + 792 | 0;
 $stat_U = sp + 1016 | 0;
 $stat_e2 = sp + 1012 | 0;
 $ser = sp + 776 | 0;
 $stat_ser = sp + 1008 | 0;
 $scale_factor = sp + 768 | 0;
 $a0 = sp + 760 | 0;
 $b0 = sp + 752 | 0;
 $scale_count = sp + 1004 | 0;
 $lm_0 = sp + 744 | 0;
 $lm_1 = sp + 736 | 0;
 $lm_max = sp + 728 | 0;
 $r_Uap1 = sp + 712 | 0;
 $r_Ua = sp + 696 | 0;
 $stat_0 = sp + 1e3 | 0;
 $stat_1 = sp + 996 | 0;
 $stat_e3 = sp + 992 | 0;
 $Uap1 = sp + 688 | 0;
 $Ua = sp + 680 | 0;
 $Uam1 = sp + 672 | 0;
 $ap = sp + 664 | 0;
 $au0 = sp + 656 | 0;
 $lnscale = sp + 648 | 0;
 $lnm = sp + 632 | 0;
 $y = sp + 616 | 0;
 $err_mult = sp + 608 | 0;
 $lnscale4 = sp + 600 | 0;
 $lnm5 = sp + 584 | 0;
 $y6 = sp + 568 | 0;
 $Ubm1 = sp + 560 | 0;
 $Ub = sp + 552 | 0;
 $Ubp1 = sp + 544 | 0;
 $bp = sp + 536 | 0;
 $au07 = sp + 528 | 0;
 $scale_count8 = sp + 988 | 0;
 $a09 = sp + 520 | 0;
 $scale_factor10 = sp + 512 | 0;
 $lnscale11 = sp + 504 | 0;
 $lm_012 = sp + 496 | 0;
 $lm_113 = sp + 488 | 0;
 $lm_max14 = sp + 480 | 0;
 $r_Uam1 = sp + 464 | 0;
 $r_Ua15 = sp + 448 | 0;
 $stat_016 = sp + 984 | 0;
 $stat_117 = sp + 980 | 0;
 $stat_e18 = sp + 976 | 0;
 $lnm19 = sp + 432 | 0;
 $y20 = sp + 416 | 0;
 $Uam121 = sp + 408 | 0;
 $Ua22 = sp + 400 | 0;
 $Uap123 = sp + 392 | 0;
 $ap24 = sp + 384 | 0;
 $au025 = sp + 376 | 0;
 $a026 = sp + 368 | 0;
 $scale_factor27 = sp + 360 | 0;
 $scale_count28 = sp + 972 | 0;
 $lnm29 = sp + 344 | 0;
 $y30 = sp + 328 | 0;
 $lnscale31 = sp + 320 | 0;
 $lm_032 = sp + 312 | 0;
 $Uap133 = sp + 304 | 0;
 $Ua34 = sp + 296 | 0;
 $Uam135 = sp + 288 | 0;
 $U0 = sp + 272 | 0;
 $ap36 = sp + 264 | 0;
 $ru = sp + 256 | 0;
 $r = sp + 248 | 0;
 $CF1_count = sp + 968 | 0;
 $stat_CF1 = sp + 964 | 0;
 $stat_U0 = sp + 960 | 0;
 $stat_e37 = sp + 956 | 0;
 $au038 = sp + 240 | 0;
 $scale_count_for = sp + 952 | 0;
 $scale_count_bck = sp + 948 | 0;
 $scale_factor39 = sp + 232 | 0;
 $eps = sp + 224 | 0;
 $a040 = sp + 216 | 0;
 $a1 = sp + 208 | 0;
 $lnm41 = sp + 192 | 0;
 $y42 = sp + 176 | 0;
 $lm_for = sp + 168 | 0;
 $lnscale43 = sp + 160 | 0;
 $Ua1_bck = sp + 152 | 0;
 $Ua1_for = sp + 144 | 0;
 $stat_for = sp + 944 | 0;
 $stat_bck = sp + 940 | 0;
 $stat_e44 = sp + 936 | 0;
 $CF1_count45 = sp + 932 | 0;
 $Uap146 = sp + 136 | 0;
 $Ua47 = sp + 128 | 0;
 $Uam148 = sp + 120 | 0;
 $ap49 = sp + 112 | 0;
 $ru50 = sp + 104 | 0;
 $r51 = sp + 96 | 0;
 $stat_CF152 = sp + 928 | 0;
 $au053 = sp + 88 | 0;
 $r_Uam154 = sp + 72 | 0;
 $r_Ua55 = sp + 56 | 0;
 $lm_056 = sp + 48 | 0;
 $lm_157 = sp + 40 | 0;
 $stat_058 = sp + 924 | 0;
 $stat_159 = sp + 920 | 0;
 $Uam160 = sp + 32 | 0;
 $Ua61 = sp + 24 | 0;
 $Uap162 = sp + 16 | 0;
 $ap63 = sp + 8 | 0;
 $au064 = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$rinta >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] + .5));
 if (+HEAPF64[$1 >> 3] < 0.0) $16 = +Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$rinta >> 3])) < 2.220446049250313e-13; else $16 = 0;
 HEAP32[$a_neg_integer >> 2] = $16 & 1;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  $980 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $980 | 0;
 }
 if (HEAP32[$a_neg_integer >> 2] | 0) if (+Math_abs(+(+HEAPF64[$rinta >> 3])) < 2147483647.0) {
  HEAP32[$n >> 2] = 0 - ~~+HEAPF64[$rinta >> 3];
  HEAPF64[$sgn >> 3] = (HEAP32[$n >> 2] & 1 | 0) != 0 ? -1.0 : 1.0;
  HEAP32[$stat_L >> 2] = _gsl_sf_laguerre_n_e(HEAP32[$n >> 2] | 0, +HEAPF64[$2 >> 3] - 1.0, +HEAPF64[$3 >> 3], $L) | 0;
  _gsl_sf_lnfact_e(HEAP32[$n >> 2] | 0, $lnfact) | 0;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnfact >> 3], +HEAPF64[$lnfact + 8 >> 3], +HEAPF64[$sgn >> 3] * +HEAPF64[$L >> 3], +HEAPF64[$L + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e >> 2] | 0) $59 = HEAP32[$stat_e >> 2] | 0; else $59 = (HEAP32[$stat_L >> 2] | 0) != 0 ? HEAP32[$stat_L >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $59;
  $980 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $980 | 0;
 }
 $62 = +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$1 >> 3]))), 1.0);
 $69 = $62 * +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3]))), 1.0);
 $73 = $69 < +Math_abs(+(+HEAPF64[$3 >> 3])) * .99;
 $74 = +HEAPF64[$1 >> 3];
 if ($73) {
  HEAPF64[$ln_pre_val >> 3] = -$74 * +Math_log(+(+HEAPF64[$3 >> 3]));
  HEAPF64[$ln_pre_err >> 3] = +Math_abs(+(+HEAPF64[$ln_pre_val >> 3])) * 4.440892098500626e-16;
  HEAP32[$stat_asymp >> 2] = _hyperg_zaU_asymp(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $asymp) | 0;
  HEAP32[$stat_e1 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$ln_pre_val >> 3], +HEAPF64[$ln_pre_err >> 3], +HEAPF64[$asymp >> 3], +HEAPF64[$asymp + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e1 >> 2] | 0) $100 = HEAP32[$stat_e1 >> 2] | 0; else $100 = (HEAP32[$stat_asymp >> 2] | 0) != 0 ? HEAP32[$stat_asymp >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $100;
  $980 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $980 | 0;
 }
 $102 = +Math_abs(+$74) <= 1.0;
 $103 = +HEAPF64[$1 >> 3];
 if ($102) {
  HEAP32[$stat_U >> 2] = _hyperg_U_small_a_bgt0($103, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $rU, $ln_multiplier) | 0;
  $110 = +Math_abs(+(+HEAPF64[$ln_multiplier >> 3])) * 4.440892098500626e-16;
  HEAP32[$stat_e2 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$ln_multiplier >> 3], $110, +HEAPF64[$rU >> 3], +HEAPF64[$rU + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_U >> 2] | 0) $123 = HEAP32[$stat_U >> 2] | 0; else $123 = (HEAP32[$stat_e2 >> 2] | 0) != 0 ? HEAP32[$stat_e2 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $123;
  $980 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $980 | 0;
 }
 if (+Math_abs(+$103) < 5.0) if (+HEAPF64[$2 >> 3] < 5.0) {
  if (!(+HEAPF64[$3 >> 3] < 2.0)) label = 24;
 } else label = 24; else label = 24;
 do if ((label | 0) == 24) {
  if (+Math_abs(+(+HEAPF64[$1 >> 3])) < 10.0) if (+HEAPF64[$2 >> 3] < 10.0) if (+HEAPF64[$3 >> 3] < 1.0) break;
  if (+HEAPF64[$1 >> 3] < 0.0) {
   HEAPF64[$scale_factor >> 3] = 1.3407807929942596e+154;
   HEAPF64[$a0 >> 3] = +HEAPF64[$1 >> 3] - +Math_floor(+(+HEAPF64[$1 >> 3])) - 1.0;
   HEAPF64[$b0 >> 3] = +HEAPF64[$2 >> 3] - +Math_floor(+(+HEAPF64[$2 >> 3])) + 1.0;
   HEAP32[$scale_count >> 2] = 0;
   HEAP32[$stat_0 >> 2] = _hyperg_U_small_a_bgt0(+HEAPF64[$a0 >> 3] + 1.0, +HEAPF64[$b0 >> 3], +HEAPF64[$3 >> 3], $r_Uap1, $lm_0) | 0;
   HEAP32[$stat_1 >> 2] = _hyperg_U_small_a_bgt0(+HEAPF64[$a0 >> 3], +HEAPF64[$b0 >> 3], +HEAPF64[$3 >> 3], $r_Ua, $lm_1) | 0;
   HEAPF64[$Uap1 >> 3] = +HEAPF64[$r_Uap1 >> 3];
   HEAPF64[$Ua >> 3] = +HEAPF64[$r_Ua >> 3];
   HEAPF64[$lm_max >> 3] = +HEAPF64[$lm_0 >> 3] > +HEAPF64[$lm_1 >> 3] ? +HEAPF64[$lm_0 >> 3] : +HEAPF64[$lm_1 >> 3];
   $182 = +Math_exp(+(+HEAPF64[$lm_0 >> 3] - +HEAPF64[$lm_max >> 3]));
   HEAPF64[$Uap1 >> 3] = +HEAPF64[$Uap1 >> 3] * $182;
   $188 = +Math_exp(+(+HEAPF64[$lm_1 >> 3] - +HEAPF64[$lm_max >> 3]));
   HEAPF64[$Ua >> 3] = +HEAPF64[$Ua >> 3] * $188;
   HEAPF64[$ap >> 3] = +HEAPF64[$a0 >> 3];
   while (1) {
    if (!(+HEAPF64[$ap >> 3] > +HEAPF64[$1 >> 3] + .1)) break;
    HEAPF64[$Uam1 >> 3] = +HEAPF64[$ap >> 3] * (+HEAPF64[$b0 >> 3] - +HEAPF64[$ap >> 3] - 1.0) * +HEAPF64[$Uap1 >> 3] + (+HEAPF64[$3 >> 3] + +HEAPF64[$ap >> 3] * 2.0 - +HEAPF64[$b0 >> 3]) * +HEAPF64[$Ua >> 3];
    HEAPF64[$Uap1 >> 3] = +HEAPF64[$Ua >> 3];
    HEAPF64[$Ua >> 3] = +HEAPF64[$Uam1 >> 3];
    HEAPF64[$au0 >> 3] = +Math_abs(+(+HEAPF64[$Ua >> 3]));
    if (+HEAPF64[$au0 >> 3] > 1.3407807929942596e+154) {
     HEAPF64[$Ua >> 3] = +HEAPF64[$Ua >> 3] / 1.3407807929942596e+154;
     HEAPF64[$Uap1 >> 3] = +HEAPF64[$Uap1 >> 3] / 1.3407807929942596e+154;
     HEAP32[$scale_count >> 2] = (HEAP32[$scale_count >> 2] | 0) + 1;
    } else if (+HEAPF64[$au0 >> 3] < 7.458340731200208e-155) {
     HEAPF64[$Ua >> 3] = +HEAPF64[$Ua >> 3] * 1.3407807929942596e+154;
     HEAPF64[$Uap1 >> 3] = +HEAPF64[$Uap1 >> 3] * 1.3407807929942596e+154;
     HEAP32[$scale_count >> 2] = (HEAP32[$scale_count >> 2] | 0) + -1;
    }
    HEAPF64[$ap >> 3] = +HEAPF64[$ap >> 3] - 1.0;
   }
   if (+HEAPF64[$2 >> 3] < 2.0) {
    HEAPF64[$lnscale >> 3] = +Math_log(1.3407807929942596e+154);
    HEAPF64[$lnm >> 3] = +HEAPF64[$lm_max >> 3] + +(HEAP32[$scale_count >> 2] | 0) * +HEAPF64[$lnscale >> 3];
    $245 = +Math_abs(+(+HEAPF64[$lm_max >> 3]));
    HEAPF64[$lnm + 8 >> 3] = ($245 + +(HEAP32[$scale_count >> 2] | 0) * +Math_abs(+(+HEAPF64[$lnscale >> 3]))) * 4.440892098500626e-16;
    HEAPF64[$y >> 3] = +HEAPF64[$Ua >> 3];
    $259 = +Math_abs(+(+HEAPF64[$r_Uap1 + 8 >> 3] / +HEAPF64[$r_Uap1 >> 3]));
    HEAPF64[$y + 8 >> 3] = $259 * +Math_abs(+(+HEAPF64[$Ua >> 3]));
    $268 = +Math_abs(+(+HEAPF64[$r_Ua + 8 >> 3] / +HEAPF64[$r_Ua >> 3]));
    $271 = $268 * +Math_abs(+(+HEAPF64[$Ua >> 3]));
    $272 = $y + 8 | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + $271;
    $280 = (+Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$a0 >> 3])) + 1.0) * 4.440892098500626e-16;
    $283 = $280 * +Math_abs(+(+HEAPF64[$Ua >> 3]));
    $284 = $y + 8 | 0;
    HEAPF64[$284 >> 3] = +HEAPF64[$284 >> 3] + $283;
    $291 = +Math_abs(+(+HEAPF64[$lm_0 >> 3] - +HEAPF64[$lm_max >> 3])) + 1.0;
    $292 = $y + 8 | 0;
    HEAPF64[$292 >> 3] = +HEAPF64[$292 >> 3] * $291;
    $299 = +Math_abs(+(+HEAPF64[$lm_1 >> 3] - +HEAPF64[$lm_max >> 3])) + 1.0;
    $300 = $y + 8 | 0;
    HEAPF64[$300 >> 3] = +HEAPF64[$300 >> 3] * $299;
    HEAP32[$stat_e3 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnm >> 3], +HEAPF64[$lnm + 8 >> 3], +HEAPF64[$y >> 3], +HEAPF64[$y + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   } else {
    $314 = +Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$b0 >> 3]));
    HEAPF64[$err_mult >> 3] = $314 + +Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$a0 >> 3])) + 1.0;
    HEAPF64[$lnscale4 >> 3] = +Math_log(1.3407807929942596e+154);
    HEAPF64[$Ubm1 >> 3] = +HEAPF64[$Ua >> 3];
    HEAPF64[$Ub >> 3] = (+HEAPF64[$1 >> 3] * (+HEAPF64[$b0 >> 3] - +HEAPF64[$1 >> 3] - 1.0) * +HEAPF64[$Uap1 >> 3] + (+HEAPF64[$1 >> 3] + +HEAPF64[$3 >> 3]) * +HEAPF64[$Ua >> 3]) / +HEAPF64[$3 >> 3];
    HEAPF64[$bp >> 3] = +HEAPF64[$b0 >> 3] + 1.0;
    while (1) {
     if (!(+HEAPF64[$bp >> 3] < +HEAPF64[$2 >> 3] - .1)) break;
     HEAPF64[$Ubp1 >> 3] = ((+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$bp >> 3]) * +HEAPF64[$Ubm1 >> 3] + (+HEAPF64[$bp >> 3] + +HEAPF64[$3 >> 3] - 1.0) * +HEAPF64[$Ub >> 3]) / +HEAPF64[$3 >> 3];
     HEAPF64[$Ubm1 >> 3] = +HEAPF64[$Ub >> 3];
     HEAPF64[$Ub >> 3] = +HEAPF64[$Ubp1 >> 3];
     HEAPF64[$au07 >> 3] = +Math_abs(+(+HEAPF64[$Ub >> 3]));
     if (+HEAPF64[$au07 >> 3] > 1.3407807929942596e+154) {
      HEAPF64[$Ub >> 3] = +HEAPF64[$Ub >> 3] / 1.3407807929942596e+154;
      HEAPF64[$Ubm1 >> 3] = +HEAPF64[$Ubm1 >> 3] / 1.3407807929942596e+154;
      HEAP32[$scale_count >> 2] = (HEAP32[$scale_count >> 2] | 0) + 1;
     } else if (+HEAPF64[$au07 >> 3] < 7.458340731200208e-155) {
      HEAPF64[$Ub >> 3] = +HEAPF64[$Ub >> 3] * 1.3407807929942596e+154;
      HEAPF64[$Ubm1 >> 3] = +HEAPF64[$Ubm1 >> 3] * 1.3407807929942596e+154;
      HEAP32[$scale_count >> 2] = (HEAP32[$scale_count >> 2] | 0) + -1;
     }
     HEAPF64[$bp >> 3] = +HEAPF64[$bp >> 3] + 1.0;
    }
    HEAPF64[$lnm5 >> 3] = +HEAPF64[$lm_max >> 3] + +(HEAP32[$scale_count >> 2] | 0) * +HEAPF64[$lnscale4 >> 3];
    $389 = +Math_abs(+(+HEAPF64[$lm_max >> 3]));
    HEAPF64[$lnm5 + 8 >> 3] = ($389 + +Math_abs(+(+(HEAP32[$scale_count >> 2] | 0) * +HEAPF64[$lnscale4 >> 3]))) * 4.440892098500626e-16;
    HEAPF64[$y6 >> 3] = +HEAPF64[$Ub >> 3];
    $406 = +HEAPF64[$err_mult >> 3] * 2.0 * +Math_abs(+(+HEAPF64[$r_Uap1 + 8 >> 3] / +HEAPF64[$r_Uap1 >> 3]));
    HEAPF64[$y6 + 8 >> 3] = $406 * +Math_abs(+(+HEAPF64[$Ub >> 3]));
    $418 = +HEAPF64[$err_mult >> 3] * 2.0 * +Math_abs(+(+HEAPF64[$r_Ua + 8 >> 3] / +HEAPF64[$r_Ua >> 3]));
    $421 = $418 * +Math_abs(+(+HEAPF64[$Ub >> 3]));
    $422 = $y6 + 8 | 0;
    HEAPF64[$422 >> 3] = +HEAPF64[$422 >> 3] + $421;
    $429 = +HEAPF64[$err_mult >> 3] * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$Ub >> 3]));
    $430 = $y6 + 8 | 0;
    HEAPF64[$430 >> 3] = +HEAPF64[$430 >> 3] + $429;
    $437 = +Math_abs(+(+HEAPF64[$lm_0 >> 3] - +HEAPF64[$lm_max >> 3])) + 1.0;
    $438 = $y6 + 8 | 0;
    HEAPF64[$438 >> 3] = +HEAPF64[$438 >> 3] * $437;
    $445 = +Math_abs(+(+HEAPF64[$lm_1 >> 3] - +HEAPF64[$lm_max >> 3])) + 1.0;
    $446 = $y6 + 8 | 0;
    HEAPF64[$446 >> 3] = +HEAPF64[$446 >> 3] * $445;
    HEAP32[$stat_e3 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnm5 >> 3], +HEAPF64[$lnm5 + 8 >> 3], +HEAPF64[$y6 >> 3], +HEAPF64[$y6 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   }
   do if (HEAP32[$stat_e3 >> 2] | 0) $467 = HEAP32[$stat_e3 >> 2] | 0; else if (HEAP32[$stat_0 >> 2] | 0) {
    $467 = HEAP32[$stat_0 >> 2] | 0;
    break;
   } else {
    $467 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
    break;
   } while (0);
   HEAP32[$0 >> 2] = $467;
   $980 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $980 | 0;
  }
  if (+HEAPF64[$2 >> 3] >= +HEAPF64[$1 >> 3] * 2.0 + +HEAPF64[$3 >> 3]) {
   HEAP32[$scale_count8 >> 2] = 0;
   HEAPF64[$a09 >> 3] = +HEAPF64[$1 >> 3] - +Math_floor(+(+HEAPF64[$1 >> 3]));
   HEAPF64[$scale_factor10 >> 3] = 1.3407807929942596e+154;
   HEAP32[$stat_016 >> 2] = _hyperg_U_small_a_bgt0(+HEAPF64[$a09 >> 3] - 1.0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Uam1, $lm_012) | 0;
   HEAP32[$stat_117 >> 2] = _hyperg_U_small_a_bgt0(+HEAPF64[$a09 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Ua15, $lm_113) | 0;
   HEAPF64[$Uam121 >> 3] = +HEAPF64[$r_Uam1 >> 3];
   HEAPF64[$Ua22 >> 3] = +HEAPF64[$r_Ua15 >> 3];
   HEAPF64[$lm_max14 >> 3] = +HEAPF64[$lm_012 >> 3] > +HEAPF64[$lm_113 >> 3] ? +HEAPF64[$lm_012 >> 3] : +HEAPF64[$lm_113 >> 3];
   $498 = +Math_exp(+(+HEAPF64[$lm_012 >> 3] - +HEAPF64[$lm_max14 >> 3]));
   HEAPF64[$Uam121 >> 3] = +HEAPF64[$Uam121 >> 3] * $498;
   $504 = +Math_exp(+(+HEAPF64[$lm_113 >> 3] - +HEAPF64[$lm_max14 >> 3]));
   HEAPF64[$Ua22 >> 3] = +HEAPF64[$Ua22 >> 3] * $504;
   HEAPF64[$ap24 >> 3] = +HEAPF64[$a09 >> 3];
   while (1) {
    if (!(+HEAPF64[$ap24 >> 3] < +HEAPF64[$1 >> 3] - .1)) break;
    HEAPF64[$Uap123 >> 3] = -(+HEAPF64[$Uam121 >> 3] + (+HEAPF64[$2 >> 3] - +HEAPF64[$ap24 >> 3] * 2.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ua22 >> 3]) / (+HEAPF64[$ap24 >> 3] * (+HEAPF64[$ap24 >> 3] + 1.0 - +HEAPF64[$2 >> 3]));
    HEAPF64[$Uam121 >> 3] = +HEAPF64[$Ua22 >> 3];
    HEAPF64[$Ua22 >> 3] = +HEAPF64[$Uap123 >> 3];
    HEAPF64[$au025 >> 3] = +Math_abs(+(+HEAPF64[$Ua22 >> 3]));
    if (+HEAPF64[$au025 >> 3] > 1.3407807929942596e+154) {
     HEAPF64[$Ua22 >> 3] = +HEAPF64[$Ua22 >> 3] / 1.3407807929942596e+154;
     HEAPF64[$Uam121 >> 3] = +HEAPF64[$Uam121 >> 3] / 1.3407807929942596e+154;
     HEAP32[$scale_count8 >> 2] = (HEAP32[$scale_count8 >> 2] | 0) + 1;
    } else if (+HEAPF64[$au025 >> 3] < 7.458340731200208e-155) {
     HEAPF64[$Ua22 >> 3] = +HEAPF64[$Ua22 >> 3] * 1.3407807929942596e+154;
     HEAPF64[$Uam121 >> 3] = +HEAPF64[$Uam121 >> 3] * 1.3407807929942596e+154;
     HEAP32[$scale_count8 >> 2] = (HEAP32[$scale_count8 >> 2] | 0) + -1;
    }
    HEAPF64[$ap24 >> 3] = +HEAPF64[$ap24 >> 3] + 1.0;
   }
   HEAPF64[$lnscale11 >> 3] = +Math_log(1.3407807929942596e+154);
   HEAPF64[$lnm19 >> 3] = +HEAPF64[$lm_max14 >> 3] + +(HEAP32[$scale_count8 >> 2] | 0) * +HEAPF64[$lnscale11 >> 3];
   $560 = +Math_abs(+(+HEAPF64[$lm_max14 >> 3]));
   HEAPF64[$lnm19 + 8 >> 3] = ($560 + +Math_abs(+(+(HEAP32[$scale_count8 >> 2] | 0) * +HEAPF64[$lnscale11 >> 3]))) * 4.440892098500626e-16;
   HEAPF64[$y20 >> 3] = +HEAPF64[$Ua22 >> 3];
   $574 = +Math_abs(+(+HEAPF64[$r_Uam1 + 8 >> 3] / +HEAPF64[$r_Uam1 >> 3]));
   HEAPF64[$y20 + 8 >> 3] = $574 * +Math_abs(+(+HEAPF64[$Ua22 >> 3]));
   $583 = +Math_abs(+(+HEAPF64[$r_Ua15 + 8 >> 3] / +HEAPF64[$r_Ua15 >> 3]));
   $586 = $583 * +Math_abs(+(+HEAPF64[$Ua22 >> 3]));
   $587 = $y20 + 8 | 0;
   HEAPF64[$587 >> 3] = +HEAPF64[$587 >> 3] + $586;
   $595 = (+Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$a09 >> 3])) + 1.0) * 4.440892098500626e-16;
   $598 = $595 * +Math_abs(+(+HEAPF64[$Ua22 >> 3]));
   $599 = $y20 + 8 | 0;
   HEAPF64[$599 >> 3] = +HEAPF64[$599 >> 3] + $598;
   $606 = +Math_abs(+(+HEAPF64[$lm_012 >> 3] - +HEAPF64[$lm_max14 >> 3])) + 1.0;
   $607 = $y20 + 8 | 0;
   HEAPF64[$607 >> 3] = +HEAPF64[$607 >> 3] * $606;
   $614 = +Math_abs(+(+HEAPF64[$lm_113 >> 3] - +HEAPF64[$lm_max14 >> 3])) + 1.0;
   $615 = $y20 + 8 | 0;
   HEAPF64[$615 >> 3] = +HEAPF64[$615 >> 3] * $614;
   HEAP32[$stat_e18 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnm19 >> 3], +HEAPF64[$lnm19 + 8 >> 3], +HEAPF64[$y20 >> 3], +HEAPF64[$y20 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   do if (HEAP32[$stat_e18 >> 2] | 0) $636 = HEAP32[$stat_e18 >> 2] | 0; else if (HEAP32[$stat_016 >> 2] | 0) {
    $636 = HEAP32[$stat_016 >> 2] | 0;
    break;
   } else {
    $636 = (HEAP32[$stat_117 >> 2] | 0) != 0 ? HEAP32[$stat_117 >> 2] | 0 : 0;
    break;
   } while (0);
   HEAP32[$0 >> 2] = $636;
   $980 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $980 | 0;
  }
  if (+HEAPF64[$2 >> 3] <= +HEAPF64[$3 >> 3]) {
   HEAPF64[$a026 >> 3] = +HEAPF64[$1 >> 3] - +Math_floor(+(+HEAPF64[$1 >> 3]));
   HEAPF64[$scale_factor27 >> 3] = 1.3407807929942596e+154;
   HEAP32[$scale_count28 >> 2] = 0;
   HEAP32[$stat_CF1 >> 2] = _hyperg_U_CF1(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], 0, +HEAPF64[$3 >> 3], $ru, $CF1_count) | 0;
   HEAPF64[$r >> 3] = +HEAPF64[$ru >> 3] / +HEAPF64[$1 >> 3];
   HEAPF64[$Ua34 >> 3] = 1.4916681462400413e-154;
   HEAPF64[$Uap133 >> 3] = +HEAPF64[$r >> 3] * +HEAPF64[$Ua34 >> 3];
   HEAPF64[$ap36 >> 3] = +HEAPF64[$1 >> 3];
   while (1) {
    if (!(+HEAPF64[$ap36 >> 3] > +HEAPF64[$a026 >> 3] + .1)) break;
    HEAPF64[$Uam135 >> 3] = -((+HEAPF64[$2 >> 3] - +HEAPF64[$ap36 >> 3] * 2.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ua34 >> 3] + +HEAPF64[$ap36 >> 3] * (+HEAPF64[$ap36 >> 3] + 1.0 - +HEAPF64[$2 >> 3]) * +HEAPF64[$Uap133 >> 3]);
    HEAPF64[$Uap133 >> 3] = +HEAPF64[$Ua34 >> 3];
    HEAPF64[$Ua34 >> 3] = +HEAPF64[$Uam135 >> 3];
    HEAPF64[$au038 >> 3] = +Math_abs(+(+HEAPF64[$Ua34 >> 3]));
    if (+HEAPF64[$au038 >> 3] > 1.3407807929942596e+154) {
     HEAPF64[$Ua34 >> 3] = +HEAPF64[$Ua34 >> 3] / 1.3407807929942596e+154;
     HEAPF64[$Uap133 >> 3] = +HEAPF64[$Uap133 >> 3] / 1.3407807929942596e+154;
     HEAP32[$scale_count28 >> 2] = (HEAP32[$scale_count28 >> 2] | 0) + 1;
    } else if (+HEAPF64[$au038 >> 3] < 7.458340731200208e-155) {
     HEAPF64[$Ua34 >> 3] = +HEAPF64[$Ua34 >> 3] * 1.3407807929942596e+154;
     HEAPF64[$Uap133 >> 3] = +HEAPF64[$Uap133 >> 3] * 1.3407807929942596e+154;
     HEAP32[$scale_count28 >> 2] = (HEAP32[$scale_count28 >> 2] | 0) + -1;
    }
    HEAPF64[$ap36 >> 3] = +HEAPF64[$ap36 >> 3] - 1.0;
   }
   HEAP32[$stat_U0 >> 2] = _hyperg_U_small_a_bgt0(+HEAPF64[$a026 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $U0, $lm_032) | 0;
   HEAPF64[$lnscale31 >> 3] = +Math_log(1.3407807929942596e+154);
   HEAPF64[$lnm29 >> 3] = +HEAPF64[$lm_032 >> 3] - +(HEAP32[$scale_count28 >> 2] | 0) * +HEAPF64[$lnscale31 >> 3];
   $711 = +Math_abs(+(+HEAPF64[$lm_032 >> 3]));
   HEAPF64[$lnm29 + 8 >> 3] = ($711 + +Math_abs(+(+(HEAP32[$scale_count28 >> 2] | 0) * +HEAPF64[$lnscale31 >> 3]))) * 4.440892098500626e-16;
   HEAPF64[$y30 >> 3] = +HEAPF64[$U0 >> 3] / +HEAPF64[$Ua34 >> 3] * 1.4916681462400413e-154;
   HEAPF64[$y30 + 8 >> 3] = +HEAPF64[$U0 + 8 >> 3] / +Math_abs(+(+HEAPF64[$Ua34 >> 3])) * 1.4916681462400413e-154;
   $734 = +Math_abs(+(+HEAPF64[$a026 >> 3] - +HEAPF64[$1 >> 3]));
   $742 = ($734 + +(HEAP32[$CF1_count >> 2] | 0) + 1.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$y30 >> 3]));
   $743 = $y30 + 8 | 0;
   HEAPF64[$743 >> 3] = +HEAPF64[$743 >> 3] + $742;
   HEAP32[$stat_e37 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnm29 >> 3], +HEAPF64[$lnm29 + 8 >> 3], +HEAPF64[$y30 >> 3], +HEAPF64[$y30 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   do if (HEAP32[$stat_e37 >> 2] | 0) $764 = HEAP32[$stat_e37 >> 2] | 0; else if (HEAP32[$stat_U0 >> 2] | 0) {
    $764 = HEAP32[$stat_U0 >> 2] | 0;
    break;
   } else {
    $764 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
    break;
   } while (0);
   HEAP32[$0 >> 2] = $764;
   $980 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $980 | 0;
  }
  HEAP32[$scale_count_for >> 2] = 0;
  HEAP32[$scale_count_bck >> 2] = 0;
  HEAPF64[$scale_factor39 >> 3] = 1.3407807929942596e+154;
  HEAPF64[$eps >> 3] = +HEAPF64[$1 >> 3] - +Math_floor(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$a040 >> 3] = +HEAPF64[$eps >> 3] == 0.0 ? 1.0 : +HEAPF64[$eps >> 3];
  HEAPF64[$a1 >> 3] = +HEAPF64[$a040 >> 3] + +Math_ceil(+((+HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3]) * .5 - +HEAPF64[$a040 >> 3]));
  HEAP32[$stat_CF152 >> 2] = _hyperg_U_CF1(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], 0, +HEAPF64[$3 >> 3], $ru50, $CF1_count45) | 0;
  HEAPF64[$r51 >> 3] = +HEAPF64[$ru50 >> 3] / +HEAPF64[$1 >> 3];
  HEAPF64[$Ua47 >> 3] = 1.4916681462400413e-154;
  HEAPF64[$Uap146 >> 3] = +HEAPF64[$r51 >> 3] * +HEAPF64[$Ua47 >> 3];
  HEAPF64[$ap49 >> 3] = +HEAPF64[$1 >> 3];
  while (1) {
   if (!(+HEAPF64[$ap49 >> 3] > +HEAPF64[$a1 >> 3] + .1)) break;
   HEAPF64[$Uam148 >> 3] = -((+HEAPF64[$2 >> 3] - +HEAPF64[$ap49 >> 3] * 2.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ua47 >> 3] + +HEAPF64[$ap49 >> 3] * (+HEAPF64[$ap49 >> 3] + 1.0 - +HEAPF64[$2 >> 3]) * +HEAPF64[$Uap146 >> 3]);
   HEAPF64[$Uap146 >> 3] = +HEAPF64[$Ua47 >> 3];
   HEAPF64[$Ua47 >> 3] = +HEAPF64[$Uam148 >> 3];
   HEAPF64[$au053 >> 3] = +Math_abs(+(+HEAPF64[$Ua47 >> 3]));
   if (+HEAPF64[$au053 >> 3] > 1.3407807929942596e+154) {
    HEAPF64[$Ua47 >> 3] = +HEAPF64[$Ua47 >> 3] / 1.3407807929942596e+154;
    HEAPF64[$Uap146 >> 3] = +HEAPF64[$Uap146 >> 3] / 1.3407807929942596e+154;
    HEAP32[$scale_count_bck >> 2] = (HEAP32[$scale_count_bck >> 2] | 0) + 1;
   } else if (+HEAPF64[$au053 >> 3] < 7.458340731200208e-155) {
    HEAPF64[$Ua47 >> 3] = +HEAPF64[$Ua47 >> 3] * 1.3407807929942596e+154;
    HEAPF64[$Uap146 >> 3] = +HEAPF64[$Uap146 >> 3] * 1.3407807929942596e+154;
    HEAP32[$scale_count_bck >> 2] = (HEAP32[$scale_count_bck >> 2] | 0) + -1;
   }
   HEAPF64[$ap49 >> 3] = +HEAPF64[$ap49 >> 3] - 1.0;
  }
  HEAPF64[$Ua1_bck >> 3] = +HEAPF64[$Ua47 >> 3];
  HEAP32[$stat_bck >> 2] = HEAP32[$stat_CF152 >> 2];
  HEAP32[$stat_058 >> 2] = _hyperg_U_small_a_bgt0(+HEAPF64[$a040 >> 3] - 1.0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Uam154, $lm_056) | 0;
  HEAP32[$stat_159 >> 2] = _hyperg_U_small_a_bgt0(+HEAPF64[$a040 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Ua55, $lm_157) | 0;
  HEAPF64[$Uam160 >> 3] = +HEAPF64[$r_Uam154 >> 3];
  HEAPF64[$Ua61 >> 3] = +HEAPF64[$r_Ua55 >> 3];
  HEAPF64[$lm_for >> 3] = +HEAPF64[$lm_056 >> 3] > +HEAPF64[$lm_157 >> 3] ? +HEAPF64[$lm_056 >> 3] : +HEAPF64[$lm_157 >> 3];
  $859 = +Math_exp(+(+HEAPF64[$lm_056 >> 3] - +HEAPF64[$lm_for >> 3]));
  HEAPF64[$Uam160 >> 3] = +HEAPF64[$Uam160 >> 3] * $859;
  $865 = +Math_exp(+(+HEAPF64[$lm_157 >> 3] - +HEAPF64[$lm_for >> 3]));
  HEAPF64[$Ua61 >> 3] = +HEAPF64[$Ua61 >> 3] * $865;
  HEAPF64[$ap63 >> 3] = +HEAPF64[$a040 >> 3];
  while (1) {
   if (!(+HEAPF64[$ap63 >> 3] < +HEAPF64[$a1 >> 3] - .1)) break;
   HEAPF64[$Uap162 >> 3] = -(+HEAPF64[$Uam160 >> 3] + (+HEAPF64[$2 >> 3] - +HEAPF64[$ap63 >> 3] * 2.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ua61 >> 3]) / (+HEAPF64[$ap63 >> 3] * (+HEAPF64[$ap63 >> 3] + 1.0 - +HEAPF64[$2 >> 3]));
   HEAPF64[$Uam160 >> 3] = +HEAPF64[$Ua61 >> 3];
   HEAPF64[$Ua61 >> 3] = +HEAPF64[$Uap162 >> 3];
   HEAPF64[$au064 >> 3] = +Math_abs(+(+HEAPF64[$Ua61 >> 3]));
   if (+HEAPF64[$au064 >> 3] > 1.3407807929942596e+154) {
    HEAPF64[$Ua61 >> 3] = +HEAPF64[$Ua61 >> 3] / 1.3407807929942596e+154;
    HEAPF64[$Uam160 >> 3] = +HEAPF64[$Uam160 >> 3] / 1.3407807929942596e+154;
    HEAP32[$scale_count_for >> 2] = (HEAP32[$scale_count_for >> 2] | 0) + 1;
   } else if (+HEAPF64[$au064 >> 3] < 7.458340731200208e-155) {
    HEAPF64[$Ua61 >> 3] = +HEAPF64[$Ua61 >> 3] * 1.3407807929942596e+154;
    HEAPF64[$Uam160 >> 3] = +HEAPF64[$Uam160 >> 3] * 1.3407807929942596e+154;
    HEAP32[$scale_count_for >> 2] = (HEAP32[$scale_count_for >> 2] | 0) + -1;
   }
   HEAPF64[$ap63 >> 3] = +HEAPF64[$ap63 >> 3] + 1.0;
  }
  HEAPF64[$Ua1_for >> 3] = +HEAPF64[$Ua61 >> 3];
  if (HEAP32[$stat_058 >> 2] | 0) $921 = HEAP32[$stat_058 >> 2] | 0; else $921 = (HEAP32[$stat_159 >> 2] | 0) != 0 ? HEAP32[$stat_159 >> 2] | 0 : 0;
  HEAP32[$stat_for >> 2] = $921;
  HEAPF64[$lnscale43 >> 3] = +Math_log(1.3407807929942596e+154);
  HEAPF64[$lnm41 >> 3] = +HEAPF64[$lm_for >> 3] + +((HEAP32[$scale_count_for >> 2] | 0) - (HEAP32[$scale_count_bck >> 2] | 0) | 0) * +HEAPF64[$lnscale43 >> 3];
  $932 = +Math_abs(+(+HEAPF64[$lm_for >> 3]));
  $937 = +Math_abs(+(+((HEAP32[$scale_count_for >> 2] | 0) - (HEAP32[$scale_count_bck >> 2] | 0) | 0)));
  HEAPF64[$lnm41 + 8 >> 3] = ($932 + $937 * +Math_abs(+(+HEAPF64[$lnscale43 >> 3]))) * 4.440892098500626e-16;
  HEAPF64[$y42 >> 3] = +HEAPF64[$Ua1_for >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Ua1_bck >> 3];
  $951 = +Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$a040 >> 3]));
  HEAPF64[$y42 + 8 >> 3] = ($951 + +(HEAP32[$CF1_count45 >> 2] | 0) + 1.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$y42 >> 3]));
  HEAP32[$stat_e44 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnm41 >> 3], +HEAPF64[$lnm41 + 8 >> 3], +HEAPF64[$y42 >> 3], +HEAPF64[$y42 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  do if (HEAP32[$stat_e44 >> 2] | 0) $979 = HEAP32[$stat_e44 >> 2] | 0; else if (HEAP32[$stat_bck >> 2] | 0) {
   $979 = HEAP32[$stat_bck >> 2] | 0;
   break;
  } else {
   $979 = (HEAP32[$stat_for >> 2] | 0) != 0 ? HEAP32[$stat_for >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$0 >> 2] = $979;
  $980 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $980 | 0;
 } while (0);
 HEAP32[$stat_ser >> 2] = _hyperg_U_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $ser) | 0;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$ser >> 3];
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ser + 8 >> 3];
 HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$stat_ser >> 2];
 $980 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $980 | 0;
}
function _hyperg_U_int_bge1($a, $b, $x, $result) {
 $a = $a | 0;
 $b = $b | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0, $198 = 0.0, $2 = 0, $22 = 0.0, $226 = 0.0, $26 = 0.0, $285 = 0.0, $299 = 0.0, $3 = 0, $308 = 0.0, $311 = 0.0, $312 = 0, $32 = 0.0, $330 = 0, $34 = 0, $4 = 0, $42 = 0, $424 = 0.0, $433 = 0.0, $458 = 0, $47 = 0.0, $52 = 0.0, $538 = 0.0, $61 = 0.0, $611 = 0.0, $626 = 0.0, $638 = 0.0, $65 = 0, $66 = 0, $694 = 0.0, $707 = 0.0, $710 = 0.0, $763 = 0.0, $766 = 0.0, $769 = 0.0, $788 = 0, $801 = 0, $802 = 0, $95 = 0, $CF1_count = 0, $CF1_count22 = 0, $U00 = 0, $U12 = 0, $Ua = 0, $Ua14 = 0, $Ua1_bck_err = 0, $Ua1_bck_val = 0, $Ua1_for_err = 0, $Ua1_for_val = 0, $Ua24 = 0, $Ua31 = 0, $Ua8 = 0, $Uam1 = 0, $Uam116 = 0, $Uam126 = 0, $Uam130 = 0, $Uam17 = 0, $Uap1 = 0, $Uap115 = 0, $Uap125 = 0, $Uap132 = 0, $Uap19 = 0, $a0 = 0, $a1 = 0, $a_target = 0, $ap = 0, $ap10 = 0, $ap17 = 0, $ap27 = 0, $ap33 = 0, $asymp = 0, $au0 = 0, $au011 = 0, $au018 = 0, $au028 = 0, $au034 = 0, $lm = 0, $lm_for = 0, $lm_for_local = 0, $lnU00 = 0, $lnU12 = 0, $lnU_target = 0, $ln_bck_err = 0, $ln_bck_val = 0, $ln_for_err = 0, $ln_for_val = 0, $ln_pre_err = 0, $ln_pre_val = 0, $lnm = 0, $lnm3 = 0, $lnpre_err = 0, $lnpre_val = 0, $lnr_err = 0, $lnr_val = 0, $lns = 0, $lnscale = 0, $lnscale5 = 0, $lnscl = 0, $oUa_err = 0, $r_Ua = 0, $r_Ua29 = 0, $ru = 0, $ru21 = 0, $scale_count = 0, $scale_count1 = 0, $scale_count13 = 0, $scale_count_bck = 0, $scale_count_for = 0, $scale_factor = 0, $scale_factor12 = 0, $scale_factor2 = 0, $scale_factor20 = 0, $ser = 0, $sgn = 0, $stat_1 = 0, $stat_CF1 = 0, $stat_CF123 = 0, $stat_asymp = 0, $stat_bck = 0, $stat_e = 0, $stat_e19 = 0, $stat_e35 = 0, $stat_e6 = 0, $stat_for = 0, $stat_ser = 0, $y = 0, $y4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736 | 0;
 $0 = sp + 724 | 0;
 $1 = sp + 720 | 0;
 $2 = sp + 716 | 0;
 $3 = sp + 600 | 0;
 $4 = sp + 712 | 0;
 $ln_pre_val = sp + 592 | 0;
 $ln_pre_err = sp + 584 | 0;
 $asymp = sp + 568 | 0;
 $stat_asymp = sp + 708 | 0;
 $stat_e = sp + 704 | 0;
 $ser = sp + 552 | 0;
 $stat_ser = sp + 700 | 0;
 $scale_count = sp + 696 | 0;
 $scale_factor = sp + 544 | 0;
 $lnm = sp + 528 | 0;
 $y = sp + 512 | 0;
 $lnscale = sp + 504 | 0;
 $Uap1 = sp + 496 | 0;
 $Ua = sp + 488 | 0;
 $Uam1 = sp + 480 | 0;
 $ap = sp + 692 | 0;
 $au0 = sp + 472 | 0;
 $scale_count1 = sp + 688 | 0;
 $scale_factor2 = sp + 464 | 0;
 $r_Ua = sp + 448 | 0;
 $lnm3 = sp + 432 | 0;
 $y4 = sp + 416 | 0;
 $lnscale5 = sp + 408 | 0;
 $lm = sp + 400 | 0;
 $stat_1 = sp + 684 | 0;
 $stat_e6 = sp + 680 | 0;
 $Uam17 = sp + 392 | 0;
 $Ua8 = sp + 384 | 0;
 $Uap19 = sp + 376 | 0;
 $ap10 = sp + 676 | 0;
 $au011 = sp + 368 | 0;
 $scale_factor12 = sp + 360 | 0;
 $scale_count13 = sp + 672 | 0;
 $stat_CF1 = sp + 668 | 0;
 $ru = sp + 352 | 0;
 $CF1_count = sp + 664 | 0;
 $a_target = sp + 660 | 0;
 $lnU_target = sp + 344 | 0;
 $Ua14 = sp + 336 | 0;
 $Uap115 = sp + 328 | 0;
 $Uam116 = sp + 320 | 0;
 $ap17 = sp + 656 | 0;
 $au018 = sp + 312 | 0;
 $lnscl = sp + 304 | 0;
 $lnpre_val = sp + 296 | 0;
 $lnpre_err = sp + 288 | 0;
 $oUa_err = sp + 280 | 0;
 $stat_e19 = sp + 652 | 0;
 $scale_factor20 = sp + 272 | 0;
 $scale_count_for = sp + 648 | 0;
 $scale_count_bck = sp + 644 | 0;
 $a0 = sp + 640 | 0;
 $a1 = sp + 636 | 0;
 $Ua1_bck_val = sp + 264 | 0;
 $Ua1_bck_err = sp + 256 | 0;
 $Ua1_for_val = sp + 248 | 0;
 $Ua1_for_err = sp + 240 | 0;
 $stat_for = sp + 632 | 0;
 $stat_bck = sp + 628 | 0;
 $lm_for = sp + 224 | 0;
 $ru21 = sp + 216 | 0;
 $CF1_count22 = sp + 624 | 0;
 $stat_CF123 = sp + 620 | 0;
 $Ua24 = sp + 208 | 0;
 $Uap125 = sp + 200 | 0;
 $Uam126 = sp + 192 | 0;
 $ap27 = sp + 616 | 0;
 $au028 = sp + 184 | 0;
 $lnU00 = sp + 168 | 0;
 $lnU12 = sp + 152 | 0;
 $U00 = sp + 136 | 0;
 $U12 = sp + 120 | 0;
 $r_Ua29 = sp + 104 | 0;
 $Uam130 = sp + 96 | 0;
 $Ua31 = sp + 88 | 0;
 $Uap132 = sp + 80 | 0;
 $ap33 = sp + 612 | 0;
 $lm_for_local = sp + 72 | 0;
 $au034 = sp + 64 | 0;
 $lns = sp + 56 | 0;
 $ln_for_val = sp + 48 | 0;
 $ln_for_err = sp + 40 | 0;
 $ln_bck_val = sp + 32 | 0;
 $ln_bck_err = sp + 24 | 0;
 $lnr_val = sp + 16 | 0;
 $lnr_err = sp + 8 | 0;
 $sgn = sp;
 $stat_e35 = sp + 608 | 0;
 HEAP32[$1 >> 2] = $a;
 HEAP32[$2 >> 2] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 $14 = HEAP32[$2 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) == -1) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +(0 - $14 | 0) + +HEAPF64[$3 >> 3];
  $22 = +Math_abs(+(+(HEAP32[$2 >> 2] | 0)));
  $26 = ($22 + +Math_abs(+(+HEAPF64[$3 >> 3]))) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $26;
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $34 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] + $32;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 $42 = HEAP32[$1 >> 2] | 0;
 if (($14 | 0) == ((HEAP32[$1 >> 2] | 0) + 1 | 0)) {
  $47 = +(0 - $42 | 0) * +Math_log(+(+HEAPF64[$3 >> 3]));
  HEAP32[$0 >> 2] = _gsl_sf_exp_e10_e($47, HEAP32[$4 >> 2] | 0) | 0;
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 $52 = +_GSL_MAX_DBL(+(+Math_abs(+(+($42 | 0)))), 1.0);
 $61 = $52 * +_GSL_MAX_DBL(+(+Math_abs(+(+(HEAP32[$1 >> 2] | 0) + 1.0 - +(HEAP32[$2 >> 2] | 0)))), 1.0);
 $65 = $61 < +Math_abs(+(+HEAPF64[$3 >> 3])) * .99;
 $66 = HEAP32[$1 >> 2] | 0;
 if ($65) {
  HEAPF64[$ln_pre_val >> 3] = +(0 - $66 | 0) * +Math_log(+(+HEAPF64[$3 >> 3]));
  HEAPF64[$ln_pre_err >> 3] = +Math_abs(+(+HEAPF64[$ln_pre_val >> 3])) * 4.440892098500626e-16;
  HEAP32[$stat_asymp >> 2] = _hyperg_zaU_asymp(+(HEAP32[$1 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], $asymp) | 0;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$ln_pre_val >> 3], +HEAPF64[$ln_pre_err >> 3], +HEAPF64[$asymp >> 3], +HEAPF64[$asymp + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e >> 2] | 0) $95 = HEAP32[$stat_e >> 2] | 0; else $95 = (HEAP32[$stat_asymp >> 2] | 0) != 0 ? HEAP32[$stat_asymp >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $95;
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 if (+Math_abs(+(+($66 | 0))) < 5.0) if ((HEAP32[$2 >> 2] | 0) < 5) if (+HEAPF64[$3 >> 3] < 2.0) label = 18; else label = 15; else label = 15; else label = 15;
 if ((label | 0) == 15) if (+Math_abs(+(+(HEAP32[$1 >> 2] | 0))) < 10.0) if ((HEAP32[$2 >> 2] | 0) < 10) if (+HEAPF64[$3 >> 3] < 1.0) label = 18;
 if ((label | 0) == 18) if ((1 + (HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) > 0) {
  HEAP32[$stat_ser >> 2] = _hyperg_U_series(+(HEAP32[$1 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], $ser) | 0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$ser >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ser + 8 >> 3];
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$stat_ser >> 2];
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  HEAP32[$scale_count >> 2] = 0;
  HEAPF64[$scale_factor >> 3] = 1.3407807929942596e+154;
  HEAPF64[$Uap1 >> 3] = 1.0;
  HEAPF64[$Ua >> 3] = +(0 - (HEAP32[$2 >> 2] | 0) | 0) + +HEAPF64[$3 >> 3];
  HEAP32[$ap >> 2] = -1;
  while (1) {
   if ((HEAP32[$ap >> 2] | 0) <= (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$Uam1 >> 3] = +(HEAP32[$ap >> 2] | 0) * (+((HEAP32[$2 >> 2] | 0) - (HEAP32[$ap >> 2] | 0) | 0) - 1.0) * +HEAPF64[$Uap1 >> 3] + (+HEAPF64[$3 >> 3] + +(HEAP32[$ap >> 2] | 0) * 2.0 - +(HEAP32[$2 >> 2] | 0)) * +HEAPF64[$Ua >> 3];
   HEAPF64[$Uap1 >> 3] = +HEAPF64[$Ua >> 3];
   HEAPF64[$Ua >> 3] = +HEAPF64[$Uam1 >> 3];
   HEAPF64[$au0 >> 3] = +Math_abs(+(+HEAPF64[$Ua >> 3]));
   if (+HEAPF64[$au0 >> 3] > 1.3407807929942596e+154) {
    HEAPF64[$Ua >> 3] = +HEAPF64[$Ua >> 3] / 1.3407807929942596e+154;
    HEAPF64[$Uap1 >> 3] = +HEAPF64[$Uap1 >> 3] / 1.3407807929942596e+154;
    HEAP32[$scale_count >> 2] = (HEAP32[$scale_count >> 2] | 0) + 1;
   } else if (+HEAPF64[$au0 >> 3] < 7.458340731200208e-155) {
    HEAPF64[$Ua >> 3] = +HEAPF64[$Ua >> 3] * 1.3407807929942596e+154;
    HEAPF64[$Uap1 >> 3] = +HEAPF64[$Uap1 >> 3] * 1.3407807929942596e+154;
    HEAP32[$scale_count >> 2] = (HEAP32[$scale_count >> 2] | 0) + -1;
   }
   HEAP32[$ap >> 2] = (HEAP32[$ap >> 2] | 0) + -1;
  }
  HEAPF64[$lnscale >> 3] = +Math_log(1.3407807929942596e+154);
  HEAPF64[$lnm >> 3] = +(HEAP32[$scale_count >> 2] | 0) * +HEAPF64[$lnscale >> 3];
  HEAPF64[$lnm + 8 >> 3] = +Math_abs(+(+HEAPF64[$lnm >> 3])) * 4.440892098500626e-16;
  HEAPF64[$y >> 3] = +HEAPF64[$Ua >> 3];
  $198 = (+Math_abs(+(+(HEAP32[$1 >> 2] | 0))) + 1.0) * 8.881784197001252e-16;
  HEAPF64[$y + 8 >> 3] = $198 * +Math_abs(+(+HEAPF64[$Ua >> 3]));
  HEAP32[$0 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnm >> 3], +HEAPF64[$lnm + 8 >> 3], +HEAPF64[$y >> 3], +HEAPF64[$y + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 if (+(HEAP32[$2 >> 2] | 0) >= +(HEAP32[$1 >> 2] | 0) * 2.0 + +HEAPF64[$3 >> 3]) {
  HEAP32[$scale_count1 >> 2] = 0;
  HEAPF64[$scale_factor2 >> 3] = 1.3407807929942596e+154;
  HEAP32[$stat_1 >> 2] = _hyperg_U_small_a_bgt0(1.0, +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], $r_Ua, $lm) | 0;
  HEAPF64[$Uam17 >> 3] = 1.0;
  HEAPF64[$Ua8 >> 3] = +HEAPF64[$r_Ua >> 3];
  $226 = +Math_exp(+-+HEAPF64[$lm >> 3]);
  HEAPF64[$Uam17 >> 3] = +HEAPF64[$Uam17 >> 3] * $226;
  HEAP32[$ap10 >> 2] = 1;
  while (1) {
   if ((HEAP32[$ap10 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$Uap19 >> 3] = -(+HEAPF64[$Uam17 >> 3] + (+(HEAP32[$2 >> 2] | 0) - +(HEAP32[$ap10 >> 2] | 0) * 2.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ua8 >> 3]) / (+(HEAP32[$ap10 >> 2] | 0) * (+(HEAP32[$ap10 >> 2] | 0) + 1.0 - +(HEAP32[$2 >> 2] | 0)));
   HEAPF64[$Uam17 >> 3] = +HEAPF64[$Ua8 >> 3];
   HEAPF64[$Ua8 >> 3] = +HEAPF64[$Uap19 >> 3];
   HEAPF64[$au011 >> 3] = +Math_abs(+(+HEAPF64[$Ua8 >> 3]));
   if (+HEAPF64[$au011 >> 3] > 1.3407807929942596e+154) {
    HEAPF64[$Ua8 >> 3] = +HEAPF64[$Ua8 >> 3] / 1.3407807929942596e+154;
    HEAPF64[$Uam17 >> 3] = +HEAPF64[$Uam17 >> 3] / 1.3407807929942596e+154;
    HEAP32[$scale_count1 >> 2] = (HEAP32[$scale_count1 >> 2] | 0) + 1;
   } else if (+HEAPF64[$au011 >> 3] < 7.458340731200208e-155) {
    HEAPF64[$Ua8 >> 3] = +HEAPF64[$Ua8 >> 3] * 1.3407807929942596e+154;
    HEAPF64[$Uam17 >> 3] = +HEAPF64[$Uam17 >> 3] * 1.3407807929942596e+154;
    HEAP32[$scale_count1 >> 2] = (HEAP32[$scale_count1 >> 2] | 0) + -1;
   }
   HEAP32[$ap10 >> 2] = (HEAP32[$ap10 >> 2] | 0) + 1;
  }
  HEAPF64[$lnscale5 >> 3] = +Math_log(1.3407807929942596e+154);
  HEAPF64[$lnm3 >> 3] = +HEAPF64[$lm >> 3] + +(HEAP32[$scale_count1 >> 2] | 0) * +HEAPF64[$lnscale5 >> 3];
  $285 = +Math_abs(+(+HEAPF64[$lm >> 3]));
  HEAPF64[$lnm3 + 8 >> 3] = ($285 + +Math_abs(+(+(HEAP32[$scale_count1 >> 2] | 0) * +HEAPF64[$lnscale5 >> 3]))) * 4.440892098500626e-16;
  HEAPF64[$y4 >> 3] = +HEAPF64[$Ua8 >> 3];
  $299 = +Math_abs(+(+HEAPF64[$r_Ua + 8 >> 3] / +HEAPF64[$r_Ua >> 3]));
  HEAPF64[$y4 + 8 >> 3] = $299 * +Math_abs(+(+HEAPF64[$Ua8 >> 3]));
  $308 = (+Math_abs(+(+(HEAP32[$1 >> 2] | 0))) + 1.0) * 4.440892098500626e-16;
  $311 = $308 * +Math_abs(+(+HEAPF64[$Ua8 >> 3]));
  $312 = $y4 + 8 | 0;
  HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] + $311;
  HEAP32[$stat_e6 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnm3 >> 3], +HEAPF64[$lnm3 + 8 >> 3], +HEAPF64[$y4 >> 3], +HEAPF64[$y4 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e6 >> 2] | 0) $330 = HEAP32[$stat_e6 >> 2] | 0; else $330 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $330;
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 if (+(HEAP32[$2 >> 2] | 0) <= +HEAPF64[$3 >> 3]) {
  HEAPF64[$scale_factor12 >> 3] = 1.3407807929942596e+154;
  HEAP32[$scale_count13 >> 2] = 0;
  if ((HEAP32[$2 >> 2] | 0) < ((HEAP32[$1 >> 2] | 0) + 1 | 0)) {
   HEAP32[$a_target >> 2] = (HEAP32[$2 >> 2] | 0) - 1;
   HEAPF64[$lnU_target >> 3] = +(0 - (HEAP32[$a_target >> 2] | 0) | 0) * +Math_log(+(+HEAPF64[$3 >> 3]));
  } else {
   HEAP32[$a_target >> 2] = 0;
   HEAPF64[$lnU_target >> 3] = 0.0;
  }
  HEAP32[$stat_CF1 >> 2] = _hyperg_U_CF1(+(HEAP32[$1 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), 0, +HEAPF64[$3 >> 3], $ru, $CF1_count) | 0;
  HEAPF64[$Ua14 >> 3] = 1.0;
  HEAPF64[$Uap115 >> 3] = +HEAPF64[$ru >> 3] / +(HEAP32[$1 >> 2] | 0) * +HEAPF64[$Ua14 >> 3];
  HEAP32[$ap17 >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$ap17 >> 2] | 0) <= (HEAP32[$a_target >> 2] | 0)) break;
   HEAPF64[$Uam116 >> 3] = -((+(HEAP32[$2 >> 2] | 0) - +(HEAP32[$ap17 >> 2] | 0) * 2.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ua14 >> 3] + +(HEAP32[$ap17 >> 2] | 0) * (+(HEAP32[$ap17 >> 2] | 0) + 1.0 - +(HEAP32[$2 >> 2] | 0)) * +HEAPF64[$Uap115 >> 3]);
   HEAPF64[$Uap115 >> 3] = +HEAPF64[$Ua14 >> 3];
   HEAPF64[$Ua14 >> 3] = +HEAPF64[$Uam116 >> 3];
   HEAPF64[$au018 >> 3] = +Math_abs(+(+HEAPF64[$Ua14 >> 3]));
   if (+HEAPF64[$au018 >> 3] > 1.3407807929942596e+154) {
    HEAPF64[$Ua14 >> 3] = +HEAPF64[$Ua14 >> 3] / 1.3407807929942596e+154;
    HEAPF64[$Uap115 >> 3] = +HEAPF64[$Uap115 >> 3] / 1.3407807929942596e+154;
    HEAP32[$scale_count13 >> 2] = (HEAP32[$scale_count13 >> 2] | 0) + 1;
   } else if (+HEAPF64[$au018 >> 3] < 7.458340731200208e-155) {
    HEAPF64[$Ua14 >> 3] = +HEAPF64[$Ua14 >> 3] * 1.3407807929942596e+154;
    HEAPF64[$Uap115 >> 3] = +HEAPF64[$Uap115 >> 3] * 1.3407807929942596e+154;
    HEAP32[$scale_count13 >> 2] = (HEAP32[$scale_count13 >> 2] | 0) + -1;
   }
   HEAP32[$ap17 >> 2] = (HEAP32[$ap17 >> 2] | 0) + -1;
  }
  if (+HEAPF64[$Ua14 >> 3] == 0.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
   _gsl_error(52312, 52168, 992, 12);
   HEAP32[$0 >> 2] = 12;
   $802 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $802 | 0;
  }
  HEAPF64[$lnscl >> 3] = +(0 - (HEAP32[$scale_count13 >> 2] | 0) | 0) * +Math_log(1.3407807929942596e+154);
  HEAPF64[$lnpre_val >> 3] = +HEAPF64[$lnU_target >> 3] + +HEAPF64[$lnscl >> 3];
  $424 = +Math_abs(+(+HEAPF64[$lnU_target >> 3]));
  HEAPF64[$lnpre_err >> 3] = ($424 + +Math_abs(+(+HEAPF64[$lnscl >> 3]))) * 4.440892098500626e-16;
  $433 = +Math_abs(+(+((HEAP32[$a_target >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0)));
  HEAPF64[$oUa_err >> 3] = ($433 + +(HEAP32[$CF1_count >> 2] | 0) + 1.0) * 2.0 * 2.220446049250313e-16 * +Math_abs(+(1.0 / +HEAPF64[$Ua14 >> 3]));
  HEAP32[$stat_e19 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], 1.0 / +HEAPF64[$Ua14 >> 3], +HEAPF64[$oUa_err >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e19 >> 2] | 0) $458 = HEAP32[$stat_e19 >> 2] | 0; else $458 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $458;
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 HEAPF64[$scale_factor20 >> 3] = 1.3407807929942596e+154;
 HEAP32[$scale_count_for >> 2] = 0;
 HEAP32[$scale_count_bck >> 2] = 0;
 HEAP32[$a0 >> 2] = 1;
 HEAP32[$a1 >> 2] = ~~(+(HEAP32[$a0 >> 2] | 0) + +Math_ceil(+((+(HEAP32[$2 >> 2] | 0) - +HEAPF64[$3 >> 3]) * .5 - +(HEAP32[$a0 >> 2] | 0))));
 HEAP32[$stat_CF123 >> 2] = _hyperg_U_CF1(+(HEAP32[$1 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), 0, +HEAPF64[$3 >> 3], $ru21, $CF1_count22) | 0;
 HEAPF64[$Ua24 >> 3] = 1.0;
 HEAPF64[$Uap125 >> 3] = +HEAPF64[$ru21 >> 3] / +(HEAP32[$1 >> 2] | 0) * +HEAPF64[$Ua24 >> 3];
 HEAP32[$ap27 >> 2] = HEAP32[$1 >> 2];
 while (1) {
  if ((HEAP32[$ap27 >> 2] | 0) <= (HEAP32[$a1 >> 2] | 0)) break;
  HEAPF64[$Uam126 >> 3] = -((+(HEAP32[$2 >> 2] | 0) - +(HEAP32[$ap27 >> 2] | 0) * 2.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ua24 >> 3] + +(HEAP32[$ap27 >> 2] | 0) * (+(HEAP32[$ap27 >> 2] | 0) + 1.0 - +(HEAP32[$2 >> 2] | 0)) * +HEAPF64[$Uap125 >> 3]);
  HEAPF64[$Uap125 >> 3] = +HEAPF64[$Ua24 >> 3];
  HEAPF64[$Ua24 >> 3] = +HEAPF64[$Uam126 >> 3];
  HEAPF64[$au028 >> 3] = +Math_abs(+(+HEAPF64[$Ua24 >> 3]));
  if (+HEAPF64[$au028 >> 3] > 1.3407807929942596e+154) {
   HEAPF64[$Ua24 >> 3] = +HEAPF64[$Ua24 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Uap125 >> 3] = +HEAPF64[$Uap125 >> 3] / 1.3407807929942596e+154;
   HEAP32[$scale_count_bck >> 2] = (HEAP32[$scale_count_bck >> 2] | 0) + 1;
  } else if (+HEAPF64[$au028 >> 3] < 7.458340731200208e-155) {
   HEAPF64[$Ua24 >> 3] = +HEAPF64[$Ua24 >> 3] * 1.3407807929942596e+154;
   HEAPF64[$Uap125 >> 3] = +HEAPF64[$Uap125 >> 3] * 1.3407807929942596e+154;
   HEAP32[$scale_count_bck >> 2] = (HEAP32[$scale_count_bck >> 2] | 0) + -1;
  }
  HEAP32[$ap27 >> 2] = (HEAP32[$ap27 >> 2] | 0) + -1;
 }
 HEAPF64[$Ua1_bck_val >> 3] = +HEAPF64[$Ua24 >> 3];
 $538 = +Math_abs(+(+((HEAP32[$a1 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0)));
 HEAPF64[$Ua1_bck_err >> 3] = ($538 + +(HEAP32[$CF1_count22 >> 2] | 0) + 1.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$Ua24 >> 3]));
 HEAP32[$stat_bck >> 2] = HEAP32[$stat_CF123 >> 2];
 do if ((HEAP32[$a1 >> 2] | 0) > 1 ? (HEAP32[$2 >> 2] | 0) == (HEAP32[$a1 >> 2] << 1 | 0) : 0) {
  _hyperg_lnU_beq2a(+(HEAP32[$a1 >> 2] | 0), +HEAPF64[$3 >> 3], $lm_for) | 0;
  HEAPF64[$Ua1_for_val >> 3] = 1.0;
  HEAPF64[$Ua1_for_err >> 3] = 0.0;
  HEAP32[$stat_for >> 2] = 0;
 } else {
  if ((HEAP32[$2 >> 2] | 0) == ((HEAP32[$a1 >> 2] << 1) - 1 | 0)) if ((HEAP32[$a1 >> 2] | 0) > 1) {
   _hyperg_lnU_beq2a(+(HEAP32[$a1 >> 2] | 0) - 1.0, +HEAPF64[$3 >> 3], $lnU00) | 0;
   _hyperg_lnU_beq2a(+(HEAP32[$a1 >> 2] | 0), +HEAPF64[$3 >> 3], $lnU12) | 0;
   if (+HEAPF64[$lnU00 >> 3] > +HEAPF64[$lnU12 >> 3]) {
    HEAPF64[$lm_for >> 3] = +HEAPF64[$lnU00 >> 3];
    HEAPF64[$lm_for + 8 >> 3] = +HEAPF64[$lnU00 + 8 >> 3];
    HEAPF64[$U00 >> 3] = 1.0;
    HEAPF64[$U00 + 8 >> 3] = 0.0;
    _gsl_sf_exp_err_e(+HEAPF64[$lnU12 >> 3] - +HEAPF64[$lm_for >> 3], +HEAPF64[$lnU12 + 8 >> 3] + +HEAPF64[$lm_for + 8 >> 3], $U12) | 0;
   } else {
    HEAPF64[$lm_for >> 3] = +HEAPF64[$lnU12 >> 3];
    HEAPF64[$lm_for + 8 >> 3] = +HEAPF64[$lnU12 + 8 >> 3];
    HEAPF64[$U12 >> 3] = 1.0;
    HEAPF64[$U12 + 8 >> 3] = 0.0;
    _gsl_sf_exp_err_e(+HEAPF64[$lnU00 >> 3] - +HEAPF64[$lm_for >> 3], +HEAPF64[$lnU00 + 8 >> 3] + +HEAPF64[$lm_for + 8 >> 3], $U00) | 0;
   }
   HEAPF64[$Ua1_for_val >> 3] = (+HEAPF64[$3 >> 3] * +HEAPF64[$U12 >> 3] - +HEAPF64[$U00 >> 3]) / (+(HEAP32[$a1 >> 2] | 0) * 2.0 - 2.0);
   $611 = +Math_abs(+(+HEAPF64[$3 >> 3]));
   HEAPF64[$Ua1_for_err >> 3] = ($611 * +HEAPF64[$U12 + 8 >> 3] + +HEAPF64[$U00 + 8 >> 3]) / +Math_abs(+(+(HEAP32[$a1 >> 2] | 0) * 2.0 - 2.0));
   $626 = +Math_abs(+(+HEAPF64[$Ua1_for_val >> 3])) * 4.440892098500626e-16;
   HEAPF64[$Ua1_for_err >> 3] = +HEAPF64[$Ua1_for_err >> 3] + $626;
   HEAP32[$stat_for >> 2] = 0;
   break;
  }
  HEAPF64[$Uam130 >> 3] = 1.0;
  HEAP32[$stat_for >> 2] = _hyperg_U_small_a_bgt0(+(HEAP32[$a0 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], $r_Ua29, $lm_for_local) | 0;
  HEAPF64[$Ua31 >> 3] = +HEAPF64[$r_Ua29 >> 3];
  $638 = +Math_exp(+-+HEAPF64[$lm_for_local >> 3]);
  HEAPF64[$Uam130 >> 3] = +HEAPF64[$Uam130 >> 3] * $638;
  HEAPF64[$lm_for >> 3] = +HEAPF64[$lm_for_local >> 3];
  HEAPF64[$lm_for + 8 >> 3] = 0.0;
  HEAP32[$ap33 >> 2] = HEAP32[$a0 >> 2];
  while (1) {
   if ((HEAP32[$ap33 >> 2] | 0) >= (HEAP32[$a1 >> 2] | 0)) break;
   HEAPF64[$Uap132 >> 3] = -(+HEAPF64[$Uam130 >> 3] + (+(HEAP32[$2 >> 2] | 0) - +(HEAP32[$ap33 >> 2] | 0) * 2.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ua31 >> 3]) / (+(HEAP32[$ap33 >> 2] | 0) * (+(HEAP32[$ap33 >> 2] | 0) + 1.0 - +(HEAP32[$2 >> 2] | 0)));
   HEAPF64[$Uam130 >> 3] = +HEAPF64[$Ua31 >> 3];
   HEAPF64[$Ua31 >> 3] = +HEAPF64[$Uap132 >> 3];
   HEAPF64[$au034 >> 3] = +Math_abs(+(+HEAPF64[$Ua31 >> 3]));
   if (+HEAPF64[$au034 >> 3] > 1.3407807929942596e+154) {
    HEAPF64[$Ua31 >> 3] = +HEAPF64[$Ua31 >> 3] / 1.3407807929942596e+154;
    HEAPF64[$Uam130 >> 3] = +HEAPF64[$Uam130 >> 3] / 1.3407807929942596e+154;
    HEAP32[$scale_count_for >> 2] = (HEAP32[$scale_count_for >> 2] | 0) + 1;
   } else if (+HEAPF64[$au034 >> 3] < 7.458340731200208e-155) {
    HEAPF64[$Ua31 >> 3] = +HEAPF64[$Ua31 >> 3] * 1.3407807929942596e+154;
    HEAPF64[$Uam130 >> 3] = +HEAPF64[$Uam130 >> 3] * 1.3407807929942596e+154;
    HEAP32[$scale_count_for >> 2] = (HEAP32[$scale_count_for >> 2] | 0) + -1;
   }
   HEAP32[$ap33 >> 2] = (HEAP32[$ap33 >> 2] | 0) + 1;
  }
  HEAPF64[$Ua1_for_val >> 3] = +HEAPF64[$Ua31 >> 3];
  $694 = +Math_abs(+(+HEAPF64[$Ua31 >> 3]));
  HEAPF64[$Ua1_for_err >> 3] = $694 * +Math_abs(+(+HEAPF64[$r_Ua29 + 8 >> 3] / +HEAPF64[$r_Ua29 >> 3]));
  $707 = (+Math_abs(+(+((HEAP32[$a1 >> 2] | 0) - (HEAP32[$a0 >> 2] | 0) | 0))) + 1.0) * 4.440892098500626e-16;
  $710 = $707 * +Math_abs(+(+HEAPF64[$Ua1_for_val >> 3]));
  HEAPF64[$Ua1_for_err >> 3] = +HEAPF64[$Ua1_for_err >> 3] + $710;
 } while (0);
 if (+HEAPF64[$Ua1_bck_val >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(52312, 52168, 1117, 12);
  HEAP32[$0 >> 2] = 12;
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 if (+HEAPF64[$Ua1_for_val >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(52400, 52168, 1121, 15);
  HEAP32[$0 >> 2] = 15;
  $802 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $802 | 0;
 }
 HEAPF64[$lns >> 3] = +((HEAP32[$scale_count_for >> 2] | 0) - (HEAP32[$scale_count_bck >> 2] | 0) | 0) * +Math_log(1.3407807929942596e+154);
 HEAPF64[$ln_for_val >> 3] = +Math_log(+(+Math_abs(+(+HEAPF64[$Ua1_for_val >> 3]))));
 HEAPF64[$ln_for_err >> 3] = +Math_abs(+(+HEAPF64[$Ua1_for_err >> 3] / +HEAPF64[$Ua1_for_val >> 3])) + 2.220446049250313e-16;
 HEAPF64[$ln_bck_val >> 3] = +Math_log(+(+Math_abs(+(+HEAPF64[$Ua1_bck_val >> 3]))));
 HEAPF64[$ln_bck_err >> 3] = +Math_abs(+(+HEAPF64[$Ua1_bck_err >> 3] / +HEAPF64[$Ua1_bck_val >> 3])) + 2.220446049250313e-16;
 HEAPF64[$lnr_val >> 3] = +HEAPF64[$lm_for >> 3] + +HEAPF64[$ln_for_val >> 3] - +HEAPF64[$ln_bck_val >> 3] + +HEAPF64[$lns >> 3];
 $763 = +Math_abs(+(+HEAPF64[$lm_for >> 3]));
 $766 = $763 + +Math_abs(+(+HEAPF64[$ln_for_val >> 3]));
 $769 = $766 + +Math_abs(+(+HEAPF64[$ln_bck_val >> 3]));
 HEAPF64[$lnr_err >> 3] = +HEAPF64[$lm_for + 8 >> 3] + +HEAPF64[$ln_for_err >> 3] + +HEAPF64[$ln_bck_err >> 3] + ($769 + +Math_abs(+(+HEAPF64[$lns >> 3]))) * 4.440892098500626e-16;
 HEAPF64[$sgn >> 3] = +(Math_imul(+HEAPF64[$Ua1_for_val >> 3] >= 0.0 ? 1 : -1, +HEAPF64[$Ua1_bck_val >> 3] >= 0.0 ? 1 : -1) | 0);
 HEAP32[$stat_e35 >> 2] = _gsl_sf_exp_err_e10_e(+HEAPF64[$lnr_val >> 3], +HEAPF64[$lnr_err >> 3], HEAP32[$4 >> 2] | 0) | 0;
 $788 = HEAP32[$4 >> 2] | 0;
 HEAPF64[$788 >> 3] = +HEAPF64[$788 >> 3] * +HEAPF64[$sgn >> 3];
 do if (HEAP32[$stat_e35 >> 2] | 0) $801 = HEAP32[$stat_e35 >> 2] | 0; else if (HEAP32[$stat_bck >> 2] | 0) {
  $801 = HEAP32[$stat_bck >> 2] | 0;
  break;
 } else {
  $801 = (HEAP32[$stat_for >> 2] | 0) != 0 ? HEAP32[$stat_for >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $801;
 $802 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $802 | 0;
}
function _gsl_sf_coulomb_wave_FG_e($eta, $x, $lam_F, $k_lam_G, $F, $Fp, $G, $Gp, $exp_F, $exp_G) {
 $eta = +$eta;
 $x = +$x;
 $lam_F = +$lam_F;
 $k_lam_G = $k_lam_G | 0;
 $F = $F | 0;
 $Fp = $Fp | 0;
 $G = $G | 0;
 $Gp = $Gp | 0;
 $exp_F = $exp_F | 0;
 $exp_G = $exp_G | 0;
 var $0 = 0, $1 = 0, $10 = 0, $133 = 0.0, $141 = 0.0, $149 = 0.0, $157 = 0.0, $176 = 0.0, $183 = 0.0, $189 = 0.0, $190 = 0, $2 = 0, $211 = 0.0, $220 = 0.0, $237 = 0, $246 = 0.0, $248 = 0, $258 = 0.0, $260 = 0, $267 = 0.0, $279 = 0.0, $290 = 0.0, $292 = 0, $3 = 0, $301 = 0.0, $312 = 0.0, $314 = 0, $332 = 0, $379 = 0.0, $388 = 0.0, $390 = 0, $4 = 0, $401 = 0.0, $409 = 0.0, $415 = 0.0, $417 = 0, $435 = 0, $5 = 0, $542 = 0, $567 = 0.0, $578 = 0.0, $589 = 0.0, $6 = 0, $600 = 0.0, $618 = 0, $619 = 0, $69 = 0.0, $7 = 0, $72 = 0.0, $8 = 0, $9 = 0, $C = 0, $C0 = 0, $CF1_count = 0, $CF1_count22 = 0, $CF1_count3 = 0, $CF2_count = 0, $F_lam_F = 0, $F_lam_F1 = 0, $F_lam_F9 = 0, $F_lam_F_err = 0, $F_lam_G = 0, $F_lam_min = 0, $F_lam_min15 = 0, $F_lam_min_unnorm = 0, $F_lam_min_unnorm13 = 0, $F_recur_count = 0, $F_scale = 0, $F_scale21 = 0, $F_scale_frac_err = 0, $F_sign_lam_F = 0, $F_sign_lam_F20 = 0, $F_sign_lam_F5 = 0, $F_sign_lam_G = 0, $F_sign_lam_min = 0, $F_unnorm_frac_err = 0, $Fp_lam_F = 0, $Fp_lam_F10 = 0, $Fp_lam_F_err = 0, $Fp_lam_min = 0, $Fp_lam_min_unnorm = 0, $Fp_lam_min_unnorm14 = 0, $Fp_over_F_lam_F = 0, $Fp_over_F_lam_F18 = 0, $Fp_over_F_lam_F4 = 0, $Fp_over_F_lam_G = 0, $Fp_over_F_lam_min = 0, $Fp_over_F_lam_min19 = 0, $G_lam_F = 0, $G_lam_G = 0, $G_lam_G11 = 0, $G_lam_G2 = 0, $G_lam_min = 0, $G_lam_min16 = 0, $G_recur_count = 0, $Gerr_frac = 0, $Gp_lam_G = 0, $Gp_lam_G12 = 0, $Gp_lam_min = 0, $Gp_lam_min17 = 0, $N = 0, $N7 = 0, $P_lam_min = 0, $Q_lam_min = 0, $SMALL = 0, $SMALL6 = 0, $alpha = 0, $err_amplify = 0, $exp_lam_F = 0, $exp_lam_G = 0, $gamma = 0, $lam_0 = 0, $lam_G = 0, $lam_min = 0, $lam_min8 = 0, $span = 0, $stat_CF1 = 0, $stat_CF123 = 0, $stat_CF1_lam_F = 0, $stat_CF1_lam_G = 0, $stat_CF2 = 0, $stat_Fr = 0, $stat_Fr24 = 0, $stat_Gr = 0, $stat_Gr25 = 0, $stat_lam_F = 0, $stat_lam_G = 0, $stat_ser = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656 | 0;
 $0 = sp + 648 | 0;
 $1 = sp + 528 | 0;
 $2 = sp + 520 | 0;
 $3 = sp + 512 | 0;
 $4 = sp + 644 | 0;
 $5 = sp + 640 | 0;
 $6 = sp + 636 | 0;
 $7 = sp + 632 | 0;
 $8 = sp + 628 | 0;
 $9 = sp + 624 | 0;
 $10 = sp + 620 | 0;
 $lam_G = sp + 504 | 0;
 $C0 = sp + 488 | 0;
 $SMALL = sp + 480 | 0;
 $N = sp + 616 | 0;
 $span = sp + 612 | 0;
 $lam_min = sp + 472 | 0;
 $F_lam_F = sp + 464 | 0;
 $Fp_lam_F = sp + 456 | 0;
 $G_lam_G = sp + 448 | 0;
 $Gp_lam_G = sp + 440 | 0;
 $F_lam_F_err = sp + 432 | 0;
 $Fp_lam_F_err = sp + 424 | 0;
 $Fp_over_F_lam_F = sp + 416 | 0;
 $F_sign_lam_F = sp + 408 | 0;
 $F_lam_min_unnorm = sp + 400 | 0;
 $Fp_lam_min_unnorm = sp + 392 | 0;
 $Fp_over_F_lam_min = sp + 384 | 0;
 $F_lam_min = sp + 368 | 0;
 $G_lam_min = sp + 352 | 0;
 $Gp_lam_min = sp + 336 | 0;
 $F_scale = sp + 328 | 0;
 $Gerr_frac = sp + 320 | 0;
 $F_scale_frac_err = sp + 312 | 0;
 $F_unnorm_frac_err = sp + 304 | 0;
 $CF1_count = sp + 608 | 0;
 $stat_CF1 = sp + 604 | 0;
 $stat_ser = sp + 600 | 0;
 $stat_Fr = sp + 596 | 0;
 $stat_Gr = sp + 592 | 0;
 $F_lam_F1 = sp + 288 | 0;
 $G_lam_F = sp + 272 | 0;
 $F_lam_G = sp + 256 | 0;
 $G_lam_G2 = sp + 240 | 0;
 $exp_lam_F = sp + 232 | 0;
 $exp_lam_G = sp + 224 | 0;
 $stat_lam_F = sp + 588 | 0;
 $stat_lam_G = sp + 584 | 0;
 $stat_CF1_lam_F = sp + 580 | 0;
 $stat_CF1_lam_G = sp + 576 | 0;
 $CF1_count3 = sp + 572 | 0;
 $Fp_over_F_lam_F4 = sp + 216 | 0;
 $Fp_over_F_lam_G = sp + 208 | 0;
 $F_sign_lam_F5 = sp + 200 | 0;
 $F_sign_lam_G = sp + 192 | 0;
 $SMALL6 = sp + 184 | 0;
 $C = sp + 176 | 0;
 $N7 = sp + 568 | 0;
 $lam_0 = sp + 168 | 0;
 $lam_min8 = sp + 160 | 0;
 $F_lam_F9 = sp + 152 | 0;
 $Fp_lam_F10 = sp + 144 | 0;
 $G_lam_G11 = sp + 136 | 0;
 $Gp_lam_G12 = sp + 128 | 0;
 $F_lam_min_unnorm13 = sp + 120 | 0;
 $Fp_lam_min_unnorm14 = sp + 112 | 0;
 $F_lam_min15 = sp + 104 | 0;
 $Fp_lam_min = sp + 96 | 0;
 $G_lam_min16 = sp + 88 | 0;
 $Gp_lam_min17 = sp + 80 | 0;
 $Fp_over_F_lam_F18 = sp + 72 | 0;
 $Fp_over_F_lam_min19 = sp + 64 | 0;
 $F_sign_lam_F20 = sp + 56 | 0;
 $F_sign_lam_min = sp + 48 | 0;
 $P_lam_min = sp + 40 | 0;
 $Q_lam_min = sp + 32 | 0;
 $alpha = sp + 24 | 0;
 $gamma = sp + 16 | 0;
 $F_scale21 = sp + 8 | 0;
 $CF1_count22 = sp + 564 | 0;
 $CF2_count = sp + 560 | 0;
 $stat_CF123 = sp + 556 | 0;
 $stat_CF2 = sp + 552 | 0;
 $stat_Fr24 = sp + 548 | 0;
 $stat_Gr25 = sp + 544 | 0;
 $F_recur_count = sp + 540 | 0;
 $G_recur_count = sp + 536 | 0;
 $err_amplify = sp;
 HEAPF64[$1 >> 3] = $eta;
 HEAPF64[$2 >> 3] = $x;
 HEAPF64[$3 >> 3] = $lam_F;
 HEAP32[$4 >> 2] = $k_lam_G;
 HEAP32[$5 >> 2] = $F;
 HEAP32[$6 >> 2] = $Fp;
 HEAP32[$7 >> 2] = $G;
 HEAP32[$8 >> 2] = $Gp;
 HEAP32[$9 >> 2] = $exp_F;
 HEAP32[$10 >> 2] = $exp_G;
 HEAPF64[$lam_G >> 3] = +HEAPF64[$3 >> 3] - +(HEAP32[$4 >> 2] | 0);
 if (!(+HEAPF64[$2 >> 3] < 0.0)) if (!(+HEAPF64[$3 >> 3] <= -.5)) if (!(+HEAPF64[$lam_G >> 3] <= -.5)) {
  if (+HEAPF64[$2 >> 3] == 0.0) {
   _CLeta(0.0, +HEAPF64[$1 >> 3], $C0) | 0;
   HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAPF64[HEAP32[$7 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAPF64[HEAP32[$8 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAPF64[HEAP32[$9 >> 2] >> 3] = 0.0;
   HEAPF64[HEAP32[$10 >> 2] >> 3] = 0.0;
   if (+HEAPF64[$3 >> 3] == 0.0) {
    HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$C0 >> 3];
    HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = +HEAPF64[$C0 + 8 >> 3];
   }
   if (+HEAPF64[$lam_G >> 3] == 0.0) {
    HEAPF64[HEAP32[$8 >> 2] >> 3] = 1.0 / +HEAPF64[$C0 >> 3];
    $69 = +Math_abs(+(+HEAPF64[$C0 + 8 >> 3] / +HEAPF64[$C0 >> 3]));
    $72 = $69 / +Math_abs(+(+HEAPF64[$C0 >> 3]));
    HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = $72;
   }
   _gsl_error(26224, 26240, 929, 1);
   HEAP32[$0 >> 2] = 1;
   $619 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $619 | 0;
  }
  if (+HEAPF64[$2 >> 3] < 1.2) if (+HEAPF64[$1 >> 3] * 6.283185307179586 < 637.5567766790377) if (+Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3])) < 10.0) {
   HEAPF64[$SMALL >> 3] = 1.4901161193847656e-8;
   HEAP32[$N >> 2] = ~~(+HEAPF64[$3 >> 3] + .5);
   HEAP32[$span >> 2] = (HEAP32[$4 >> 2] | 0) > (HEAP32[$N >> 2] | 0) ? HEAP32[$4 >> 2] | 0 : HEAP32[$N >> 2] | 0;
   HEAPF64[$lam_min >> 3] = +HEAPF64[$3 >> 3] - +(HEAP32[$N >> 2] | 0);
   HEAP32[$stat_CF1 >> 2] = _coulomb_CF1(+HEAPF64[$3 >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $F_sign_lam_F, $Fp_over_F_lam_F, $CF1_count) | 0;
   HEAPF64[$F_lam_F >> 3] = 1.4901161193847656e-8;
   HEAPF64[$Fp_lam_F >> 3] = +HEAPF64[$Fp_over_F_lam_F >> 3] * +HEAPF64[$F_lam_F >> 3];
   if (HEAP32[$span >> 2] | 0) HEAP32[$stat_Fr >> 2] = _coulomb_F_recur(+HEAPF64[$lam_min >> 3], HEAP32[$span >> 2] | 0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$F_lam_F >> 3], +HEAPF64[$Fp_lam_F >> 3], $F_lam_min_unnorm, $Fp_lam_min_unnorm) | 0; else {
    HEAPF64[$F_lam_min_unnorm >> 3] = +HEAPF64[$F_lam_F >> 3];
    HEAPF64[$Fp_lam_min_unnorm >> 3] = +HEAPF64[$Fp_lam_F >> 3];
    HEAP32[$stat_Fr >> 2] = 0;
   }
   do if (+HEAPF64[$lam_min >> 3] == -.5) HEAP32[$stat_ser >> 2] = _coulomb_FGmhalf_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $F_lam_min, $G_lam_min) | 0; else {
    if (+HEAPF64[$lam_min >> 3] == 0.0) {
     HEAP32[$stat_ser >> 2] = _coulomb_FG0_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $F_lam_min, $G_lam_min) | 0;
     break;
    }
    if (!(+HEAPF64[$lam_min >> 3] == .5)) {
     HEAP32[$stat_ser >> 2] = _coulomb_FG_series(+HEAPF64[$lam_min >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $F_lam_min, $G_lam_min) | 0;
     break;
    }
    HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$F_lam_F >> 3];
    $133 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * 4.440892098500626e-16;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $133;
    HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$Fp_lam_F >> 3];
    $141 = +Math_abs(+(+HEAPF64[HEAP32[$6 >> 2] >> 3])) * 4.440892098500626e-16;
    HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = $141;
    HEAPF64[HEAP32[$7 >> 2] >> 3] = +HEAPF64[$G_lam_G >> 3];
    $149 = +Math_abs(+(+HEAPF64[HEAP32[$7 >> 2] >> 3])) * 4.440892098500626e-16;
    HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = $149;
    HEAPF64[HEAP32[$8 >> 2] >> 3] = +HEAPF64[$Gp_lam_G >> 3];
    $157 = +Math_abs(+(+HEAPF64[HEAP32[$8 >> 2] >> 3])) * 4.440892098500626e-16;
    HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = $157;
    HEAPF64[HEAP32[$9 >> 2] >> 3] = 0.0;
    HEAPF64[HEAP32[$10 >> 2] >> 3] = 0.0;
    _gsl_error(26256, 26240, 1e3, 7);
    HEAP32[$0 >> 2] = 7;
    $619 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $619 | 0;
   } while (0);
   HEAPF64[$Fp_over_F_lam_min >> 3] = +HEAPF64[$Fp_lam_min_unnorm >> 3] / +HEAPF64[$F_lam_min_unnorm >> 3];
   HEAPF64[$Gp_lam_min >> 3] = +HEAPF64[$Fp_over_F_lam_min >> 3] * +HEAPF64[$G_lam_min >> 3] - 1.0 / +HEAPF64[$F_lam_min >> 3];
   $176 = +Math_abs(+(+HEAPF64[$Fp_over_F_lam_min >> 3]));
   HEAPF64[$Gp_lam_min + 8 >> 3] = $176 * +HEAPF64[$G_lam_min + 8 >> 3];
   $183 = +Math_abs(+(1.0 / +HEAPF64[$F_lam_min >> 3]));
   $189 = $183 * +Math_abs(+(+HEAPF64[$F_lam_min + 8 >> 3] / +HEAPF64[$F_lam_min >> 3]));
   $190 = $Gp_lam_min + 8 | 0;
   HEAPF64[$190 >> 3] = +HEAPF64[$190 >> 3] + $189;
   HEAPF64[$F_scale >> 3] = +HEAPF64[$F_lam_min >> 3] / +HEAPF64[$F_lam_min_unnorm >> 3];
   HEAPF64[$F_scale_frac_err >> 3] = +Math_abs(+(+HEAPF64[$F_lam_min + 8 >> 3] / +HEAPF64[$F_lam_min >> 3]));
   HEAPF64[$F_unnorm_frac_err >> 3] = +((HEAP32[$CF1_count >> 2] | 0) + (HEAP32[$span >> 2] | 0) + 1 | 0) * 4.440892098500626e-16;
   HEAPF64[$F_lam_F >> 3] = +HEAPF64[$F_lam_F >> 3] * +HEAPF64[$F_scale >> 3];
   $211 = +Math_abs(+(+HEAPF64[$F_lam_F >> 3]));
   HEAPF64[$F_lam_F_err >> 3] = $211 * (+HEAPF64[$F_unnorm_frac_err >> 3] + +HEAPF64[$F_scale_frac_err >> 3]);
   HEAPF64[$Fp_lam_F >> 3] = +HEAPF64[$Fp_lam_F >> 3] * +HEAPF64[$F_scale >> 3];
   $220 = +Math_abs(+(+HEAPF64[$Fp_lam_F >> 3]));
   HEAPF64[$Fp_lam_F_err >> 3] = $220 * (+HEAPF64[$F_unnorm_frac_err >> 3] + +HEAPF64[$F_scale_frac_err >> 3]);
   if (((HEAP32[$N >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) > 0) $237 = (HEAP32[$N >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0; else $237 = 0;
   HEAP32[$stat_Gr >> 2] = _coulomb_G_recur(+HEAPF64[$lam_min >> 3], $237, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$G_lam_min >> 3], +HEAPF64[$Gp_lam_min >> 3], $G_lam_G, $Gp_lam_G) | 0;
   HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$F_lam_F >> 3];
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = +HEAPF64[$F_lam_F_err >> 3];
   $246 = +Math_abs(+(+HEAPF64[$F_lam_F >> 3])) * 4.440892098500626e-16;
   $248 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
   HEAPF64[$248 >> 3] = +HEAPF64[$248 >> 3] + $246;
   HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$Fp_lam_F >> 3];
   HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = +HEAPF64[$Fp_lam_F_err >> 3];
   $258 = +Math_abs(+(+HEAPF64[$Fp_lam_F >> 3])) * 4.440892098500626e-16;
   $260 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
   HEAPF64[$260 >> 3] = +HEAPF64[$260 >> 3] + $258;
   $267 = +Math_abs(+(+HEAPF64[$G_lam_min + 8 >> 3] / +HEAPF64[$G_lam_min >> 3]));
   HEAPF64[$Gerr_frac >> 3] = $267 + +Math_abs(+(+HEAPF64[$Gp_lam_min + 8 >> 3] / +HEAPF64[$Gp_lam_min >> 3]));
   HEAPF64[HEAP32[$7 >> 2] >> 3] = +HEAPF64[$G_lam_G >> 3];
   $279 = +HEAPF64[$Gerr_frac >> 3] * +Math_abs(+(+HEAPF64[$G_lam_G >> 3]));
   HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = $279;
   $290 = +((HEAP32[$CF1_count >> 2] | 0) + 1 | 0) * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$7 >> 2] >> 3]));
   $292 = (HEAP32[$7 >> 2] | 0) + 8 | 0;
   HEAPF64[$292 >> 3] = +HEAPF64[$292 >> 3] + $290;
   HEAPF64[HEAP32[$8 >> 2] >> 3] = +HEAPF64[$Gp_lam_G >> 3];
   $301 = +HEAPF64[$Gerr_frac >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$8 >> 2] >> 3]));
   HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = $301;
   $312 = +((HEAP32[$CF1_count >> 2] | 0) + 1 | 0) * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$8 >> 2] >> 3]));
   $314 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
   HEAPF64[$314 >> 3] = +HEAPF64[$314 >> 3] + $312;
   HEAPF64[HEAP32[$9 >> 2] >> 3] = 0.0;
   HEAPF64[HEAP32[$10 >> 2] >> 3] = 0.0;
   do if (HEAP32[$stat_ser >> 2] | 0) $332 = HEAP32[$stat_ser >> 2] | 0; else {
    if (HEAP32[$stat_CF1 >> 2] | 0) {
     $332 = HEAP32[$stat_CF1 >> 2] | 0;
     break;
    }
    if (HEAP32[$stat_Fr >> 2] | 0) {
     $332 = HEAP32[$stat_Fr >> 2] | 0;
     break;
    } else {
     $332 = (HEAP32[$stat_Gr >> 2] | 0) != 0 ? HEAP32[$stat_Gr >> 2] | 0 : 0;
     break;
    }
   } while (0);
   HEAP32[$0 >> 2] = $332;
   $619 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $619 | 0;
  }
  if (!(+HEAPF64[$2 >> 3] < +HEAPF64[$1 >> 3] * 2.0)) {
   HEAPF64[$SMALL6 >> 3] = 1.4901161193847656e-8;
   HEAPF64[$C >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3] * 4.0 * (+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3] * 2.0) + 1.0));
   HEAP32[$N7 >> 2] = ~~+Math_ceil(+(+HEAPF64[$3 >> 3] - +HEAPF64[$C >> 3] + .5));
   HEAPF64[$lam_0 >> 3] = +HEAPF64[$3 >> 3] - +(((HEAP32[$N7 >> 2] | 0) > 0 ? HEAP32[$N7 >> 2] | 0 : 0) | 0);
   HEAPF64[$lam_min8 >> 3] = +HEAPF64[$lam_0 >> 3] < +HEAPF64[$lam_G >> 3] ? +HEAPF64[$lam_0 >> 3] : +HEAPF64[$lam_G >> 3];
   HEAP32[$stat_CF123 >> 2] = _coulomb_CF1(+HEAPF64[$3 >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $F_sign_lam_F20, $Fp_over_F_lam_F18, $CF1_count22) | 0;
   HEAPF64[$F_lam_F9 >> 3] = +HEAPF64[$F_sign_lam_F20 >> 3] * 1.4901161193847656e-8;
   HEAPF64[$Fp_lam_F10 >> 3] = +HEAPF64[$Fp_over_F_lam_F18 >> 3] * +HEAPF64[$F_lam_F9 >> 3];
   HEAP32[$F_recur_count >> 2] = (HEAP32[$4 >> 2] | 0) > (HEAP32[$N7 >> 2] | 0) ? HEAP32[$4 >> 2] | 0 : HEAP32[$N7 >> 2] | 0;
   HEAP32[$stat_Fr24 >> 2] = _coulomb_F_recur(+HEAPF64[$lam_min8 >> 3], HEAP32[$F_recur_count >> 2] | 0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$F_lam_F9 >> 3], +HEAPF64[$Fp_lam_F10 >> 3], $F_lam_min_unnorm13, $Fp_lam_min_unnorm14) | 0;
   HEAPF64[$Fp_over_F_lam_min19 >> 3] = +HEAPF64[$Fp_lam_min_unnorm14 >> 3] / +HEAPF64[$F_lam_min_unnorm13 >> 3];
   HEAP32[$stat_CF2 >> 2] = _coulomb_CF2(+HEAPF64[$lam_min8 >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $P_lam_min, $Q_lam_min, $CF2_count) | 0;
   HEAPF64[$alpha >> 3] = +HEAPF64[$Fp_over_F_lam_min19 >> 3] - +HEAPF64[$P_lam_min >> 3];
   HEAPF64[$gamma >> 3] = +HEAPF64[$alpha >> 3] / +HEAPF64[$Q_lam_min >> 3];
   HEAPF64[$F_sign_lam_min >> 3] = +((+HEAPF64[$F_lam_min_unnorm13 >> 3] >= 0.0 ? 1 : -1) | 0);
   HEAPF64[$F_lam_min15 >> 3] = +HEAPF64[$F_sign_lam_min >> 3] / +Math_sqrt(+(+HEAPF64[$alpha >> 3] * +HEAPF64[$alpha >> 3] / +HEAPF64[$Q_lam_min >> 3] + +HEAPF64[$Q_lam_min >> 3]));
   HEAPF64[$Fp_lam_min >> 3] = +HEAPF64[$Fp_over_F_lam_min19 >> 3] * +HEAPF64[$F_lam_min15 >> 3];
   HEAPF64[$G_lam_min16 >> 3] = +HEAPF64[$gamma >> 3] * +HEAPF64[$F_lam_min15 >> 3];
   HEAPF64[$Gp_lam_min17 >> 3] = (+HEAPF64[$P_lam_min >> 3] * +HEAPF64[$gamma >> 3] - +HEAPF64[$Q_lam_min >> 3]) * +HEAPF64[$F_lam_min15 >> 3];
   HEAPF64[$F_scale21 >> 3] = +HEAPF64[$F_lam_min15 >> 3] / +HEAPF64[$F_lam_min_unnorm13 >> 3];
   HEAPF64[$F_lam_F9 >> 3] = +HEAPF64[$F_lam_F9 >> 3] * +HEAPF64[$F_scale21 >> 3];
   HEAPF64[$Fp_lam_F10 >> 3] = +HEAPF64[$Fp_lam_F10 >> 3] * +HEAPF64[$F_scale21 >> 3];
   if (((HEAP32[$N7 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) > 0) $542 = (HEAP32[$N7 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0; else $542 = 0;
   HEAP32[$G_recur_count >> 2] = $542;
   HEAP32[$stat_Gr25 >> 2] = _coulomb_G_recur(+HEAPF64[$lam_min8 >> 3], HEAP32[$G_recur_count >> 2] | 0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$G_lam_min16 >> 3], +HEAPF64[$Gp_lam_min17 >> 3], $G_lam_G11, $Gp_lam_G12) | 0;
   HEAPF64[$err_amplify >> 3] = +((HEAP32[$CF1_count22 >> 2] | 0) + (HEAP32[$CF2_count >> 2] | 0) + (HEAP32[$F_recur_count >> 2] | 0) + (HEAP32[$G_recur_count >> 2] | 0) + 1 | 0);
   HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$F_lam_F9 >> 3];
   $567 = +HEAPF64[$err_amplify >> 3] * 8.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3]));
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $567;
   HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$Fp_lam_F10 >> 3];
   $578 = +HEAPF64[$err_amplify >> 3] * 8.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$6 >> 2] >> 3]));
   HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = $578;
   HEAPF64[HEAP32[$7 >> 2] >> 3] = +HEAPF64[$G_lam_G11 >> 3];
   $589 = +HEAPF64[$err_amplify >> 3] * 8.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$7 >> 2] >> 3]));
   HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = $589;
   HEAPF64[HEAP32[$8 >> 2] >> 3] = +HEAPF64[$Gp_lam_G12 >> 3];
   $600 = +HEAPF64[$err_amplify >> 3] * 8.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$8 >> 2] >> 3]));
   HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = $600;
   HEAPF64[HEAP32[$9 >> 2] >> 3] = 0.0;
   HEAPF64[HEAP32[$10 >> 2] >> 3] = 0.0;
   do if (HEAP32[$stat_CF123 >> 2] | 0) $618 = HEAP32[$stat_CF123 >> 2] | 0; else {
    if (HEAP32[$stat_CF2 >> 2] | 0) {
     $618 = HEAP32[$stat_CF2 >> 2] | 0;
     break;
    }
    if (HEAP32[$stat_Fr24 >> 2] | 0) {
     $618 = HEAP32[$stat_Fr24 >> 2] | 0;
     break;
    } else {
     $618 = (HEAP32[$stat_Gr25 >> 2] | 0) != 0 ? HEAP32[$stat_Gr25 >> 2] | 0 : 0;
     break;
    }
   } while (0);
   HEAP32[$0 >> 2] = $618;
   $619 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $619 | 0;
  }
  HEAP32[$stat_lam_F >> 2] = _coulomb_jwkb(+HEAPF64[$3 >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $F_lam_F1, $G_lam_F, $exp_lam_F) | 0;
  if (!(HEAP32[$4 >> 2] | 0)) {
   HEAP32[$stat_lam_G >> 2] = HEAP32[$stat_lam_F >> 2];
   HEAP32[$F_lam_G + 0 >> 2] = HEAP32[$F_lam_F1 + 0 >> 2];
   HEAP32[$F_lam_G + 4 >> 2] = HEAP32[$F_lam_F1 + 4 >> 2];
   HEAP32[$F_lam_G + 8 >> 2] = HEAP32[$F_lam_F1 + 8 >> 2];
   HEAP32[$F_lam_G + 12 >> 2] = HEAP32[$F_lam_F1 + 12 >> 2];
   HEAP32[$G_lam_G2 + 0 >> 2] = HEAP32[$G_lam_F + 0 >> 2];
   HEAP32[$G_lam_G2 + 4 >> 2] = HEAP32[$G_lam_F + 4 >> 2];
   HEAP32[$G_lam_G2 + 8 >> 2] = HEAP32[$G_lam_F + 8 >> 2];
   HEAP32[$G_lam_G2 + 12 >> 2] = HEAP32[$G_lam_F + 12 >> 2];
   HEAPF64[$exp_lam_G >> 3] = +HEAPF64[$exp_lam_F >> 3];
  } else HEAP32[$stat_lam_G >> 2] = _coulomb_jwkb(+HEAPF64[$lam_G >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $F_lam_G, $G_lam_G2, $exp_lam_G) | 0;
  HEAP32[$stat_CF1_lam_F >> 2] = _coulomb_CF1(+HEAPF64[$3 >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $F_sign_lam_F5, $Fp_over_F_lam_F4, $CF1_count3) | 0;
  if (!(HEAP32[$4 >> 2] | 0)) {
   HEAP32[$stat_CF1_lam_G >> 2] = HEAP32[$stat_CF1_lam_F >> 2];
   HEAPF64[$F_sign_lam_G >> 3] = +HEAPF64[$F_sign_lam_F5 >> 3];
   HEAPF64[$Fp_over_F_lam_G >> 3] = +HEAPF64[$Fp_over_F_lam_F4 >> 3];
  } else HEAP32[$stat_CF1_lam_G >> 2] = _coulomb_CF1(+HEAPF64[$lam_G >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $F_sign_lam_G, $Fp_over_F_lam_G, $CF1_count3) | 0;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$F_lam_F1 >> 3];
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = +HEAPF64[$F_lam_F1 + 8 >> 3];
  HEAPF64[HEAP32[$7 >> 2] >> 3] = +HEAPF64[$G_lam_G2 >> 3];
  HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = +HEAPF64[$G_lam_G2 + 8 >> 3];
  HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$Fp_over_F_lam_F4 >> 3] * +HEAPF64[$F_lam_F1 >> 3];
  $379 = +Math_abs(+(+HEAPF64[$Fp_over_F_lam_F4 >> 3]));
  HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = $379 * +HEAPF64[$F_lam_F1 + 8 >> 3];
  $388 = +Math_abs(+(+HEAPF64[HEAP32[$6 >> 2] >> 3])) * 4.440892098500626e-16;
  $390 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
  HEAPF64[$390 >> 3] = +HEAPF64[$390 >> 3] + $388;
  HEAPF64[HEAP32[$8 >> 2] >> 3] = +HEAPF64[$Fp_over_F_lam_G >> 3] * +HEAPF64[$G_lam_G2 >> 3] - 1.0 / +HEAPF64[$F_lam_G >> 3];
  $401 = +Math_abs(+(+HEAPF64[$Fp_over_F_lam_G >> 3]));
  HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = $401 * +HEAPF64[$G_lam_G2 + 8 >> 3];
  $409 = +Math_abs(+(1.0 / +HEAPF64[$F_lam_G >> 3]));
  $415 = $409 * +Math_abs(+(+HEAPF64[$F_lam_G + 8 >> 3] / +HEAPF64[$F_lam_G >> 3]));
  $417 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
  HEAPF64[$417 >> 3] = +HEAPF64[$417 >> 3] + $415;
  HEAPF64[HEAP32[$9 >> 2] >> 3] = +HEAPF64[$exp_lam_F >> 3];
  HEAPF64[HEAP32[$10 >> 2] >> 3] = +HEAPF64[$exp_lam_G >> 3];
  if ((HEAP32[$stat_lam_F >> 2] | 0) != 16) if ((HEAP32[$stat_lam_G >> 2] | 0) != 16) {
   if (HEAP32[$stat_lam_F >> 2] | 0) $435 = HEAP32[$stat_lam_F >> 2] | 0; else $435 = (HEAP32[$stat_lam_G >> 2] | 0) != 0 ? HEAP32[$stat_lam_G >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $435;
   $619 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $619 | 0;
  }
  _gsl_error(26264, 26240, 1107, 16);
  HEAP32[$0 >> 2] = 16;
  $619 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $619 | 0;
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAPF64[HEAP32[$7 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAPF64[HEAP32[$8 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAPF64[HEAP32[$9 >> 2] >> 3] = 0.0;
 HEAPF64[HEAP32[$10 >> 2] >> 3] = 0.0;
 _gsl_error(26224, 26240, 912, 1);
 HEAP32[$0 >> 2] = 1;
 $619 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $619 | 0;
}
function _hyperg_1F1_ab_pos($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $109 = 0.0, $141 = 0.0, $150 = 0.0, $154 = 0.0, $156 = 0, $166 = 0, $2 = 0, $234 = 0.0, $245 = 0.0, $249 = 0.0, $251 = 0, $261 = 0, $267 = 0.0, $290 = 0.0, $3 = 0, $32 = 0.0, $330 = 0.0, $333 = 0.0, $353 = 0.0, $356 = 0.0, $369 = 0.0, $371 = 0, $376 = 0.0, $378 = 0, $388 = 0, $39 = 0.0, $4 = 0, $404 = 0.0, $443 = 0.0, $446 = 0.0, $464 = 0.0, $467 = 0.0, $480 = 0.0, $482 = 0, $487 = 0.0, $489 = 0, $499 = 0, $538 = 0.0, $55 = 0.0, $585 = 0.0, $588 = 0.0, $60 = 0.0, $608 = 0.0, $611 = 0.0, $619 = 0, $629 = 0, $638 = 0.0, $672 = 0.0, $741 = 0, $790 = 0.0, $793 = 0.0, $797 = 0, $M0 = 0, $M1 = 0, $Ma = 0, $Ma0b = 0, $Ma0bp1 = 0, $Ma0n = 0, $Ma0nm1 = 0, $Ma0np1 = 0, $Ma0p1b = 0, $Ma11 = 0, $Ma6 = 0, $Mam1 = 0, $Man = 0, $Manm1 = 0, $Manp1 = 0, $Map1 = 0, $Map112 = 0, $Mn = 0, $Mn17 = 0, $Mn37 = 0, $Mn8 = 0, $Mn_true = 0, $Mn_true1 = 0, $Mnm1 = 0, $Mnm116 = 0, $Mnm136 = 0, $Mnm17 = 0, $Mnp1 = 0, $Mnp118 = 0, $Mnp138 = 0, $Mnp19 = 0, $N = 0, $N25 = 0, $N35 = 0, $a0 = 0, $ap = 0, $ax = 0, $eps = 0, $eps13 = 0, $eps26 = 0, $epsa = 0, $epsb = 0, $err_rat = 0, $minim_pair = 0, $minim_pair21 = 0, $minim_pair31 = 0, $n = 0, $n10 = 0, $n19 = 0, $n29 = 0, $n39 = 0, $pair_ratio = 0, $pair_ratio22 = 0, $pair_ratio32 = 0, $r_M0 = 0, $r_M1 = 0, $r_Ma0n = 0, $r_Ma0np1 = 0, $r_Man = 0, $r_Manp1 = 0, $r_Mn = 0, $r_Mnm1 = 0, $ra = 0, $ra5 = 0, $rap = 0, $rap3 = 0, $rat_0 = 0, $rat_023 = 0, $rat_033 = 0, $rat_1 = 0, $rat_124 = 0, $rat_134 = 0, $start_pair = 0, $start_pair20 = 0, $start_pair30 = 0, $stat_0 = 0, $stat_014 = 0, $stat_027 = 0, $stat_040 = 0, $stat_1 = 0, $stat_115 = 0, $stat_128 = 0, $stat_141 = 0, $stat_CF1 = 0, $stat_CF14 = 0, $stat_Mt = 0, $stat_Mt2 = 0, $stat_a0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768 | 0;
 $0 = sp + 760 | 0;
 $1 = sp + 696 | 0;
 $2 = sp + 688 | 0;
 $3 = sp + 680 | 0;
 $4 = sp + 756 | 0;
 $ax = sp + 672 | 0;
 $rap = sp + 664 | 0;
 $stat_CF1 = sp + 752 | 0;
 $ra = sp + 656 | 0;
 $Ma = sp + 648 | 0;
 $Map1 = sp + 640 | 0;
 $Mnp1 = sp + 632 | 0;
 $Mn = sp + 624 | 0;
 $Mnm1 = sp + 616 | 0;
 $Mn_true = sp + 600 | 0;
 $stat_Mt = sp + 748 | 0;
 $n = sp + 592 | 0;
 $Mn_true1 = sp + 576 | 0;
 $stat_Mt2 = sp + 744 | 0;
 $rap3 = sp + 568 | 0;
 $stat_CF14 = sp + 740 | 0;
 $ra5 = sp + 560 | 0;
 $Ma6 = sp + 552 | 0;
 $Mnm17 = sp + 544 | 0;
 $Mn8 = sp + 536 | 0;
 $Mnp19 = sp + 528 | 0;
 $n10 = sp + 520 | 0;
 $N = sp + 512 | 0;
 $eps = sp + 504 | 0;
 $r_M0 = sp + 488 | 0;
 $r_M1 = sp + 472 | 0;
 $stat_0 = sp + 736 | 0;
 $stat_1 = sp + 732 | 0;
 $M0 = sp + 464 | 0;
 $M1 = sp + 456 | 0;
 $Mam1 = sp + 448 | 0;
 $Ma11 = sp + 440 | 0;
 $Map112 = sp + 432 | 0;
 $ap = sp + 424 | 0;
 $start_pair = sp + 416 | 0;
 $minim_pair = sp + 408 | 0;
 $pair_ratio = sp + 400 | 0;
 $rat_0 = sp + 392 | 0;
 $rat_1 = sp + 384 | 0;
 $eps13 = sp + 376 | 0;
 $r_Mnm1 = sp + 360 | 0;
 $r_Mn = sp + 344 | 0;
 $stat_014 = sp + 728 | 0;
 $stat_115 = sp + 724 | 0;
 $Mnm116 = sp + 336 | 0;
 $Mn17 = sp + 328 | 0;
 $Mnp118 = sp + 320 | 0;
 $n19 = sp + 312 | 0;
 $start_pair20 = sp + 304 | 0;
 $minim_pair21 = sp + 296 | 0;
 $pair_ratio22 = sp + 288 | 0;
 $rat_023 = sp + 280 | 0;
 $rat_124 = sp + 272 | 0;
 $N25 = sp + 264 | 0;
 $eps26 = sp + 256 | 0;
 $r_Manp1 = sp + 240 | 0;
 $r_Man = sp + 224 | 0;
 $stat_027 = sp + 720 | 0;
 $stat_128 = sp + 716 | 0;
 $Manp1 = sp + 216 | 0;
 $Man = sp + 208 | 0;
 $Manm1 = sp + 200 | 0;
 $n29 = sp + 192 | 0;
 $start_pair30 = sp + 184 | 0;
 $minim_pair31 = sp + 176 | 0;
 $pair_ratio32 = sp + 168 | 0;
 $rat_033 = sp + 160 | 0;
 $rat_134 = sp + 152 | 0;
 $epsa = sp + 144 | 0;
 $a0 = sp + 136 | 0;
 $N35 = sp + 128 | 0;
 $epsb = sp + 120 | 0;
 $Ma0b = sp + 112 | 0;
 $Ma0bp1 = sp + 104 | 0;
 $Ma0p1b = sp + 96 | 0;
 $stat_a0 = sp + 712 | 0;
 $Mnm136 = sp + 88 | 0;
 $Mn37 = sp + 80 | 0;
 $Mnp138 = sp + 72 | 0;
 $n39 = sp + 64 | 0;
 $err_rat = sp + 56 | 0;
 $r_Ma0np1 = sp + 40 | 0;
 $r_Ma0n = sp + 24 | 0;
 $stat_040 = sp + 708 | 0;
 $stat_141 = sp + 704 | 0;
 $Ma0np1 = sp + 16 | 0;
 $Ma0n = sp + 8 | 0;
 $Ma0nm1 = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$3 >> 3]));
 if (+HEAPF64[$2 >> 3] < 10.0) if (+HEAPF64[$1 >> 3] < 10.0) {
  if (!(+HEAPF64[$ax >> 3] < 5.0)) label = 4;
 } else label = 4; else label = 4;
 do if ((label | 0) == 4) if (!(+HEAPF64[$2 >> 3] > +HEAPF64[$1 >> 3] * +HEAPF64[$ax >> 3])) {
  if (+HEAPF64[$2 >> 3] > +HEAPF64[$1 >> 3]) if (+HEAPF64[$ax >> 3] < 5.0) break;
  if (+HEAPF64[$3 >> 3] < -100.0) {
   $32 = +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$1 >> 3]))), 1.0);
   $39 = $32 * +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3]))), 1.0);
   if ($39 < +Math_abs(+(+HEAPF64[$3 >> 3])) * .7) {
    HEAP32[$0 >> 2] = _hyperg_1F1_asymp_negx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
    $797 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $797 | 0;
   }
  }
  if (+HEAPF64[$3 >> 3] > 100.0) {
   $55 = +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]))), 1.0);
   $60 = $55 * +_GSL_MAX_DBL(+(+Math_abs(+(1.0 - +HEAPF64[$1 >> 3]))), 1.0);
   if ($60 < +Math_abs(+(+HEAPF64[$3 >> 3])) * .7) {
    HEAP32[$0 >> 2] = _hyperg_1F1_asymp_posx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
    $797 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $797 | 0;
   }
  }
  if (+Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3])) <= 1.0) {
   HEAP32[$0 >> 2] = _hyperg_1F1_beps_bgt0(+HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $797 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $797 | 0;
  }
  if (+HEAPF64[$2 >> 3] > +HEAPF64[$1 >> 3]) if (+HEAPF64[$2 >> 3] >= +HEAPF64[$1 >> 3] * 2.0 + +HEAPF64[$3 >> 3]) {
   HEAP32[$stat_CF1 >> 2] = _hyperg_1F1_CF1_p_ser(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $rap) | 0;
   HEAPF64[$ra >> 3] = +HEAPF64[$3 >> 3] / +HEAPF64[$1 >> 3] * +HEAPF64[$rap >> 3] + 1.0;
   HEAPF64[$Ma >> 3] = 1.4916681462400413e-154;
   HEAPF64[$Map1 >> 3] = +HEAPF64[$ra >> 3] * +HEAPF64[$Ma >> 3];
   HEAPF64[$Mnp1 >> 3] = +HEAPF64[$Map1 >> 3];
   HEAPF64[$Mn >> 3] = +HEAPF64[$Ma >> 3];
   HEAPF64[$n >> 3] = +HEAPF64[$1 >> 3];
   while (1) {
    $109 = +HEAPF64[$n >> 3];
    if (!(+HEAPF64[$n >> 3] > .5)) break;
    HEAPF64[$Mnm1 >> 3] = ($109 * +HEAPF64[$Mnp1 >> 3] - (+HEAPF64[$n >> 3] * 2.0 - +HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]) * +HEAPF64[$Mn >> 3]) / (+HEAPF64[$2 >> 3] - +HEAPF64[$n >> 3]);
    HEAPF64[$Mnp1 >> 3] = +HEAPF64[$Mn >> 3];
    HEAPF64[$Mn >> 3] = +HEAPF64[$Mnm1 >> 3];
    HEAPF64[$n >> 3] = +HEAPF64[$n >> 3] - 1.0;
   }
   HEAP32[$stat_Mt >> 2] = _hyperg_1F1_small_a_bgt0($109, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $Mn_true) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Ma >> 3] / +HEAPF64[$Mn >> 3] * +HEAPF64[$Mn_true >> 3];
   $141 = +Math_abs(+(+HEAPF64[$Ma >> 3] / +HEAPF64[$Mn >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $141 * +HEAPF64[$Mn_true + 8 >> 3];
   $150 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0) * 4.440892098500626e-16;
   $154 = $150 * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $156 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$156 >> 3] = +HEAPF64[$156 >> 3] + $154;
   if (HEAP32[$stat_Mt >> 2] | 0) $166 = HEAP32[$stat_Mt >> 2] | 0; else $166 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $166;
   $797 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $797 | 0;
  }
  if (+HEAPF64[$2 >> 3] > +HEAPF64[$1 >> 3]) if (+HEAPF64[$2 >> 3] < +HEAPF64[$1 >> 3] * 2.0 + +HEAPF64[$3 >> 3]) if (+HEAPF64[$2 >> 3] > +HEAPF64[$3 >> 3]) {
   HEAP32[$stat_CF14 >> 2] = _hyperg_1F1_CF1_p_ser(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $rap3) | 0;
   HEAPF64[$ra5 >> 3] = +HEAPF64[$3 >> 3] / +HEAPF64[$1 >> 3] * +HEAPF64[$rap3 >> 3] + 1.0;
   HEAPF64[$Ma6 >> 3] = 1.4916681462400413e-154;
   HEAPF64[$Mnm17 >> 3] = +HEAPF64[$Ma6 >> 3];
   HEAPF64[$Mn8 >> 3] = +HEAPF64[$ra5 >> 3] * +HEAPF64[$Mnm17 >> 3];
   HEAPF64[$n10 >> 3] = +HEAPF64[$1 >> 3] + 1.0;
   while (1) {
    if (!(+HEAPF64[$n10 >> 3] < +HEAPF64[$2 >> 3] - .5)) break;
    HEAPF64[$Mnp19 >> 3] = ((+HEAPF64[$2 >> 3] - +HEAPF64[$n10 >> 3]) * +HEAPF64[$Mnm17 >> 3] + (+HEAPF64[$n10 >> 3] * 2.0 - +HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]) * +HEAPF64[$Mn8 >> 3]) / +HEAPF64[$n10 >> 3];
    HEAPF64[$Mnm17 >> 3] = +HEAPF64[$Mn8 >> 3];
    HEAPF64[$Mn8 >> 3] = +HEAPF64[$Mnp19 >> 3];
    HEAPF64[$n10 >> 3] = +HEAPF64[$n10 >> 3] + 1.0;
   }
   HEAP32[$stat_Mt2 >> 2] = _hyperg_1F1_beps_bgt0(+HEAPF64[$n10 >> 3] - +HEAPF64[$2 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $Mn_true1) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Ma6 >> 3] / +HEAPF64[$Mn8 >> 3] * +HEAPF64[$Mn_true1 >> 3];
   $234 = +Math_abs(+(+HEAPF64[$Ma6 >> 3] / +HEAPF64[$Mn8 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $234 * +HEAPF64[$Mn_true1 + 8 >> 3];
   $245 = (+Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3])) + 1.0) * 4.440892098500626e-16;
   $249 = $245 * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $251 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$251 >> 3] = +HEAPF64[$251 >> 3] + $249;
   if (HEAP32[$stat_Mt2 >> 2] | 0) $261 = HEAP32[$stat_Mt2 >> 2] | 0; else $261 = (HEAP32[$stat_CF14 >> 2] | 0) != 0 ? HEAP32[$stat_CF14 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $261;
   $797 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $797 | 0;
  }
  if (+HEAPF64[$3 >> 3] >= 0.0) {
   $267 = +HEAPF64[$1 >> 3];
   if (+HEAPF64[$2 >> 3] < +HEAPF64[$1 >> 3]) {
    HEAPF64[$N >> 3] = +Math_floor(+($267 - +HEAPF64[$2 >> 3]));
    HEAPF64[$eps >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3] - +HEAPF64[$N >> 3];
    HEAP32[$stat_0 >> 2] = _hyperg_1F1_beps_bgt0(+HEAPF64[$eps >> 3] - 1.0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_M0) | 0;
    HEAP32[$stat_1 >> 2] = _hyperg_1F1_beps_bgt0(+HEAPF64[$eps >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_M1) | 0;
    HEAPF64[$M0 >> 3] = +HEAPF64[$r_M0 >> 3];
    HEAPF64[$M1 >> 3] = +HEAPF64[$r_M1 >> 3];
    HEAPF64[$Mam1 >> 3] = +HEAPF64[$M0 >> 3];
    HEAPF64[$Ma11 >> 3] = +HEAPF64[$M1 >> 3];
    $290 = +Math_abs(+(+HEAPF64[$M0 >> 3]));
    HEAPF64[$start_pair >> 3] = $290 + +Math_abs(+(+HEAPF64[$M1 >> 3]));
    HEAPF64[$minim_pair >> 3] = 1.7976931348623157e+308;
    HEAPF64[$rat_0 >> 3] = +Math_abs(+(+HEAPF64[$r_M0 + 8 >> 3] / +HEAPF64[$r_M0 >> 3]));
    HEAPF64[$rat_1 >> 3] = +Math_abs(+(+HEAPF64[$r_M1 + 8 >> 3] / +HEAPF64[$r_M1 >> 3]));
    HEAPF64[$ap >> 3] = +HEAPF64[$2 >> 3] + +HEAPF64[$eps >> 3];
    while (1) {
     if (!(+HEAPF64[$ap >> 3] < +HEAPF64[$1 >> 3] - .1)) break;
     HEAPF64[$Map112 >> 3] = ((+HEAPF64[$2 >> 3] - +HEAPF64[$ap >> 3]) * +HEAPF64[$Mam1 >> 3] + (+HEAPF64[$ap >> 3] * 2.0 - +HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]) * +HEAPF64[$Ma11 >> 3]) / +HEAPF64[$ap >> 3];
     HEAPF64[$Mam1 >> 3] = +HEAPF64[$Ma11 >> 3];
     HEAPF64[$Ma11 >> 3] = +HEAPF64[$Map112 >> 3];
     $330 = +Math_abs(+(+HEAPF64[$Mam1 >> 3]));
     $333 = $330 + +Math_abs(+(+HEAPF64[$Ma11 >> 3]));
     HEAPF64[$minim_pair >> 3] = +_GSL_MIN_DBL(+$333, +(+HEAPF64[$minim_pair >> 3]));
     HEAPF64[$ap >> 3] = +HEAPF64[$ap >> 3] + 1.0;
    }
    HEAPF64[$pair_ratio >> 3] = +HEAPF64[$start_pair >> 3] / +HEAPF64[$minim_pair >> 3];
    HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Ma11 >> 3];
    $353 = (+HEAPF64[$rat_0 >> 3] + +HEAPF64[$rat_1 >> 3] + 2.220446049250313e-16) * 2.0 * (+Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3])) + 1.0);
    $356 = $353 * +Math_abs(+(+HEAPF64[$Ma11 >> 3]));
    HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $356;
    $369 = (+HEAPF64[$rat_0 >> 3] + +HEAPF64[$rat_1 >> 3]) * 2.0 * +HEAPF64[$pair_ratio >> 3] * +HEAPF64[$pair_ratio >> 3] * +Math_abs(+(+HEAPF64[$Ma11 >> 3]));
    $371 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
    HEAPF64[$371 >> 3] = +HEAPF64[$371 >> 3] + $369;
    $376 = +Math_abs(+(+HEAPF64[$Ma11 >> 3])) * 4.440892098500626e-16;
    $378 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
    HEAPF64[$378 >> 3] = +HEAPF64[$378 >> 3] + $376;
    if (HEAP32[$stat_0 >> 2] | 0) $388 = HEAP32[$stat_0 >> 2] | 0; else $388 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
    HEAP32[$0 >> 2] = $388;
    $797 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $797 | 0;
   } else {
    HEAPF64[$eps13 >> 3] = $267 - +Math_floor(+(+HEAPF64[$1 >> 3]));
    HEAP32[$stat_014 >> 2] = _hyperg_1F1_small_a_bgt0(+HEAPF64[$eps13 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Mnm1) | 0;
    HEAP32[$stat_115 >> 2] = _hyperg_1F1_small_a_bgt0(+HEAPF64[$eps13 >> 3] + 1.0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Mn) | 0;
    HEAPF64[$Mnm116 >> 3] = +HEAPF64[$r_Mnm1 >> 3];
    HEAPF64[$Mn17 >> 3] = +HEAPF64[$r_Mn >> 3];
    $404 = +Math_abs(+(+HEAPF64[$Mn17 >> 3]));
    HEAPF64[$start_pair20 >> 3] = $404 + +Math_abs(+(+HEAPF64[$Mnm116 >> 3]));
    HEAPF64[$minim_pair21 >> 3] = 1.7976931348623157e+308;
    HEAPF64[$rat_023 >> 3] = +Math_abs(+(+HEAPF64[$r_Mnm1 + 8 >> 3] / +HEAPF64[$r_Mnm1 >> 3]));
    HEAPF64[$rat_124 >> 3] = +Math_abs(+(+HEAPF64[$r_Mn + 8 >> 3] / +HEAPF64[$r_Mn >> 3]));
    HEAPF64[$n19 >> 3] = +HEAPF64[$eps13 >> 3] + 1.0;
    while (1) {
     if (!(+HEAPF64[$n19 >> 3] < +HEAPF64[$1 >> 3] - .1)) break;
     HEAPF64[$Mnp118 >> 3] = ((+HEAPF64[$2 >> 3] - +HEAPF64[$n19 >> 3]) * +HEAPF64[$Mnm116 >> 3] + (+HEAPF64[$n19 >> 3] * 2.0 - +HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]) * +HEAPF64[$Mn17 >> 3]) / +HEAPF64[$n19 >> 3];
     HEAPF64[$Mnm116 >> 3] = +HEAPF64[$Mn17 >> 3];
     HEAPF64[$Mn17 >> 3] = +HEAPF64[$Mnp118 >> 3];
     $443 = +Math_abs(+(+HEAPF64[$Mn17 >> 3]));
     $446 = $443 + +Math_abs(+(+HEAPF64[$Mnm116 >> 3]));
     HEAPF64[$minim_pair21 >> 3] = +_GSL_MIN_DBL(+$446, +(+HEAPF64[$minim_pair21 >> 3]));
     HEAPF64[$n19 >> 3] = +HEAPF64[$n19 >> 3] + 1.0;
    }
    HEAPF64[$pair_ratio22 >> 3] = +HEAPF64[$start_pair20 >> 3] / +HEAPF64[$minim_pair21 >> 3];
    HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Mn17 >> 3];
    $464 = (+HEAPF64[$rat_023 >> 3] + +HEAPF64[$rat_124 >> 3] + 2.220446049250313e-16) * 2.0 * (+Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0);
    $467 = $464 * +Math_abs(+(+HEAPF64[$Mn17 >> 3]));
    HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $467;
    $480 = (+HEAPF64[$rat_023 >> 3] + +HEAPF64[$rat_124 >> 3]) * 2.0 * +HEAPF64[$pair_ratio22 >> 3] * +HEAPF64[$pair_ratio22 >> 3] * +Math_abs(+(+HEAPF64[$Mn17 >> 3]));
    $482 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
    HEAPF64[$482 >> 3] = +HEAPF64[$482 >> 3] + $480;
    $487 = +Math_abs(+(+HEAPF64[$Mn17 >> 3])) * 4.440892098500626e-16;
    $489 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
    HEAPF64[$489 >> 3] = +HEAPF64[$489 >> 3] + $487;
    if (HEAP32[$stat_014 >> 2] | 0) $499 = HEAP32[$stat_014 >> 2] | 0; else $499 = (HEAP32[$stat_115 >> 2] | 0) != 0 ? HEAP32[$stat_115 >> 2] | 0 : 0;
    HEAP32[$0 >> 2] = $499;
    $797 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $797 | 0;
   }
  }
  if (!(+HEAPF64[$1 >> 3] <= (+HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3]) * .5)) if (!(+HEAPF64[$1 >> 3] >= -+HEAPF64[$3 >> 3])) {
   HEAPF64[$epsa >> 3] = +HEAPF64[$1 >> 3] - +Math_floor(+(+HEAPF64[$1 >> 3]));
   $638 = +Math_floor(+((+HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3]) * .5));
   HEAPF64[$a0 >> 3] = $638 + +HEAPF64[$epsa >> 3];
   HEAPF64[$N35 >> 3] = +Math_floor(+(+HEAPF64[$a0 >> 3] - +HEAPF64[$2 >> 3]));
   HEAPF64[$epsb >> 3] = +HEAPF64[$N35 >> 3] + 1.0 - +HEAPF64[$a0 >> 3] + +HEAPF64[$2 >> 3];
   HEAP32[$stat_040 >> 2] = _hyperg_1F1_beps_bgt0(-+HEAPF64[$epsb >> 3], +HEAPF64[$a0 >> 3] + +HEAPF64[$epsb >> 3], +HEAPF64[$3 >> 3], $r_Ma0np1) | 0;
   HEAP32[$stat_141 >> 2] = _hyperg_1F1_beps_bgt0(1.0 - +HEAPF64[$epsb >> 3], +HEAPF64[$a0 >> 3] + +HEAPF64[$epsb >> 3] - 1.0, +HEAPF64[$3 >> 3], $r_Ma0n) | 0;
   HEAPF64[$Ma0np1 >> 3] = +HEAPF64[$r_Ma0np1 >> 3];
   HEAPF64[$Ma0n >> 3] = +HEAPF64[$r_Ma0n >> 3];
   $672 = +Math_abs(+(+HEAPF64[$r_Ma0np1 + 8 >> 3] / +HEAPF64[$r_Ma0np1 >> 3]));
   HEAPF64[$err_rat >> 3] = $672 + +Math_abs(+(+HEAPF64[$r_Ma0n + 8 >> 3] / +HEAPF64[$r_Ma0n >> 3]));
   HEAPF64[$n39 >> 3] = +HEAPF64[$a0 >> 3] + +HEAPF64[$epsb >> 3] - 1.0;
   while (1) {
    if (!(+HEAPF64[$n39 >> 3] > +HEAPF64[$2 >> 3] + .1)) break;
    HEAPF64[$Ma0nm1 >> 3] = (-+HEAPF64[$n39 >> 3] * (1.0 - +HEAPF64[$n39 >> 3] - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ma0n >> 3] - +HEAPF64[$3 >> 3] * (+HEAPF64[$n39 >> 3] - +HEAPF64[$a0 >> 3]) * +HEAPF64[$Ma0np1 >> 3]) / (+HEAPF64[$n39 >> 3] * (+HEAPF64[$n39 >> 3] - 1.0));
    HEAPF64[$Ma0np1 >> 3] = +HEAPF64[$Ma0n >> 3];
    HEAPF64[$Ma0n >> 3] = +HEAPF64[$Ma0nm1 >> 3];
    HEAPF64[$n39 >> 3] = +HEAPF64[$n39 >> 3] - 1.0;
   }
   HEAPF64[$Ma0bp1 >> 3] = +HEAPF64[$Ma0np1 >> 3];
   HEAPF64[$Ma0b >> 3] = +HEAPF64[$Ma0n >> 3];
   HEAPF64[$Ma0p1b >> 3] = (+HEAPF64[$2 >> 3] * (+HEAPF64[$a0 >> 3] + +HEAPF64[$3 >> 3]) * +HEAPF64[$Ma0b >> 3] + +HEAPF64[$3 >> 3] * (+HEAPF64[$a0 >> 3] - +HEAPF64[$2 >> 3]) * +HEAPF64[$Ma0bp1 >> 3]) / (+HEAPF64[$a0 >> 3] * +HEAPF64[$2 >> 3]);
   if (HEAP32[$stat_040 >> 2] | 0) $741 = HEAP32[$stat_040 >> 2] | 0; else $741 = (HEAP32[$stat_141 >> 2] | 0) != 0 ? HEAP32[$stat_141 >> 2] | 0 : 0;
   HEAP32[$stat_a0 >> 2] = $741;
   L86 : do if (+HEAPF64[$a0 >> 3] >= +HEAPF64[$1 >> 3] - .1) HEAPF64[$Mn37 >> 3] = +HEAPF64[$Ma0b >> 3]; else {
    if (+HEAPF64[$a0 >> 3] + 1.0 >= +HEAPF64[$1 >> 3] - .1) {
     HEAPF64[$Mn37 >> 3] = +HEAPF64[$Ma0p1b >> 3];
     break;
    }
    HEAPF64[$Mnm136 >> 3] = +HEAPF64[$Ma0b >> 3];
    HEAPF64[$Mn37 >> 3] = +HEAPF64[$Ma0p1b >> 3];
    HEAPF64[$n39 >> 3] = +HEAPF64[$a0 >> 3] + 1.0;
    while (1) {
     if (!(+HEAPF64[$n39 >> 3] < +HEAPF64[$1 >> 3] - .1)) break L86;
     HEAPF64[$Mnp138 >> 3] = ((+HEAPF64[$2 >> 3] - +HEAPF64[$n39 >> 3]) * +HEAPF64[$Mnm136 >> 3] + (+HEAPF64[$n39 >> 3] * 2.0 - +HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]) * +HEAPF64[$Mn37 >> 3]) / +HEAPF64[$n39 >> 3];
     HEAPF64[$Mnm136 >> 3] = +HEAPF64[$Mn37 >> 3];
     HEAPF64[$Mn37 >> 3] = +HEAPF64[$Mnp138 >> 3];
     HEAPF64[$n39 >> 3] = +HEAPF64[$n39 >> 3] + 1.0;
    }
   } while (0);
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Mn37 >> 3];
   $790 = (+HEAPF64[$err_rat >> 3] + 2.220446049250313e-16) * (+Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3])) + 1.0);
   $793 = $790 * +Math_abs(+(+HEAPF64[$Mn37 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $793;
   HEAP32[$0 >> 2] = HEAP32[$stat_a0 >> 2];
   $797 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $797 | 0;
  }
  HEAPF64[$N25 >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3]));
  HEAPF64[$eps26 >> 3] = +HEAPF64[$N25 >> 3] + 1.0 - +HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3];
  HEAP32[$stat_027 >> 2] = _hyperg_1F1_beps_bgt0(-+HEAPF64[$eps26 >> 3], +HEAPF64[$1 >> 3] + +HEAPF64[$eps26 >> 3], +HEAPF64[$3 >> 3], $r_Manp1) | 0;
  HEAP32[$stat_128 >> 2] = _hyperg_1F1_beps_bgt0(1.0 - +HEAPF64[$eps26 >> 3], +HEAPF64[$1 >> 3] + +HEAPF64[$eps26 >> 3] - 1.0, +HEAPF64[$3 >> 3], $r_Man) | 0;
  HEAPF64[$Manp1 >> 3] = +HEAPF64[$r_Manp1 >> 3];
  HEAPF64[$Man >> 3] = +HEAPF64[$r_Man >> 3];
  $538 = +Math_abs(+(+HEAPF64[$Manp1 >> 3]));
  HEAPF64[$start_pair30 >> 3] = $538 + +Math_abs(+(+HEAPF64[$Man >> 3]));
  HEAPF64[$minim_pair31 >> 3] = 1.7976931348623157e+308;
  HEAPF64[$rat_033 >> 3] = +Math_abs(+(+HEAPF64[$r_Manp1 + 8 >> 3] / +HEAPF64[$r_Manp1 >> 3]));
  HEAPF64[$rat_134 >> 3] = +Math_abs(+(+HEAPF64[$r_Man + 8 >> 3] / +HEAPF64[$r_Man >> 3]));
  HEAPF64[$n29 >> 3] = +HEAPF64[$1 >> 3] + +HEAPF64[$eps26 >> 3] - 1.0;
  while (1) {
   if (!(+HEAPF64[$n29 >> 3] > +HEAPF64[$2 >> 3] + .1)) break;
   HEAPF64[$Manm1 >> 3] = (-+HEAPF64[$n29 >> 3] * (1.0 - +HEAPF64[$n29 >> 3] - +HEAPF64[$3 >> 3]) * +HEAPF64[$Man >> 3] - +HEAPF64[$3 >> 3] * (+HEAPF64[$n29 >> 3] - +HEAPF64[$1 >> 3]) * +HEAPF64[$Manp1 >> 3]) / (+HEAPF64[$n29 >> 3] * (+HEAPF64[$n29 >> 3] - 1.0));
   HEAPF64[$Manp1 >> 3] = +HEAPF64[$Man >> 3];
   HEAPF64[$Man >> 3] = +HEAPF64[$Manm1 >> 3];
   $585 = +Math_abs(+(+HEAPF64[$Manp1 >> 3]));
   $588 = $585 + +Math_abs(+(+HEAPF64[$Man >> 3]));
   HEAPF64[$minim_pair31 >> 3] = +_GSL_MIN_DBL(+$588, +(+HEAPF64[$minim_pair31 >> 3]));
   HEAPF64[$n29 >> 3] = +HEAPF64[$n29 >> 3] - 1.0;
  }
  HEAPF64[$pair_ratio32 >> 3] = +HEAPF64[$start_pair30 >> 3] / +HEAPF64[$minim_pair31 >> 3];
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Man >> 3];
  $608 = (+HEAPF64[$rat_033 >> 3] + +HEAPF64[$rat_134 >> 3] + 2.220446049250313e-16) * 2.0 * (+Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3])) + 1.0);
  $611 = $608 * +Math_abs(+(+HEAPF64[$Man >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $611;
  $619 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$619 >> 3] = +HEAPF64[$619 >> 3] * (+HEAPF64[$pair_ratio32 >> 3] * +HEAPF64[$pair_ratio32 >> 3] + 1.0);
  if (HEAP32[$stat_027 >> 2] | 0) $629 = HEAP32[$stat_027 >> 2] | 0; else $629 = (HEAP32[$stat_128 >> 2] | 0) != 0 ? HEAP32[$stat_128 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $629;
  $797 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $797 | 0;
 } while (0);
 HEAP32[$0 >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 $797 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $797 | 0;
}
function _hyperg_2F1_reflect($a, $b, $c, $x, $result) {
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $164 = 0, $2 = 0, $243 = 0.0, $247 = 0.0, $287 = 0.0, $291 = 0.0, $295 = 0.0, $3 = 0, $324 = 0, $344 = 0.0, $348 = 0.0, $350 = 0, $356 = 0.0, $358 = 0, $379 = 0, $385 = 0, $4 = 0, $5 = 0, $572 = 0.0, $578 = 0.0, $585 = 0.0, $591 = 0.0, $593 = 0, $599 = 0.0, $605 = 0.0, $607 = 0, $613 = 0.0, $615 = 0, $618 = 0, $F1 = 0, $F13 = 0, $F2 = 0, $F24 = 0, $ad = 0, $d = 0, $d1 = 0, $d2 = 0, $d_integer = 0, $delta = 0, $fact = 0, $i = 0, $intd = 0, $j = 0, $j2 = 0, $ln_g1ca = 0, $ln_g1cb = 0, $ln_g2a = 0, $ln_g2b = 0, $ln_gc = 0, $ln_gd = 0, $ln_gmd = 0, $ln_omx = 0, $ln_pre1_err = 0, $ln_pre1_err10 = 0, $ln_pre1_err7 = 0, $ln_pre1_val = 0, $ln_pre1_val5 = 0, $ln_pre1_val9 = 0, $ln_pre2_err = 0, $ln_pre2_err12 = 0, $ln_pre2_err8 = 0, $ln_pre2_val = 0, $ln_pre2_val11 = 0, $ln_pre2_val6 = 0, $lng_ad = 0, $lng_ad1 = 0, $lng_ad2 = 0, $lng_bd1 = 0, $lng_bd2 = 0, $lng_c = 0, $maxiter = 0, $ok1 = 0, $ok2 = 0, $pre1 = 0, $pre2 = 0, $psi_1 = 0, $psi_1pd = 0, $psi_apd1 = 0, $psi_bpd1 = 0, $psi_err = 0, $psi_val = 0, $sgn1 = 0, $sgn2 = 0, $sgn_2 = 0, $sgn_g1ca = 0, $sgn_g1cb = 0, $sgn_g2a = 0, $sgn_g2b = 0, $sgn_gc = 0, $sgn_gd = 0, $sgn_gmd = 0, $stat_1ca = 0, $stat_1cb = 0, $stat_1pd = 0, $stat_2a = 0, $stat_2b = 0, $stat_F2 = 0, $stat_ad = 0, $stat_ad1 = 0, $stat_ad2 = 0, $stat_apd1 = 0, $stat_bd1 = 0, $stat_bd2 = 0, $stat_bpd1 = 0, $stat_c = 0, $stat_dall = 0, $stat_e = 0, $stat_e1 = 0, $status_F1 = 0, $status_F2 = 0, $sum1 = 0, $sum2_err = 0, $sum2_val = 0, $term = 0, $term1 = 0, $term2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816 | 0;
 $0 = sp + 800 | 0;
 $1 = sp + 680 | 0;
 $2 = sp + 672 | 0;
 $3 = sp + 664 | 0;
 $4 = sp + 656 | 0;
 $5 = sp + 796 | 0;
 $d = sp + 648 | 0;
 $intd = sp + 792 | 0;
 $d_integer = sp + 788 | 0;
 $ln_omx = sp + 640 | 0;
 $ad = sp + 632 | 0;
 $stat_F2 = sp + 784 | 0;
 $sgn_2 = sp + 624 | 0;
 $F1 = sp + 608 | 0;
 $F2 = sp + 592 | 0;
 $d1 = sp + 584 | 0;
 $d2 = sp + 576 | 0;
 $lng_c = sp + 560 | 0;
 $lng_ad2 = sp + 544 | 0;
 $lng_bd2 = sp + 528 | 0;
 $stat_c = sp + 780 | 0;
 $stat_ad2 = sp + 776 | 0;
 $stat_bd2 = sp + 772 | 0;
 $lng_ad = sp + 512 | 0;
 $lng_ad1 = sp + 496 | 0;
 $lng_bd1 = sp + 480 | 0;
 $stat_ad = sp + 768 | 0;
 $stat_ad1 = sp + 764 | 0;
 $stat_bd1 = sp + 760 | 0;
 $i = sp + 756 | 0;
 $sum1 = sp + 472 | 0;
 $term = sp + 464 | 0;
 $ln_pre1_val = sp + 456 | 0;
 $ln_pre1_err = sp + 448 | 0;
 $stat_e = sp + 752 | 0;
 $j = sp + 748 | 0;
 $maxiter = sp + 744 | 0;
 $psi_1 = sp + 440 | 0;
 $psi_1pd = sp + 424 | 0;
 $psi_apd1 = sp + 408 | 0;
 $psi_bpd1 = sp + 392 | 0;
 $stat_1pd = sp + 740 | 0;
 $stat_apd1 = sp + 736 | 0;
 $stat_bpd1 = sp + 732 | 0;
 $stat_dall = sp + 728 | 0;
 $psi_val = sp + 384 | 0;
 $psi_err = sp + 376 | 0;
 $fact = sp + 368 | 0;
 $sum2_val = sp + 360 | 0;
 $sum2_err = sp + 352 | 0;
 $ln_pre2_val = sp + 344 | 0;
 $ln_pre2_err = sp + 336 | 0;
 $stat_e1 = sp + 724 | 0;
 $j2 = sp + 720 | 0;
 $term1 = sp + 328 | 0;
 $term2 = sp + 320 | 0;
 $delta = sp + 312 | 0;
 $pre1 = sp + 296 | 0;
 $pre2 = sp + 280 | 0;
 $sgn1 = sp + 272 | 0;
 $sgn2 = sp + 264 | 0;
 $F13 = sp + 248 | 0;
 $F24 = sp + 232 | 0;
 $status_F1 = sp + 716 | 0;
 $status_F2 = sp + 712 | 0;
 $ln_g1ca = sp + 216 | 0;
 $ln_g1cb = sp + 200 | 0;
 $ln_g2a = sp + 184 | 0;
 $ln_g2b = sp + 168 | 0;
 $sgn_g1ca = sp + 160 | 0;
 $sgn_g1cb = sp + 152 | 0;
 $sgn_g2a = sp + 144 | 0;
 $sgn_g2b = sp + 136 | 0;
 $stat_1ca = sp + 708 | 0;
 $stat_1cb = sp + 704 | 0;
 $stat_2a = sp + 700 | 0;
 $stat_2b = sp + 696 | 0;
 $ok1 = sp + 692 | 0;
 $ok2 = sp + 688 | 0;
 $ln_gc = sp + 120 | 0;
 $ln_gd = sp + 104 | 0;
 $ln_gmd = sp + 88 | 0;
 $sgn_gc = sp + 80 | 0;
 $sgn_gd = sp + 72 | 0;
 $sgn_gmd = sp + 64 | 0;
 $ln_pre1_val5 = sp + 56 | 0;
 $ln_pre2_val6 = sp + 48 | 0;
 $ln_pre1_err7 = sp + 40 | 0;
 $ln_pre2_err8 = sp + 32 | 0;
 $ln_pre1_val9 = sp + 24 | 0;
 $ln_pre1_err10 = sp + 16 | 0;
 $ln_pre2_val11 = sp + 8 | 0;
 $ln_pre2_err12 = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$d >> 3] = +HEAPF64[$3 >> 3] - +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3];
 HEAP32[$intd >> 2] = ~~+Math_floor(+(+HEAPF64[$d >> 3] + .5));
 HEAP32[$d_integer >> 2] = +Math_abs(+(+HEAPF64[$d >> 3] - +(HEAP32[$intd >> 2] | 0))) < 2.220446049250313e-13 & 1;
 if (!(HEAP32[$d_integer >> 2] | 0)) {
  HEAP32[$stat_1ca >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$3 >> 3] - +HEAPF64[$1 >> 3], $ln_g1ca, $sgn_g1ca) | 0;
  HEAP32[$stat_1cb >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$3 >> 3] - +HEAPF64[$2 >> 3], $ln_g1cb, $sgn_g1cb) | 0;
  HEAP32[$stat_2a >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3], $ln_g2a, $sgn_g2a) | 0;
  HEAP32[$stat_2b >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3], $ln_g2b, $sgn_g2b) | 0;
  if (!(HEAP32[$stat_1ca >> 2] | 0)) $379 = (HEAP32[$stat_1cb >> 2] | 0) == 0; else $379 = 0;
  HEAP32[$ok1 >> 2] = $379 & 1;
  if (!(HEAP32[$stat_2a >> 2] | 0)) $385 = (HEAP32[$stat_2b >> 2] | 0) == 0; else $385 = 0;
  HEAP32[$ok2 >> 2] = $385 & 1;
  _gsl_sf_lngamma_sgn_e(+HEAPF64[$3 >> 3], $ln_gc, $sgn_gc) | 0;
  _gsl_sf_lngamma_sgn_e(+HEAPF64[$d >> 3], $ln_gd, $sgn_gd) | 0;
  _gsl_sf_lngamma_sgn_e(-+HEAPF64[$d >> 3], $ln_gmd, $sgn_gmd) | 0;
  HEAPF64[$sgn1 >> 3] = +HEAPF64[$sgn_gc >> 3] * +HEAPF64[$sgn_gd >> 3] * +HEAPF64[$sgn_g1ca >> 3] * +HEAPF64[$sgn_g1cb >> 3];
  HEAPF64[$sgn2 >> 3] = +HEAPF64[$sgn_gc >> 3] * +HEAPF64[$sgn_gmd >> 3] * +HEAPF64[$sgn_g2a >> 3] * +HEAPF64[$sgn_g2b >> 3];
  do if (HEAP32[$ok1 >> 2] | 0) if (HEAP32[$ok2 >> 2] | 0) {
   HEAPF64[$ln_pre1_val5 >> 3] = +HEAPF64[$ln_gc >> 3] + +HEAPF64[$ln_gd >> 3] - +HEAPF64[$ln_g1ca >> 3] - +HEAPF64[$ln_g1cb >> 3];
   HEAPF64[$ln_pre2_val6 >> 3] = +HEAPF64[$ln_gc >> 3] + +HEAPF64[$ln_gmd >> 3] - +HEAPF64[$ln_g2a >> 3] - +HEAPF64[$ln_g2b >> 3] + +HEAPF64[$d >> 3] * +Math_log(+(1.0 - +HEAPF64[$4 >> 3]));
   HEAPF64[$ln_pre1_err7 >> 3] = +HEAPF64[$ln_gc + 8 >> 3] + +HEAPF64[$ln_gd + 8 >> 3] + +HEAPF64[$ln_g1ca + 8 >> 3] + +HEAPF64[$ln_g1cb + 8 >> 3];
   HEAPF64[$ln_pre2_err8 >> 3] = +HEAPF64[$ln_gc + 8 >> 3] + +HEAPF64[$ln_gmd + 8 >> 3] + +HEAPF64[$ln_g2a + 8 >> 3] + +HEAPF64[$ln_g2b + 8 >> 3];
   if (+HEAPF64[$ln_pre1_val5 >> 3] < 709.782712893384) if (+HEAPF64[$ln_pre2_val6 >> 3] < 709.782712893384) {
    _gsl_sf_exp_err_e(+HEAPF64[$ln_pre1_val5 >> 3], +HEAPF64[$ln_pre1_err7 >> 3], $pre1) | 0;
    _gsl_sf_exp_err_e(+HEAPF64[$ln_pre2_val6 >> 3], +HEAPF64[$ln_pre2_err8 >> 3], $pre2) | 0;
    HEAPF64[$pre1 >> 3] = +HEAPF64[$pre1 >> 3] * +HEAPF64[$sgn1 >> 3];
    HEAPF64[$pre2 >> 3] = +HEAPF64[$pre2 >> 3] * +HEAPF64[$sgn2 >> 3];
    break;
   }
   HEAPF64[HEAP32[$5 >> 2] >> 3] = inf;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = inf;
   _gsl_error(52120, 51896, 558, 16);
   HEAP32[$0 >> 2] = 16;
   $618 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $618 | 0;
  } else label = 49; else label = 49; while (0);
  do if ((label | 0) == 49) {
   if (HEAP32[$ok1 >> 2] | 0) if (!(HEAP32[$ok2 >> 2] | 0)) {
    HEAPF64[$ln_pre1_val9 >> 3] = +HEAPF64[$ln_gc >> 3] + +HEAPF64[$ln_gd >> 3] - +HEAPF64[$ln_g1ca >> 3] - +HEAPF64[$ln_g1cb >> 3];
    HEAPF64[$ln_pre1_err10 >> 3] = +HEAPF64[$ln_gc + 8 >> 3] + +HEAPF64[$ln_gd + 8 >> 3] + +HEAPF64[$ln_g1ca + 8 >> 3] + +HEAPF64[$ln_g1cb + 8 >> 3];
    if (+HEAPF64[$ln_pre1_val9 >> 3] < 709.782712893384) {
     _gsl_sf_exp_err_e(+HEAPF64[$ln_pre1_val9 >> 3], +HEAPF64[$ln_pre1_err10 >> 3], $pre1) | 0;
     HEAPF64[$pre1 >> 3] = +HEAPF64[$pre1 >> 3] * +HEAPF64[$sgn1 >> 3];
     HEAPF64[$pre2 >> 3] = 0.0;
     HEAPF64[$pre2 + 8 >> 3] = 0.0;
     break;
    }
    HEAPF64[HEAP32[$5 >> 2] >> 3] = inf;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = inf;
    _gsl_error(52120, 51896, 571, 16);
    HEAP32[$0 >> 2] = 16;
    $618 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $618 | 0;
   }
   if (!(HEAP32[$ok1 >> 2] | 0)) if (HEAP32[$ok2 >> 2] | 0) {
    HEAPF64[$ln_pre2_val11 >> 3] = +HEAPF64[$ln_gc >> 3] + +HEAPF64[$ln_gmd >> 3] - +HEAPF64[$ln_g2a >> 3] - +HEAPF64[$ln_g2b >> 3] + +HEAPF64[$d >> 3] * +Math_log(+(1.0 - +HEAPF64[$4 >> 3]));
    HEAPF64[$ln_pre2_err12 >> 3] = +HEAPF64[$ln_gc + 8 >> 3] + +HEAPF64[$ln_gmd + 8 >> 3] + +HEAPF64[$ln_g2a + 8 >> 3] + +HEAPF64[$ln_g2b + 8 >> 3];
    if (+HEAPF64[$ln_pre2_val11 >> 3] < 709.782712893384) {
     HEAPF64[$pre1 >> 3] = 0.0;
     HEAPF64[$pre1 + 8 >> 3] = 0.0;
     _gsl_sf_exp_err_e(+HEAPF64[$ln_pre2_val11 >> 3], +HEAPF64[$ln_pre2_err12 >> 3], $pre2) | 0;
     HEAPF64[$pre2 >> 3] = +HEAPF64[$pre2 >> 3] * +HEAPF64[$sgn2 >> 3];
     break;
    }
    HEAPF64[HEAP32[$5 >> 2] >> 3] = inf;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = inf;
    _gsl_error(52120, 51896, 584, 16);
    HEAP32[$0 >> 2] = 16;
    $618 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $618 | 0;
   }
   HEAPF64[$pre1 >> 3] = 0.0;
   HEAPF64[$pre2 >> 3] = 0.0;
   HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
   _gsl_error(52136, 51896, 590, 15);
   HEAP32[$0 >> 2] = 15;
   $618 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $618 | 0;
  } while (0);
  HEAP32[$status_F1 >> 2] = _hyperg_2F1_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], 1.0 - +HEAPF64[$d >> 3], 1.0 - +HEAPF64[$4 >> 3], $F13) | 0;
  HEAP32[$status_F2 >> 2] = _hyperg_2F1_series(+HEAPF64[$3 >> 3] - +HEAPF64[$1 >> 3], +HEAPF64[$3 >> 3] - +HEAPF64[$2 >> 3], +HEAPF64[$d >> 3] + 1.0, 1.0 - +HEAPF64[$4 >> 3], $F24) | 0;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$pre1 >> 3] * +HEAPF64[$F13 >> 3] + +HEAPF64[$pre2 >> 3] * +HEAPF64[$F24 >> 3];
  $572 = +Math_abs(+(+HEAPF64[$pre1 >> 3] * +HEAPF64[$F13 + 8 >> 3]));
  $578 = $572 + +Math_abs(+(+HEAPF64[$pre2 >> 3] * +HEAPF64[$F24 + 8 >> 3]));
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $578;
  $585 = +Math_abs(+(+HEAPF64[$pre1 + 8 >> 3] * +HEAPF64[$F13 >> 3]));
  $591 = $585 + +Math_abs(+(+HEAPF64[$pre2 + 8 >> 3] * +HEAPF64[$F24 >> 3]));
  $593 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$593 >> 3] = +HEAPF64[$593 >> 3] + $591;
  $599 = +Math_abs(+(+HEAPF64[$pre1 >> 3] * +HEAPF64[$F13 >> 3]));
  $605 = ($599 + +Math_abs(+(+HEAPF64[$pre2 >> 3] * +HEAPF64[$F24 >> 3]))) * 4.440892098500626e-16;
  $607 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$607 >> 3] = +HEAPF64[$607 >> 3] + $605;
  $613 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * 4.440892098500626e-16;
  $615 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$615 >> 3] = +HEAPF64[$615 >> 3] + $613;
  HEAP32[$0 >> 2] = 0;
  $618 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $618 | 0;
 }
 HEAPF64[$ln_omx >> 3] = +Math_log(+(1.0 - +HEAPF64[$4 >> 3]));
 HEAPF64[$ad >> 3] = +Math_abs(+(+HEAPF64[$d >> 3]));
 HEAP32[$stat_F2 >> 2] = 0;
 if (+HEAPF64[$d >> 3] >= 0.0) {
  HEAPF64[$d1 >> 3] = +HEAPF64[$d >> 3];
  HEAPF64[$d2 >> 3] = 0.0;
 } else {
  HEAPF64[$d1 >> 3] = 0.0;
  HEAPF64[$d2 >> 3] = +HEAPF64[$d >> 3];
 }
 HEAP32[$stat_ad2 >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3] + +HEAPF64[$d2 >> 3], $lng_ad2) | 0;
 HEAP32[$stat_bd2 >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$2 >> 3] + +HEAPF64[$d2 >> 3], $lng_bd2) | 0;
 HEAP32[$stat_c >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$3 >> 3], $lng_c) | 0;
 do if (+HEAPF64[$ad >> 3] < 2.220446049250313e-16) {
  HEAPF64[$F1 >> 3] = 0.0;
  HEAPF64[$F1 + 8 >> 3] = 0.0;
 } else {
  HEAP32[$stat_ad >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$ad >> 3], $lng_ad) | 0;
  HEAP32[$stat_ad1 >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3] + +HEAPF64[$d1 >> 3], $lng_ad1) | 0;
  HEAP32[$stat_bd1 >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$2 >> 3] + +HEAPF64[$d1 >> 3], $lng_bd1) | 0;
  if (!(HEAP32[$stat_ad1 >> 2] | 0)) if (!(HEAP32[$stat_bd1 >> 2] | 0)) if (!(HEAP32[$stat_ad >> 2] | 0)) {
   HEAPF64[$sum1 >> 3] = 1.0;
   HEAPF64[$term >> 3] = 1.0;
   HEAPF64[$ln_pre1_val >> 3] = +HEAPF64[$lng_ad >> 3] + +HEAPF64[$lng_c >> 3] + +HEAPF64[$d2 >> 3] * +HEAPF64[$ln_omx >> 3] - +HEAPF64[$lng_ad1 >> 3] - +HEAPF64[$lng_bd1 >> 3];
   HEAPF64[$ln_pre1_err >> 3] = +HEAPF64[$lng_ad + 8 >> 3] + +HEAPF64[$lng_c + 8 >> 3] + +HEAPF64[$lng_ad1 + 8 >> 3] + +HEAPF64[$lng_bd1 + 8 >> 3] + +Math_abs(+(+HEAPF64[$ln_pre1_val >> 3])) * 2.220446049250313e-16;
   HEAP32[$i >> 2] = 1;
   while (1) {
    if (!(+(HEAP32[$i >> 2] | 0) < +HEAPF64[$ad >> 3])) break;
    HEAP32[$j >> 2] = (HEAP32[$i >> 2] | 0) - 1;
    HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * (+HEAPF64[$1 >> 3] + +HEAPF64[$d2 >> 3] + +(HEAP32[$j >> 2] | 0)) * (+HEAPF64[$2 >> 3] + +HEAPF64[$d2 >> 3] + +(HEAP32[$j >> 2] | 0)) / (+HEAPF64[$d2 >> 3] + 1.0 + +(HEAP32[$j >> 2] | 0)) / +(HEAP32[$i >> 2] | 0) * (1.0 - +HEAPF64[$4 >> 3]);
    HEAPF64[$sum1 >> 3] = +HEAPF64[$sum1 >> 3] + +HEAPF64[$term >> 3];
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_pre1_val >> 3], +HEAPF64[$ln_pre1_err >> 3], +HEAPF64[$sum1 >> 3], +Math_abs(+(+HEAPF64[$sum1 >> 3])) * 2.220446049250313e-16, $F1) | 0;
   if ((HEAP32[$stat_e >> 2] | 0) != 16) break;
   HEAPF64[HEAP32[$5 >> 2] >> 3] = inf;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = inf;
   _gsl_error(52120, 51896, 428, 16);
   HEAP32[$0 >> 2] = 16;
   $618 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $618 | 0;
  }
  HEAPF64[$F1 >> 3] = 0.0;
  HEAPF64[$F1 + 8 >> 3] = 0.0;
 } while (0);
 if (!(HEAP32[$stat_ad2 >> 2] | 0)) if (!(HEAP32[$stat_bd2 >> 2] | 0)) {
  HEAP32[$maxiter >> 2] = 2e3;
  HEAPF64[$psi_1 >> 3] = -.5772156649015329;
  HEAP32[$stat_1pd >> 2] = _gsl_sf_psi_e(+HEAPF64[$ad >> 3] + 1.0, $psi_1pd) | 0;
  HEAP32[$stat_apd1 >> 2] = _gsl_sf_psi_e(+HEAPF64[$1 >> 3] + +HEAPF64[$d1 >> 3], $psi_apd1) | 0;
  HEAP32[$stat_bpd1 >> 2] = _gsl_sf_psi_e(+HEAPF64[$2 >> 3] + +HEAPF64[$d1 >> 3], $psi_bpd1) | 0;
  do if (HEAP32[$stat_1pd >> 2] | 0) $164 = HEAP32[$stat_1pd >> 2] | 0; else if (HEAP32[$stat_apd1 >> 2] | 0) {
   $164 = HEAP32[$stat_apd1 >> 2] | 0;
   break;
  } else {
   $164 = (HEAP32[$stat_bpd1 >> 2] | 0) != 0 ? HEAP32[$stat_bpd1 >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$stat_dall >> 2] = $164;
  HEAPF64[$psi_val >> 3] = +HEAPF64[$psi_1 >> 3] + +HEAPF64[$psi_1pd >> 3] - +HEAPF64[$psi_apd1 >> 3] - +HEAPF64[$psi_bpd1 >> 3] - +HEAPF64[$ln_omx >> 3];
  HEAPF64[$psi_err >> 3] = +HEAPF64[$psi_1pd + 8 >> 3] + +HEAPF64[$psi_apd1 + 8 >> 3] + +HEAPF64[$psi_bpd1 + 8 >> 3] + +Math_abs(+(+HEAPF64[$psi_val >> 3])) * 2.220446049250313e-16;
  HEAPF64[$fact >> 3] = 1.0;
  HEAPF64[$sum2_val >> 3] = +HEAPF64[$psi_val >> 3];
  HEAPF64[$sum2_err >> 3] = +HEAPF64[$psi_err >> 3];
  HEAPF64[$ln_pre2_val >> 3] = +HEAPF64[$lng_c >> 3] + +HEAPF64[$d1 >> 3] * +HEAPF64[$ln_omx >> 3] - +HEAPF64[$lng_ad2 >> 3] - +HEAPF64[$lng_bd2 >> 3];
  HEAPF64[$ln_pre2_err >> 3] = +HEAPF64[$lng_c + 8 >> 3] + +HEAPF64[$lng_ad2 + 8 >> 3] + +HEAPF64[$lng_bd2 + 8 >> 3] + +Math_abs(+(+HEAPF64[$ln_pre2_val >> 3])) * 2.220446049250313e-16;
  HEAP32[$j2 >> 2] = 1;
  while (1) {
   if ((HEAP32[$j2 >> 2] | 0) >= 2e3) break;
   HEAPF64[$term1 >> 3] = 1.0 / +(HEAP32[$j2 >> 2] | 0) + 1.0 / (+HEAPF64[$ad >> 3] + +(HEAP32[$j2 >> 2] | 0));
   HEAPF64[$term2 >> 3] = 1.0 / (+HEAPF64[$1 >> 3] + +HEAPF64[$d1 >> 3] + +(HEAP32[$j2 >> 2] | 0) - 1.0) + 1.0 / (+HEAPF64[$2 >> 3] + +HEAPF64[$d1 >> 3] + +(HEAP32[$j2 >> 2] | 0) - 1.0);
   HEAPF64[$delta >> 3] = 0.0;
   HEAPF64[$psi_val >> 3] = +HEAPF64[$psi_val >> 3] + (+HEAPF64[$term1 >> 3] - +HEAPF64[$term2 >> 3]);
   $243 = +Math_abs(+(+HEAPF64[$term1 >> 3]));
   $247 = ($243 + +Math_abs(+(+HEAPF64[$term2 >> 3]))) * 2.220446049250313e-16;
   HEAPF64[$psi_err >> 3] = +HEAPF64[$psi_err >> 3] + $247;
   HEAPF64[$fact >> 3] = +HEAPF64[$fact >> 3] * (+HEAPF64[$1 >> 3] + +HEAPF64[$d1 >> 3] + +(HEAP32[$j2 >> 2] | 0) - 1.0) * (+HEAPF64[$2 >> 3] + +HEAPF64[$d1 >> 3] + +(HEAP32[$j2 >> 2] | 0) - 1.0) / ((+HEAPF64[$ad >> 3] + +(HEAP32[$j2 >> 2] | 0)) * +(HEAP32[$j2 >> 2] | 0)) * (1.0 - +HEAPF64[$4 >> 3]);
   HEAPF64[$delta >> 3] = +HEAPF64[$fact >> 3] * +HEAPF64[$psi_val >> 3];
   HEAPF64[$sum2_val >> 3] = +HEAPF64[$sum2_val >> 3] + +HEAPF64[$delta >> 3];
   $287 = +Math_abs(+(+HEAPF64[$fact >> 3] * +HEAPF64[$psi_err >> 3]));
   $291 = $287 + +Math_abs(+(+HEAPF64[$delta >> 3])) * 2.220446049250313e-16;
   HEAPF64[$sum2_err >> 3] = +HEAPF64[$sum2_err >> 3] + $291;
   $295 = +Math_abs(+(+HEAPF64[$delta >> 3]));
   if ($295 < +Math_abs(+(+HEAPF64[$sum2_val >> 3])) * 2.220446049250313e-16) break;
   HEAP32[$j2 >> 2] = (HEAP32[$j2 >> 2] | 0) + 1;
  }
  if ((HEAP32[$j2 >> 2] | 0) == 2e3) HEAP32[$stat_F2 >> 2] = 11;
  if (+HEAPF64[$sum2_val >> 3] == 0.0) {
   HEAPF64[$F2 >> 3] = 0.0;
   HEAPF64[$F2 + 8 >> 3] = 0.0;
  } else {
   HEAP32[$stat_e1 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_pre2_val >> 3], +HEAPF64[$ln_pre2_err >> 3], +HEAPF64[$sum2_val >> 3], +HEAPF64[$sum2_err >> 3], $F2) | 0;
   if ((HEAP32[$stat_e1 >> 2] | 0) == 16) {
    HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
    _gsl_error(51912, 51896, 497, 16);
    HEAP32[$0 >> 2] = 16;
    $618 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $618 | 0;
   }
  }
  if (HEAP32[$stat_F2 >> 2] | 0) $324 = HEAP32[$stat_F2 >> 2] | 0; else $324 = (HEAP32[$stat_dall >> 2] | 0) != 0 ? HEAP32[$stat_dall >> 2] | 0 : 0;
  HEAP32[$stat_F2 >> 2] = $324;
 } else label = 37; else label = 37;
 if ((label | 0) == 37) {
  HEAPF64[$F2 >> 3] = 0.0;
  HEAPF64[$F2 + 8 >> 3] = 0.0;
 }
 HEAPF64[$sgn_2 >> 3] = (HEAP32[$intd >> 2] & 1 | 0) != 0 ? -1.0 : 1.0;
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$F1 >> 3] + +HEAPF64[$sgn_2 >> 3] * +HEAPF64[$F2 >> 3];
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = +HEAPF64[$F1 + 8 >> 3] + +HEAPF64[$F2 + 8 >> 3];
 $344 = +Math_abs(+(+HEAPF64[$F1 >> 3]));
 $348 = ($344 + +Math_abs(+(+HEAPF64[$F2 >> 3]))) * 4.440892098500626e-16;
 $350 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$350 >> 3] = +HEAPF64[$350 >> 3] + $348;
 $356 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * 4.440892098500626e-16;
 $358 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$358 >> 3] = +HEAPF64[$358 >> 3] + $356;
 HEAP32[$0 >> 2] = HEAP32[$stat_F2 >> 2];
 $618 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $618 | 0;
}
function _hyperg_1F1_ab_posint($a, $b, $x, $result) {
 $a = $a | 0;
 $b = $b | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $115 = 0.0, $124 = 0.0, $134 = 0.0, $136 = 0, $142 = 0.0, $144 = 0, $15 = 0, $2 = 0, $23 = 0, $245 = 0.0, $250 = 0.0, $3 = 0, $30 = 0.0, $329 = 0.0, $338 = 0.0, $342 = 0.0, $344 = 0, $354 = 0, $4 = 0, $414 = 0.0, $422 = 0.0, $424 = 0, $43 = 0, $463 = 0.0, $468 = 0.0, $474 = 0.0, $479 = 0.0, $481 = 0, $549 = 0.0, $552 = 0.0, $560 = 0.0, $562 = 0, $688 = 0.0, $691 = 0.0, $699 = 0.0, $701 = 0, $704 = 0, $75 = 0.0, $77 = 0, $83 = 0.0, $85 = 0, $K = 0, $Ma = 0, $Ma0b = 0, $Ma0bp1 = 0, $Ma0n = 0, $Ma0nm1 = 0, $Ma0np1 = 0, $Ma0p1b = 0, $Ma8 = 0, $Man = 0, $Manm1 = 0, $Manp1 = 0, $Map1 = 0, $Map19 = 0, $Mn = 0, $Mn11 = 0, $Mn17 = 0, $Mn20 = 0, $Mn26 = 0, $Mnm1 = 0, $Mnm110 = 0, $Mnm116 = 0, $Mnm119 = 0, $Mnm125 = 0, $Mnp1 = 0, $Mnp112 = 0, $Mnp118 = 0, $Mnp121 = 0, $Mnp127 = 0, $a0 = 0, $ax = 0, $ex = 0, $ex14 = 0, $ex2 = 0, $ex23 = 0, $ex29 = 0, $ex7 = 0, $n = 0, $n13 = 0, $n15 = 0, $n22 = 0, $n24 = 0, $n28 = 0, $poly = 0, $r_Mn = 0, $ra = 0, $ra6 = 0, $rap = 0, $rap4 = 0, $stat_CF1 = 0, $stat_CF15 = 0, $stat_K = 0, $stat_e = 0, $stat_e1 = 0, $stat_e3 = 0, $stat_ex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 $0 = sp + 452 | 0;
 $1 = sp + 448 | 0;
 $2 = sp + 444 | 0;
 $3 = sp + 376 | 0;
 $4 = sp + 440 | 0;
 $ax = sp + 368 | 0;
 $K = sp + 352 | 0;
 $stat_K = sp + 436 | 0;
 $stat_e = sp + 432 | 0;
 $ex = sp + 336 | 0;
 $stat_e1 = sp + 428 | 0;
 $ex2 = sp + 320 | 0;
 $stat_e3 = sp + 424 | 0;
 $poly = sp + 312 | 0;
 $rap = sp + 304 | 0;
 $stat_CF1 = sp + 420 | 0;
 $ra = sp + 296 | 0;
 $Ma = sp + 288 | 0;
 $Map1 = sp + 280 | 0;
 $Mnp1 = sp + 272 | 0;
 $Mn = sp + 264 | 0;
 $Mnm1 = sp + 256 | 0;
 $n = sp + 416 | 0;
 $rap4 = sp + 248 | 0;
 $stat_CF15 = sp + 412 | 0;
 $ra6 = sp + 240 | 0;
 $ex7 = sp + 224 | 0;
 $stat_ex = sp + 408 | 0;
 $Ma8 = sp + 216 | 0;
 $Map19 = sp + 208 | 0;
 $Mnm110 = sp + 200 | 0;
 $Mn11 = sp + 192 | 0;
 $Mnp112 = sp + 184 | 0;
 $n13 = sp + 404 | 0;
 $ex14 = sp + 176 | 0;
 $n15 = sp + 400 | 0;
 $Mnm116 = sp + 168 | 0;
 $Mn17 = sp + 160 | 0;
 $Mnp118 = sp + 152 | 0;
 $r_Mn = sp + 136 | 0;
 $Mnm119 = sp + 128 | 0;
 $Mn20 = sp + 120 | 0;
 $Mnp121 = sp + 112 | 0;
 $n22 = sp + 396 | 0;
 $ex23 = sp + 104 | 0;
 $Manp1 = sp + 96 | 0;
 $Man = sp + 88 | 0;
 $Manm1 = sp + 80 | 0;
 $n24 = sp + 392 | 0;
 $a0 = sp + 388 | 0;
 $Ma0b = sp + 72 | 0;
 $Ma0bp1 = sp + 64 | 0;
 $Ma0p1b = sp + 56 | 0;
 $Mnm125 = sp + 48 | 0;
 $Mn26 = sp + 40 | 0;
 $Mnp127 = sp + 32 | 0;
 $n28 = sp + 384 | 0;
 $ex29 = sp + 24 | 0;
 $Ma0np1 = sp + 16 | 0;
 $Ma0n = sp + 8 | 0;
 $Ma0nm1 = sp;
 HEAP32[$1 >> 2] = $a;
 HEAP32[$2 >> 2] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$3 >> 3]));
 if ((HEAP32[$1 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
  HEAP32[$0 >> 2] = _gsl_sf_exp_e(+HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $704 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $704 | 0;
 }
 $15 = HEAP32[$2 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$0 >> 2] = _gsl_sf_exprel_n_e($15 - 1 | 0, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $704 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $704 | 0;
 }
 $23 = HEAP32[$1 >> 2] | 0;
 if (($15 | 0) == ((HEAP32[$1 >> 2] | 0) + 1 | 0)) {
  HEAP32[$stat_K >> 2] = _gsl_sf_exprel_n_e($23, -+HEAPF64[$3 >> 3], $K) | 0;
  $30 = +Math_abs(+(+HEAPF64[$3 >> 3])) * 4.440892098500626e-16;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$3 >> 3], $30, +HEAPF64[$K >> 3], +HEAPF64[$K + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e >> 2] | 0) $43 = HEAP32[$stat_e >> 2] | 0; else $43 = (HEAP32[$stat_K >> 2] | 0) != 0 ? HEAP32[$stat_K >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $43;
  $704 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $704 | 0;
 }
 if (($23 | 0) == ((HEAP32[$2 >> 2] | 0) + 1 | 0)) {
  HEAP32[$stat_e1 >> 2] = _gsl_sf_exp_e(+HEAPF64[$3 >> 3], $ex) | 0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$ex >> 3] * (+HEAPF64[$3 >> 3] / +(HEAP32[$2 >> 2] | 0) + 1.0);
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ex + 8 >> 3] * (+HEAPF64[$3 >> 3] / +(HEAP32[$2 >> 2] | 0) + 1.0);
  $75 = +HEAPF64[$ex >> 3] * 2.220446049250313e-16 * (+Math_abs(+(+HEAPF64[$3 >> 3] / +(HEAP32[$2 >> 2] | 0))) + 1.0);
  $77 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$77 >> 3] = +HEAPF64[$77 >> 3] + $75;
  $83 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $85 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$85 >> 3] = +HEAPF64[$85 >> 3] + $83;
  HEAP32[$0 >> 2] = HEAP32[$stat_e1 >> 2];
  $704 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $704 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) == ((HEAP32[$2 >> 2] | 0) + 2 | 0)) {
  HEAP32[$stat_e3 >> 2] = _gsl_sf_exp_e(+HEAPF64[$3 >> 3], $ex2) | 0;
  HEAPF64[$poly >> 3] = +HEAPF64[$3 >> 3] / +(HEAP32[$2 >> 2] | 0) * (+HEAPF64[$3 >> 3] / (+(HEAP32[$2 >> 2] | 0) + 1.0) + 2.0) + 1.0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$ex2 >> 3] * +HEAPF64[$poly >> 3];
  $115 = +HEAPF64[$ex2 + 8 >> 3] * +Math_abs(+(+HEAPF64[$poly >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $115;
  $124 = +Math_abs(+(+HEAPF64[$3 >> 3] / +(HEAP32[$2 >> 2] | 0)));
  $134 = +HEAPF64[$ex2 >> 3] * 2.220446049250313e-16 * ($124 * (+Math_abs(+(+HEAPF64[$3 >> 3] / (+(HEAP32[$2 >> 2] | 0) + 1.0))) + 2.0) + 1.0);
  $136 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$136 >> 3] = +HEAPF64[$136 >> 3] + $134;
  $142 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $144 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$144 >> 3] = +HEAPF64[$144 >> 3] + $142;
  HEAP32[$0 >> 2] = HEAP32[$stat_e3 >> 2];
  $704 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $704 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$1 >> 2] << 1 | 0)) {
  HEAP32[$0 >> 2] = _hyperg_1F1_beq2a_pos(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $704 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $704 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) < 10) if ((HEAP32[$1 >> 2] | 0) < 10) {
  if (!(+HEAPF64[$ax >> 3] < 5.0)) label = 19;
 } else label = 19; else label = 19;
 do if ((label | 0) == 19) if (!(+(HEAP32[$2 >> 2] | 0) > +(HEAP32[$1 >> 2] | 0) * +HEAPF64[$ax >> 3])) {
  if ((HEAP32[$2 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) if (+HEAPF64[$ax >> 3] < 5.0) break;
  if ((HEAP32[$2 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) if (+(HEAP32[$2 >> 2] | 0) >= +(HEAP32[$1 >> 2] << 1 | 0) + +HEAPF64[$3 >> 3]) {
   HEAP32[$stat_CF1 >> 2] = _hyperg_1F1_CF1_p_ser(+(HEAP32[$1 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], $rap) | 0;
   HEAPF64[$ra >> 3] = +HEAPF64[$3 >> 3] / +(HEAP32[$1 >> 2] | 0) * +HEAPF64[$rap >> 3] + 1.0;
   HEAPF64[$Ma >> 3] = 1.4916681462400413e-154;
   HEAPF64[$Map1 >> 3] = +HEAPF64[$ra >> 3] * +HEAPF64[$Ma >> 3];
   HEAPF64[$Mnp1 >> 3] = +HEAPF64[$Map1 >> 3];
   HEAPF64[$Mn >> 3] = +HEAPF64[$Ma >> 3];
   HEAP32[$n >> 2] = HEAP32[$1 >> 2];
   while (1) {
    if ((HEAP32[$n >> 2] | 0) <= 0) break;
    HEAPF64[$Mnm1 >> 3] = (+(HEAP32[$n >> 2] | 0) * +HEAPF64[$Mnp1 >> 3] - (+((HEAP32[$n >> 2] << 1) - (HEAP32[$2 >> 2] | 0) | 0) + +HEAPF64[$3 >> 3]) * +HEAPF64[$Mn >> 3]) / +((HEAP32[$2 >> 2] | 0) - (HEAP32[$n >> 2] | 0) | 0);
    HEAPF64[$Mnp1 >> 3] = +HEAPF64[$Mn >> 3];
    HEAPF64[$Mn >> 3] = +HEAPF64[$Mnm1 >> 3];
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + -1;
   }
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Ma >> 3] / +HEAPF64[$Mn >> 3];
   $245 = (+Math_abs(+(+(HEAP32[$1 >> 2] | 0))) + 1.0) * 4.440892098500626e-16;
   $250 = $245 * +Math_abs(+(+HEAPF64[$Ma >> 3] / +HEAPF64[$Mn >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $250;
   HEAP32[$0 >> 2] = HEAP32[$stat_CF1 >> 2];
   $704 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $704 | 0;
  }
  if ((HEAP32[$2 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) if (+(HEAP32[$2 >> 2] | 0) < +(HEAP32[$1 >> 2] << 1 | 0) + +HEAPF64[$3 >> 3]) if (+(HEAP32[$2 >> 2] | 0) > +HEAPF64[$3 >> 3]) {
   HEAP32[$stat_CF15 >> 2] = _hyperg_1F1_CF1_p_ser(+(HEAP32[$1 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], $rap4) | 0;
   HEAPF64[$ra6 >> 3] = +HEAPF64[$3 >> 3] / +(HEAP32[$1 >> 2] | 0) * +HEAPF64[$rap4 >> 3] + 1.0;
   HEAPF64[$Ma8 >> 3] = 1.4916681462400413e-154;
   HEAPF64[$Map19 >> 3] = +HEAPF64[$ra6 >> 3] * +HEAPF64[$Ma8 >> 3];
   HEAPF64[$Mnm110 >> 3] = +HEAPF64[$Ma8 >> 3];
   HEAPF64[$Mn11 >> 3] = +HEAPF64[$Map19 >> 3];
   HEAP32[$n13 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
   while (1) {
    if ((HEAP32[$n13 >> 2] | 0) >= (HEAP32[$2 >> 2] | 0)) break;
    HEAPF64[$Mnp112 >> 3] = (+((HEAP32[$2 >> 2] | 0) - (HEAP32[$n13 >> 2] | 0) | 0) * +HEAPF64[$Mnm110 >> 3] + (+((HEAP32[$n13 >> 2] << 1) - (HEAP32[$2 >> 2] | 0) | 0) + +HEAPF64[$3 >> 3]) * +HEAPF64[$Mn11 >> 3]) / +(HEAP32[$n13 >> 2] | 0);
    HEAPF64[$Mnm110 >> 3] = +HEAPF64[$Mn11 >> 3];
    HEAPF64[$Mn11 >> 3] = +HEAPF64[$Mnp112 >> 3];
    HEAP32[$n13 >> 2] = (HEAP32[$n13 >> 2] | 0) + 1;
   }
   HEAP32[$stat_ex >> 2] = _gsl_sf_exp_e(+HEAPF64[$3 >> 3], $ex7) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$ex7 >> 3] * +HEAPF64[$Ma8 >> 3] / +HEAPF64[$Mn11 >> 3];
   $329 = +HEAPF64[$ex7 + 8 >> 3] * +Math_abs(+(+HEAPF64[$Ma8 >> 3] / +HEAPF64[$Mn11 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $329;
   $338 = (+Math_abs(+(+((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0))) + 1.0) * 8.881784197001252e-16;
   $342 = $338 * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $344 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$344 >> 3] = +HEAPF64[$344 >> 3] + $342;
   if (HEAP32[$stat_ex >> 2] | 0) $354 = HEAP32[$stat_ex >> 2] | 0; else $354 = (HEAP32[$stat_CF15 >> 2] | 0) != 0 ? HEAP32[$stat_CF15 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $354;
   $704 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $704 | 0;
  }
  if (+HEAPF64[$3 >> 3] >= 0.0) {
   if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) {
    HEAPF64[$Mnm119 >> 3] = 1.0;
    _gsl_sf_exprel_n_e((HEAP32[$2 >> 2] | 0) - 1 | 0, +HEAPF64[$3 >> 3], $r_Mn) | 0;
    HEAPF64[$Mn20 >> 3] = +HEAPF64[$r_Mn >> 3];
    HEAP32[$n22 >> 2] = 1;
    while (1) {
     if ((HEAP32[$n22 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
     HEAPF64[$Mnp121 >> 3] = (+((HEAP32[$2 >> 2] | 0) - (HEAP32[$n22 >> 2] | 0) | 0) * +HEAPF64[$Mnm119 >> 3] + (+((HEAP32[$n22 >> 2] << 1) - (HEAP32[$2 >> 2] | 0) | 0) + +HEAPF64[$3 >> 3]) * +HEAPF64[$Mn20 >> 3]) / +(HEAP32[$n22 >> 2] | 0);
     HEAPF64[$Mnm119 >> 3] = +HEAPF64[$Mn20 >> 3];
     HEAPF64[$Mn20 >> 3] = +HEAPF64[$Mnp121 >> 3];
     HEAP32[$n22 >> 2] = (HEAP32[$n22 >> 2] | 0) + 1;
    }
    HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Mn20 >> 3];
    $463 = +Math_abs(+(+HEAPF64[$Mn20 >> 3]));
    $468 = $463 * (+Math_abs(+(+(HEAP32[$1 >> 2] | 0))) + 1.0);
    $474 = $468 * +Math_abs(+(+HEAPF64[$r_Mn + 8 >> 3] / +HEAPF64[$r_Mn >> 3]));
    HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $474;
    $479 = +Math_abs(+(+HEAPF64[$Mn20 >> 3])) * 4.440892098500626e-16;
    $481 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
    HEAPF64[$481 >> 3] = +HEAPF64[$481 >> 3] + $479;
    HEAP32[$0 >> 2] = 0;
    $704 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $704 | 0;
   }
   if (!(+HEAPF64[$3 >> 3] + +Math_log(+(+Math_abs(+(+HEAPF64[$3 >> 3] / +(HEAP32[$2 >> 2] | 0))))) < 707.782712893384)) {
    HEAPF64[HEAP32[$4 >> 2] >> 3] = inf;
    HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = inf;
    _gsl_error(51784, 51680, 1062, 16);
    HEAP32[$0 >> 2] = 16;
    $704 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $704 | 0;
   }
   HEAPF64[$ex14 >> 3] = +Math_exp(+(+HEAPF64[$3 >> 3]));
   HEAPF64[$Mnm116 >> 3] = +HEAPF64[$ex14 >> 3];
   HEAPF64[$Mn17 >> 3] = +HEAPF64[$ex14 >> 3] * (+HEAPF64[$3 >> 3] / +(HEAP32[$2 >> 2] | 0) + 1.0);
   HEAP32[$n15 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
   while (1) {
    if ((HEAP32[$n15 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[$Mnp118 >> 3] = (+((HEAP32[$2 >> 2] | 0) - (HEAP32[$n15 >> 2] | 0) | 0) * +HEAPF64[$Mnm116 >> 3] + (+((HEAP32[$n15 >> 2] << 1) - (HEAP32[$2 >> 2] | 0) | 0) + +HEAPF64[$3 >> 3]) * +HEAPF64[$Mn17 >> 3]) / +(HEAP32[$n15 >> 2] | 0);
    HEAPF64[$Mnm116 >> 3] = +HEAPF64[$Mn17 >> 3];
    HEAPF64[$Mn17 >> 3] = +HEAPF64[$Mnp118 >> 3];
    HEAP32[$n15 >> 2] = (HEAP32[$n15 >> 2] | 0) + 1;
   }
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Mn17 >> 3];
   $414 = (+HEAPF64[$3 >> 3] + 1.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$Mn17 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $414;
   $422 = +Math_abs(+(+((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0))) + 1.0;
   $424 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$424 >> 3] = +HEAPF64[$424 >> 3] * $422;
   HEAP32[$0 >> 2] = 0;
   $704 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $704 | 0;
  }
  if (!(+(HEAP32[$1 >> 2] | 0) <= (+(HEAP32[$2 >> 2] | 0) - +HEAPF64[$3 >> 3]) * .5)) if (!(+(HEAP32[$1 >> 2] | 0) >= -+HEAPF64[$3 >> 3])) {
   HEAP32[$a0 >> 2] = ~~+Math_ceil(+((+(HEAP32[$2 >> 2] | 0) - +HEAPF64[$3 >> 3]) * .5));
   HEAPF64[$ex29 >> 3] = +Math_exp(+(+HEAPF64[$3 >> 3]));
   HEAPF64[$Ma0np1 >> 3] = +HEAPF64[$ex29 >> 3];
   HEAPF64[$Ma0n >> 3] = +HEAPF64[$ex29 >> 3] * (+HEAPF64[$3 >> 3] / (+(HEAP32[$a0 >> 2] | 0) - 1.0) + 1.0);
   HEAP32[$n28 >> 2] = (HEAP32[$a0 >> 2] | 0) - 1;
   while (1) {
    if ((HEAP32[$n28 >> 2] | 0) <= (HEAP32[$2 >> 2] | 0)) break;
    HEAPF64[$Ma0nm1 >> 3] = (+(0 - (HEAP32[$n28 >> 2] | 0) | 0) * (+(1 - (HEAP32[$n28 >> 2] | 0) | 0) - +HEAPF64[$3 >> 3]) * +HEAPF64[$Ma0n >> 3] - +HEAPF64[$3 >> 3] * +((HEAP32[$n28 >> 2] | 0) - (HEAP32[$a0 >> 2] | 0) | 0) * +HEAPF64[$Ma0np1 >> 3]) / (+(HEAP32[$n28 >> 2] | 0) * (+(HEAP32[$n28 >> 2] | 0) - 1.0));
    HEAPF64[$Ma0np1 >> 3] = +HEAPF64[$Ma0n >> 3];
    HEAPF64[$Ma0n >> 3] = +HEAPF64[$Ma0nm1 >> 3];
    HEAP32[$n28 >> 2] = (HEAP32[$n28 >> 2] | 0) + -1;
   }
   HEAPF64[$Ma0bp1 >> 3] = +HEAPF64[$Ma0np1 >> 3];
   HEAPF64[$Ma0b >> 3] = +HEAPF64[$Ma0n >> 3];
   HEAPF64[$Ma0p1b >> 3] = (+(HEAP32[$2 >> 2] | 0) * (+(HEAP32[$a0 >> 2] | 0) + +HEAPF64[$3 >> 3]) * +HEAPF64[$Ma0b >> 3] + +HEAPF64[$3 >> 3] * +((HEAP32[$a0 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) * +HEAPF64[$Ma0bp1 >> 3]) / +(Math_imul(HEAP32[$a0 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0);
   L88 : do if ((HEAP32[$a0 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) HEAPF64[$Mn26 >> 3] = +HEAPF64[$Ma0b >> 3]; else {
    if (((HEAP32[$a0 >> 2] | 0) + 1 | 0) >= (HEAP32[$1 >> 2] | 0)) {
     HEAPF64[$Mn26 >> 3] = +HEAPF64[$Ma0p1b >> 3];
     break;
    }
    HEAPF64[$Mnm125 >> 3] = +HEAPF64[$Ma0b >> 3];
    HEAPF64[$Mn26 >> 3] = +HEAPF64[$Ma0p1b >> 3];
    HEAP32[$n28 >> 2] = (HEAP32[$a0 >> 2] | 0) + 1;
    while (1) {
     if ((HEAP32[$n28 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break L88;
     HEAPF64[$Mnp127 >> 3] = (+((HEAP32[$2 >> 2] | 0) - (HEAP32[$n28 >> 2] | 0) | 0) * +HEAPF64[$Mnm125 >> 3] + (+((HEAP32[$n28 >> 2] << 1) - (HEAP32[$2 >> 2] | 0) | 0) + +HEAPF64[$3 >> 3]) * +HEAPF64[$Mn26 >> 3]) / +(HEAP32[$n28 >> 2] | 0);
     HEAPF64[$Mnm125 >> 3] = +HEAPF64[$Mn26 >> 3];
     HEAPF64[$Mn26 >> 3] = +HEAPF64[$Mnp127 >> 3];
     HEAP32[$n28 >> 2] = (HEAP32[$n28 >> 2] | 0) + 1;
    }
   } while (0);
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Mn26 >> 3];
   $688 = (+Math_abs(+(+HEAPF64[$3 >> 3])) + 1.0) * 2.220446049250313e-16;
   $691 = $688 * +Math_abs(+(+HEAPF64[$Mn26 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $691;
   $699 = +Math_abs(+(+((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0))) + 1.0;
   $701 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$701 >> 3] = +HEAPF64[$701 >> 3] * $699;
   HEAP32[$0 >> 2] = 0;
   $704 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $704 | 0;
  }
  HEAPF64[$ex23 >> 3] = +Math_exp(+(+HEAPF64[$3 >> 3]));
  HEAPF64[$Manp1 >> 3] = +HEAPF64[$ex23 >> 3];
  HEAPF64[$Man >> 3] = +HEAPF64[$ex23 >> 3] * (+HEAPF64[$3 >> 3] / (+(HEAP32[$1 >> 2] | 0) - 1.0) + 1.0);
  HEAP32[$n24 >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[$n24 >> 2] | 0) <= (HEAP32[$2 >> 2] | 0)) break;
   HEAPF64[$Manm1 >> 3] = (+(0 - (HEAP32[$n24 >> 2] | 0) | 0) * (+(1 - (HEAP32[$n24 >> 2] | 0) | 0) - +HEAPF64[$3 >> 3]) * +HEAPF64[$Man >> 3] - +HEAPF64[$3 >> 3] * +((HEAP32[$n24 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0) * +HEAPF64[$Manp1 >> 3]) / (+(HEAP32[$n24 >> 2] | 0) * (+(HEAP32[$n24 >> 2] | 0) - 1.0));
   HEAPF64[$Manp1 >> 3] = +HEAPF64[$Man >> 3];
   HEAPF64[$Man >> 3] = +HEAPF64[$Manm1 >> 3];
   HEAP32[$n24 >> 2] = (HEAP32[$n24 >> 2] | 0) + -1;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Man >> 3];
  $549 = (+Math_abs(+(+HEAPF64[$3 >> 3])) + 1.0) * 2.220446049250313e-16;
  $552 = $549 * +Math_abs(+(+HEAPF64[$Man >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $552;
  $560 = +Math_abs(+(+((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0))) + 1.0;
  $562 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$562 >> 3] = +HEAPF64[$562 >> 3] * $560;
  HEAP32[$0 >> 2] = 0;
  $704 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $704 | 0;
 } while (0);
 HEAP32[$0 >> 2] = _gsl_sf_hyperg_1F1_series_e(+(HEAP32[$1 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 $704 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $704 | 0;
}
function _hyperg_U_infinite_sum_improved($N, $a, $bint, $b, $beps, $x, $xeps, $sum, $result) {
 $N = $N | 0;
 $a = +$a;
 $bint = +$bint;
 $b = +$b;
 $beps = +$beps;
 $x = +$x;
 $xeps = +$xeps;
 $sum = $sum | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $112 = 0, $125 = 0.0, $134 = 0.0, $144 = 0.0, $15 = 0, $154 = 0.0, $186 = 0.0, $189 = 0.0, $194 = 0.0, $197 = 0.0, $2 = 0, $244 = 0.0, $254 = 0.0, $266 = 0.0, $278 = 0.0, $290 = 0.0, $3 = 0, $311 = 0.0, $314 = 0.0, $316 = 0.0, $337 = 0.0, $34 = 0.0, $345 = 0.0, $349 = 0.0, $355 = 0.0, $358 = 0.0, $384 = 0, $4 = 0, $453 = 0.0, $46 = 0.0, $461 = 0.0, $472 = 0.0, $476 = 0.0, $485 = 0.0, $5 = 0, $501 = 0.0, $508 = 0.0, $51 = 0.0, $515 = 0.0, $527 = 0.0, $542 = 0.0, $544 = 0, $553 = 0.0, $555 = 0, $559 = 0, $565 = 0, $6 = 0, $8 = 0, $80 = 0, $91 = 0, $b0_err = 0, $b0_multiplier = 0, $b0_val = 0, $c0_err = 0, $c0_multiplier_1 = 0, $c0_multiplier_2 = 0, $c0_t1_err = 0, $c0_t1_val = 0, $c0_t2_err = 0, $c0_t2_val = 0, $c0_val = 0, $dchu_err = 0, $dchu_val = 0, $dexprl = 0, $factor_err = 0, $factor_val = 0, $gamr = 0, $gamri1 = 0, $gamrni = 0, $gamrxi1beps = 0, $i = 0, $istrt = 0, $lnx = 0, $pch1ai = 0, $pch1i = 0, $poch1bxibeps = 0, $pochai = 0, $pochaxibeps = 0, $powx = 0, $sarg = 0, $sfact = 0, $stat_all = 0, $stat_dexprl = 0, $stat_gam123 = 0, $stat_gamall = 0, $stat_gamr = 0, $stat_gamri1 = 0, $stat_gamrni = 0, $stat_gamrxi1beps = 0, $stat_pch1ai = 0, $stat_pch1i = 0, $stat_poch1bxibeps = 0, $stat_pochai = 0, $stat_pochaxibeps = 0, $stat_powx = 0, $t_err = 0, $t_val = 0, $tmp = 0, $xeps1_err = 0, $xeps1_val = 0, $xi = 0, $xi1 = 0, $xi12 = 0, $xn = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $0 = sp + 520 | 0;
 $1 = sp + 516 | 0;
 $2 = sp + 440 | 0;
 $3 = sp + 432 | 0;
 $4 = sp + 424 | 0;
 $5 = sp + 416 | 0;
 $6 = sp + 408 | 0;
 $8 = sp + 512 | 0;
 $lnx = sp + 384 | 0;
 $istrt = sp + 508 | 0;
 $xi = sp + 376 | 0;
 $gamr = sp + 360 | 0;
 $powx = sp + 344 | 0;
 $stat_gamr = sp + 504 | 0;
 $stat_powx = sp + 500 | 0;
 $sarg = sp + 336 | 0;
 $sfact = sp + 328 | 0;
 $factor_val = sp + 320 | 0;
 $factor_err = sp + 312 | 0;
 $pochai = sp + 296 | 0;
 $gamri1 = sp + 280 | 0;
 $gamrni = sp + 264 | 0;
 $stat_pochai = sp + 496 | 0;
 $stat_gamri1 = sp + 492 | 0;
 $stat_gamrni = sp + 488 | 0;
 $stat_gam123 = sp + 484 | 0;
 $stat_gamall = sp + 480 | 0;
 $pochaxibeps = sp + 248 | 0;
 $gamrxi1beps = sp + 232 | 0;
 $stat_pochaxibeps = sp + 476 | 0;
 $stat_gamrxi1beps = sp + 472 | 0;
 $stat_all = sp + 468 | 0;
 $b0_val = sp + 224 | 0;
 $b0_err = sp + 216 | 0;
 $i = sp + 464 | 0;
 $pch1ai = sp + 200 | 0;
 $pch1i = sp + 184 | 0;
 $poch1bxibeps = sp + 168 | 0;
 $stat_pch1ai = sp + 460 | 0;
 $stat_pch1i = sp + 456 | 0;
 $stat_poch1bxibeps = sp + 452 | 0;
 $c0_t1_val = sp + 160 | 0;
 $c0_t1_err = sp + 152 | 0;
 $c0_t2_val = sp + 144 | 0;
 $c0_t2_err = sp + 136 | 0;
 $c0_val = sp + 128 | 0;
 $c0_err = sp + 120 | 0;
 $dexprl = sp + 104 | 0;
 $stat_dexprl = sp + 448 | 0;
 $xeps1_val = sp + 96 | 0;
 $xeps1_err = sp + 88 | 0;
 $dchu_val = sp + 80 | 0;
 $dchu_err = sp + 72 | 0;
 $xn = sp + 64 | 0;
 $t_val = sp + 56 | 0;
 $t_err = sp + 48 | 0;
 $xi1 = sp + 40 | 0;
 $xi12 = sp + 32 | 0;
 $tmp = sp + 24 | 0;
 $b0_multiplier = sp + 16 | 0;
 $c0_multiplier_1 = sp + 8 | 0;
 $c0_multiplier_2 = sp;
 HEAP32[$1 >> 2] = $N;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $bint;
 HEAPF64[$4 >> 3] = $b;
 HEAPF64[$5 >> 3] = $beps;
 HEAPF64[$6 >> 3] = $x;
 HEAPF64[sp + 400 >> 3] = $xeps;
 HEAP32[$8 >> 2] = $result;
 HEAPF64[sp + 392 >> 3] = 4.440892098500626e-16;
 HEAPF64[$lnx >> 3] = +Math_log(+(+HEAPF64[$6 >> 3]));
 if ((HEAP32[$1 >> 2] | 0) < 1) $15 = 1 - (HEAP32[$1 >> 2] | 0) | 0; else $15 = 0;
 HEAP32[$istrt >> 2] = $15;
 HEAPF64[$xi >> 3] = +(HEAP32[$istrt >> 2] | 0);
 HEAP32[$stat_gamr >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$2 >> 3] + 1.0 - +HEAPF64[$4 >> 3], $gamr) | 0;
 HEAP32[$stat_powx >> 2] = _gsl_sf_pow_int_e(+HEAPF64[$6 >> 3], HEAP32[$istrt >> 2] | 0, $powx) | 0;
 HEAPF64[$sarg >> 3] = +HEAPF64[$5 >> 3] * 3.141592653589793;
 if (+HEAPF64[$sarg >> 3] != 0.0) $34 = +HEAPF64[$sarg >> 3] / +Math_sin(+(+HEAPF64[$sarg >> 3])); else $34 = 1.0;
 HEAPF64[$sfact >> 3] = $34;
 HEAPF64[$factor_val >> 3] = +HEAPF64[$sfact >> 3] * ((HEAP32[$1 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0) * +HEAPF64[$gamr >> 3] * +HEAPF64[$powx >> 3];
 $46 = +Math_abs(+(+HEAPF64[$gamr >> 3]));
 $51 = +Math_abs(+(+HEAPF64[$powx >> 3]));
 HEAPF64[$factor_err >> 3] = $46 * +HEAPF64[$powx + 8 >> 3] + $51 * +HEAPF64[$gamr + 8 >> 3] + +Math_abs(+(+HEAPF64[$factor_val >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_pochai >> 2] = _gsl_sf_poch_e(+HEAPF64[$2 >> 3], +HEAPF64[$xi >> 3], $pochai) | 0;
 HEAP32[$stat_gamri1 >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$xi >> 3] + 1.0, $gamri1) | 0;
 HEAP32[$stat_gamrni >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$3 >> 3] + +HEAPF64[$xi >> 3], $gamrni) | 0;
 do if (HEAP32[$stat_gamr >> 2] | 0) $80 = HEAP32[$stat_gamr >> 2] | 0; else if (HEAP32[$stat_gamri1 >> 2] | 0) {
  $80 = HEAP32[$stat_gamri1 >> 2] | 0;
  break;
 } else {
  $80 = (HEAP32[$stat_gamrni >> 2] | 0) != 0 ? HEAP32[$stat_gamrni >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$stat_gam123 >> 2] = $80;
 do if (HEAP32[$stat_gam123 >> 2] | 0) $91 = HEAP32[$stat_gam123 >> 2] | 0; else if (HEAP32[$stat_pochai >> 2] | 0) {
  $91 = HEAP32[$stat_pochai >> 2] | 0;
  break;
 } else {
  $91 = (HEAP32[$stat_powx >> 2] | 0) != 0 ? HEAP32[$stat_powx >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$stat_gamall >> 2] = $91;
 HEAP32[$stat_pochaxibeps >> 2] = _gsl_sf_poch_e(+HEAPF64[$2 >> 3], +HEAPF64[$xi >> 3] - +HEAPF64[$5 >> 3], $pochaxibeps) | 0;
 HEAP32[$stat_gamrxi1beps >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$xi >> 3] + 1.0 - +HEAPF64[$5 >> 3], $gamrxi1beps) | 0;
 do if (HEAP32[$stat_gamall >> 2] | 0) $112 = HEAP32[$stat_gamall >> 2] | 0; else if (HEAP32[$stat_pochaxibeps >> 2] | 0) {
  $112 = HEAP32[$stat_pochaxibeps >> 2] | 0;
  break;
 } else {
  $112 = (HEAP32[$stat_gamrxi1beps >> 2] | 0) != 0 ? HEAP32[$stat_gamrxi1beps >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$stat_all >> 2] = $112;
 HEAPF64[$b0_val >> 3] = +HEAPF64[$factor_val >> 3] * +HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamrxi1beps >> 3];
 $125 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrni >> 3]));
 $134 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrxi1beps >> 3]));
 $144 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamrxi1beps >> 3]));
 $154 = +Math_abs(+(+HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamrxi1beps >> 3]));
 HEAPF64[$b0_err >> 3] = $125 * +HEAPF64[$gamrxi1beps + 8 >> 3] + $134 * +HEAPF64[$gamrni + 8 >> 3] + $144 * +HEAPF64[$pochaxibeps + 8 >> 3] + $154 * +HEAPF64[$factor_err >> 3] + +Math_abs(+(+HEAPF64[$b0_val >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_pch1ai >> 2] = _gsl_sf_pochrel_e(+HEAPF64[$2 >> 3] + +HEAPF64[$xi >> 3], -+HEAPF64[$5 >> 3], $pch1ai) | 0;
 HEAP32[$stat_pch1i >> 2] = _gsl_sf_pochrel_e(+HEAPF64[$xi >> 3] + 1.0 - +HEAPF64[$5 >> 3], +HEAPF64[$5 >> 3], $pch1i) | 0;
 HEAP32[$stat_poch1bxibeps >> 2] = _gsl_sf_pochrel_e(+HEAPF64[$4 >> 3] + +HEAPF64[$xi >> 3], -+HEAPF64[$5 >> 3], $poch1bxibeps) | 0;
 HEAPF64[$c0_t1_val >> 3] = +HEAPF64[$5 >> 3] * +HEAPF64[$pch1ai >> 3] * +HEAPF64[$pch1i >> 3];
 $186 = +Math_abs(+(+HEAPF64[$5 >> 3]));
 $189 = $186 * +Math_abs(+(+HEAPF64[$pch1ai >> 3]));
 $194 = +Math_abs(+(+HEAPF64[$5 >> 3]));
 $197 = $194 * +Math_abs(+(+HEAPF64[$pch1i >> 3]));
 HEAPF64[$c0_t1_err >> 3] = $189 * +HEAPF64[$pch1i + 8 >> 3] + $197 * +HEAPF64[$pch1ai + 8 >> 3] + +Math_abs(+(+HEAPF64[$c0_t1_val >> 3])) * 4.440892098500626e-16;
 HEAPF64[$c0_t2_val >> 3] = -+HEAPF64[$poch1bxibeps >> 3] + +HEAPF64[$pch1ai >> 3] - +HEAPF64[$pch1i >> 3] + +HEAPF64[$c0_t1_val >> 3];
 HEAPF64[$c0_t2_err >> 3] = +HEAPF64[$poch1bxibeps + 8 >> 3] + +HEAPF64[$pch1ai + 8 >> 3] + +HEAPF64[$pch1i + 8 >> 3] + +HEAPF64[$c0_t1_err >> 3] + +Math_abs(+(+HEAPF64[$c0_t2_val >> 3])) * 4.440892098500626e-16;
 HEAPF64[$c0_val >> 3] = +HEAPF64[$factor_val >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamri1 >> 3] * +HEAPF64[$c0_t2_val >> 3];
 $244 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamri1 >> 3]));
 $254 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$c0_t2_val >> 3]));
 $266 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$gamri1 >> 3] * +HEAPF64[$c0_t2_val >> 3]));
 $278 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamri1 >> 3] * +HEAPF64[$c0_t2_val >> 3]));
 $290 = +Math_abs(+(+HEAPF64[$pochai >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamri1 >> 3] * +HEAPF64[$c0_t2_val >> 3]));
 HEAPF64[$c0_err >> 3] = $244 * +HEAPF64[$c0_t2_err >> 3] + $254 * +HEAPF64[$gamri1 + 8 >> 3] + $266 * +HEAPF64[$gamrni + 8 >> 3] + $278 * +HEAPF64[$pochai + 8 >> 3] + $290 * +HEAPF64[$factor_err >> 3] + +Math_abs(+(+HEAPF64[$c0_val >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_dexprl >> 2] = _gsl_sf_exprel_e(-+HEAPF64[$5 >> 3] * +HEAPF64[$lnx >> 3], $dexprl) | 0;
 HEAPF64[$xeps1_val >> 3] = +HEAPF64[$lnx >> 3] * +HEAPF64[$dexprl >> 3];
 $311 = (+Math_abs(+(+HEAPF64[$5 >> 3] * +HEAPF64[$lnx >> 3])) + 1.0) * 4.440892098500626e-16;
 $314 = $311 * +Math_abs(+(+HEAPF64[$dexprl >> 3]));
 $316 = +Math_abs(+(+HEAPF64[$lnx >> 3]));
 HEAPF64[$xeps1_err >> 3] = $314 + $316 * +HEAPF64[$dexprl + 8 >> 3] + +Math_abs(+(+HEAPF64[$xeps1_val >> 3])) * 4.440892098500626e-16;
 HEAPF64[$dchu_val >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$c0_val >> 3] + +HEAPF64[$xeps1_val >> 3] * +HEAPF64[$b0_val >> 3];
 $337 = +Math_abs(+(+HEAPF64[$xeps1_val >> 3]));
 $345 = +HEAPF64[$sum + 8 >> 3] + +HEAPF64[$c0_err >> 3] + $337 * +HEAPF64[$b0_err >> 3] + +HEAPF64[$xeps1_err >> 3] * +Math_abs(+(+HEAPF64[$b0_val >> 3]));
 $349 = +Math_abs(+(+HEAPF64[$b0_val >> 3] * +HEAPF64[$lnx >> 3]));
 $355 = +Math_abs(+(+HEAPF64[$sum >> 3]));
 $358 = $355 + +Math_abs(+(+HEAPF64[$c0_val >> 3]));
 HEAPF64[$dchu_err >> 3] = $345 + $349 * +HEAPF64[$dexprl + 8 >> 3] + ($358 + +Math_abs(+(+HEAPF64[$xeps1_val >> 3] * +HEAPF64[$b0_val >> 3]))) * 4.440892098500626e-16;
 HEAPF64[$xn >> 3] = +(HEAP32[$1 >> 2] | 0);
 do if (HEAP32[$stat_all >> 2] | 0) $384 = HEAP32[$stat_all >> 2] | 0; else {
  if (HEAP32[$stat_dexprl >> 2] | 0) {
   $384 = HEAP32[$stat_dexprl >> 2] | 0;
   break;
  }
  if (HEAP32[$stat_poch1bxibeps >> 2] | 0) {
   $384 = HEAP32[$stat_poch1bxibeps >> 2] | 0;
   break;
  }
  if (HEAP32[$stat_pch1i >> 2] | 0) {
   $384 = HEAP32[$stat_pch1i >> 2] | 0;
   break;
  } else {
   $384 = (HEAP32[$stat_pch1ai >> 2] | 0) != 0 ? HEAP32[$stat_pch1ai >> 2] | 0 : 0;
   break;
  }
 } while (0);
 HEAP32[$stat_all >> 2] = $384;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 2e3) break;
  HEAPF64[$xi1 >> 3] = +((HEAP32[$istrt >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0);
  HEAPF64[$xi12 >> 3] = +((HEAP32[$istrt >> 2] | 0) + (HEAP32[$i >> 2] | 0) - 1 | 0);
  HEAPF64[$tmp >> 3] = (+HEAPF64[$2 >> 3] - 1.0) * (+HEAPF64[$xn >> 3] + +HEAPF64[$xi1 >> 3] * 2.0 - 1.0) + +HEAPF64[$xi1 >> 3] * (+HEAPF64[$xi1 >> 3] - +HEAPF64[$5 >> 3]);
  HEAPF64[$b0_multiplier >> 3] = (+HEAPF64[$2 >> 3] + +HEAPF64[$xi12 >> 3] - +HEAPF64[$5 >> 3]) * +HEAPF64[$6 >> 3] / ((+HEAPF64[$xn >> 3] + +HEAPF64[$xi12 >> 3]) * (+HEAPF64[$xi1 >> 3] - +HEAPF64[$5 >> 3]));
  HEAPF64[$c0_multiplier_1 >> 3] = (+HEAPF64[$2 >> 3] + +HEAPF64[$xi12 >> 3]) * +HEAPF64[$6 >> 3] / ((+HEAPF64[$4 >> 3] + +HEAPF64[$xi12 >> 3]) * +HEAPF64[$xi1 >> 3]);
  HEAPF64[$c0_multiplier_2 >> 3] = +HEAPF64[$tmp >> 3] / (+HEAPF64[$xi1 >> 3] * (+HEAPF64[$4 >> 3] + +HEAPF64[$xi12 >> 3]) * (+HEAPF64[$2 >> 3] + +HEAPF64[$xi12 >> 3] - +HEAPF64[$5 >> 3]));
  HEAPF64[$b0_val >> 3] = +HEAPF64[$b0_val >> 3] * +HEAPF64[$b0_multiplier >> 3];
  $453 = +Math_abs(+(+HEAPF64[$b0_multiplier >> 3]));
  $461 = $453 * +HEAPF64[$b0_err >> 3] + +Math_abs(+(+HEAPF64[$b0_val >> 3])) * 8.0 * 2.0 * 2.220446049250313e-16;
  HEAPF64[$b0_err >> 3] = +HEAPF64[$b0_err >> 3] + $461;
  HEAPF64[$c0_val >> 3] = +HEAPF64[$c0_multiplier_1 >> 3] * +HEAPF64[$c0_val >> 3] - +HEAPF64[$c0_multiplier_2 >> 3] * +HEAPF64[$b0_val >> 3];
  $472 = +Math_abs(+(+HEAPF64[$c0_multiplier_1 >> 3]));
  $476 = +Math_abs(+(+HEAPF64[$c0_multiplier_2 >> 3]));
  $485 = $472 * +HEAPF64[$c0_err >> 3] + $476 * +HEAPF64[$b0_err >> 3] + +Math_abs(+(+HEAPF64[$c0_val >> 3])) * 8.0 * 2.0 * 2.220446049250313e-16;
  HEAPF64[$c0_err >> 3] = $485 + +Math_abs(+(+HEAPF64[$b0_val >> 3] * +HEAPF64[$c0_multiplier_2 >> 3])) * 16.0 * 2.0 * 2.220446049250313e-16;
  HEAPF64[$t_val >> 3] = +HEAPF64[$c0_val >> 3] + +HEAPF64[$xeps1_val >> 3] * +HEAPF64[$b0_val >> 3];
  $501 = +Math_abs(+(+HEAPF64[$xeps1_val >> 3]));
  HEAPF64[$t_err >> 3] = +HEAPF64[$c0_err >> 3] + $501 * +HEAPF64[$b0_err >> 3];
  $508 = +Math_abs(+(+HEAPF64[$b0_val >> 3] * +HEAPF64[$lnx >> 3]));
  HEAPF64[$t_err >> 3] = +HEAPF64[$t_err >> 3] + $508 * +HEAPF64[$dexprl + 8 >> 3];
  $515 = +Math_abs(+(+HEAPF64[$b0_val >> 3]));
  HEAPF64[$t_err >> 3] = +HEAPF64[$t_err >> 3] + $515 * +HEAPF64[$xeps1_err >> 3];
  HEAPF64[$dchu_val >> 3] = +HEAPF64[$dchu_val >> 3] + +HEAPF64[$t_val >> 3];
  HEAPF64[$dchu_err >> 3] = +HEAPF64[$dchu_err >> 3] + +HEAPF64[$t_err >> 3];
  $527 = +Math_abs(+(+HEAPF64[$t_val >> 3]));
  if ($527 < +Math_abs(+(+HEAPF64[$dchu_val >> 3])) * 4.440892098500626e-16) break;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$8 >> 2] >> 3] = +HEAPF64[$dchu_val >> 3];
 HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = +HEAPF64[$dchu_err >> 3] * 2.0;
 $542 = +Math_abs(+(+HEAPF64[$t_val >> 3])) * 2.0;
 $544 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
 HEAPF64[$544 >> 3] = +HEAPF64[$544 >> 3] + $542;
 $553 = (+(HEAP32[$i >> 2] | 0) + 2.0) * 8.881784197001252e-16 * +Math_abs(+(+HEAPF64[$dchu_val >> 3]));
 $555 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
 HEAPF64[$555 >> 3] = +HEAPF64[$555 >> 3] + $553;
 $559 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
 HEAPF64[$559 >> 3] = +HEAPF64[$559 >> 3] * 2.0;
 if ((HEAP32[$i >> 2] | 0) >= 2e3) {
  _gsl_error(52312, 52168, 664, 11);
  HEAP32[$0 >> 2] = 11;
  $565 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $565 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$stat_all >> 2];
  $565 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $565 | 0;
 }
 return 0;
}
function _gsl_sf_conicalP_1_e($lambda, $x, $result) {
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $101 = 0.0, $11 = 0.0, $110 = 0.0, $123 = 0.0, $162 = 0.0, $164 = 0, $174 = 0, $18 = 0.0, $2 = 0, $21 = 0.0, $228 = 0.0, $237 = 0.0, $239 = 0, $257 = 0.0, $270 = 0, $273 = 0.0, $299 = 0, $3 = 0, $30 = 0.0, $314 = 0.0, $319 = 0.0, $329 = 0.0, $346 = 0.0, $358 = 0, $371 = 0, $398 = 0, $413 = 0.0, $418 = 0.0, $428 = 0.0, $43 = 0.0, $434 = 0.0, $442 = 0.0, $471 = 0.0, $473 = 0, $483 = 0, $484 = 0, $75 = 0.0, $86 = 0.0, $88 = 0, $98 = 0, $E = 0, $F = 0, $I0 = 0, $I1 = 0, $J0 = 0, $J1 = 0, $K = 0, $P = 0, $V0 = 0, $V1 = 0, $arg = 0, $arg1 = 0, $besserr = 0, $besserr10 = 0, $bessterm = 0, $bessterm9 = 0, $c = 0, $c2 = 0, $err_amp = 0, $err_amp1 = 0, $lm = 0, $pre = 0, $pre11 = 0, $pre2 = 0, $pre3 = 0, $s = 0, $sgn = 0, $sh = 0, $sqrt_1mx = 0, $sqrt_1px = 0, $sqrt_xm1 = 0, $sqrt_xp1 = 0, $sqts = 0, $stat_E = 0, $stat_F = 0, $stat_I = 0, $stat_I0 = 0, $stat_I1 = 0, $stat_J = 0, $stat_J0 = 0, $stat_J1 = 0, $stat_K = 0, $stat_P = 0, $stat_V = 0, $stat_V8 = 0, $stat_e = 0, $stat_e6 = 0, $sth = 0, $sth5 = 0, $sxi = 0, $t = 0, $th = 0, $th4 = 0, $xi = 0, $xi7 = 0, $xi_lam = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $0 = sp + 476 | 0;
 $1 = sp + 408 | 0;
 $2 = sp + 400 | 0;
 $3 = sp + 472 | 0;
 $K = sp + 384 | 0;
 $E = sp + 368 | 0;
 $stat_K = sp + 468 | 0;
 $stat_E = sp + 464 | 0;
 $err_amp = sp + 360 | 0;
 $th = sp + 352 | 0;
 $s = sp + 344 | 0;
 $c2 = sp + 336 | 0;
 $sth = sp + 328 | 0;
 $pre = sp + 320 | 0;
 $err_amp1 = sp + 312 | 0;
 $xi = sp + 304 | 0;
 $c = sp + 296 | 0;
 $t = sp + 288 | 0;
 $sxi = sp + 280 | 0;
 $pre2 = sp + 272 | 0;
 $arg = sp + 264 | 0;
 $sgn = sp + 256 | 0;
 $pre3 = sp + 248 | 0;
 $F = sp + 232 | 0;
 $stat_F = sp + 460 | 0;
 $P = sp + 216 | 0;
 $lm = sp + 208 | 0;
 $stat_P = sp + 456 | 0;
 $stat_e = sp + 452 | 0;
 $V0 = sp + 200 | 0;
 $V1 = sp + 192 | 0;
 $sqrt_1mx = sp + 184 | 0;
 $sqrt_1px = sp + 176 | 0;
 $th4 = sp + 168 | 0;
 $sth5 = sp + 160 | 0;
 $I0 = sp + 144 | 0;
 $I1 = sp + 128 | 0;
 $stat_I0 = sp + 448 | 0;
 $stat_I1 = sp + 444 | 0;
 $stat_I = sp + 440 | 0;
 $stat_V = sp + 436 | 0;
 $bessterm = sp + 120 | 0;
 $besserr = sp + 112 | 0;
 $arg1 = sp + 104 | 0;
 $sqts = sp + 96 | 0;
 $stat_e6 = sp + 432 | 0;
 $sqrt_xm1 = sp + 88 | 0;
 $sqrt_xp1 = sp + 80 | 0;
 $sh = sp + 72 | 0;
 $xi7 = sp + 64 | 0;
 $xi_lam = sp + 56 | 0;
 $J0 = sp + 40 | 0;
 $J1 = sp + 24 | 0;
 $stat_J0 = sp + 428 | 0;
 $stat_J1 = sp + 424 | 0;
 $stat_J = sp + 420 | 0;
 $stat_V8 = sp + 416 | 0;
 $bessterm9 = sp + 16 | 0;
 $besserr10 = sp + 8 | 0;
 $pre11 = sp;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] <= -1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(53168, 53184, 872, 1);
  HEAP32[$0 >> 2] = 1;
  $484 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $484 | 0;
 }
 $11 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$1 >> 3] == 0.0) {
  if ($11 == 1.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $484 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $484 | 0;
  }
  $18 = +HEAPF64[$2 >> 3];
  if (+HEAPF64[$2 >> 3] < 1.0) {
   $21 = +HEAPF64[$2 >> 3];
   if (1.0 - $18 < 1.4901161193847656e-8) {
    HEAPF64[$err_amp >> 3] = +_GSL_MAX_DBL(1.0, +(1.0 / (+Math_abs(+(1.0 - $21)) + 2.220446049250313e-16)));
    $30 = +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3])) * .17677669529663687;
    HEAPF64[HEAP32[$3 >> 2] >> 3] = $30 * ((1.0 - +HEAPF64[$2 >> 3]) * .3125 + 1.0);
    $43 = +HEAPF64[$err_amp >> 3] * 3.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $43;
    HEAP32[$0 >> 2] = 0;
    $484 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $484 | 0;
   }
   HEAPF64[$th >> 3] = +Math_acos(+$21);
   HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$th >> 3] * .5));
   HEAPF64[$c2 >> 3] = 1.0 - +HEAPF64[$s >> 3] * +HEAPF64[$s >> 3];
   HEAPF64[$sth >> 3] = +Math_sin(+(+HEAPF64[$th >> 3]));
   HEAPF64[$pre >> 3] = 2.0 / (+HEAPF64[$sth >> 3] * 3.141592653589793);
   HEAP32[$stat_K >> 2] = _gsl_sf_ellint_Kcomp_e(+HEAPF64[$s >> 3], 0, $K) | 0;
   HEAP32[$stat_E >> 2] = _gsl_sf_ellint_Ecomp_e(+HEAPF64[$s >> 3], 0, $E) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre >> 3] * (+HEAPF64[$E >> 3] - +HEAPF64[$c2 >> 3] * +HEAPF64[$K >> 3]);
   $75 = +Math_abs(+(+HEAPF64[$c2 >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre >> 3] * (+HEAPF64[$E + 8 >> 3] + $75 * +HEAPF64[$K + 8 >> 3]);
   $86 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $88 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$88 >> 3] = +HEAPF64[$88 >> 3] + $86;
   if (HEAP32[$stat_K >> 2] | 0) $98 = HEAP32[$stat_K >> 2] | 0; else $98 = (HEAP32[$stat_E >> 2] | 0) != 0 ? HEAP32[$stat_E >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $98;
   $484 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $484 | 0;
  } else {
   $101 = +HEAPF64[$2 >> 3];
   if ($18 - 1.0 < 1.4901161193847656e-8) {
    HEAPF64[$err_amp1 >> 3] = +_GSL_MAX_DBL(1.0, +(1.0 / (+Math_abs(+(1.0 - $101)) + 2.220446049250313e-16)));
    $110 = +Math_sqrt(+(+HEAPF64[$2 >> 3] - 1.0)) * -.17677669529663687;
    HEAPF64[HEAP32[$3 >> 2] >> 3] = $110 * (1.0 - (+HEAPF64[$2 >> 3] - 1.0) * .3125);
    $123 = +HEAPF64[$err_amp1 >> 3] * 3.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $123;
    HEAP32[$0 >> 2] = 0;
    $484 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $484 | 0;
   }
   HEAPF64[$xi >> 3] = +_acosh(+$101);
   HEAPF64[$c >> 3] = +_cosh(+(+HEAPF64[$xi >> 3] * .5));
   HEAPF64[$t >> 3] = +_tanh(+(+HEAPF64[$xi >> 3] * .5));
   HEAPF64[$sxi >> 3] = +_sinh(+(+HEAPF64[$xi >> 3]));
   HEAPF64[$pre2 >> 3] = 2.0 / (+HEAPF64[$sxi >> 3] * 3.141592653589793) * +HEAPF64[$c >> 3];
   HEAP32[$stat_K >> 2] = _gsl_sf_ellint_Kcomp_e(+HEAPF64[$t >> 3], 0, $K) | 0;
   HEAP32[$stat_E >> 2] = _gsl_sf_ellint_Ecomp_e(+HEAPF64[$t >> 3], 0, $E) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre2 >> 3] * (+HEAPF64[$E >> 3] - +HEAPF64[$K >> 3]);
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre2 >> 3] * (+HEAPF64[$E + 8 >> 3] + +HEAPF64[$K + 8 >> 3]);
   $162 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $164 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$164 >> 3] = +HEAPF64[$164 >> 3] + $162;
   if (HEAP32[$stat_K >> 2] | 0) $174 = HEAP32[$stat_K >> 2] | 0; else $174 = (HEAP32[$stat_E >> 2] | 0) != 0 ? HEAP32[$stat_E >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $174;
   $484 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $484 | 0;
  }
 }
 if ($11 <= 0.0) {
  if (!(+HEAPF64[$1 >> 3] < 1.0e3)) label = 21;
 } else label = 21;
 do if ((label | 0) == 21) {
  if (+HEAPF64[$2 >> 3] < .1) if (+HEAPF64[$1 >> 3] < 17.0) break;
  if (+HEAPF64[$2 >> 3] < .2) if (+HEAPF64[$1 >> 3] < 5.0) break;
  if (+HEAPF64[$2 >> 3] <= .2) {
   if (!(+HEAPF64[$1 >> 3] < 17.0)) label = 28;
  } else label = 28;
  do if ((label | 0) == 28) {
   if (+HEAPF64[$2 >> 3] < 1.5) if (+HEAPF64[$1 >> 3] < 20.0) break;
   if (1.5 <= +HEAPF64[$2 >> 3]) if (+HEAPF64[$1 >> 3] < (+HEAPF64[$2 >> 3] > 20.0 ? +HEAPF64[$2 >> 3] : 20.0)) {
    HEAP32[$stat_P >> 2] = _gsl_sf_conicalP_large_x_e(1.0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $P, $lm) | 0;
    $257 = +Math_abs(+(+HEAPF64[$lm >> 3])) * 4.440892098500626e-16;
    HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lm >> 3], $257, +HEAPF64[$P >> 3], +HEAPF64[$P + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
    if (HEAP32[$stat_e >> 2] | 0) $270 = HEAP32[$stat_e >> 2] | 0; else $270 = (HEAP32[$stat_P >> 2] | 0) != 0 ? HEAP32[$stat_P >> 2] | 0 : 0;
    HEAP32[$0 >> 2] = $270;
    $484 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $484 | 0;
   }
   $273 = +HEAPF64[$2 >> 3];
   if (!(+HEAPF64[$2 >> 3] < 1.0)) {
    HEAPF64[$sqrt_xm1 >> 3] = +Math_sqrt(+($273 - 1.0));
    HEAPF64[$sqrt_xp1 >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3] + 1.0));
    HEAPF64[$sh >> 3] = +HEAPF64[$sqrt_xm1 >> 3] * +HEAPF64[$sqrt_xp1 >> 3];
    HEAPF64[$xi7 >> 3] = +Math_log(+(+HEAPF64[$2 >> 3] + +HEAPF64[$sh >> 3]));
    HEAPF64[$xi_lam >> 3] = +HEAPF64[$xi7 >> 3] * +HEAPF64[$1 >> 3];
    HEAP32[$stat_J0 >> 2] = _gsl_sf_bessel_J0_e(+HEAPF64[$xi_lam >> 3], $J0) | 0;
    HEAP32[$stat_J1 >> 2] = _gsl_sf_bessel_J1_e(+HEAPF64[$xi_lam >> 3], $J1) | 0;
    if (HEAP32[$stat_J0 >> 2] | 0) $398 = HEAP32[$stat_J0 >> 2] | 0; else $398 = (HEAP32[$stat_J1 >> 2] | 0) != 0 ? HEAP32[$stat_J1 >> 2] | 0 : 0;
    HEAP32[$stat_J >> 2] = $398;
    HEAP32[$stat_V8 >> 2] = _conicalP_1_V(+HEAPF64[$xi7 >> 3], +HEAPF64[$2 >> 3] / +HEAPF64[$sh >> 3], +HEAPF64[$1 >> 3], 1.0, $V0, $V1) | 0;
    HEAPF64[$bessterm9 >> 3] = +HEAPF64[$V0 >> 3] * +HEAPF64[$J0 >> 3] + +HEAPF64[$V1 >> 3] * +HEAPF64[$J1 >> 3];
    $413 = +Math_abs(+(+HEAPF64[$V0 >> 3]));
    $418 = +Math_abs(+(+HEAPF64[$V1 >> 3]));
    $428 = $413 * +HEAPF64[$J0 + 8 >> 3] + $418 * +HEAPF64[$J1 + 8 >> 3] + +Math_abs(+(+HEAPF64[$V0 >> 3] * +HEAPF64[$J0 >> 3])) * 2.2737367544323206e-13;
    $434 = $428 + +Math_abs(+(+HEAPF64[$V1 >> 3] * +HEAPF64[$J1 >> 3])) * 2.2737367544323206e-13;
    $442 = $434 + +Math_abs(+(+HEAPF64[$xi_lam >> 3] * +HEAPF64[$V0 >> 3] * +HEAPF64[$J1 >> 3])) * 2.220446049250313e-16;
    HEAPF64[$besserr10 >> 3] = $442 + +Math_abs(+(+HEAPF64[$xi_lam >> 3] * +HEAPF64[$V1 >> 3] * +HEAPF64[$J0 >> 3])) * 2.220446049250313e-16;
    HEAPF64[$pre11 >> 3] = +Math_sqrt(+(+HEAPF64[$xi7 >> 3] / +HEAPF64[$sh >> 3]));
    HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre11 >> 3] * +HEAPF64[$bessterm9 >> 3];
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre11 >> 3] * +HEAPF64[$besserr10 >> 3] * +HEAPF64[$sqrt_xp1 >> 3] / +HEAPF64[$sqrt_xm1 >> 3];
    $471 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 8.881784197001252e-16;
    $473 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$473 >> 3] = +HEAPF64[$473 >> 3] + $471;
    if (HEAP32[$stat_V8 >> 2] | 0) $483 = HEAP32[$stat_V8 >> 2] | 0; else $483 = (HEAP32[$stat_J >> 2] | 0) != 0 ? HEAP32[$stat_J >> 2] | 0 : 0;
    HEAP32[$0 >> 2] = $483;
    $484 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $484 | 0;
   }
   HEAPF64[$sqrt_1mx >> 3] = +Math_sqrt(+(1.0 - $273));
   HEAPF64[$sqrt_1px >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3] + 1.0));
   HEAPF64[$th4 >> 3] = +Math_acos(+(+HEAPF64[$2 >> 3]));
   HEAPF64[$sth5 >> 3] = +HEAPF64[$sqrt_1mx >> 3] * +HEAPF64[$sqrt_1px >> 3];
   HEAP32[$stat_I0 >> 2] = _gsl_sf_bessel_I0_scaled_e(+HEAPF64[$th4 >> 3] * +HEAPF64[$1 >> 3], $I0) | 0;
   HEAP32[$stat_I1 >> 2] = _gsl_sf_bessel_I1_scaled_e(+HEAPF64[$th4 >> 3] * +HEAPF64[$1 >> 3], $I1) | 0;
   if (HEAP32[$stat_I0 >> 2] | 0) $299 = HEAP32[$stat_I0 >> 2] | 0; else $299 = (HEAP32[$stat_I1 >> 2] | 0) != 0 ? HEAP32[$stat_I1 >> 2] | 0 : 0;
   HEAP32[$stat_I >> 2] = $299;
   HEAP32[$stat_V >> 2] = _conicalP_1_V(+HEAPF64[$th4 >> 3], +HEAPF64[$2 >> 3] / +HEAPF64[$sth5 >> 3], +HEAPF64[$1 >> 3], -1.0, $V0, $V1) | 0;
   HEAPF64[$bessterm >> 3] = +HEAPF64[$V0 >> 3] * +HEAPF64[$I0 >> 3] + +HEAPF64[$V1 >> 3] * +HEAPF64[$I1 >> 3];
   $314 = +Math_abs(+(+HEAPF64[$V0 >> 3]));
   $319 = +Math_abs(+(+HEAPF64[$V1 >> 3]));
   $329 = $314 * +HEAPF64[$I0 + 8 >> 3] + $319 * +HEAPF64[$I1 + 8 >> 3] + +Math_abs(+(+HEAPF64[$V0 >> 3] * +HEAPF64[$I0 >> 3])) * 4.440892098500626e-16;
   HEAPF64[$besserr >> 3] = $329 + +Math_abs(+(+HEAPF64[$V1 >> 3] * +HEAPF64[$I1 >> 3])) * 4.440892098500626e-16;
   HEAPF64[$arg1 >> 3] = +HEAPF64[$th4 >> 3] * +HEAPF64[$1 >> 3];
   HEAPF64[$sqts >> 3] = +Math_sqrt(+(+HEAPF64[$th4 >> 3] / +HEAPF64[$sth5 >> 3]));
   $346 = +Math_abs(+(+HEAPF64[$arg1 >> 3])) * 4.440892098500626e-16;
   HEAP32[$stat_e6 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$arg1 >> 3], $346, +HEAPF64[$sqts >> 3] * +HEAPF64[$bessterm >> 3], +HEAPF64[$sqts >> 3] * +HEAPF64[$besserr >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $358 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$358 >> 3] = +HEAPF64[$358 >> 3] * (1.0 / +HEAPF64[$sqrt_1mx >> 3]);
   do if (HEAP32[$stat_e6 >> 2] | 0) $371 = HEAP32[$stat_e6 >> 2] | 0; else if (HEAP32[$stat_V >> 2] | 0) {
    $371 = HEAP32[$stat_V >> 2] | 0;
    break;
   } else {
    $371 = (HEAP32[$stat_I >> 2] | 0) != 0 ? HEAP32[$stat_I >> 2] | 0 : 0;
    break;
   } while (0);
   HEAP32[$0 >> 2] = $371;
   $484 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $484 | 0;
  } while (0);
  HEAPF64[$arg >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] - 1.0));
  HEAPF64[$sgn >> 3] = +((1.0 - +HEAPF64[$2 >> 3] >= 0.0 ? 1 : -1) | 0);
  HEAPF64[$pre3 >> 3] = (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] + .25) * .5 * +HEAPF64[$sgn >> 3] * +Math_sqrt(+(+HEAPF64[$arg >> 3]));
  HEAP32[$stat_F >> 2] = _gsl_sf_hyperg_2F1_conj_e(1.5, +HEAPF64[$1 >> 3], 2.0, (1.0 - +HEAPF64[$2 >> 3]) / 2.0, $F) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre3 >> 3] * +HEAPF64[$F >> 3];
  $228 = +Math_abs(+(+HEAPF64[$pre3 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $228 * +HEAPF64[$F + 8 >> 3];
  $237 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $239 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$239 >> 3] = +HEAPF64[$239 >> 3] + $237;
  HEAP32[$0 >> 2] = HEAP32[$stat_F >> 2];
  $484 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $484 | 0;
 } while (0);
 HEAP32[$0 >> 2] = _conicalP_xlt1_hyperg_A(1.0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 $484 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $484 | 0;
}
function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $1 = 0, $104 = 0, $113 = 0, $114 = 0, $12 = 0, $122 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $143 = 0, $15 = 0, $158 = 0, $163 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $19 = 0, $193 = 0, $194 = 0, $2 = 0, $203 = 0, $212 = 0, $219 = 0, $22 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $243 = 0, $244 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $269 = 0, $275 = 0, $279 = 0, $280 = 0, $287 = 0, $296 = 0, $299 = 0, $304 = 0, $311 = 0, $312 = 0, $313 = 0, $321 = 0, $39 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $9 = 0, $91 = 0, $98 = 0, $F16$0 = 0, $I18$0 = 0, $K19$057 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, sp = 0;
 sp = STACKTOP;
 if (!$mem) {
  STACKTOP = sp;
  return;
 }
 $1 = $mem + -8 | 0;
 $2 = HEAP32[20348] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $mem + ($8 + -8) | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) {
   STACKTOP = sp;
   return;
  }
  $$sum2 = -8 - $12 | 0;
  $14 = $mem + $$sum2 | 0;
  $15 = $12 + $8 | 0;
  if ($14 >>> 0 < $2 >>> 0) _abort();
  if (($14 | 0) == (HEAP32[20349] | 0)) {
   $104 = $mem + ($8 + -4) | 0;
   if ((HEAP32[$104 >> 2] & 3 | 0) != 3) {
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   HEAP32[20346] = $15;
   HEAP32[$104 >> 2] = HEAP32[$104 >> 2] & -2;
   HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1;
   HEAP32[$9 >> 2] = $15;
   STACKTOP = sp;
   return;
  }
  $19 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
   $26 = 81416 + ($19 << 1 << 2) | 0;
   if (($22 | 0) != ($26 | 0)) {
    if ($22 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) _abort();
   }
   if (($24 | 0) == ($22 | 0)) {
    HEAP32[20344] = HEAP32[20344] & ~(1 << $19);
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   if (($24 | 0) == ($26 | 0)) $$pre$phi70Z2D = $24 + 8 | 0; else {
    if ($24 >>> 0 < $2 >>> 0) _abort();
    $39 = $24 + 8 | 0;
    if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) $$pre$phi70Z2D = $39; else _abort();
   }
   HEAP32[$22 + 12 >> 2] = $24;
   HEAP32[$$pre$phi70Z2D >> 2] = $22;
   $p$0 = $14;
   $psize$0 = $15;
   break;
  }
  $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0;
  $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
  do if (($46 | 0) == ($14 | 0)) {
   $57 = $mem + ($$sum2 + 20) | 0;
   $58 = HEAP32[$57 >> 2] | 0;
   if (!$58) {
    $60 = $mem + ($$sum2 + 16) | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    if (!$61) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $61;
     $RP$0 = $60;
    }
   } else {
    $R$0 = $58;
    $RP$0 = $57;
   }
   while (1) {
    $63 = $R$0 + 20 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    if ($64) {
     $R$0 = $64;
     $RP$0 = $63;
     continue;
    }
    $66 = $R$0 + 16 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    if (!$67) break; else {
     $R$0 = $67;
     $RP$0 = $66;
    }
   }
   if ($RP$0 >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$0 >> 2] = 0;
    $R$1 = $R$0;
    break;
   }
  } else {
   $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   if ($49 >>> 0 < $2 >>> 0) _abort();
   $51 = $49 + 12 | 0;
   if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) _abort();
   $54 = $46 + 8 | 0;
   if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$51 >> 2] = $46;
    HEAP32[$54 >> 2] = $49;
    $R$1 = $46;
    break;
   } else _abort();
  } while (0);
  if (!$44) {
   $p$0 = $14;
   $psize$0 = $15;
  } else {
   $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0;
   $73 = 81680 + ($72 << 2) | 0;
   if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
    HEAP32[$73 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[20345] = HEAP32[20345] & ~(1 << $72);
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   } else {
    if ($44 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
    $82 = $44 + 16 | 0;
    if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) HEAP32[$82 >> 2] = $R$1; else HEAP32[$44 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   }
   if ($R$1 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $44;
   $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0;
   do if ($91) if ($91 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $91;
    HEAP32[$91 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $98 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0;
   if (!$98) {
    $p$0 = $14;
    $psize$0 = $15;
   } else if ($98 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $98;
    HEAP32[$98 + 24 >> 2] = $R$1;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
  }
 } else {
  $p$0 = $1;
  $psize$0 = $8;
 } while (0);
 if ($p$0 >>> 0 >= $9 >>> 0) _abort();
 $113 = $mem + ($8 + -4) | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 if (!($114 & 1)) _abort();
 if (!($114 & 2)) {
  if (($9 | 0) == (HEAP32[20350] | 0)) {
   $122 = (HEAP32[20347] | 0) + $psize$0 | 0;
   HEAP32[20347] = $122;
   HEAP32[20350] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $122 | 1;
   if (($p$0 | 0) != (HEAP32[20349] | 0)) {
    STACKTOP = sp;
    return;
   }
   HEAP32[20349] = 0;
   HEAP32[20346] = 0;
   STACKTOP = sp;
   return;
  }
  if (($9 | 0) == (HEAP32[20349] | 0)) {
   $130 = (HEAP32[20346] | 0) + $psize$0 | 0;
   HEAP32[20346] = $130;
   HEAP32[20349] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $130 | 1;
   HEAP32[$p$0 + $130 >> 2] = $130;
   STACKTOP = sp;
   return;
  }
  $135 = ($114 & -8) + $psize$0 | 0;
  $136 = $114 >>> 3;
  do if ($114 >>> 0 < 256) {
   $139 = HEAP32[$mem + $8 >> 2] | 0;
   $141 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   $143 = 81416 + ($136 << 1 << 2) | 0;
   if (($139 | 0) != ($143 | 0)) {
    if ($139 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
    if ((HEAP32[$139 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($141 | 0) == ($139 | 0)) {
    HEAP32[20344] = HEAP32[20344] & ~(1 << $136);
    break;
   }
   if (($141 | 0) == ($143 | 0)) $$pre$phi68Z2D = $141 + 8 | 0; else {
    if ($141 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
    $158 = $141 + 8 | 0;
    if ((HEAP32[$158 >> 2] | 0) == ($9 | 0)) $$pre$phi68Z2D = $158; else _abort();
   }
   HEAP32[$139 + 12 >> 2] = $141;
   HEAP32[$$pre$phi68Z2D >> 2] = $139;
  } else {
   $163 = HEAP32[$mem + ($8 + 16) >> 2] | 0;
   $165 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   do if (($165 | 0) == ($9 | 0)) {
    $177 = $mem + ($8 + 12) | 0;
    $178 = HEAP32[$177 >> 2] | 0;
    if (!$178) {
     $180 = $mem + ($8 + 8) | 0;
     $181 = HEAP32[$180 >> 2] | 0;
     if (!$181) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $181;
      $RP9$0 = $180;
     }
    } else {
     $R7$0 = $178;
     $RP9$0 = $177;
    }
    while (1) {
     $183 = $R7$0 + 20 | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     if ($184) {
      $R7$0 = $184;
      $RP9$0 = $183;
      continue;
     }
     $186 = $R7$0 + 16 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if (!$187) break; else {
      $R7$0 = $187;
      $RP9$0 = $186;
     }
    }
    if ($RP9$0 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
     HEAP32[$RP9$0 >> 2] = 0;
     $R7$1 = $R7$0;
     break;
    }
   } else {
    $168 = HEAP32[$mem + $8 >> 2] | 0;
    if ($168 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
    $171 = $168 + 12 | 0;
    if ((HEAP32[$171 >> 2] | 0) != ($9 | 0)) _abort();
    $174 = $165 + 8 | 0;
    if ((HEAP32[$174 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$171 >> 2] = $165;
     HEAP32[$174 >> 2] = $168;
     $R7$1 = $165;
     break;
    } else _abort();
   } while (0);
   if ($163) {
    $193 = HEAP32[$mem + ($8 + 20) >> 2] | 0;
    $194 = 81680 + ($193 << 2) | 0;
    if (($9 | 0) == (HEAP32[$194 >> 2] | 0)) {
     HEAP32[$194 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[20345] = HEAP32[20345] & ~(1 << $193);
      break;
     }
    } else {
     if ($163 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
     $203 = $163 + 16 | 0;
     if ((HEAP32[$203 >> 2] | 0) == ($9 | 0)) HEAP32[$203 >> 2] = $R7$1; else HEAP32[$163 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    if ($R7$1 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $163;
    $212 = HEAP32[$mem + ($8 + 8) >> 2] | 0;
    do if ($212) if ($212 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $212;
     HEAP32[$212 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $219 = HEAP32[$mem + ($8 + 12) >> 2] | 0;
    if ($219) if ($219 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $219;
     HEAP32[$219 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $135 | 1;
  HEAP32[$p$0 + $135 >> 2] = $135;
  if (($p$0 | 0) == (HEAP32[20349] | 0)) {
   HEAP32[20346] = $135;
   STACKTOP = sp;
   return;
  } else $psize$1 = $135;
 } else {
  HEAP32[$113 >> 2] = $114 & -2;
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1;
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 if ($psize$1 >>> 0 < 256) {
  $236 = $234 << 1;
  $237 = 81416 + ($236 << 2) | 0;
  $238 = HEAP32[20344] | 0;
  $239 = 1 << $234;
  if (!($238 & $239)) {
   HEAP32[20344] = $238 | $239;
   $$pre$phiZ2D = 81416 + ($236 + 2 << 2) | 0;
   $F16$0 = $237;
  } else {
   $243 = 81416 + ($236 + 2 << 2) | 0;
   $244 = HEAP32[$243 >> 2] | 0;
   if ($244 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $243;
    $F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  HEAP32[$F16$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $F16$0;
  HEAP32[$p$0 + 12 >> 2] = $237;
  STACKTOP = sp;
  return;
 }
 $250 = $psize$1 >>> 8;
 if (!$250) $I18$0 = 0; else if ($psize$1 >>> 0 > 16777215) $I18$0 = 31; else {
  $255 = ($250 + 1048320 | 0) >>> 16 & 8;
  $256 = $250 << $255;
  $259 = ($256 + 520192 | 0) >>> 16 & 4;
  $261 = $256 << $259;
  $264 = ($261 + 245760 | 0) >>> 16 & 2;
  $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
  $I18$0 = $psize$1 >>> ($269 + 7 | 0) & 1 | $269 << 1;
 }
 $275 = 81680 + ($I18$0 << 2) | 0;
 HEAP32[$p$0 + 28 >> 2] = $I18$0;
 HEAP32[$p$0 + 20 >> 2] = 0;
 HEAP32[$p$0 + 16 >> 2] = 0;
 $279 = HEAP32[20345] | 0;
 $280 = 1 << $I18$0;
 L199 : do if (!($279 & $280)) {
  HEAP32[20345] = $279 | $280;
  HEAP32[$275 >> 2] = $p$0;
  HEAP32[$p$0 + 24 >> 2] = $275;
  HEAP32[$p$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $p$0;
 } else {
  $287 = HEAP32[$275 >> 2] | 0;
  if (($I18$0 | 0) == 31) $296 = 0; else $296 = 25 - ($I18$0 >>> 1) | 0;
  L205 : do if ((HEAP32[$287 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) $T$0$lcssa = $287; else {
   $K19$057 = $psize$1 << $296;
   $T$056 = $287;
   while (1) {
    $304 = $T$056 + ($K19$057 >>> 31 << 2) + 16 | 0;
    $299 = HEAP32[$304 >> 2] | 0;
    if (!$299) break;
    if ((HEAP32[$299 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $299;
     break L205;
    } else {
     $K19$057 = $K19$057 << 1;
     $T$056 = $299;
    }
   }
   if ($304 >>> 0 < (HEAP32[20348] | 0) >>> 0) _abort(); else {
    HEAP32[$304 >> 2] = $p$0;
    HEAP32[$p$0 + 24 >> 2] = $T$056;
    HEAP32[$p$0 + 12 >> 2] = $p$0;
    HEAP32[$p$0 + 8 >> 2] = $p$0;
    break L199;
   }
  } while (0);
  $311 = $T$0$lcssa + 8 | 0;
  $312 = HEAP32[$311 >> 2] | 0;
  $313 = HEAP32[20348] | 0;
  if ($T$0$lcssa >>> 0 < $313 >>> 0) _abort();
  if ($312 >>> 0 < $313 >>> 0) _abort(); else {
   HEAP32[$312 + 12 >> 2] = $p$0;
   HEAP32[$311 >> 2] = $p$0;
   HEAP32[$p$0 + 8 >> 2] = $312;
   HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$0 + 24 >> 2] = 0;
   break;
  }
 } while (0);
 $321 = (HEAP32[20352] | 0) + -1 | 0;
 HEAP32[20352] = $321;
 if (!$321) $sp$0$in$i = 81832 | 0; else {
  STACKTOP = sp;
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[20352] = -1;
 STACKTOP = sp;
 return;
}
function _gsl_sf_mathieu_a_array($order_min, $order_max, $qq, $work, $result_array) {
 $order_min = $order_min | 0;
 $order_max = $order_max | 0;
 $qq = +$qq;
 $work = $work | 0;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $10 = 0, $107 = 0, $11 = 0, $146 = 0, $158 = 0, $170 = 0, $186 = 0, $2 = 0, $200 = 0, $222 = 0.0, $245 = 0, $248 = 0, $255 = 0.0, $258 = 0, $273 = 0, $282 = 0, $3 = 0, $304 = 0.0, $327 = 0, $4 = 0, $5 = 0, $6 = 0, $61 = 0.0, $7 = 0, $70 = 0.0, $8 = 0, $9 = 0, $95 = 0.0, $aa = 0, $dd = 0, $e2 = 0, $ee = 0, $eval = 0, $evec = 0, $even_order = 0, $extra_values = 0, $ii = 0, $jj = 0, $mat = 0, $odd_order = 0, $status = 0, $tt = 0, $wmat = 0, $zz = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $0 = sp + 288 | 0;
 $1 = sp + 284 | 0;
 $2 = sp + 280 | 0;
 $3 = sp;
 $4 = sp + 276 | 0;
 $5 = sp + 272 | 0;
 $even_order = sp + 268 | 0;
 $odd_order = sp + 264 | 0;
 $extra_values = sp + 260 | 0;
 $ii = sp + 256 | 0;
 $jj = sp + 252 | 0;
 $status = sp + 248 | 0;
 $tt = sp + 244 | 0;
 $dd = sp + 240 | 0;
 $ee = sp + 236 | 0;
 $e2 = sp + 232 | 0;
 $zz = sp + 228 | 0;
 $aa = sp + 224 | 0;
 $mat = sp + 200 | 0;
 $evec = sp + 176 | 0;
 $eval = sp + 156 | 0;
 $wmat = sp + 152 | 0;
 $6 = sp + 128 | 0;
 $7 = sp + 104 | 0;
 $8 = sp + 80 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 32 | 0;
 $11 = sp + 8 | 0;
 HEAP32[$1 >> 2] = $order_min;
 HEAP32[$2 >> 2] = $order_max;
 HEAPF64[$3 >> 3] = $qq;
 HEAP32[$4 >> 2] = $work;
 HEAP32[$5 >> 2] = $result_array;
 HEAP32[$even_order >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2];
 HEAP32[$odd_order >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2];
 HEAP32[$extra_values >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2];
 HEAP32[$tt >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 48 >> 2];
 HEAP32[$dd >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 40 >> 2];
 HEAP32[$ee >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 44 >> 2];
 HEAP32[$e2 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2];
 HEAP32[$zz >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 56 >> 2];
 HEAP32[$aa >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2];
 HEAP32[$wmat >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 68 >> 2];
 if ((HEAP32[$2 >> 2] | 0) >>> 0 <= (HEAP32[HEAP32[$4 >> 2] >> 2] | 0) >>> 0) if (!((HEAP32[$1 >> 2] | 0) < 0 ? 1 : (HEAP32[$2 >> 2] | 0) <= (HEAP32[$1 >> 2] | 0))) {
  HEAPF64[HEAP32[$tt >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$tt >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[(HEAP32[$tt >> 2] | 0) + 16 >> 3] = +HEAPF64[$3 >> 3];
  HEAP32[$ii >> 2] = 1;
  while (1) {
   $61 = +HEAPF64[$3 >> 3];
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= ((HEAP32[$even_order >> 2] | 0) - 1 | 0) >>> 0) break;
   HEAPF64[(HEAP32[$tt >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) * 3 << 3) >> 3] = $61;
   $70 = +((Math_imul(HEAP32[$ii >> 2] << 2, HEAP32[$ii >> 2] | 0) | 0) >>> 0);
   HEAPF64[(HEAP32[$tt >> 2] | 0) + (((HEAP32[$ii >> 2] | 0) * 3 | 0) + 1 << 3) >> 3] = $70;
   HEAPF64[(HEAP32[$tt >> 2] | 0) + (((HEAP32[$ii >> 2] | 0) * 3 | 0) + 2 << 3) >> 3] = +HEAPF64[$3 >> 3];
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAPF64[(HEAP32[$tt >> 2] | 0) + (((HEAP32[$even_order >> 2] | 0) * 3 | 0) - 3 << 3) >> 3] = $61;
  $95 = +((Math_imul((HEAP32[$even_order >> 2] | 0) - 1 << 2, (HEAP32[$even_order >> 2] | 0) - 1 | 0) | 0) >>> 0);
  HEAPF64[(HEAP32[$tt >> 2] | 0) + (((HEAP32[$even_order >> 2] | 0) * 3 | 0) - 2 << 3) >> 3] = $95;
  HEAPF64[(HEAP32[$tt >> 2] | 0) + (((HEAP32[$even_order >> 2] | 0) * 3 | 0) - 1 << 3) >> 3] = 0.0;
  $107 = (HEAP32[$tt >> 2] | 0) + 24 | 0;
  HEAPF64[$107 >> 3] = +HEAPF64[$107 >> 3] * 2.0;
  HEAP32[$status >> 2] = _figi(HEAP32[$even_order >> 2] | 0, HEAP32[$tt >> 2] | 0, HEAP32[$dd >> 2] | 0, HEAP32[$ee >> 2] | 0, HEAP32[$e2 >> 2] | 0) | 0;
  if (HEAP32[$status >> 2] | 0) {
   _gsl_error(54640, 54536, 748, 5);
   HEAP32[$0 >> 2] = 5;
   $327 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $327 | 0;
  }
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (Math_imul(HEAP32[$even_order >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0) >>> 0) break;
   HEAPF64[(HEAP32[$zz >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$zz >> 2] >> 3] = +HEAPF64[HEAP32[$dd >> 2] >> 3];
  HEAPF64[(HEAP32[$zz >> 2] | 0) + 8 >> 3] = +HEAPF64[(HEAP32[$ee >> 2] | 0) + 8 >> 3];
  HEAP32[$ii >> 2] = 1;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= ((HEAP32[$even_order >> 2] | 0) - 1 | 0) >>> 0) break;
   $146 = Math_imul(HEAP32[$ii >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0;
   HEAPF64[(HEAP32[$zz >> 2] | 0) + ($146 + (HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3] = +HEAPF64[(HEAP32[$ee >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
   $158 = Math_imul(HEAP32[$ii >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0;
   HEAPF64[(HEAP32[$zz >> 2] | 0) + ($158 + (HEAP32[$ii >> 2] | 0) << 3) >> 3] = +HEAPF64[(HEAP32[$dd >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
   $170 = Math_imul(HEAP32[$ii >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0;
   HEAPF64[(HEAP32[$zz >> 2] | 0) + ($170 + (HEAP32[$ii >> 2] | 0) + 1 << 3) >> 3] = +HEAPF64[(HEAP32[$ee >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) + 1 << 3) >> 3];
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  $186 = Math_imul(HEAP32[$even_order >> 2] | 0, (HEAP32[$even_order >> 2] | 0) - 1 | 0) | 0;
  HEAPF64[(HEAP32[$zz >> 2] | 0) + ($186 + (HEAP32[$even_order >> 2] | 0) - 2 << 3) >> 3] = +HEAPF64[(HEAP32[$ee >> 2] | 0) + ((HEAP32[$even_order >> 2] | 0) - 1 << 3) >> 3];
  $200 = (Math_imul(HEAP32[$even_order >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0) - 1 | 0;
  HEAPF64[(HEAP32[$zz >> 2] | 0) + ($200 << 3) >> 3] = +HEAPF64[(HEAP32[$dd >> 2] | 0) + ((HEAP32[$even_order >> 2] | 0) - 1 << 3) >> 3];
  _gsl_matrix_view_array($6 | 0, HEAP32[$zz >> 2] | 0, HEAP32[$even_order >> 2] | 0, HEAP32[$even_order >> 2] | 0);
  HEAP32[$mat + 0 >> 2] = HEAP32[$6 + 0 >> 2];
  HEAP32[$mat + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$mat + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$mat + 12 >> 2] = HEAP32[$6 + 12 >> 2];
  HEAP32[$mat + 16 >> 2] = HEAP32[$6 + 16 >> 2];
  HEAP32[$mat + 20 >> 2] = HEAP32[$6 + 20 >> 2];
  _gsl_vector_subvector($7 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 60 >> 2] | 0, 0, HEAP32[$even_order >> 2] | 0);
  HEAP32[$eval + 0 >> 2] = HEAP32[$7 + 0 >> 2];
  HEAP32[$eval + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$eval + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  HEAP32[$eval + 12 >> 2] = HEAP32[$7 + 12 >> 2];
  HEAP32[$eval + 16 >> 2] = HEAP32[$7 + 16 >> 2];
  _gsl_matrix_submatrix($8 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 64 >> 2] | 0, 0, 0, HEAP32[$even_order >> 2] | 0, HEAP32[$even_order >> 2] | 0);
  HEAP32[$evec + 0 >> 2] = HEAP32[$8 + 0 >> 2];
  HEAP32[$evec + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$evec + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$evec + 12 >> 2] = HEAP32[$8 + 12 >> 2];
  HEAP32[$evec + 16 >> 2] = HEAP32[$8 + 16 >> 2];
  HEAP32[$evec + 20 >> 2] = HEAP32[$8 + 20 >> 2];
  _gsl_eigen_symmv($mat | 0, $eval | 0, $evec | 0, HEAP32[$wmat >> 2] | 0) | 0;
  _gsl_eigen_symmv_sort($eval | 0, $evec | 0, 0) | 0;
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= ((HEAP32[$even_order >> 2] | 0) - (HEAP32[$extra_values >> 2] | 0) | 0) >>> 0) break;
   $222 = +_gsl_vector_get($eval | 0, HEAP32[$ii >> 2] | 0);
   HEAPF64[(HEAP32[$aa >> 2] | 0) + (HEAP32[$ii >> 2] << 1 << 3) >> 3] = $222;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (Math_imul(HEAP32[$odd_order >> 2] | 0, HEAP32[$odd_order >> 2] | 0) | 0) >>> 0) break;
   HEAPF64[(HEAP32[$zz >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (HEAP32[$odd_order >> 2] | 0) >>> 0) break;
   HEAP32[$jj >> 2] = 0;
   while (1) {
    $245 = HEAP32[$ii >> 2] | 0;
    if ((HEAP32[$jj >> 2] | 0) >>> 0 >= (HEAP32[$odd_order >> 2] | 0) >>> 0) break;
    $248 = HEAP32[$ii >> 2] | 0;
    do if (($245 | 0) == (HEAP32[$jj >> 2] | 0)) {
     $255 = +((Math_imul(($248 << 1) + 1 | 0, (HEAP32[$ii >> 2] << 1) + 1 | 0) | 0) >>> 0);
     $258 = Math_imul(HEAP32[$ii >> 2] | 0, HEAP32[$odd_order >> 2] | 0) | 0;
     HEAPF64[(HEAP32[$zz >> 2] | 0) + ($258 + (HEAP32[$jj >> 2] | 0) << 3) >> 3] = $255;
    } else {
     if (($248 | 0) != ((HEAP32[$jj >> 2] | 0) + 1 | 0)) if (((HEAP32[$ii >> 2] | 0) + 1 | 0) != (HEAP32[$jj >> 2] | 0)) break;
     $273 = Math_imul(HEAP32[$ii >> 2] | 0, HEAP32[$odd_order >> 2] | 0) | 0;
     HEAPF64[(HEAP32[$zz >> 2] | 0) + ($273 + (HEAP32[$jj >> 2] | 0) << 3) >> 3] = +HEAPF64[$3 >> 3];
    } while (0);
    HEAP32[$jj >> 2] = (HEAP32[$jj >> 2] | 0) + 1;
   }
   HEAP32[$ii >> 2] = $245 + 1;
  }
  $282 = HEAP32[$zz >> 2] | 0;
  HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + +HEAPF64[$3 >> 3];
  _gsl_matrix_view_array($9 | 0, HEAP32[$zz >> 2] | 0, HEAP32[$odd_order >> 2] | 0, HEAP32[$odd_order >> 2] | 0);
  HEAP32[$mat + 0 >> 2] = HEAP32[$9 + 0 >> 2];
  HEAP32[$mat + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$mat + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$mat + 12 >> 2] = HEAP32[$9 + 12 >> 2];
  HEAP32[$mat + 16 >> 2] = HEAP32[$9 + 16 >> 2];
  HEAP32[$mat + 20 >> 2] = HEAP32[$9 + 20 >> 2];
  _gsl_vector_subvector($10 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 60 >> 2] | 0, 0, HEAP32[$odd_order >> 2] | 0);
  HEAP32[$eval + 0 >> 2] = HEAP32[$10 + 0 >> 2];
  HEAP32[$eval + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$eval + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$eval + 12 >> 2] = HEAP32[$10 + 12 >> 2];
  HEAP32[$eval + 16 >> 2] = HEAP32[$10 + 16 >> 2];
  _gsl_matrix_submatrix($11 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 64 >> 2] | 0, 0, 0, HEAP32[$odd_order >> 2] | 0, HEAP32[$odd_order >> 2] | 0);
  HEAP32[$evec + 0 >> 2] = HEAP32[$11 + 0 >> 2];
  HEAP32[$evec + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$evec + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  HEAP32[$evec + 12 >> 2] = HEAP32[$11 + 12 >> 2];
  HEAP32[$evec + 16 >> 2] = HEAP32[$11 + 16 >> 2];
  HEAP32[$evec + 20 >> 2] = HEAP32[$11 + 20 >> 2];
  _gsl_eigen_symmv($mat | 0, $eval | 0, $evec | 0, HEAP32[$wmat >> 2] | 0) | 0;
  _gsl_eigen_symmv_sort($eval | 0, $evec | 0, 0) | 0;
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= ((HEAP32[$odd_order >> 2] | 0) - (HEAP32[$extra_values >> 2] | 0) | 0) >>> 0) break;
   $304 = +_gsl_vector_get($eval | 0, HEAP32[$ii >> 2] | 0);
   HEAPF64[(HEAP32[$aa >> 2] | 0) + ((HEAP32[$ii >> 2] << 1) + 1 << 3) >> 3] = $304;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAP32[$ii >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) break;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = +HEAPF64[(HEAP32[$aa >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = 0;
  $327 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $327 | 0;
 }
 _gsl_error(54600, 54536, 723, 4);
 HEAP32[$0 >> 2] = 4;
 $327 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $327 | 0;
}
function _hyperg_U_infinite_sum_simple($N, $a, $bint, $b, $beps, $x, $xeps, $sum, $result) {
 $N = $N | 0;
 $a = +$a;
 $bint = +$bint;
 $b = +$b;
 $beps = +$beps;
 $x = +$x;
 $xeps = +$xeps;
 $sum = $sum | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $112 = 0.0, $126 = 0.0, $13 = 0, $135 = 0.0, $145 = 0.0, $155 = 0.0, $192 = 0.0, $2 = 0, $205 = 0.0, $219 = 0.0, $233 = 0.0, $247 = 0.0, $265 = 0, $27 = 0.0, $274 = 0.0, $293 = 0.0, $296 = 0.0, $3 = 0, $343 = 0.0, $352 = 0.0, $373 = 0.0, $38 = 0.0, $388 = 0.0, $390 = 0, $399 = 0.0, $4 = 0, $401 = 0, $405 = 0, $411 = 0, $5 = 0, $6 = 0, $60 = 0, $7 = 0, $71 = 0, $8 = 0, $92 = 0, $X = 0, $a0_err = 0, $a0_multiplier = 0, $a0_val = 0, $b0_err = 0, $b0_multiplier = 0, $b0_val = 0, $dchu_err = 0, $dchu_val = 0, $dgamrbxi = 0, $factor_err = 0, $factor_val = 0, $gamr = 0, $gamri1 = 0, $gamrni = 0, $gamrxi1beps = 0, $i = 0, $istrt = 0, $pochai = 0, $pochaxibeps = 0, $powx = 0, $sarg = 0, $sfact = 0, $stat_all = 0, $stat_dgamrbxi = 0, $stat_gam123 = 0, $stat_gamall = 0, $stat_gamr = 0, $stat_gamri1 = 0, $stat_gamrni = 0, $stat_gamrxi1beps = 0, $stat_pochai = 0, $stat_pochaxibeps = 0, $stat_powx = 0, $t_err = 0, $t_val = 0, $xi = 0, $xi1 = 0, $xi12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $0 = sp + 388 | 0;
 $1 = sp + 384 | 0;
 $2 = sp + 320 | 0;
 $3 = sp + 312 | 0;
 $4 = sp + 304 | 0;
 $5 = sp + 296 | 0;
 $6 = sp + 288 | 0;
 $7 = sp + 280 | 0;
 $8 = sp + 380 | 0;
 $istrt = sp + 376 | 0;
 $xi = sp + 264 | 0;
 $powx = sp + 248 | 0;
 $stat_powx = sp + 372 | 0;
 $sarg = sp + 240 | 0;
 $sfact = sp + 232 | 0;
 $factor_val = sp + 224 | 0;
 $factor_err = sp + 216 | 0;
 $pochai = sp + 200 | 0;
 $gamri1 = sp + 184 | 0;
 $gamrni = sp + 168 | 0;
 $stat_pochai = sp + 368 | 0;
 $stat_gamri1 = sp + 364 | 0;
 $stat_gamrni = sp + 360 | 0;
 $stat_gam123 = sp + 356 | 0;
 $stat_gamall = sp + 352 | 0;
 $pochaxibeps = sp + 152 | 0;
 $gamrxi1beps = sp + 136 | 0;
 $stat_pochaxibeps = sp + 348 | 0;
 $stat_gamrxi1beps = sp + 344 | 0;
 $stat_all = sp + 340 | 0;
 $X = sp + 128 | 0;
 $b0_val = sp + 120 | 0;
 $b0_err = sp + 112 | 0;
 $i = sp + 336 | 0;
 $dchu_val = sp + 104 | 0;
 $dchu_err = sp + 96 | 0;
 $t_val = sp + 88 | 0;
 $t_err = sp + 80 | 0;
 $gamr = sp + 64 | 0;
 $dgamrbxi = sp + 48 | 0;
 $stat_gamr = sp + 332 | 0;
 $stat_dgamrbxi = sp + 328 | 0;
 $a0_val = sp + 40 | 0;
 $a0_err = sp + 32 | 0;
 $xi1 = sp + 24 | 0;
 $xi12 = sp + 16 | 0;
 $a0_multiplier = sp + 8 | 0;
 $b0_multiplier = sp;
 HEAP32[$1 >> 2] = $N;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $bint;
 HEAPF64[$4 >> 3] = $b;
 HEAPF64[$5 >> 3] = $beps;
 HEAPF64[$6 >> 3] = $x;
 HEAPF64[$7 >> 3] = $xeps;
 HEAP32[$8 >> 2] = $result;
 HEAPF64[sp + 272 >> 3] = 4.440892098500626e-16;
 if ((HEAP32[$1 >> 2] | 0) < 1) $13 = 1 - (HEAP32[$1 >> 2] | 0) | 0; else $13 = 0;
 HEAP32[$istrt >> 2] = $13;
 HEAPF64[$xi >> 3] = +(HEAP32[$istrt >> 2] | 0);
 HEAP32[$stat_powx >> 2] = _gsl_sf_pow_int_e(+HEAPF64[$6 >> 3], HEAP32[$istrt >> 2] | 0, $powx) | 0;
 HEAPF64[$sarg >> 3] = +HEAPF64[$5 >> 3] * 3.141592653589793;
 if (+HEAPF64[$sarg >> 3] != 0.0) $27 = +HEAPF64[$sarg >> 3] / +Math_sin(+(+HEAPF64[$sarg >> 3])); else $27 = 1.0;
 HEAPF64[$sfact >> 3] = $27;
 HEAPF64[$factor_val >> 3] = +HEAPF64[$sfact >> 3] * ((HEAP32[$1 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0) * +HEAPF64[$powx >> 3];
 $38 = +Math_abs(+(+HEAPF64[$powx + 8 >> 3]));
 HEAPF64[$factor_err >> 3] = $38 + +Math_abs(+(+HEAPF64[$factor_val >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_pochai >> 2] = _gsl_sf_poch_e(+HEAPF64[$2 >> 3], +HEAPF64[$xi >> 3], $pochai) | 0;
 HEAP32[$stat_gamri1 >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$xi >> 3] + 1.0, $gamri1) | 0;
 HEAP32[$stat_gamrni >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$3 >> 3] + +HEAPF64[$xi >> 3], $gamrni) | 0;
 if (HEAP32[$stat_gamri1 >> 2] | 0) $60 = HEAP32[$stat_gamri1 >> 2] | 0; else $60 = (HEAP32[$stat_gamrni >> 2] | 0) != 0 ? HEAP32[$stat_gamrni >> 2] | 0 : 0;
 HEAP32[$stat_gam123 >> 2] = $60;
 do if (HEAP32[$stat_gam123 >> 2] | 0) $71 = HEAP32[$stat_gam123 >> 2] | 0; else if (HEAP32[$stat_pochai >> 2] | 0) {
  $71 = HEAP32[$stat_pochai >> 2] | 0;
  break;
 } else {
  $71 = (HEAP32[$stat_powx >> 2] | 0) != 0 ? HEAP32[$stat_powx >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$stat_gamall >> 2] = $71;
 HEAP32[$stat_pochaxibeps >> 2] = _gsl_sf_poch_e(+HEAPF64[$2 >> 3], +HEAPF64[$xi >> 3] - +HEAPF64[$5 >> 3], $pochaxibeps) | 0;
 HEAP32[$stat_gamrxi1beps >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$xi >> 3] + 1.0 - +HEAPF64[$5 >> 3], $gamrxi1beps) | 0;
 do if (HEAP32[$stat_gamall >> 2] | 0) $92 = HEAP32[$stat_gamall >> 2] | 0; else if (HEAP32[$stat_pochaxibeps >> 2] | 0) {
  $92 = HEAP32[$stat_pochaxibeps >> 2] | 0;
  break;
 } else {
  $92 = (HEAP32[$stat_gamrxi1beps >> 2] | 0) != 0 ? HEAP32[$stat_gamrxi1beps >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$stat_all >> 2] = $92;
 $100 = +HEAPF64[$sfact >> 3] * ((HEAP32[$1 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0) * +HEAPF64[$powx >> 3];
 $112 = $100 * +_gsl_sf_poch(+HEAPF64[$2 >> 3] + 1.0 - +HEAPF64[$4 >> 3], +HEAPF64[$xi >> 3] - 1.0 + +HEAPF64[$4 >> 3] - +HEAPF64[$5 >> 3]);
 HEAPF64[$X >> 3] = $112 * +_gsl_sf_gammainv(+HEAPF64[$2 >> 3]);
 HEAPF64[$b0_val >> 3] = +HEAPF64[$X >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamrxi1beps >> 3];
 $126 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrni >> 3]));
 $135 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrxi1beps >> 3]));
 $145 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamrxi1beps >> 3]));
 $155 = +Math_abs(+(+HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamrxi1beps >> 3]));
 HEAPF64[$b0_err >> 3] = $126 * +HEAPF64[$gamrxi1beps + 8 >> 3] + $135 * +HEAPF64[$gamrni + 8 >> 3] + $145 * +HEAPF64[$pochaxibeps + 8 >> 3] + $155 * +HEAPF64[$factor_err >> 3] + +Math_abs(+(+HEAPF64[$b0_val >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_gamr >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$2 >> 3] + 1.0 - +HEAPF64[$4 >> 3], $gamr) | 0;
 HEAP32[$stat_dgamrbxi >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$4 >> 3] + +HEAPF64[$xi >> 3], $dgamrbxi) | 0;
 HEAPF64[$a0_val >> 3] = +HEAPF64[$factor_val >> 3] * +HEAPF64[$gamr >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$dgamrbxi >> 3] * +HEAPF64[$gamri1 >> 3] / +HEAPF64[$5 >> 3];
 $192 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$dgamrbxi >> 3] * +HEAPF64[$gamri1 >> 3] / +HEAPF64[$5 >> 3]));
 $205 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$gamr >> 3] * +HEAPF64[$dgamrbxi >> 3] * +HEAPF64[$gamri1 >> 3] / +HEAPF64[$5 >> 3]));
 $219 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$gamr >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$gamri1 >> 3] / +HEAPF64[$5 >> 3]));
 $233 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$gamr >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$dgamrbxi >> 3] / +HEAPF64[$5 >> 3]));
 $247 = +Math_abs(+(+HEAPF64[$pochai >> 3] * +HEAPF64[$gamr >> 3] * +HEAPF64[$dgamrbxi >> 3] * +HEAPF64[$gamri1 >> 3] / +HEAPF64[$5 >> 3]));
 HEAPF64[$a0_err >> 3] = $192 * +HEAPF64[$gamr + 8 >> 3] + $205 * +HEAPF64[$pochai + 8 >> 3] + $219 * +HEAPF64[$dgamrbxi + 8 >> 3] + $233 * +HEAPF64[$gamri1 + 8 >> 3] + $247 * +HEAPF64[$factor_err >> 3] + +Math_abs(+(+HEAPF64[$a0_val >> 3])) * 4.440892098500626e-16;
 do if (HEAP32[$stat_all >> 2] | 0) $265 = HEAP32[$stat_all >> 2] | 0; else if (HEAP32[$stat_gamr >> 2] | 0) {
  $265 = HEAP32[$stat_gamr >> 2] | 0;
  break;
 } else {
  $265 = (HEAP32[$stat_dgamrbxi >> 2] | 0) != 0 ? HEAP32[$stat_dgamrbxi >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$stat_all >> 2] = $265;
 HEAPF64[$b0_val >> 3] = +HEAPF64[$7 >> 3] * +HEAPF64[$b0_val >> 3] / +HEAPF64[$5 >> 3];
 $274 = +Math_abs(+(+HEAPF64[$7 >> 3] / +HEAPF64[$5 >> 3]));
 HEAPF64[$b0_err >> 3] = $274 * +HEAPF64[$b0_err >> 3] + +Math_abs(+(+HEAPF64[$b0_val >> 3])) * 8.881784197001252e-16;
 HEAPF64[$dchu_val >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$a0_val >> 3] - +HEAPF64[$b0_val >> 3];
 $293 = +Math_abs(+(+HEAPF64[$sum >> 3]));
 $296 = $293 + +Math_abs(+(+HEAPF64[$a0_val >> 3]));
 HEAPF64[$dchu_err >> 3] = +HEAPF64[$sum + 8 >> 3] + +HEAPF64[$a0_err >> 3] + +HEAPF64[$b0_err >> 3] + ($296 + +Math_abs(+(+HEAPF64[$b0_val >> 3]))) * 4.440892098500626e-16;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 2e3) break;
  HEAPF64[$xi1 >> 3] = +((HEAP32[$istrt >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0);
  HEAPF64[$xi12 >> 3] = +((HEAP32[$istrt >> 2] | 0) + (HEAP32[$i >> 2] | 0) - 1 | 0);
  HEAPF64[$a0_multiplier >> 3] = (+HEAPF64[$2 >> 3] + +HEAPF64[$xi12 >> 3]) * +HEAPF64[$6 >> 3] / ((+HEAPF64[$4 >> 3] + +HEAPF64[$xi12 >> 3]) * +HEAPF64[$xi1 >> 3]);
  HEAPF64[$b0_multiplier >> 3] = (+HEAPF64[$2 >> 3] + +HEAPF64[$xi12 >> 3] - +HEAPF64[$5 >> 3]) * +HEAPF64[$6 >> 3] / ((+HEAPF64[$3 >> 3] + +HEAPF64[$xi12 >> 3]) * (+HEAPF64[$xi1 >> 3] - +HEAPF64[$5 >> 3]));
  HEAPF64[$a0_val >> 3] = +HEAPF64[$a0_val >> 3] * +HEAPF64[$a0_multiplier >> 3];
  $343 = +Math_abs(+(+HEAPF64[$a0_multiplier >> 3]));
  HEAPF64[$a0_err >> 3] = +HEAPF64[$a0_err >> 3] + $343 * +HEAPF64[$a0_err >> 3];
  HEAPF64[$b0_val >> 3] = +HEAPF64[$b0_val >> 3] * +HEAPF64[$b0_multiplier >> 3];
  $352 = +Math_abs(+(+HEAPF64[$b0_multiplier >> 3]));
  HEAPF64[$b0_err >> 3] = +HEAPF64[$b0_err >> 3] + $352 * +HEAPF64[$b0_err >> 3];
  HEAPF64[$t_val >> 3] = +HEAPF64[$a0_val >> 3] - +HEAPF64[$b0_val >> 3];
  HEAPF64[$t_err >> 3] = +HEAPF64[$a0_err >> 3] + +HEAPF64[$b0_err >> 3];
  HEAPF64[$dchu_val >> 3] = +HEAPF64[$dchu_val >> 3] + +HEAPF64[$t_val >> 3];
  HEAPF64[$dchu_err >> 3] = +HEAPF64[$dchu_err >> 3] + +HEAPF64[$t_err >> 3];
  if (!(_finite(+(+HEAPF64[$t_val >> 3])) | 0)) break;
  $373 = +Math_abs(+(+HEAPF64[$t_val >> 3]));
  if ($373 < +Math_abs(+(+HEAPF64[$dchu_val >> 3])) * 4.440892098500626e-16) break;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$8 >> 2] >> 3] = +HEAPF64[$dchu_val >> 3];
 HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = +HEAPF64[$dchu_err >> 3] * 2.0;
 $388 = +Math_abs(+(+HEAPF64[$t_val >> 3])) * 2.0;
 $390 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
 HEAPF64[$390 >> 3] = +HEAPF64[$390 >> 3] + $388;
 $399 = (+(HEAP32[$i >> 2] | 0) + 2.0) * 8.881784197001252e-16 * +Math_abs(+(+HEAPF64[$dchu_val >> 3]));
 $401 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
 HEAPF64[$401 >> 3] = +HEAPF64[$401 >> 3] + $399;
 $405 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
 HEAPF64[$405 >> 3] = +HEAPF64[$405 >> 3] * 2.0;
 if ((HEAP32[$i >> 2] | 0) >= 2e3) {
  _gsl_error(52312, 52168, 537, 11);
  HEAP32[$0 >> 2] = 11;
  $411 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $411 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$stat_all >> 2];
  $411 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $411 | 0;
 }
 return 0;
}
function _gsl_sf_hyperg_1F1_e($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $111 = 0.0, $122 = 0.0, $125 = 0.0, $137 = 0, $169 = 0, $2 = 0, $221 = 0.0, $234 = 0, $250 = 0.0, $263 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $279 = 0, $280 = 0.0, $282 = 0.0, $288 = 0.0, $3 = 0, $301 = 0, $314 = 0.0, $327 = 0, $333 = 0, $38 = 0, $4 = 0, $49 = 0, $55 = 0, $61 = 0, $67 = 0, $F_renorm = 0, $K = 0, $K7 = 0, $Kummer_1F1 = 0, $Kummer_1F12 = 0, $a_integer = 0, $a_neg_integer = 0, $b_integer = 0, $b_neg_integer = 0, $bma = 0, $bma_integer = 0, $bma_neg_integer = 0, $exm1 = 0, $hx = 0, $lnab = 0, $m_arg = 0, $rinta = 0, $rintb = 0, $rintbma = 0, $sa = 0, $sb = 0, $stat_F = 0, $stat_K = 0, $stat_K3 = 0, $stat_K5 = 0, $stat_K8 = 0, $stat_e = 0, $stat_e1 = 0, $stat_e4 = 0, $stat_e6 = 0, $stat_e9 = 0, $stat_hx = 0, $stat_m = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $0 = sp + 276 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 184 | 0;
 $3 = sp + 176 | 0;
 $4 = sp + 272 | 0;
 $bma = sp + 168 | 0;
 $rinta = sp + 160 | 0;
 $rintb = sp + 152 | 0;
 $rintbma = sp + 144 | 0;
 $a_integer = sp + 268 | 0;
 $b_integer = sp + 264 | 0;
 $bma_integer = sp + 260 | 0;
 $b_neg_integer = sp + 256 | 0;
 $a_neg_integer = sp + 252 | 0;
 $bma_neg_integer = sp + 248 | 0;
 $exm1 = sp + 128 | 0;
 $stat_e = sp + 244 | 0;
 $sa = sp + 120 | 0;
 $sb = sp + 112 | 0;
 $lnab = sp + 104 | 0;
 $hx = sp + 88 | 0;
 $stat_hx = sp + 240 | 0;
 $m_arg = sp + 80 | 0;
 $F_renorm = sp + 64 | 0;
 $stat_F = sp + 236 | 0;
 $stat_m = sp + 232 | 0;
 $Kummer_1F1 = sp + 48 | 0;
 $stat_K = sp + 228 | 0;
 $stat_e1 = sp + 224 | 0;
 $Kummer_1F12 = sp + 32 | 0;
 $stat_K3 = sp + 220 | 0;
 $stat_e4 = sp + 216 | 0;
 $K = sp + 16 | 0;
 $stat_K5 = sp + 212 | 0;
 $stat_e6 = sp + 208 | 0;
 $K7 = sp;
 $stat_K8 = sp + 204 | 0;
 $stat_e9 = sp + 200 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$bma >> 3] = +HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3];
 HEAPF64[$rinta >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] + .5));
 HEAPF64[$rintb >> 3] = +Math_floor(+(+HEAPF64[$2 >> 3] + .5));
 HEAPF64[$rintbma >> 3] = +Math_floor(+(+HEAPF64[$bma >> 3] + .5));
 if (+Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$rinta >> 3])) < 2.220446049250313e-14) if (+HEAPF64[$rinta >> 3] > -2147483648.0) $27 = +HEAPF64[$rinta >> 3] < 2147483647.0; else $27 = 0; else $27 = 0;
 HEAP32[$a_integer >> 2] = $27 & 1;
 if (+Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$rintb >> 3])) < 2.220446049250313e-14) if (+HEAPF64[$rintb >> 3] > -2147483648.0) $38 = +HEAPF64[$rintb >> 3] < 2147483647.0; else $38 = 0; else $38 = 0;
 HEAP32[$b_integer >> 2] = $38 & 1;
 if (+Math_abs(+(+HEAPF64[$bma >> 3] - +HEAPF64[$rintbma >> 3])) < 2.220446049250313e-14) if (+HEAPF64[$rintbma >> 3] > -2147483648.0) $49 = +HEAPF64[$rintbma >> 3] < 2147483647.0; else $49 = 0; else $49 = 0;
 HEAP32[$bma_integer >> 2] = $49 & 1;
 if (+HEAPF64[$2 >> 3] < -.1) $55 = (HEAP32[$b_integer >> 2] | 0) != 0; else $55 = 0;
 HEAP32[$b_neg_integer >> 2] = $55 & 1;
 if (+HEAPF64[$1 >> 3] < -.1) $61 = (HEAP32[$a_integer >> 2] | 0) != 0; else $61 = 0;
 HEAP32[$a_neg_integer >> 2] = $61 & 1;
 if (+HEAPF64[$bma >> 3] < -.1) $67 = (HEAP32[$bma_integer >> 2] | 0) != 0; else $67 = 0;
 HEAP32[$bma_neg_integer >> 2] = $67 & 1;
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51664, 51680, 1871, 1);
  HEAP32[$0 >> 2] = 1;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 if (+HEAPF64[$1 >> 3] == +HEAPF64[$2 >> 3]) {
  HEAP32[$0 >> 2] = _gsl_sf_exp_e(+HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 if (+Math_abs(+(+HEAPF64[$2 >> 3])) < 2.220446049250313e-14) if (+Math_abs(+(+HEAPF64[$1 >> 3])) < 2.220446049250313e-14) {
  HEAP32[$stat_e >> 2] = _gsl_sf_expm1_e(+HEAPF64[$3 >> 3], $exm1) | 0;
  HEAPF64[$sa >> 3] = +HEAPF64[$1 >> 3] > 0.0 ? 1.0 : -1.0;
  HEAPF64[$sb >> 3] = +HEAPF64[$2 >> 3] > 0.0 ? 1.0 : -1.0;
  HEAPF64[$lnab >> 3] = +Math_log(+(+Math_abs(+(+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3]))));
  $111 = +Math_abs(+(+HEAPF64[$lnab >> 3])) * 2.220446049250313e-16;
  HEAP32[$stat_hx >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnab >> 3], $111, +HEAPF64[$sa >> 3] * +HEAPF64[$sb >> 3] * +HEAPF64[$exm1 >> 3], +HEAPF64[$exm1 + 8 >> 3], $hx) | 0;
  $122 = +HEAPF64[$hx >> 3];
  if (+HEAPF64[$hx >> 3] == 1.7976931348623157e+308) $125 = $122; else $125 = 1.0 + $122;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $125;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$hx + 8 >> 3];
  if (HEAP32[$stat_hx >> 2] | 0) $137 = HEAP32[$stat_hx >> 2] | 0; else $137 = (HEAP32[$stat_e >> 2] | 0) != 0 ? HEAP32[$stat_e >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $137;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 if (+Math_abs(+(+HEAPF64[$2 >> 3])) < 2.220446049250313e-14) if (+Math_abs(+(+HEAPF64[$3 >> 3] * +HEAPF64[$1 >> 3])) < 1.0) {
  HEAPF64[$m_arg >> 3] = 1.0 / (+HEAPF64[$2 >> 3] * .5);
  HEAP32[$stat_F >> 2] = _hyperg_1F1_renorm_b0(+HEAPF64[$1 >> 3], +HEAPF64[$3 >> 3], $F_renorm) | 0;
  HEAP32[$stat_m >> 2] = _gsl_sf_multiply_err_e(+HEAPF64[$m_arg >> 3], +HEAPF64[$m_arg >> 3] * 4.440892098500626e-16, +HEAPF64[$F_renorm >> 3] * .5, +HEAPF64[$F_renorm + 8 >> 3] * .5, HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_m >> 2] | 0) $169 = HEAP32[$stat_m >> 2] | 0; else $169 = (HEAP32[$stat_F >> 2] | 0) != 0 ? HEAP32[$stat_F >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $169;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 if (HEAP32[$a_integer >> 2] | 0) if (HEAP32[$b_integer >> 2] | 0) {
  HEAP32[$0 >> 2] = _gsl_sf_hyperg_1F1_int_e(~~+HEAPF64[$rinta >> 3], ~~+HEAPF64[$rintb >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 do if (HEAP32[$b_neg_integer >> 2] | 0) {
  if (HEAP32[$a_neg_integer >> 2] | 0) if (+HEAPF64[$1 >> 3] > +HEAPF64[$2 >> 3]) break;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51664, 51680, 1925, 1);
  HEAP32[$0 >> 2] = 1;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 } while (0);
 if (HEAP32[$a_neg_integer >> 2] | 0) {
  HEAP32[$0 >> 2] = _hyperg_1F1_a_negint_lag(~~+HEAPF64[$rinta >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 if (!(+HEAPF64[$2 >> 3] > 0.0)) {
  if (HEAP32[$bma_neg_integer >> 2] | 0) if (+HEAPF64[$3 >> 3] < 0.0) {
   $279 = ~~+HEAPF64[$rintbma >> 3];
   $280 = +HEAPF64[$2 >> 3];
   $282 = -+HEAPF64[$3 >> 3];
   if (+HEAPF64[$1 >> 3] < 0.0) HEAP32[$stat_K5 >> 2] = _hyperg_1F1_a_negint_poly($279, $280, $282, $K) | 0; else HEAP32[$stat_K5 >> 2] = _hyperg_1F1_a_negint_lag($279, $280, $282, $K) | 0;
   $288 = +Math_abs(+(+HEAPF64[$3 >> 3])) * 2.220446049250313e-16;
   HEAP32[$stat_e6 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$3 >> 3], $288, +HEAPF64[$K >> 3], +HEAPF64[$K + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   if (HEAP32[$stat_e6 >> 2] | 0) $301 = HEAP32[$stat_e6 >> 2] | 0; else $301 = (HEAP32[$stat_K5 >> 2] | 0) != 0 ? HEAP32[$stat_K5 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $301;
   $333 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $333 | 0;
  }
  if (!(+HEAPF64[$1 >> 3] > 0.0)) {
   HEAP32[$0 >> 2] = _hyperg_1F1_ab_neg(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $333 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $333 | 0;
  }
  HEAP32[$stat_K8 >> 2] = _hyperg_1F1_ab_neg(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], -+HEAPF64[$3 >> 3], $K7) | 0;
  $314 = +Math_abs(+(+HEAPF64[$3 >> 3])) * 2.220446049250313e-16;
  HEAP32[$stat_e9 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$3 >> 3], $314, +HEAPF64[$K7 >> 3], +HEAPF64[$K7 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e9 >> 2] | 0) $327 = HEAP32[$stat_e9 >> 2] | 0; else $327 = (HEAP32[$stat_K8 >> 2] | 0) != 0 ? HEAP32[$stat_K8 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $327;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 if (-1.0 <= +HEAPF64[$1 >> 3] & +HEAPF64[$1 >> 3] <= 1.0) {
  HEAP32[$0 >> 2] = _hyperg_1F1_small_a_bgt0(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 if (HEAP32[$bma_neg_integer >> 2] | 0) {
  HEAP32[$stat_K >> 2] = _hyperg_1F1_a_negint_lag(~~+HEAPF64[$rintbma >> 3], +HEAPF64[$2 >> 3], -+HEAPF64[$3 >> 3], $Kummer_1F1) | 0;
  $221 = +Math_abs(+(+HEAPF64[$3 >> 3])) * 2.220446049250313e-16;
  HEAP32[$stat_e1 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$3 >> 3], $221, +HEAPF64[$Kummer_1F1 >> 3], +HEAPF64[$Kummer_1F1 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e1 >> 2] | 0) $234 = HEAP32[$stat_e1 >> 2] | 0; else $234 = (HEAP32[$stat_K >> 2] | 0) != 0 ? HEAP32[$stat_K >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $234;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 do if (+HEAPF64[$1 >> 3] < 0.0) {
  if (!(+Math_abs(+(+HEAPF64[$3 >> 3])) < 1419.565425786768)) break;
  HEAP32[$stat_K3 >> 2] = _hyperg_1F1_ab_pos(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], -+HEAPF64[$3 >> 3], $Kummer_1F12) | 0;
  $250 = +Math_abs(+(+HEAPF64[$3 >> 3])) * 2.220446049250313e-16;
  HEAP32[$stat_e4 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$3 >> 3], $250, +HEAPF64[$Kummer_1F12 >> 3], +HEAPF64[$Kummer_1F12 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e4 >> 2] | 0) $263 = HEAP32[$stat_e4 >> 2] | 0; else $263 = (HEAP32[$stat_K3 >> 2] | 0) != 0 ? HEAP32[$stat_K3 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $263;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 } while (0);
 $266 = +HEAPF64[$1 >> 3];
 $267 = +HEAPF64[$2 >> 3];
 $268 = +HEAPF64[$3 >> 3];
 $269 = HEAP32[$4 >> 2] | 0;
 if (+HEAPF64[$1 >> 3] > 0.0) {
  HEAP32[$0 >> 2] = _hyperg_1F1_ab_pos($266, $267, $268, $269) | 0;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 } else {
  HEAP32[$0 >> 2] = _gsl_sf_hyperg_1F1_series_e($266, $267, $268, $269) | 0;
  $333 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $333 | 0;
 }
 return 0;
}
function _gsl_sf_legendre_H3d_e($ell, $lambda, $eta, $result) {
 $ell = $ell | 0;
 $lambda = +$lambda;
 $eta = +$eta;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $103 = 0.0, $122 = 0, $162 = 0.0, $166 = 0.0, $171 = 0.0, $190 = 0, $2 = 0, $235 = 0.0, $238 = 0, $239 = 0.0, $240 = 0.0, $249 = 0.0, $259 = 0.0, $269 = 0.0, $271 = 0, $277 = 0.0, $279 = 0, $289 = 0, $298 = 0.0, $3 = 0, $308 = 0.0, $318 = 0.0, $320 = 0, $326 = 0.0, $328 = 0, $338 = 0, $339 = 0, $4 = 0, $44 = 0, $51 = 0.0, $57 = 0.0, $94 = 0.0, $98 = 0.0, $H0 = 0, $H1 = 0, $Hl = 0, $Hlm1 = 0, $Hlp1 = 0, $P = 0, $P1 = 0, $abs_lam = 0, $cosh_eta = 0, $coth_err_mult = 0, $coth_eta = 0, $lm = 0, $lm2 = 0, $lnN = 0, $lnN4 = 0, $ln_abslam = 0, $ln_abslam6 = 0, $lnpre_err = 0, $lnpre_err8 = 0, $lnpre_val = 0, $lnpre_val7 = 0, $lnsh = 0, $lnsh5 = 0, $lp = 0, $lsq = 0, $rH = 0, $root_term_0 = 0, $root_term_1 = 0, $stat_CF1 = 0, $stat_H0 = 0, $stat_H1 = 0, $stat_P = 0, $stat_P3 = 0, $stat_e = 0, $stat_e9 = 0, $xi = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $0 = sp + 336 | 0;
 $1 = sp + 332 | 0;
 $2 = sp + 288 | 0;
 $3 = sp + 280 | 0;
 $4 = sp + 328 | 0;
 $abs_lam = sp + 272 | 0;
 $lsq = sp + 264 | 0;
 $xi = sp + 256 | 0;
 $cosh_eta = sp + 248 | 0;
 $P = sp + 232 | 0;
 $lm = sp + 224 | 0;
 $stat_P = sp + 324 | 0;
 $lnN = sp + 216 | 0;
 $lnsh = sp + 200 | 0;
 $ln_abslam = sp + 192 | 0;
 $lnpre_val = sp + 184 | 0;
 $lnpre_err = sp + 176 | 0;
 $stat_e = sp + 320 | 0;
 $P1 = sp + 160 | 0;
 $lm2 = sp + 152 | 0;
 $stat_P3 = sp + 316 | 0;
 $lnN4 = sp + 144 | 0;
 $lnsh5 = sp + 128 | 0;
 $ln_abslam6 = sp + 120 | 0;
 $lnpre_val7 = sp + 112 | 0;
 $lnpre_err8 = sp + 104 | 0;
 $stat_e9 = sp + 312 | 0;
 $coth_eta = sp + 96 | 0;
 $coth_err_mult = sp + 88 | 0;
 $rH = sp + 72 | 0;
 $stat_CF1 = sp + 308 | 0;
 $Hlm1 = sp + 64 | 0;
 $Hl = sp + 56 | 0;
 $Hlp1 = sp + 48 | 0;
 $lp = sp + 304 | 0;
 $root_term_0 = sp + 40 | 0;
 $root_term_1 = sp + 32 | 0;
 $H0 = sp + 16 | 0;
 $stat_H0 = sp + 300 | 0;
 $H1 = sp;
 $stat_H1 = sp + 296 | 0;
 HEAP32[$1 >> 2] = $ell;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $eta;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$abs_lam >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$lsq >> 3] = +HEAPF64[$abs_lam >> 3] * +HEAPF64[$abs_lam >> 3];
 HEAPF64[$xi >> 3] = +HEAPF64[$abs_lam >> 3] * +HEAPF64[$3 >> 3];
 HEAPF64[$cosh_eta >> 3] = +_cosh(+(+HEAPF64[$3 >> 3]));
 if (+HEAPF64[$3 >> 3] < 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(52792, 52808, 375, 1);
  HEAP32[$0 >> 2] = 1;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 }
 if (+HEAPF64[$3 >> 3] > 709.782712893384) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(52824, 52808, 379, 16);
  HEAP32[$0 >> 2] = 16;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 }
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$0 >> 2] = _gsl_sf_legendre_H3d_0_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$0 >> 2] = _gsl_sf_legendre_H3d_1_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 }
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 }
 $44 = HEAP32[$1 >> 2] | 0;
 if (+HEAPF64[$xi >> 3] < 1.0) {
  HEAP32[$0 >> 2] = _legendre_H3d_series($44, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 }
 $51 = +(Math_imul($44, HEAP32[$1 >> 2] | 0) | 0);
 $57 = ($51 + +HEAPF64[$lsq >> 3]) / +Math_sqrt(+(+HEAPF64[$lsq >> 3] + 1.0));
 if ($57 / (+HEAPF64[$cosh_eta >> 3] * +HEAPF64[$cosh_eta >> 3]) < 30277272261966713.0e-21) {
  HEAP32[$stat_P >> 2] = _gsl_sf_conicalP_large_x_e(+(0 - (HEAP32[$1 >> 2] | 0) | 0) - .5, +HEAPF64[$2 >> 3], +HEAPF64[$cosh_eta >> 3], $P, $lm) | 0;
  if (+HEAPF64[$P >> 3] == 0.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = HEAP32[$stat_P >> 2];
   $339 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $339 | 0;
  }
  _gsl_sf_lnsinh_e(+HEAPF64[$3 >> 3], $lnsh) | 0;
  _legendre_H3d_lnnorm(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $lnN) | 0;
  HEAPF64[$ln_abslam >> 3] = +Math_log(+(+HEAPF64[$abs_lam >> 3]));
  HEAPF64[$lnpre_val >> 3] = (+HEAPF64[$lnN >> 3] + 1.1447298858494002 - .6931471805599453 - +HEAPF64[$lnsh >> 3]) * .5 - +HEAPF64[$ln_abslam >> 3];
  HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lnsh + 8 >> 3];
  $94 = (+Math_abs(+(+HEAPF64[$lnN >> 3])) + 1.8378770664093453) * .5;
  $98 = ($94 + +Math_abs(+(+HEAPF64[$ln_abslam >> 3]))) * 4.440892098500626e-16;
  HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lnpre_err >> 3] + $98;
  $103 = +Math_abs(+(+HEAPF64[$lnpre_val >> 3])) * 4.440892098500626e-16;
  HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lnpre_err >> 3] + $103;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3] + +HEAPF64[$lm >> 3], +HEAPF64[$lnpre_err >> 3], +HEAPF64[$P >> 3], +HEAPF64[$P + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e >> 2] | 0) $122 = HEAP32[$stat_e >> 2] | 0; else $122 = (HEAP32[$stat_P >> 2] | 0) != 0 ? HEAP32[$stat_P >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $122;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 }
 if (+HEAPF64[$abs_lam >> 3] > +(HEAP32[$1 >> 2] | 0) * 1.0e3 * +(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$stat_P3 >> 2] = _gsl_sf_conicalP_xgt1_neg_mu_largetau_e(+(HEAP32[$1 >> 2] | 0) + .5, +HEAPF64[$2 >> 3], +HEAPF64[$cosh_eta >> 3], +HEAPF64[$3 >> 3], $P1, $lm2) | 0;
  if (+HEAPF64[$P1 >> 3] == 0.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = HEAP32[$stat_P3 >> 2];
   $339 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $339 | 0;
  }
  _gsl_sf_lnsinh_e(+HEAPF64[$3 >> 3], $lnsh5) | 0;
  _legendre_H3d_lnnorm(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $lnN4) | 0;
  HEAPF64[$ln_abslam6 >> 3] = +Math_log(+(+HEAPF64[$abs_lam >> 3]));
  HEAPF64[$lnpre_val7 >> 3] = (+HEAPF64[$lnN4 >> 3] + 1.1447298858494002 - .6931471805599453 - +HEAPF64[$lnsh5 >> 3]) * .5 - +HEAPF64[$ln_abslam6 >> 3];
  HEAPF64[$lnpre_err8 >> 3] = +HEAPF64[$lnsh5 + 8 >> 3];
  $162 = (+Math_abs(+(+HEAPF64[$lnN4 >> 3])) + 1.8378770664093453) * .5;
  $166 = ($162 + +Math_abs(+(+HEAPF64[$ln_abslam6 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[$lnpre_err8 >> 3] = +HEAPF64[$lnpre_err8 >> 3] + $166;
  $171 = +Math_abs(+(+HEAPF64[$lnpre_val7 >> 3])) * 4.440892098500626e-16;
  HEAPF64[$lnpre_err8 >> 3] = +HEAPF64[$lnpre_err8 >> 3] + $171;
  HEAP32[$stat_e9 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val7 >> 3] + +HEAPF64[$lm2 >> 3], +HEAPF64[$lnpre_err8 >> 3], +HEAPF64[$P1 >> 3], +HEAPF64[$P1 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e9 >> 2] | 0) $190 = HEAP32[$stat_e9 >> 2] | 0; else $190 = (HEAP32[$stat_P3 >> 2] | 0) != 0 ? HEAP32[$stat_P3 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $190;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 }
 HEAPF64[$coth_eta >> 3] = 1.0 / +_tanh(+(+HEAPF64[$3 >> 3]));
 HEAPF64[$coth_err_mult >> 3] = +Math_abs(+(+HEAPF64[$3 >> 3])) + 1.0;
 HEAP32[$stat_CF1 >> 2] = _legendre_H3d_CF1_ser(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$coth_eta >> 3], $rH) | 0;
 HEAPF64[$Hl >> 3] = 1.4916681462400413e-154;
 HEAPF64[$Hlp1 >> 3] = +HEAPF64[$rH >> 3] * +HEAPF64[$Hl >> 3];
 HEAP32[$lp >> 2] = HEAP32[$1 >> 2];
 while (1) {
  if ((HEAP32[$lp >> 2] | 0) <= 0) break;
  HEAPF64[$root_term_0 >> 3] = +_hypot(+(+HEAPF64[$2 >> 3]), +(+(HEAP32[$lp >> 2] | 0)));
  HEAPF64[$root_term_1 >> 3] = +_hypot(+(+HEAPF64[$2 >> 3]), +(+(HEAP32[$lp >> 2] | 0) + 1.0));
  HEAPF64[$Hlm1 >> 3] = ((+(HEAP32[$lp >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$coth_eta >> 3] * +HEAPF64[$Hl >> 3] - +HEAPF64[$root_term_1 >> 3] * +HEAPF64[$Hlp1 >> 3]) / +HEAPF64[$root_term_0 >> 3];
  HEAPF64[$Hlp1 >> 3] = +HEAPF64[$Hl >> 3];
  HEAPF64[$Hl >> 3] = +HEAPF64[$Hlm1 >> 3];
  HEAP32[$lp >> 2] = (HEAP32[$lp >> 2] | 0) + -1;
 }
 $235 = +Math_abs(+(+HEAPF64[$Hl >> 3]));
 $238 = $235 > +Math_abs(+(+HEAPF64[$Hlp1 >> 3]));
 $239 = +HEAPF64[$2 >> 3];
 $240 = +HEAPF64[$3 >> 3];
 if ($238) {
  HEAP32[$stat_H0 >> 2] = _gsl_sf_legendre_H3d_0_e($239, $240, $H0) | 0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.4916681462400413e-154 / +HEAPF64[$Hl >> 3] * +HEAPF64[$H0 >> 3];
  $249 = 1.4916681462400413e-154 / +Math_abs(+(+HEAPF64[$Hl >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $249 * +HEAPF64[$H0 + 8 >> 3];
  $259 = +Math_abs(+(+HEAPF64[$rH + 8 >> 3] / +HEAPF64[$rH >> 3]));
  $269 = $259 * (+(HEAP32[$1 >> 2] | 0) + 1.0) * +HEAPF64[$coth_err_mult >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
  $271 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + $269;
  $277 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $279 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + $277;
  if (HEAP32[$stat_H0 >> 2] | 0) $289 = HEAP32[$stat_H0 >> 2] | 0; else $289 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $289;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 } else {
  HEAP32[$stat_H1 >> 2] = _gsl_sf_legendre_H3d_1_e($239, $240, $H1) | 0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.4916681462400413e-154 / +HEAPF64[$Hlp1 >> 3] * +HEAPF64[$H1 >> 3];
  $298 = 1.4916681462400413e-154 / +Math_abs(+(+HEAPF64[$Hlp1 >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $298 * +HEAPF64[$H1 + 8 >> 3];
  $308 = +Math_abs(+(+HEAPF64[$rH + 8 >> 3] / +HEAPF64[$rH >> 3]));
  $318 = $308 * (+(HEAP32[$1 >> 2] | 0) + 1.0) * +HEAPF64[$coth_err_mult >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
  $320 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$320 >> 3] = +HEAPF64[$320 >> 3] + $318;
  $326 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $328 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$328 >> 3] = +HEAPF64[$328 >> 3] + $326;
  if (HEAP32[$stat_H1 >> 2] | 0) $338 = HEAP32[$stat_H1 >> 2] | 0; else $338 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $338;
  $339 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $339 | 0;
 }
 return 0;
}
function _gsl_sf_coupling_6j_e($two_ja, $two_jb, $two_jc, $two_jd, $two_je, $two_jf, $result) {
 $two_ja = $two_ja | 0;
 $two_jb = $two_jb | 0;
 $two_jc = $two_jc | 0;
 $two_jd = $two_jd | 0;
 $two_je = $two_je | 0;
 $two_jf = $two_jf | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $158 = 0, $163 = 0, $176 = 0, $189 = 0, $2 = 0, $200 = 0, $211 = 0, $222 = 0, $233 = 0, $248 = 0.0, $250 = 0.0, $275 = 0.0, $276 = 0, $285 = 0.0, $286 = 0, $3 = 0, $308 = 0.0, $309 = 0, $318 = 0.0, $319 = 0, $335 = 0.0, $342 = 0.0, $351 = 0.0, $361 = 0.0, $395 = 0.0, $397 = 0, $4 = 0, $409 = 0.0, $411 = 0, $414 = 0, $49 = 0, $5 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $7 = 0, $76 = 0.0, $79 = 0.0, $82 = 0.0, $d1 = 0, $d1_a = 0, $d1_b = 0, $d2 = 0, $d3 = 0, $d4 = 0, $d5 = 0, $d6 = 0, $den_1 = 0, $den_2 = 0, $n1 = 0, $norm = 0, $phase = 0, $status = 0, $sum_neg = 0, $sum_pos = 0, $sumsq_err = 0, $term = 0, $term_err = 0, $tk = 0, $tkmax = 0, $tkmin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $0 = sp + 276 | 0;
 $1 = sp + 272 | 0;
 $2 = sp + 268 | 0;
 $3 = sp + 264 | 0;
 $4 = sp + 260 | 0;
 $5 = sp + 256 | 0;
 $6 = sp + 252 | 0;
 $7 = sp + 248 | 0;
 $n1 = sp + 216 | 0;
 $d1 = sp + 200 | 0;
 $d2 = sp + 184 | 0;
 $d3 = sp + 168 | 0;
 $d4 = sp + 152 | 0;
 $d5 = sp + 136 | 0;
 $d6 = sp + 120 | 0;
 $norm = sp + 112 | 0;
 $tk = sp + 244 | 0;
 $tkmin = sp + 240 | 0;
 $tkmax = sp + 236 | 0;
 $phase = sp + 104 | 0;
 $sum_pos = sp + 96 | 0;
 $sum_neg = sp + 88 | 0;
 $sumsq_err = sp + 80 | 0;
 $status = sp + 232 | 0;
 $term = sp + 72 | 0;
 $term_err = sp + 64 | 0;
 $den_1 = sp + 48 | 0;
 $den_2 = sp + 32 | 0;
 $d1_a = sp + 16 | 0;
 $d1_b = sp;
 HEAP32[$1 >> 2] = $two_ja;
 HEAP32[$2 >> 2] = $two_jb;
 HEAP32[$3 >> 2] = $two_jc;
 HEAP32[$4 >> 2] = $two_jd;
 HEAP32[$5 >> 2] = $two_je;
 HEAP32[$6 >> 2] = $two_jf;
 HEAP32[$7 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if ((HEAP32[$2 >> 2] | 0) >= 0) if ((HEAP32[$3 >> 2] | 0) >= 0) if ((HEAP32[$4 >> 2] | 0) >= 0) if ((HEAP32[$5 >> 2] | 0) >= 0) if ((HEAP32[$6 >> 2] | 0) >= 0) {
  if (!(_triangle_selection_fails(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0)) if (!(_triangle_selection_fails(HEAP32[$1 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0)) if (!(_triangle_selection_fails(HEAP32[$2 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0)) if (!(_triangle_selection_fails(HEAP32[$5 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0)) {
   HEAPF64[$sum_pos >> 3] = 0.0;
   HEAPF64[$sum_neg >> 3] = 0.0;
   HEAPF64[$sumsq_err >> 3] = 0.0;
   HEAP32[$status >> 2] = 0;
   $49 = _delta(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, $d1) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $49;
   $55 = _delta(HEAP32[$1 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, $d2) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $55;
   $61 = _delta(HEAP32[$2 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0, $d3) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $61;
   $67 = _delta(HEAP32[$5 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0, $d4) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $67;
   if (HEAP32[$status >> 2] | 0) {
    HEAPF64[HEAP32[$7 >> 2] >> 3] = inf;
    HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = inf;
    _gsl_error(26464, 26448, 243, 16);
    HEAP32[$0 >> 2] = 16;
    $414 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $414 | 0;
   }
   $76 = +Math_sqrt(+(+HEAPF64[$d1 >> 3]));
   $79 = $76 * +Math_sqrt(+(+HEAPF64[$d2 >> 3]));
   $82 = $79 * +Math_sqrt(+(+HEAPF64[$d3 >> 3]));
   HEAPF64[$norm >> 3] = $82 * +Math_sqrt(+(+HEAPF64[$d4 >> 3]));
   HEAP32[$tkmin >> 2] = _locMax3(0, (HEAP32[$1 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0, (HEAP32[$2 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0) | 0;
   HEAP32[$tkmax >> 2] = _locMin5((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) + 2 | 0, (HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0, (HEAP32[$5 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0, (HEAP32[$1 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0, (HEAP32[$2 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0) | 0;
   HEAPF64[$phase >> 3] = ((((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) + (HEAP32[$tkmin >> 2] | 0) | 0) / 2 | 0) & 1 | 0) != 0 ? -1.0 : 1.0;
   HEAP32[$tk >> 2] = HEAP32[$tkmin >> 2];
   while (1) {
    if ((HEAP32[$tk >> 2] | 0) > (HEAP32[$tkmax >> 2] | 0)) {
     label = 23;
     break;
    }
    HEAP32[$status >> 2] = 0;
    $158 = _gsl_sf_fact_e((((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) - (HEAP32[$tk >> 2] | 0) | 0) / 2 | 0) + 1 | 0, $n1) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $158;
    $163 = _gsl_sf_fact_e((HEAP32[$tk >> 2] | 0) / 2 | 0, $d1_a) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $163;
    $176 = _gsl_sf_fact_e(((HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) + (HEAP32[$tk >> 2] | 0) | 0) / 2 | 0, $d1_b) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $176;
    $189 = _gsl_sf_fact_e(((HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) + (HEAP32[$tk >> 2] | 0) | 0) / 2 | 0, $d2) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $189;
    $200 = _gsl_sf_fact_e(((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) - (HEAP32[$tk >> 2] | 0) | 0) / 2 | 0, $d3) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $200;
    $211 = _gsl_sf_fact_e(((HEAP32[$5 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) - (HEAP32[$tk >> 2] | 0) | 0) / 2 | 0, $d4) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $211;
    $222 = _gsl_sf_fact_e(((HEAP32[$1 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) - (HEAP32[$tk >> 2] | 0) | 0) / 2 | 0, $d5) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $222;
    $233 = _gsl_sf_fact_e(((HEAP32[$2 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) - (HEAP32[$tk >> 2] | 0) | 0) / 2 | 0, $d6) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $233;
    if (HEAP32[$status >> 2] | 0) {
     label = 18;
     break;
    }
    HEAPF64[$d1 >> 3] = +HEAPF64[$d1_a >> 3] * +HEAPF64[$d1_b >> 3];
    $248 = +HEAPF64[$d1_a + 8 >> 3] * +Math_abs(+(+HEAPF64[$d1_b >> 3]));
    $250 = +Math_abs(+(+HEAPF64[$d1_a >> 3]));
    HEAPF64[$d1 + 8 >> 3] = $248 + $250 * +HEAPF64[$d1_b + 8 >> 3];
    HEAPF64[$den_1 >> 3] = +HEAPF64[$d1 >> 3] * +HEAPF64[$d2 >> 3] * +HEAPF64[$d3 >> 3];
    HEAPF64[$den_1 + 8 >> 3] = +HEAPF64[$d1 + 8 >> 3] * +Math_abs(+(+HEAPF64[$d2 >> 3] * +HEAPF64[$d3 >> 3]));
    $275 = +HEAPF64[$d2 + 8 >> 3] * +Math_abs(+(+HEAPF64[$d1 >> 3] * +HEAPF64[$d3 >> 3]));
    $276 = $den_1 + 8 | 0;
    HEAPF64[$276 >> 3] = +HEAPF64[$276 >> 3] + $275;
    $285 = +HEAPF64[$d3 + 8 >> 3] * +Math_abs(+(+HEAPF64[$d1 >> 3] * +HEAPF64[$d2 >> 3]));
    $286 = $den_1 + 8 | 0;
    HEAPF64[$286 >> 3] = +HEAPF64[$286 >> 3] + $285;
    HEAPF64[$den_2 >> 3] = +HEAPF64[$d4 >> 3] * +HEAPF64[$d5 >> 3] * +HEAPF64[$d6 >> 3];
    HEAPF64[$den_2 + 8 >> 3] = +HEAPF64[$d4 + 8 >> 3] * +Math_abs(+(+HEAPF64[$d5 >> 3] * +HEAPF64[$d6 >> 3]));
    $308 = +HEAPF64[$d5 + 8 >> 3] * +Math_abs(+(+HEAPF64[$d4 >> 3] * +HEAPF64[$d6 >> 3]));
    $309 = $den_2 + 8 | 0;
    HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] + $308;
    $318 = +HEAPF64[$d6 + 8 >> 3] * +Math_abs(+(+HEAPF64[$d4 >> 3] * +HEAPF64[$d5 >> 3]));
    $319 = $den_2 + 8 | 0;
    HEAPF64[$319 >> 3] = +HEAPF64[$319 >> 3] + $318;
    HEAPF64[$term >> 3] = +HEAPF64[$phase >> 3] * +HEAPF64[$n1 >> 3] / +HEAPF64[$den_1 >> 3] / +HEAPF64[$den_2 >> 3];
    HEAPF64[$phase >> 3] = -+HEAPF64[$phase >> 3];
    $335 = +HEAPF64[$n1 + 8 >> 3] / +Math_abs(+(+HEAPF64[$den_1 >> 3]));
    HEAPF64[$term_err >> 3] = $335 / +Math_abs(+(+HEAPF64[$den_2 >> 3]));
    $342 = +Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$den_1 >> 3]));
    HEAPF64[$term_err >> 3] = +HEAPF64[$term_err >> 3] + $342 * +HEAPF64[$den_1 + 8 >> 3];
    $351 = +Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$den_2 >> 3]));
    HEAPF64[$term_err >> 3] = +HEAPF64[$term_err >> 3] + $351 * +HEAPF64[$den_2 + 8 >> 3];
    $361 = +HEAPF64[$norm >> 3] * +HEAPF64[$term >> 3];
    if (+HEAPF64[$term >> 3] >= 0.0) HEAPF64[$sum_pos >> 3] = +HEAPF64[$sum_pos >> 3] + $361; else HEAPF64[$sum_neg >> 3] = +HEAPF64[$sum_neg >> 3] - $361;
    HEAPF64[$sumsq_err >> 3] = +HEAPF64[$sumsq_err >> 3] + +HEAPF64[$norm >> 3] * +HEAPF64[$norm >> 3] * +HEAPF64[$term_err >> 3] * +HEAPF64[$term_err >> 3];
    HEAP32[$tk >> 2] = (HEAP32[$tk >> 2] | 0) + 2;
   }
   if ((label | 0) == 18) {
    HEAPF64[HEAP32[$7 >> 2] >> 3] = inf;
    HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = inf;
    _gsl_error(26464, 26448, 278, 16);
    HEAP32[$0 >> 2] = 16;
    $414 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $414 | 0;
   } else if ((label | 0) == 23) {
    HEAPF64[HEAP32[$7 >> 2] >> 3] = +HEAPF64[$sum_pos >> 3] - +HEAPF64[$sum_neg >> 3];
    HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$sum_pos >> 3] + +HEAPF64[$sum_neg >> 3]) * 4.440892098500626e-16;
    $395 = +Math_sqrt(+(+HEAPF64[$sumsq_err >> 3] / (+((HEAP32[$tkmax >> 2] | 0) - (HEAP32[$tkmin >> 2] | 0) | 0) * .5 + 1.0)));
    $397 = (HEAP32[$7 >> 2] | 0) + 8 | 0;
    HEAPF64[$397 >> 3] = +HEAPF64[$397 >> 3] + $395;
    $409 = (+((HEAP32[$tkmax >> 2] | 0) - (HEAP32[$tkmin >> 2] | 0) | 0) + 2.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[HEAP32[$7 >> 2] >> 3]));
    $411 = (HEAP32[$7 >> 2] | 0) + 8 | 0;
    HEAPF64[$411 >> 3] = +HEAPF64[$411 >> 3] + $409;
    HEAP32[$0 >> 2] = 0;
    $414 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $414 | 0;
   }
  }
  HEAPF64[HEAP32[$7 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $414 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $414 | 0;
 }
 HEAPF64[HEAP32[$7 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(26432, 26448, 217, 1);
 HEAP32[$0 >> 2] = 1;
 $414 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $414 | 0;
}
function _hyperg_U_infinite_sum_stable($N, $a, $bint, $b, $beps, $x, $xeps, $sum, $result) {
 $N = $N | 0;
 $a = +$a;
 $bint = +$bint;
 $b = +$b;
 $beps = +$beps;
 $x = +$x;
 $xeps = +$xeps;
 $sum = $sum | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $110 = 0, $123 = 0.0, $13 = 0, $132 = 0.0, $142 = 0.0, $152 = 0.0, $180 = 0.0, $191 = 0.0, $2 = 0, $203 = 0.0, $215 = 0.0, $230 = 0, $239 = 0.0, $258 = 0.0, $261 = 0.0, $3 = 0, $308 = 0.0, $317 = 0.0, $32 = 0.0, $335 = 0.0, $350 = 0.0, $352 = 0, $361 = 0.0, $363 = 0, $367 = 0, $373 = 0, $4 = 0, $44 = 0.0, $49 = 0.0, $5 = 0, $6 = 0, $7 = 0, $78 = 0, $8 = 0, $89 = 0, $a0_err = 0, $a0_multiplier = 0, $a0_val = 0, $b0_err = 0, $b0_multiplier = 0, $b0_val = 0, $dchu_err = 0, $dchu_val = 0, $dgamrbxi = 0, $factor_err = 0, $factor_val = 0, $gamr = 0, $gamri1 = 0, $gamrni = 0, $gamrxi1beps = 0, $i = 0, $istrt = 0, $pochai = 0, $pochaxibeps = 0, $powx = 0, $sarg = 0, $sfact = 0, $stat_all = 0, $stat_dgamrbxi = 0, $stat_gam123 = 0, $stat_gamall = 0, $stat_gamr = 0, $stat_gamri1 = 0, $stat_gamrni = 0, $stat_gamrxi1beps = 0, $stat_pochai = 0, $stat_pochaxibeps = 0, $stat_powx = 0, $t_err = 0, $t_val = 0, $xi = 0, $xi1 = 0, $xi12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 $0 = sp + 380 | 0;
 $1 = sp + 376 | 0;
 $2 = sp + 312 | 0;
 $3 = sp + 304 | 0;
 $4 = sp + 296 | 0;
 $5 = sp + 288 | 0;
 $6 = sp + 280 | 0;
 $7 = sp + 272 | 0;
 $8 = sp + 372 | 0;
 $istrt = sp + 368 | 0;
 $xi = sp + 256 | 0;
 $gamr = sp + 240 | 0;
 $powx = sp + 224 | 0;
 $stat_gamr = sp + 364 | 0;
 $stat_powx = sp + 360 | 0;
 $sarg = sp + 216 | 0;
 $sfact = sp + 208 | 0;
 $factor_val = sp + 200 | 0;
 $factor_err = sp + 192 | 0;
 $pochai = sp + 176 | 0;
 $gamri1 = sp + 160 | 0;
 $gamrni = sp + 144 | 0;
 $stat_pochai = sp + 356 | 0;
 $stat_gamri1 = sp + 352 | 0;
 $stat_gamrni = sp + 348 | 0;
 $stat_gam123 = sp + 344 | 0;
 $stat_gamall = sp + 340 | 0;
 $pochaxibeps = sp + 128 | 0;
 $gamrxi1beps = sp + 112 | 0;
 $stat_pochaxibeps = sp + 336 | 0;
 $stat_gamrxi1beps = sp + 332 | 0;
 $stat_all = sp + 328 | 0;
 $b0_val = sp + 104 | 0;
 $b0_err = sp + 96 | 0;
 $i = sp + 324 | 0;
 $dchu_val = sp + 88 | 0;
 $dchu_err = sp + 80 | 0;
 $t_val = sp + 72 | 0;
 $t_err = sp + 64 | 0;
 $dgamrbxi = sp + 48 | 0;
 $stat_dgamrbxi = sp + 320 | 0;
 $a0_val = sp + 40 | 0;
 $a0_err = sp + 32 | 0;
 $xi1 = sp + 24 | 0;
 $xi12 = sp + 16 | 0;
 $a0_multiplier = sp + 8 | 0;
 $b0_multiplier = sp;
 HEAP32[$1 >> 2] = $N;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $bint;
 HEAPF64[$4 >> 3] = $b;
 HEAPF64[$5 >> 3] = $beps;
 HEAPF64[$6 >> 3] = $x;
 HEAPF64[$7 >> 3] = $xeps;
 HEAP32[$8 >> 2] = $result;
 HEAPF64[sp + 264 >> 3] = 4.440892098500626e-16;
 if ((HEAP32[$1 >> 2] | 0) < 1) $13 = 1 - (HEAP32[$1 >> 2] | 0) | 0; else $13 = 0;
 HEAP32[$istrt >> 2] = $13;
 HEAPF64[$xi >> 3] = +(HEAP32[$istrt >> 2] | 0);
 HEAP32[$stat_gamr >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$2 >> 3] + 1.0 - +HEAPF64[$4 >> 3], $gamr) | 0;
 HEAP32[$stat_powx >> 2] = _gsl_sf_pow_int_e(+HEAPF64[$6 >> 3], HEAP32[$istrt >> 2] | 0, $powx) | 0;
 HEAPF64[$sarg >> 3] = +HEAPF64[$5 >> 3] * 3.141592653589793;
 if (+HEAPF64[$sarg >> 3] != 0.0) $32 = +HEAPF64[$sarg >> 3] / +Math_sin(+(+HEAPF64[$sarg >> 3])); else $32 = 1.0;
 HEAPF64[$sfact >> 3] = $32;
 HEAPF64[$factor_val >> 3] = +HEAPF64[$sfact >> 3] * ((HEAP32[$1 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0) * +HEAPF64[$gamr >> 3] * +HEAPF64[$powx >> 3];
 $44 = +Math_abs(+(+HEAPF64[$gamr >> 3]));
 $49 = +Math_abs(+(+HEAPF64[$powx >> 3]));
 HEAPF64[$factor_err >> 3] = $44 * +HEAPF64[$powx + 8 >> 3] + $49 * +HEAPF64[$gamr + 8 >> 3] + +Math_abs(+(+HEAPF64[$factor_val >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_pochai >> 2] = _gsl_sf_poch_e(+HEAPF64[$2 >> 3], +HEAPF64[$xi >> 3], $pochai) | 0;
 HEAP32[$stat_gamri1 >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$xi >> 3] + 1.0, $gamri1) | 0;
 HEAP32[$stat_gamrni >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$3 >> 3] + +HEAPF64[$xi >> 3], $gamrni) | 0;
 do if (HEAP32[$stat_gamr >> 2] | 0) $78 = HEAP32[$stat_gamr >> 2] | 0; else if (HEAP32[$stat_gamri1 >> 2] | 0) {
  $78 = HEAP32[$stat_gamri1 >> 2] | 0;
  break;
 } else {
  $78 = (HEAP32[$stat_gamrni >> 2] | 0) != 0 ? HEAP32[$stat_gamrni >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$stat_gam123 >> 2] = $78;
 do if (HEAP32[$stat_gam123 >> 2] | 0) $89 = HEAP32[$stat_gam123 >> 2] | 0; else if (HEAP32[$stat_pochai >> 2] | 0) {
  $89 = HEAP32[$stat_pochai >> 2] | 0;
  break;
 } else {
  $89 = (HEAP32[$stat_powx >> 2] | 0) != 0 ? HEAP32[$stat_powx >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$stat_gamall >> 2] = $89;
 HEAP32[$stat_pochaxibeps >> 2] = _gsl_sf_poch_e(+HEAPF64[$2 >> 3], +HEAPF64[$xi >> 3] - +HEAPF64[$5 >> 3], $pochaxibeps) | 0;
 HEAP32[$stat_gamrxi1beps >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$xi >> 3] + 1.0 - +HEAPF64[$5 >> 3], $gamrxi1beps) | 0;
 do if (HEAP32[$stat_gamall >> 2] | 0) $110 = HEAP32[$stat_gamall >> 2] | 0; else if (HEAP32[$stat_pochaxibeps >> 2] | 0) {
  $110 = HEAP32[$stat_pochaxibeps >> 2] | 0;
  break;
 } else {
  $110 = (HEAP32[$stat_gamrxi1beps >> 2] | 0) != 0 ? HEAP32[$stat_gamrxi1beps >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$stat_all >> 2] = $110;
 HEAPF64[$b0_val >> 3] = +HEAPF64[$factor_val >> 3] * +HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamrxi1beps >> 3];
 $123 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrni >> 3]));
 $132 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrxi1beps >> 3]));
 $142 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamrxi1beps >> 3]));
 $152 = +Math_abs(+(+HEAPF64[$pochaxibeps >> 3] * +HEAPF64[$gamrni >> 3] * +HEAPF64[$gamrxi1beps >> 3]));
 HEAPF64[$b0_err >> 3] = $123 * +HEAPF64[$gamrxi1beps + 8 >> 3] + $132 * +HEAPF64[$gamrni + 8 >> 3] + $142 * +HEAPF64[$pochaxibeps + 8 >> 3] + $152 * +HEAPF64[$factor_err >> 3] + +Math_abs(+(+HEAPF64[$b0_val >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_dgamrbxi >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$4 >> 3] + +HEAPF64[$xi >> 3], $dgamrbxi) | 0;
 HEAPF64[$a0_val >> 3] = +HEAPF64[$factor_val >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$dgamrbxi >> 3] * +HEAPF64[$gamri1 >> 3] / +HEAPF64[$5 >> 3];
 $180 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$dgamrbxi >> 3] / +HEAPF64[$5 >> 3]));
 $191 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$pochai >> 3] * +HEAPF64[$gamri1 >> 3] / +HEAPF64[$5 >> 3]));
 $203 = +Math_abs(+(+HEAPF64[$factor_val >> 3] * +HEAPF64[$dgamrbxi >> 3] * +HEAPF64[$gamri1 >> 3] / +HEAPF64[$5 >> 3]));
 $215 = +Math_abs(+(+HEAPF64[$pochai >> 3] * +HEAPF64[$dgamrbxi >> 3] * +HEAPF64[$gamri1 >> 3] / +HEAPF64[$5 >> 3]));
 HEAPF64[$a0_err >> 3] = $180 * +HEAPF64[$gamri1 + 8 >> 3] + $191 * +HEAPF64[$dgamrbxi + 8 >> 3] + $203 * +HEAPF64[$pochai + 8 >> 3] + $215 * +HEAPF64[$factor_err >> 3] + +Math_abs(+(+HEAPF64[$a0_val >> 3])) * 4.440892098500626e-16;
 if (HEAP32[$stat_all >> 2] | 0) $230 = HEAP32[$stat_all >> 2] | 0; else $230 = (HEAP32[$stat_dgamrbxi >> 2] | 0) != 0 ? HEAP32[$stat_dgamrbxi >> 2] | 0 : 0;
 HEAP32[$stat_all >> 2] = $230;
 HEAPF64[$b0_val >> 3] = +HEAPF64[$7 >> 3] * +HEAPF64[$b0_val >> 3] / +HEAPF64[$5 >> 3];
 $239 = +Math_abs(+(+HEAPF64[$7 >> 3] / +HEAPF64[$5 >> 3]));
 HEAPF64[$b0_err >> 3] = $239 * +HEAPF64[$b0_err >> 3] + +Math_abs(+(+HEAPF64[$b0_val >> 3])) * 8.881784197001252e-16;
 HEAPF64[$dchu_val >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$a0_val >> 3] - +HEAPF64[$b0_val >> 3];
 $258 = +Math_abs(+(+HEAPF64[$sum >> 3]));
 $261 = $258 + +Math_abs(+(+HEAPF64[$a0_val >> 3]));
 HEAPF64[$dchu_err >> 3] = +HEAPF64[$sum + 8 >> 3] + +HEAPF64[$a0_err >> 3] + +HEAPF64[$b0_err >> 3] + ($261 + +Math_abs(+(+HEAPF64[$b0_val >> 3]))) * 4.440892098500626e-16;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 2e3) break;
  HEAPF64[$xi1 >> 3] = +((HEAP32[$istrt >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0);
  HEAPF64[$xi12 >> 3] = +((HEAP32[$istrt >> 2] | 0) + (HEAP32[$i >> 2] | 0) - 1 | 0);
  HEAPF64[$a0_multiplier >> 3] = (+HEAPF64[$2 >> 3] + +HEAPF64[$xi12 >> 3]) * +HEAPF64[$6 >> 3] / ((+HEAPF64[$4 >> 3] + +HEAPF64[$xi12 >> 3]) * +HEAPF64[$xi1 >> 3]);
  HEAPF64[$b0_multiplier >> 3] = (+HEAPF64[$2 >> 3] + +HEAPF64[$xi12 >> 3] - +HEAPF64[$5 >> 3]) * +HEAPF64[$6 >> 3] / ((+HEAPF64[$3 >> 3] + +HEAPF64[$xi12 >> 3]) * (+HEAPF64[$xi1 >> 3] - +HEAPF64[$5 >> 3]));
  HEAPF64[$a0_val >> 3] = +HEAPF64[$a0_val >> 3] * +HEAPF64[$a0_multiplier >> 3];
  $308 = +Math_abs(+(+HEAPF64[$a0_multiplier >> 3]));
  HEAPF64[$a0_err >> 3] = +HEAPF64[$a0_err >> 3] + $308 * +HEAPF64[$a0_err >> 3];
  HEAPF64[$b0_val >> 3] = +HEAPF64[$b0_val >> 3] * +HEAPF64[$b0_multiplier >> 3];
  $317 = +Math_abs(+(+HEAPF64[$b0_multiplier >> 3]));
  HEAPF64[$b0_err >> 3] = +HEAPF64[$b0_err >> 3] + $317 * +HEAPF64[$b0_err >> 3];
  HEAPF64[$t_val >> 3] = +HEAPF64[$a0_val >> 3] - +HEAPF64[$b0_val >> 3];
  HEAPF64[$t_err >> 3] = +HEAPF64[$a0_err >> 3] + +HEAPF64[$b0_err >> 3];
  HEAPF64[$dchu_val >> 3] = +HEAPF64[$dchu_val >> 3] + +HEAPF64[$t_val >> 3];
  HEAPF64[$dchu_err >> 3] = +HEAPF64[$dchu_err >> 3] + +HEAPF64[$t_err >> 3];
  $335 = +Math_abs(+(+HEAPF64[$t_val >> 3]));
  if ($335 < +Math_abs(+(+HEAPF64[$dchu_val >> 3])) * 4.440892098500626e-16) break;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$8 >> 2] >> 3] = +HEAPF64[$dchu_val >> 3];
 HEAPF64[(HEAP32[$8 >> 2] | 0) + 8 >> 3] = +HEAPF64[$dchu_err >> 3] * 2.0;
 $350 = +Math_abs(+(+HEAPF64[$t_val >> 3])) * 2.0;
 $352 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
 HEAPF64[$352 >> 3] = +HEAPF64[$352 >> 3] + $350;
 $361 = (+(HEAP32[$i >> 2] | 0) + 2.0) * 8.881784197001252e-16 * +Math_abs(+(+HEAPF64[$dchu_val >> 3]));
 $363 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
 HEAPF64[$363 >> 3] = +HEAPF64[$363 >> 3] + $361;
 $367 = (HEAP32[$8 >> 2] | 0) + 8 | 0;
 HEAPF64[$367 >> 3] = +HEAPF64[$367 >> 3] * 2.0;
 if ((HEAP32[$i >> 2] | 0) >= 2e3) {
  _gsl_error(52312, 52168, 438, 11);
  HEAP32[$0 >> 2] = 11;
  $373 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $373 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$stat_all >> 2];
  $373 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $373 | 0;
 }
 return 0;
}
function _gsl_rng_types_setup() {
 var $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $i = sp;
 HEAP32[$i >> 2] = 0;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19288];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19302];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19314];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19336];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19350];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19364];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19378];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19412];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19426];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19440];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19454];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19468];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19480];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19492];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19502];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19512];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19534];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19546];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19570];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19582];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19594];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19606];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19618];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19790];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19730];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19670];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19800];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19740];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19680];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19770];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19710];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19650];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19780];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19720];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19660];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19760];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19700];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19640];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19750];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19690];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19630];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19886];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19898];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19910];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19920];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19936];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19946];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19972];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19982];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[19992];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20044];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20088];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20100];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20110];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20124];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20136];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20150];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20290];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20302];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20314];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20326];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort();
 HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[20340];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 if ((HEAP32[$i >> 2] | 0) == 100) _abort(); else {
  HEAP32[80728 + (HEAP32[$i >> 2] << 2) >> 2] = 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  STACKTOP = sp;
  return 80728;
 }
 return 0;
}
function _gsl_sf_conicalP_sph_reg_e($l, $lambda, $x, $result) {
 $l = $l | 0;
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $103 = 0.0, $105 = 0, $110 = 0.0, $113 = 0.0, $168 = 0.0, $175 = 0.0, $183 = 0.0, $185 = 0, $191 = 0.0, $193 = 0, $2 = 0, $203 = 0, $253 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0, $270 = 0.0, $278 = 0.0, $286 = 0.0, $288 = 0, $294 = 0.0, $296 = 0, $3 = 0, $31 = 0.0, $310 = 0.0, $318 = 0.0, $326 = 0.0, $328 = 0, $334 = 0.0, $336 = 0, $346 = 0, $347 = 0, $4 = 0, $50 = 0, $94 = 0.0, $Pell = 0, $Pell11 = 0, $Pell2 = 0, $Pellm1 = 0, $Pellm112 = 0, $Pellm13 = 0, $Pellp1 = 0, $Pellp11 = 0, $Pellp110 = 0, $Phf = 0, $Phf15 = 0, $Pmhf = 0, $c = 0, $d = 0, $d14 = 0, $d5 = 0, $ell = 0, $ell13 = 0, $ell4 = 0, $r_Pell = 0, $r_Pellm1 = 0, $rat = 0, $rat7 = 0, $stat_0 = 0, $stat_1 = 0, $stat_CF1 = 0, $stat_CF18 = 0, $stat_P = 0, $stat_P9 = 0, $stat_Phf = 0, $xi = 0, $xi6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $0 = sp + 296 | 0;
 $1 = sp + 292 | 0;
 $2 = sp + 240 | 0;
 $3 = sp + 232 | 0;
 $4 = sp + 288 | 0;
 $c = sp + 224 | 0;
 $r_Pellm1 = sp + 208 | 0;
 $r_Pell = sp + 192 | 0;
 $stat_0 = sp + 284 | 0;
 $stat_1 = sp + 280 | 0;
 $stat_P = sp + 276 | 0;
 $Pellm1 = sp + 184 | 0;
 $Pell = sp + 176 | 0;
 $Pellp1 = sp + 168 | 0;
 $ell = sp + 272 | 0;
 $d = sp + 160 | 0;
 $xi = sp + 152 | 0;
 $rat = sp + 136 | 0;
 $Phf = sp + 120 | 0;
 $stat_CF1 = sp + 268 | 0;
 $stat_Phf = sp + 264 | 0;
 $Pellp11 = sp + 112 | 0;
 $Pell2 = sp + 104 | 0;
 $Pellm13 = sp + 96 | 0;
 $ell4 = sp + 260 | 0;
 $d5 = sp + 88 | 0;
 $xi6 = sp + 80 | 0;
 $rat7 = sp + 64 | 0;
 $stat_CF18 = sp + 256 | 0;
 $stat_P9 = sp + 252 | 0;
 $Pellp110 = sp + 56 | 0;
 $Pell11 = sp + 48 | 0;
 $Pellm112 = sp + 40 | 0;
 $ell13 = sp + 248 | 0;
 $d14 = sp + 32 | 0;
 $Phf15 = sp + 16 | 0;
 $Pmhf = sp;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (!(+HEAPF64[$3 >> 3] <= -1.0)) if ((HEAP32[$1 >> 2] | 0) >= -1) {
  if ((HEAP32[$1 >> 2] | 0) == -1) {
   HEAP32[$0 >> 2] = _gsl_sf_conicalP_half_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $347 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $347 | 0;
  }
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$0 >> 2] = _gsl_sf_conicalP_mhalf_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $347 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $347 | 0;
  }
  if (+HEAPF64[$3 >> 3] == 1.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $347 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $347 | 0;
  }
  $31 = +HEAPF64[$3 >> 3];
  if (+HEAPF64[$3 >> 3] < 0.0) {
   HEAPF64[$c >> 3] = 1.0 / +Math_sqrt(+(1.0 - $31 * +HEAPF64[$3 >> 3]));
   HEAP32[$stat_0 >> 2] = _gsl_sf_conicalP_half_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Pellm1) | 0;
   HEAP32[$stat_1 >> 2] = _gsl_sf_conicalP_mhalf_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Pell) | 0;
   if (HEAP32[$stat_0 >> 2] | 0) $50 = HEAP32[$stat_0 >> 2] | 0; else $50 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
   HEAP32[$stat_P >> 2] = $50;
   HEAPF64[$Pellm1 >> 3] = +HEAPF64[$r_Pellm1 >> 3];
   HEAPF64[$Pell >> 3] = +HEAPF64[$r_Pell >> 3];
   HEAP32[$ell >> 2] = 0;
   while (1) {
    if ((HEAP32[$ell >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[$d >> 3] = (+(HEAP32[$ell >> 2] | 0) + 1.0) * (+(HEAP32[$ell >> 2] | 0) + 1.0) + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
    HEAPF64[$Pellp1 >> 3] = (+HEAPF64[$Pellm1 >> 3] - (+(HEAP32[$ell >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$c >> 3] * +HEAPF64[$3 >> 3] * +HEAPF64[$Pell >> 3]) / +HEAPF64[$d >> 3];
    HEAPF64[$Pellm1 >> 3] = +HEAPF64[$Pell >> 3];
    HEAPF64[$Pell >> 3] = +HEAPF64[$Pellp1 >> 3];
    HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
   }
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Pell >> 3];
   $94 = (+(HEAP32[$1 >> 2] | 0) * .5 + 1.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$Pell >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $94;
   $103 = +(HEAP32[$1 >> 2] | 0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $105 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$105 >> 3] = +HEAPF64[$105 >> 3] + $103;
   HEAP32[$0 >> 2] = HEAP32[$stat_P >> 2];
   $347 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $347 | 0;
  }
  $110 = +HEAPF64[$3 >> 3];
  if ($31 < 1.0) {
   $113 = +Math_sqrt(+(1.0 - +HEAPF64[$3 >> 3]));
   HEAPF64[$xi >> 3] = $110 / ($113 * +Math_sqrt(+(+HEAPF64[$3 >> 3] + 1.0)));
   HEAP32[$stat_CF1 >> 2] = _conicalP_negmu_xlt1_CF1(.5, HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $rat) | 0;
   HEAP32[$stat_Phf >> 2] = _gsl_sf_conicalP_half_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $Phf) | 0;
   HEAPF64[$Pellp11 >> 3] = +HEAPF64[$rat >> 3] * 1.4916681462400413e-154;
   HEAPF64[$Pell2 >> 3] = 1.4916681462400413e-154;
   HEAP32[$ell4 >> 2] = HEAP32[$1 >> 2];
   while (1) {
    if ((HEAP32[$ell4 >> 2] | 0) < 0) break;
    HEAPF64[$d5 >> 3] = (+(HEAP32[$ell4 >> 2] | 0) + 1.0) * (+(HEAP32[$ell4 >> 2] | 0) + 1.0) + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
    HEAPF64[$Pellm13 >> 3] = (+(HEAP32[$ell4 >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$xi >> 3] * +HEAPF64[$Pell2 >> 3] + +HEAPF64[$d5 >> 3] * +HEAPF64[$Pellp11 >> 3];
    HEAPF64[$Pellp11 >> 3] = +HEAPF64[$Pell2 >> 3];
    HEAPF64[$Pell2 >> 3] = +HEAPF64[$Pellm13 >> 3];
    HEAP32[$ell4 >> 2] = (HEAP32[$ell4 >> 2] | 0) + -1;
   }
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Phf >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Pell2 >> 3];
   $168 = +HEAPF64[$Phf + 8 >> 3] * 1.4916681462400413e-154 / +Math_abs(+(+HEAPF64[$Pell2 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $168;
   $175 = +Math_abs(+(+HEAPF64[$rat + 8 >> 3] / +HEAPF64[$rat >> 3]));
   $183 = $175 * (+(HEAP32[$1 >> 2] | 0) + 1.0) * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $185 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$185 >> 3] = +HEAPF64[$185 >> 3] + $183;
   $191 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   $193 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$193 >> 3] = +HEAPF64[$193 >> 3] + $191;
   if (HEAP32[$stat_Phf >> 2] | 0) $203 = HEAP32[$stat_Phf >> 2] | 0; else $203 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $203;
   $347 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $347 | 0;
  }
  if ($110 == 1.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $347 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $347 | 0;
  }
  HEAPF64[$xi6 >> 3] = +HEAPF64[$3 >> 3] / +Math_sqrt(+((+HEAPF64[$3 >> 3] - 1.0) * (+HEAPF64[$3 >> 3] + 1.0)));
  HEAP32[$stat_CF18 >> 2] = _conicalP_negmu_xgt1_CF1(.5, HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $rat7) | 0;
  HEAPF64[$Pellp110 >> 3] = +HEAPF64[$rat7 >> 3] * 1.4916681462400413e-154;
  HEAPF64[$Pell11 >> 3] = 1.4916681462400413e-154;
  HEAP32[$ell13 >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$ell13 >> 2] | 0) < 0) break;
   HEAPF64[$d14 >> 3] = (+(HEAP32[$ell13 >> 2] | 0) + 1.0) * (+(HEAP32[$ell13 >> 2] | 0) + 1.0) + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
   HEAPF64[$Pellm112 >> 3] = (+(HEAP32[$ell13 >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$xi6 >> 3] * +HEAPF64[$Pell11 >> 3] - +HEAPF64[$d14 >> 3] * +HEAPF64[$Pellp110 >> 3];
   HEAPF64[$Pellp110 >> 3] = +HEAPF64[$Pell11 >> 3];
   HEAPF64[$Pell11 >> 3] = +HEAPF64[$Pellm112 >> 3];
   HEAP32[$ell13 >> 2] = (HEAP32[$ell13 >> 2] | 0) + -1;
  }
  $253 = +Math_abs(+(+HEAPF64[$Pell11 >> 3]));
  $256 = $253 > +Math_abs(+(+HEAPF64[$Pellp110 >> 3]));
  $257 = +HEAPF64[$2 >> 3];
  $258 = +HEAPF64[$3 >> 3];
  if ($256) {
   HEAP32[$stat_P9 >> 2] = _gsl_sf_conicalP_half_e($257, $258, $Phf15) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Phf15 >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Pell11 >> 3];
   $270 = +HEAPF64[$Phf15 + 8 >> 3] * 2.983336292480083e-154 / +Math_abs(+(+HEAPF64[$Pell11 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $270;
   $278 = +Math_abs(+(+HEAPF64[$rat7 + 8 >> 3] / +HEAPF64[$rat7 >> 3])) * 2.0;
   $286 = $278 * (+(HEAP32[$1 >> 2] | 0) + 1.0) * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $288 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$288 >> 3] = +HEAPF64[$288 >> 3] + $286;
   $294 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   $296 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$296 >> 3] = +HEAPF64[$296 >> 3] + $294;
  } else {
   HEAP32[$stat_P9 >> 2] = _gsl_sf_conicalP_mhalf_e($257, $258, $Pmhf) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Pmhf >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Pellp110 >> 3];
   $310 = +HEAPF64[$Pmhf + 8 >> 3] * 2.983336292480083e-154 / +Math_abs(+(+HEAPF64[$Pellp110 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $310;
   $318 = +Math_abs(+(+HEAPF64[$rat7 + 8 >> 3] / +HEAPF64[$rat7 >> 3])) * 2.0;
   $326 = $318 * (+(HEAP32[$1 >> 2] | 0) + 1.0) * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $328 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$328 >> 3] = +HEAPF64[$328 >> 3] + $326;
   $334 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   $336 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$336 >> 3] = +HEAPF64[$336 >> 3] + $334;
  }
  if (HEAP32[$stat_P9 >> 2] | 0) $346 = HEAP32[$stat_P9 >> 2] | 0; else $346 = (HEAP32[$stat_CF18 >> 2] | 0) != 0 ? HEAP32[$stat_CF18 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $346;
  $347 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $347 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(53168, 53184, 1117, 1);
 HEAP32[$0 >> 2] = 1;
 $347 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $347 | 0;
}
function _gsl_sf_conicalP_cyl_reg_e($m, $lambda, $x, $result) {
 $m = $m | 0;
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0, $105 = 0.0, $108 = 0.0, $162 = 0.0, $170 = 0.0, $178 = 0.0, $180 = 0, $186 = 0.0, $188 = 0, $198 = 0, $2 = 0, $247 = 0.0, $250 = 0, $251 = 0.0, $252 = 0.0, $264 = 0.0, $272 = 0.0, $280 = 0.0, $282 = 0, $288 = 0.0, $290 = 0, $3 = 0, $304 = 0.0, $31 = 0.0, $312 = 0.0, $320 = 0.0, $322 = 0, $328 = 0.0, $330 = 0, $340 = 0, $341 = 0, $4 = 0, $50 = 0, $92 = 0.0, $98 = 0.0, $P0 = 0, $P015 = 0, $P1 = 0, $Pk = 0, $Pk11 = 0, $Pk2 = 0, $Pkm1 = 0, $Pkm112 = 0, $Pkm13 = 0, $Pkp1 = 0, $Pkp11 = 0, $Pkp110 = 0, $c = 0, $d = 0, $d14 = 0, $d5 = 0, $k = 0, $k13 = 0, $k4 = 0, $r_Pk = 0, $r_Pkm1 = 0, $rat = 0, $rat7 = 0, $stat_0 = 0, $stat_1 = 0, $stat_CF1 = 0, $stat_CF18 = 0, $stat_P = 0, $stat_P0 = 0, $stat_P9 = 0, $xi = 0, $xi6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $0 = sp + 296 | 0;
 $1 = sp + 292 | 0;
 $2 = sp + 240 | 0;
 $3 = sp + 232 | 0;
 $4 = sp + 288 | 0;
 $c = sp + 224 | 0;
 $r_Pkm1 = sp + 208 | 0;
 $r_Pk = sp + 192 | 0;
 $stat_0 = sp + 284 | 0;
 $stat_1 = sp + 280 | 0;
 $stat_P = sp + 276 | 0;
 $Pkm1 = sp + 184 | 0;
 $Pk = sp + 176 | 0;
 $Pkp1 = sp + 168 | 0;
 $k = sp + 272 | 0;
 $d = sp + 160 | 0;
 $xi = sp + 152 | 0;
 $rat = sp + 136 | 0;
 $P0 = sp + 120 | 0;
 $stat_CF1 = sp + 268 | 0;
 $stat_P0 = sp + 264 | 0;
 $Pkp11 = sp + 112 | 0;
 $Pk2 = sp + 104 | 0;
 $Pkm13 = sp + 96 | 0;
 $k4 = sp + 260 | 0;
 $d5 = sp + 88 | 0;
 $xi6 = sp + 80 | 0;
 $rat7 = sp + 64 | 0;
 $stat_CF18 = sp + 256 | 0;
 $stat_P9 = sp + 252 | 0;
 $Pkp110 = sp + 56 | 0;
 $Pk11 = sp + 48 | 0;
 $Pkm112 = sp + 40 | 0;
 $k13 = sp + 248 | 0;
 $d14 = sp + 32 | 0;
 $P1 = sp + 16 | 0;
 $P015 = sp;
 HEAP32[$1 >> 2] = $m;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (!(+HEAPF64[$3 >> 3] <= -1.0)) if ((HEAP32[$1 >> 2] | 0) >= -1) {
  if ((HEAP32[$1 >> 2] | 0) == -1) {
   HEAP32[$0 >> 2] = _gsl_sf_conicalP_1_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $341 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $341 | 0;
  }
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$0 >> 2] = _gsl_sf_conicalP_0_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $341 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $341 | 0;
  }
  if (+HEAPF64[$3 >> 3] == 1.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $341 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $341 | 0;
  }
  $31 = +HEAPF64[$3 >> 3];
  if (+HEAPF64[$3 >> 3] < 0.0) {
   HEAPF64[$c >> 3] = 1.0 / +Math_sqrt(+(1.0 - $31 * +HEAPF64[$3 >> 3]));
   HEAP32[$stat_0 >> 2] = _gsl_sf_conicalP_1_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Pkm1) | 0;
   HEAP32[$stat_1 >> 2] = _gsl_sf_conicalP_0_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Pk) | 0;
   if (HEAP32[$stat_0 >> 2] | 0) $50 = HEAP32[$stat_0 >> 2] | 0; else $50 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
   HEAP32[$stat_P >> 2] = $50;
   HEAPF64[$Pkm1 >> 3] = +HEAPF64[$r_Pkm1 >> 3];
   HEAPF64[$Pk >> 3] = +HEAPF64[$r_Pk >> 3];
   HEAP32[$k >> 2] = 0;
   while (1) {
    if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[$d >> 3] = (+(HEAP32[$k >> 2] | 0) + .5) * (+(HEAP32[$k >> 2] | 0) + .5) + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
    HEAPF64[$Pkp1 >> 3] = (+HEAPF64[$Pkm1 >> 3] - +(HEAP32[$k >> 2] | 0) * 2.0 * +HEAPF64[$c >> 3] * +HEAPF64[$3 >> 3] * +HEAPF64[$Pk >> 3]) / +HEAPF64[$d >> 3];
    HEAPF64[$Pkm1 >> 3] = +HEAPF64[$Pk >> 3];
    HEAPF64[$Pk >> 3] = +HEAPF64[$Pkp1 >> 3];
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Pk >> 3];
   $92 = (+(HEAP32[$1 >> 2] | 0) + 2.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$Pk >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $92;
   $98 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   $100 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$100 >> 3] = +HEAPF64[$100 >> 3] + $98;
   HEAP32[$0 >> 2] = HEAP32[$stat_P >> 2];
   $341 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $341 | 0;
  }
  $105 = +HEAPF64[$3 >> 3];
  if ($31 < 1.0) {
   $108 = +Math_sqrt(+(1.0 - +HEAPF64[$3 >> 3]));
   HEAPF64[$xi >> 3] = $105 / ($108 * +Math_sqrt(+(+HEAPF64[$3 >> 3] + 1.0)));
   HEAP32[$stat_CF1 >> 2] = _conicalP_negmu_xlt1_CF1(0.0, HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $rat) | 0;
   HEAP32[$stat_P0 >> 2] = _gsl_sf_conicalP_0_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $P0) | 0;
   HEAPF64[$Pkp11 >> 3] = +HEAPF64[$rat >> 3] * 1.4916681462400413e-154;
   HEAPF64[$Pk2 >> 3] = 1.4916681462400413e-154;
   HEAP32[$k4 >> 2] = HEAP32[$1 >> 2];
   while (1) {
    if ((HEAP32[$k4 >> 2] | 0) <= 0) break;
    HEAPF64[$d5 >> 3] = (+(HEAP32[$k4 >> 2] | 0) + .5) * (+(HEAP32[$k4 >> 2] | 0) + .5) + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
    HEAPF64[$Pkm13 >> 3] = +(HEAP32[$k4 >> 2] | 0) * 2.0 * +HEAPF64[$xi >> 3] * +HEAPF64[$Pk2 >> 3] + +HEAPF64[$d5 >> 3] * +HEAPF64[$Pkp11 >> 3];
    HEAPF64[$Pkp11 >> 3] = +HEAPF64[$Pk2 >> 3];
    HEAPF64[$Pk2 >> 3] = +HEAPF64[$Pkm13 >> 3];
    HEAP32[$k4 >> 2] = (HEAP32[$k4 >> 2] | 0) + -1;
   }
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$P0 >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Pk2 >> 3];
   $162 = +HEAPF64[$P0 + 8 >> 3] * 2.983336292480083e-154 / +Math_abs(+(+HEAPF64[$Pk2 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $162;
   $170 = +Math_abs(+(+HEAPF64[$rat + 8 >> 3] / +HEAPF64[$rat >> 3])) * 2.0;
   $178 = $170 * (+(HEAP32[$1 >> 2] | 0) + 1.0) * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $180 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$180 >> 3] = +HEAPF64[$180 >> 3] + $178;
   $186 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   $188 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$188 >> 3] = +HEAPF64[$188 >> 3] + $186;
   if (HEAP32[$stat_P0 >> 2] | 0) $198 = HEAP32[$stat_P0 >> 2] | 0; else $198 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $198;
   $341 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $341 | 0;
  }
  if ($105 == 1.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $341 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $341 | 0;
  }
  HEAPF64[$xi6 >> 3] = +HEAPF64[$3 >> 3] / +Math_sqrt(+((+HEAPF64[$3 >> 3] - 1.0) * (+HEAPF64[$3 >> 3] + 1.0)));
  HEAP32[$stat_CF18 >> 2] = _conicalP_negmu_xgt1_CF1(0.0, HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $rat7) | 0;
  HEAPF64[$Pkp110 >> 3] = +HEAPF64[$rat7 >> 3] * 1.4916681462400413e-154;
  HEAPF64[$Pk11 >> 3] = 1.4916681462400413e-154;
  HEAP32[$k13 >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$k13 >> 2] | 0) <= -1) break;
   HEAPF64[$d14 >> 3] = (+(HEAP32[$k13 >> 2] | 0) + .5) * (+(HEAP32[$k13 >> 2] | 0) + .5) + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
   HEAPF64[$Pkm112 >> 3] = +(HEAP32[$k13 >> 2] | 0) * 2.0 * +HEAPF64[$xi6 >> 3] * +HEAPF64[$Pk11 >> 3] - +HEAPF64[$d14 >> 3] * +HEAPF64[$Pkp110 >> 3];
   HEAPF64[$Pkp110 >> 3] = +HEAPF64[$Pk11 >> 3];
   HEAPF64[$Pk11 >> 3] = +HEAPF64[$Pkm112 >> 3];
   HEAP32[$k13 >> 2] = (HEAP32[$k13 >> 2] | 0) + -1;
  }
  $247 = +Math_abs(+(+HEAPF64[$Pk11 >> 3]));
  $250 = $247 > +Math_abs(+(+HEAPF64[$Pkp110 >> 3]));
  $251 = +HEAPF64[$2 >> 3];
  $252 = +HEAPF64[$3 >> 3];
  if ($250) {
   HEAP32[$stat_P9 >> 2] = _gsl_sf_conicalP_1_e($251, $252, $P1) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$P1 >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Pk11 >> 3];
   $264 = +HEAPF64[$P1 + 8 >> 3] * 2.983336292480083e-154 / +Math_abs(+(+HEAPF64[$Pk11 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $264;
   $272 = +Math_abs(+(+HEAPF64[$rat7 + 8 >> 3] / +HEAPF64[$rat7 >> 3])) * 2.0;
   $280 = $272 * (+(HEAP32[$1 >> 2] | 0) + 2.0) * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $282 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + $280;
   $288 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   $290 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$290 >> 3] = +HEAPF64[$290 >> 3] + $288;
  } else {
   HEAP32[$stat_P9 >> 2] = _gsl_sf_conicalP_0_e($251, $252, $P015) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$P015 >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Pkp110 >> 3];
   $304 = +HEAPF64[$P015 + 8 >> 3] * 2.983336292480083e-154 / +Math_abs(+(+HEAPF64[$Pkp110 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $304;
   $312 = +Math_abs(+(+HEAPF64[$rat7 + 8 >> 3] / +HEAPF64[$rat7 >> 3])) * 2.0;
   $320 = $312 * (+(HEAP32[$1 >> 2] | 0) + 2.0) * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   $322 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] + $320;
   $328 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   $330 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$330 >> 3] = +HEAPF64[$330 >> 3] + $328;
  }
  if (HEAP32[$stat_P9 >> 2] | 0) $340 = HEAP32[$stat_P9 >> 2] | 0; else $340 = (HEAP32[$stat_CF18 >> 2] | 0) != 0 ? HEAP32[$stat_CF18 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $340;
  $341 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $341 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(53168, 53184, 1233, 1);
 HEAP32[$0 >> 2] = 1;
 $341 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $341 | 0;
}
function _gsl_sf_conicalP_0_e($lambda, $x, $result) {
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $115 = 0.0, $128 = 0, $131 = 0.0, $153 = 0, $16 = 0.0, $168 = 0.0, $173 = 0.0, $18 = 0.0, $188 = 0.0, $2 = 0, $207 = 0, $209 = 0.0, $233 = 0, $248 = 0.0, $253 = 0.0, $277 = 0.0, $279 = 0, $285 = 0.0, $287 = 0, $297 = 0, $298 = 0, $3 = 0, $36 = 0.0, $38 = 0, $66 = 0.0, $68 = 0, $I0 = 0, $I1 = 0, $J0 = 0, $J1 = 0, $K = 0, $P = 0, $V0 = 0, $V1 = 0, $arg1 = 0, $besserr = 0, $besserr6 = 0, $bessterm = 0, $bessterm5 = 0, $c = 0, $lm = 0, $pre_err = 0, $pre_val = 0, $s = 0, $sh = 0, $sqts = 0, $stat_I = 0, $stat_I0 = 0, $stat_I1 = 0, $stat_J = 0, $stat_J0 = 0, $stat_J1 = 0, $stat_K = 0, $stat_P = 0, $stat_V = 0, $stat_V4 = 0, $stat_e = 0, $stat_e2 = 0, $sth = 0, $t = 0, $th = 0, $th1 = 0, $xi = 0, $xi3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $0 = sp + 324 | 0;
 $1 = sp + 264 | 0;
 $2 = sp + 256 | 0;
 $3 = sp + 320 | 0;
 $K = sp + 240 | 0;
 $stat_K = sp + 316 | 0;
 $th = sp + 232 | 0;
 $s = sp + 224 | 0;
 $xi = sp + 216 | 0;
 $c = sp + 208 | 0;
 $t = sp + 200 | 0;
 $P = sp + 184 | 0;
 $lm = sp + 176 | 0;
 $stat_P = sp + 312 | 0;
 $stat_e = sp + 308 | 0;
 $V0 = sp + 168 | 0;
 $V1 = sp + 160 | 0;
 $th1 = sp + 152 | 0;
 $sth = sp + 144 | 0;
 $I0 = sp + 128 | 0;
 $I1 = sp + 112 | 0;
 $stat_I0 = sp + 304 | 0;
 $stat_I1 = sp + 300 | 0;
 $stat_I = sp + 296 | 0;
 $stat_V = sp + 292 | 0;
 $bessterm = sp + 104 | 0;
 $besserr = sp + 96 | 0;
 $arg1 = sp + 88 | 0;
 $sqts = sp + 80 | 0;
 $stat_e2 = sp + 288 | 0;
 $sh = sp + 72 | 0;
 $xi3 = sp + 64 | 0;
 $J0 = sp + 48 | 0;
 $J1 = sp + 32 | 0;
 $stat_J0 = sp + 284 | 0;
 $stat_J1 = sp + 280 | 0;
 $stat_J = sp + 276 | 0;
 $stat_V4 = sp + 272 | 0;
 $bessterm5 = sp + 24 | 0;
 $besserr6 = sp + 16 | 0;
 $pre_val = sp + 8 | 0;
 $pre_err = sp;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] <= -1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(53168, 53184, 771, 1);
  HEAP32[$0 >> 2] = 1;
  $298 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $298 | 0;
 }
 if (+HEAPF64[$2 >> 3] == 1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $298 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $298 | 0;
 }
 $16 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$1 >> 3] == 0.0) {
  $18 = +HEAPF64[$2 >> 3];
  if ($16 < 1.0) {
   HEAPF64[$th >> 3] = +Math_acos(+$18);
   HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$th >> 3] * .5));
   HEAP32[$stat_K >> 2] = _gsl_sf_ellint_Kcomp_e(+HEAPF64[$s >> 3], 0, $K) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$K >> 3] * .6366197723675814;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$K + 8 >> 3] * .6366197723675814;
   $36 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $38 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$38 >> 3] = +HEAPF64[$38 >> 3] + $36;
   HEAP32[$0 >> 2] = HEAP32[$stat_K >> 2];
   $298 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $298 | 0;
  } else {
   HEAPF64[$xi >> 3] = +_acosh(+$18);
   HEAPF64[$c >> 3] = +_cosh(+(+HEAPF64[$xi >> 3] * .5));
   HEAPF64[$t >> 3] = +_tanh(+(+HEAPF64[$xi >> 3] * .5));
   HEAP32[$stat_K >> 2] = _gsl_sf_ellint_Kcomp_e(+HEAPF64[$t >> 3], 0, $K) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = .6366197723675814 / +HEAPF64[$c >> 3] * +HEAPF64[$K >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = .6366197723675814 / +HEAPF64[$c >> 3] * +HEAPF64[$K + 8 >> 3];
   $66 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $68 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$68 >> 3] = +HEAPF64[$68 >> 3] + $66;
   HEAP32[$0 >> 2] = HEAP32[$stat_K >> 2];
   $298 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $298 | 0;
  }
 }
 if ($16 <= 0.0) {
  if (!(+HEAPF64[$1 >> 3] < 1.0e3)) label = 11;
 } else label = 11;
 do if ((label | 0) == 11) {
  if (+HEAPF64[$2 >> 3] < .1) if (+HEAPF64[$1 >> 3] < 17.0) break;
  if (+HEAPF64[$2 >> 3] < .2) if (+HEAPF64[$1 >> 3] < 5.0) break;
  if (+HEAPF64[$2 >> 3] <= .2) {
   if (!(+HEAPF64[$1 >> 3] < 17.0)) label = 18;
  } else label = 18;
  do if ((label | 0) == 18) {
   if (+HEAPF64[$2 >> 3] <= 1.5) if (+HEAPF64[$1 >> 3] < 20.0) break;
   if (1.5 < +HEAPF64[$2 >> 3]) if (+HEAPF64[$1 >> 3] < (+HEAPF64[$2 >> 3] > 20.0 ? +HEAPF64[$2 >> 3] : 20.0)) {
    HEAP32[$stat_P >> 2] = _gsl_sf_conicalP_large_x_e(0.0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $P, $lm) | 0;
    $115 = +Math_abs(+(+HEAPF64[$lm >> 3])) * 4.440892098500626e-16;
    HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lm >> 3], $115, +HEAPF64[$P >> 3], +HEAPF64[$P + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
    if (HEAP32[$stat_e >> 2] | 0) $128 = HEAP32[$stat_e >> 2] | 0; else $128 = (HEAP32[$stat_P >> 2] | 0) != 0 ? HEAP32[$stat_P >> 2] | 0 : 0;
    HEAP32[$0 >> 2] = $128;
    $298 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $298 | 0;
   }
   $131 = +HEAPF64[$2 >> 3];
   if (!(+HEAPF64[$2 >> 3] < 1.0)) {
    $209 = +Math_sqrt(+($131 - 1.0));
    HEAPF64[$sh >> 3] = $209 * +Math_sqrt(+(+HEAPF64[$2 >> 3] + 1.0));
    HEAPF64[$xi3 >> 3] = +Math_log(+(+HEAPF64[$2 >> 3] + +HEAPF64[$sh >> 3]));
    HEAP32[$stat_J0 >> 2] = _gsl_sf_bessel_J0_e(+HEAPF64[$xi3 >> 3] * +HEAPF64[$1 >> 3], $J0) | 0;
    HEAP32[$stat_J1 >> 2] = _gsl_sf_bessel_J1_e(+HEAPF64[$xi3 >> 3] * +HEAPF64[$1 >> 3], $J1) | 0;
    if (HEAP32[$stat_J0 >> 2] | 0) $233 = HEAP32[$stat_J0 >> 2] | 0; else $233 = (HEAP32[$stat_J1 >> 2] | 0) != 0 ? HEAP32[$stat_J1 >> 2] | 0 : 0;
    HEAP32[$stat_J >> 2] = $233;
    HEAP32[$stat_V4 >> 2] = _conicalP_0_V(+HEAPF64[$xi3 >> 3], +HEAPF64[$2 >> 3] / +HEAPF64[$sh >> 3], +HEAPF64[$1 >> 3], 1.0, $V0, $V1) | 0;
    HEAPF64[$bessterm5 >> 3] = +HEAPF64[$V0 >> 3] * +HEAPF64[$J0 >> 3] + +HEAPF64[$V1 >> 3] * +HEAPF64[$J1 >> 3];
    $248 = +Math_abs(+(+HEAPF64[$V0 >> 3]));
    $253 = +Math_abs(+(+HEAPF64[$V1 >> 3]));
    HEAPF64[$besserr6 >> 3] = $248 * +HEAPF64[$J0 + 8 >> 3] + $253 * +HEAPF64[$J1 + 8 >> 3];
    HEAPF64[$pre_val >> 3] = +Math_sqrt(+(+HEAPF64[$xi3 >> 3] / +HEAPF64[$sh >> 3]));
    HEAPF64[$pre_err >> 3] = +Math_abs(+(+HEAPF64[$pre_val >> 3])) * 2.0;
    HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre_val >> 3] * +HEAPF64[$bessterm5 >> 3];
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre_val >> 3] * +HEAPF64[$besserr6 >> 3];
    $277 = +HEAPF64[$pre_err >> 3] * +Math_abs(+(+HEAPF64[$bessterm5 >> 3]));
    $279 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + $277;
    $285 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
    $287 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$287 >> 3] = +HEAPF64[$287 >> 3] + $285;
    if (HEAP32[$stat_V4 >> 2] | 0) $297 = HEAP32[$stat_V4 >> 2] | 0; else $297 = (HEAP32[$stat_J >> 2] | 0) != 0 ? HEAP32[$stat_J >> 2] | 0 : 0;
    HEAP32[$0 >> 2] = $297;
    $298 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $298 | 0;
   }
   HEAPF64[$th1 >> 3] = +Math_acos(+$131);
   HEAPF64[$sth >> 3] = +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]));
   HEAP32[$stat_I0 >> 2] = _gsl_sf_bessel_I0_scaled_e(+HEAPF64[$th1 >> 3] * +HEAPF64[$1 >> 3], $I0) | 0;
   HEAP32[$stat_I1 >> 2] = _gsl_sf_bessel_I1_scaled_e(+HEAPF64[$th1 >> 3] * +HEAPF64[$1 >> 3], $I1) | 0;
   if (HEAP32[$stat_I0 >> 2] | 0) $153 = HEAP32[$stat_I0 >> 2] | 0; else $153 = (HEAP32[$stat_I1 >> 2] | 0) != 0 ? HEAP32[$stat_I1 >> 2] | 0 : 0;
   HEAP32[$stat_I >> 2] = $153;
   HEAP32[$stat_V >> 2] = _conicalP_0_V(+HEAPF64[$th1 >> 3], +HEAPF64[$2 >> 3] / +HEAPF64[$sth >> 3], +HEAPF64[$1 >> 3], -1.0, $V0, $V1) | 0;
   HEAPF64[$bessterm >> 3] = +HEAPF64[$V0 >> 3] * +HEAPF64[$I0 >> 3] + +HEAPF64[$V1 >> 3] * +HEAPF64[$I1 >> 3];
   $168 = +Math_abs(+(+HEAPF64[$V0 >> 3]));
   $173 = +Math_abs(+(+HEAPF64[$V1 >> 3]));
   HEAPF64[$besserr >> 3] = $168 * +HEAPF64[$I0 + 8 >> 3] + $173 * +HEAPF64[$I1 + 8 >> 3];
   HEAPF64[$arg1 >> 3] = +HEAPF64[$th1 >> 3] * +HEAPF64[$1 >> 3];
   HEAPF64[$sqts >> 3] = +Math_sqrt(+(+HEAPF64[$th1 >> 3] / +HEAPF64[$sth >> 3]));
   $188 = +Math_abs(+(+HEAPF64[$arg1 >> 3])) * 8.881784197001252e-16;
   HEAP32[$stat_e2 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$arg1 >> 3], $188, +HEAPF64[$sqts >> 3] * +HEAPF64[$bessterm >> 3], +HEAPF64[$sqts >> 3] * +HEAPF64[$besserr >> 3], HEAP32[$3 >> 2] | 0) | 0;
   do if (HEAP32[$stat_e2 >> 2] | 0) $207 = HEAP32[$stat_e2 >> 2] | 0; else if (HEAP32[$stat_V >> 2] | 0) {
    $207 = HEAP32[$stat_V >> 2] | 0;
    break;
   } else {
    $207 = (HEAP32[$stat_I >> 2] | 0) != 0 ? HEAP32[$stat_I >> 2] | 0 : 0;
    break;
   } while (0);
   HEAP32[$0 >> 2] = $207;
   $298 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $298 | 0;
  } while (0);
  HEAP32[$0 >> 2] = _gsl_sf_hyperg_2F1_conj_e(.5, +HEAPF64[$1 >> 3], 1.0, (1.0 - +HEAPF64[$2 >> 3]) / 2.0, HEAP32[$3 >> 2] | 0) | 0;
  $298 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $298 | 0;
 } while (0);
 HEAP32[$0 >> 2] = _conicalP_xlt1_hyperg_A(0.0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 $298 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $298 | 0;
}
function _gsl_sf_hyperg_2F1_e($a, $b, $c, $x, $result) {
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $116 = 0, $2 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $223 = 0.0, $241 = 0.0, $244 = 0.0, $247 = 0.0, $265 = 0.0, $28 = 0, $283 = 0.0, $290 = 0, $3 = 0, $37 = 0, $4 = 0, $46 = 0, $5 = 0, $a_neg_integer = 0, $ap = 0, $b_neg_integer = 0, $bp = 0, $c_neg_integer = 0, $d = 0, $lngamc = 0, $lngamc_sgn = 0, $lngamca = 0, $lngamca_sgn = 0, $lngamcab = 0, $lngamcb = 0, $lngamcb_sgn = 0, $rinta = 0, $rintb = 0, $rintc = 0, $stat = 0, $stat1 = 0, $stat2 = 0, $stat3 = 0, $stat4 = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 208 | 0;
 $1 = sp + 160 | 0;
 $2 = sp + 152 | 0;
 $3 = sp + 144 | 0;
 $4 = sp + 136 | 0;
 $5 = sp + 204 | 0;
 $d = sp + 128 | 0;
 $rinta = sp + 120 | 0;
 $rintb = sp + 112 | 0;
 $rintc = sp + 104 | 0;
 $a_neg_integer = sp + 200 | 0;
 $b_neg_integer = sp + 196 | 0;
 $c_neg_integer = sp + 192 | 0;
 $lngamc = sp + 88 | 0;
 $lngamcab = sp + 72 | 0;
 $lngamca = sp + 56 | 0;
 $lngamcb = sp + 40 | 0;
 $lngamc_sgn = sp + 32 | 0;
 $lngamca_sgn = sp + 24 | 0;
 $lngamcb_sgn = sp + 16 | 0;
 $status = sp + 188 | 0;
 $stat1 = sp + 184 | 0;
 $stat2 = sp + 180 | 0;
 $stat3 = sp + 176 | 0;
 $stat4 = sp + 172 | 0;
 $ap = sp + 8 | 0;
 $bp = sp;
 $stat = sp + 168 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$d >> 3] = +HEAPF64[$3 >> 3] - +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3];
 HEAPF64[$rinta >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] + .5));
 HEAPF64[$rintb >> 3] = +Math_floor(+(+HEAPF64[$2 >> 3] + .5));
 HEAPF64[$rintc >> 3] = +Math_floor(+(+HEAPF64[$3 >> 3] + .5));
 if (+HEAPF64[$1 >> 3] < 0.0) $28 = +Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$rinta >> 3])) < 2.220446049250313e-13; else $28 = 0;
 HEAP32[$a_neg_integer >> 2] = $28 & 1;
 if (+HEAPF64[$2 >> 3] < 0.0) $37 = +Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$rintb >> 3])) < 2.220446049250313e-13; else $37 = 0;
 HEAP32[$b_neg_integer >> 2] = $37 & 1;
 if (+HEAPF64[$3 >> 3] < 0.0) $46 = +Math_abs(+(+HEAPF64[$3 >> 3] - +HEAPF64[$rintc >> 3])) < 2.220446049250313e-13; else $46 = 0;
 HEAP32[$c_neg_integer >> 2] = $46 & 1;
 HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
 if (+Math_abs(+(+HEAPF64[$4 >> 3] - 1.0)) < 2.220446049250313e-13) if (+HEAPF64[$3 >> 3] - +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3] > 0.0) if (+HEAPF64[$3 >> 3] != 0.0) if (!(HEAP32[$c_neg_integer >> 2] | 0)) {
  HEAP32[$stat1 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$3 >> 3], $lngamc, $lngamc_sgn) | 0;
  HEAP32[$stat2 >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$3 >> 3] - +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3], $lngamcab) | 0;
  HEAP32[$stat3 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$3 >> 3] - +HEAPF64[$1 >> 3], $lngamca, $lngamca_sgn) | 0;
  HEAP32[$stat4 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$3 >> 3] - +HEAPF64[$2 >> 3], $lngamcb, $lngamcb_sgn) | 0;
  if (!(HEAP32[$stat1 >> 2] | 0)) if (!(HEAP32[$stat2 >> 2] | 0)) if (!(HEAP32[$stat3 >> 2] | 0)) if (!(HEAP32[$stat4 >> 2] | 0)) {
   HEAP32[$status >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lngamc >> 3] + +HEAPF64[$lngamcab >> 3] - +HEAPF64[$lngamca >> 3] - +HEAPF64[$lngamcb >> 3], +HEAPF64[$lngamc + 8 >> 3] + +HEAPF64[$lngamcab + 8 >> 3] + +HEAPF64[$lngamca + 8 >> 3] + +HEAPF64[$lngamcb + 8 >> 3], HEAP32[$5 >> 2] | 0) | 0;
   $116 = HEAP32[$5 >> 2] | 0;
   HEAPF64[$116 >> 3] = +HEAPF64[$116 >> 3] * (+HEAPF64[$lngamc_sgn >> 3] / (+HEAPF64[$lngamca_sgn >> 3] * +HEAPF64[$lngamcb_sgn >> 3]));
   HEAP32[$0 >> 2] = HEAP32[$status >> 2];
   $290 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $290 | 0;
  }
  HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51880, 51896, 654, 1);
  HEAP32[$0 >> 2] = 1;
  $290 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $290 | 0;
 }
 if (+HEAPF64[$4 >> 3] < -1.0 | 1.0 <= +HEAPF64[$4 >> 3]) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51880, 51896, 667, 1);
  HEAP32[$0 >> 2] = 1;
  $290 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $290 | 0;
 }
 do if (HEAP32[$c_neg_integer >> 2] | 0) {
  if (HEAP32[$a_neg_integer >> 2] | 0) if (+HEAPF64[$1 >> 3] > +HEAPF64[$3 >> 3] + .1) break;
  if (HEAP32[$b_neg_integer >> 2] | 0) if (+HEAPF64[$2 >> 3] > +HEAPF64[$3 >> 3] + .1) break;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51880, 51896, 675, 1);
  HEAP32[$0 >> 2] = 1;
  $290 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $290 | 0;
 } while (0);
 if (!(+Math_abs(+(+HEAPF64[$3 >> 3] - +HEAPF64[$2 >> 3])) < 2.220446049250313e-13)) if (!(+Math_abs(+(+HEAPF64[$3 >> 3] - +HEAPF64[$1 >> 3])) < 2.220446049250313e-13)) {
  if (+HEAPF64[$1 >> 3] >= 0.0) if (+HEAPF64[$2 >> 3] >= 0.0) if (+HEAPF64[$3 >> 3] >= 0.0) if (+HEAPF64[$4 >> 3] >= 0.0 & +HEAPF64[$4 >> 3] < .995) {
   HEAP32[$0 >> 2] = _hyperg_2F1_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
   $290 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $290 | 0;
  }
  if (+Math_abs(+(+HEAPF64[$1 >> 3])) < 10.0) if (+Math_abs(+(+HEAPF64[$2 >> 3])) < 10.0) {
   if (HEAP32[$a_neg_integer >> 2] | 0) {
    HEAP32[$0 >> 2] = _hyperg_2F1_series(+HEAPF64[$rinta >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
    $290 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $290 | 0;
   }
   if (HEAP32[$b_neg_integer >> 2] | 0) {
    HEAP32[$0 >> 2] = _hyperg_2F1_series(+HEAPF64[$1 >> 3], +HEAPF64[$rintb >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
    $290 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $290 | 0;
   }
   if (+HEAPF64[$4 >> 3] < -.25) {
    HEAP32[$0 >> 2] = _hyperg_2F1_luke(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
    $290 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $290 | 0;
   }
   if (+HEAPF64[$4 >> 3] < .5) {
    HEAP32[$0 >> 2] = _hyperg_2F1_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
    $290 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $290 | 0;
   }
   $214 = +Math_abs(+(+HEAPF64[$3 >> 3])) > 10.0;
   $215 = +HEAPF64[$1 >> 3];
   $216 = +HEAPF64[$2 >> 3];
   $217 = +HEAPF64[$3 >> 3];
   $218 = +HEAPF64[$4 >> 3];
   $219 = HEAP32[$5 >> 2] | 0;
   if ($214) {
    HEAP32[$0 >> 2] = _hyperg_2F1_series($215, $216, $217, $218, $219) | 0;
    $290 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $290 | 0;
   } else {
    HEAP32[$0 >> 2] = _hyperg_2F1_reflect($215, $216, $217, $218, $219) | 0;
    $290 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $290 | 0;
   }
  }
  $223 = +Math_abs(+(+HEAPF64[$1 >> 3]));
  if ($223 > +Math_abs(+(+HEAPF64[$2 >> 3]))) {
   HEAPF64[$bp >> 3] = +HEAPF64[$1 >> 3];
   HEAPF64[$ap >> 3] = +HEAPF64[$2 >> 3];
  } else {
   HEAPF64[$bp >> 3] = +HEAPF64[$2 >> 3];
   HEAPF64[$ap >> 3] = +HEAPF64[$1 >> 3];
  }
  if (+HEAPF64[$4 >> 3] < 0.0) {
   HEAP32[$0 >> 2] = _hyperg_2F1_luke(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
   $290 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $290 | 0;
  }
  $241 = +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$ap >> 3]))), 1.0);
  $244 = $241 * +Math_abs(+(+HEAPF64[$bp >> 3]));
  $247 = $244 * +Math_abs(+(+HEAPF64[$4 >> 3]));
  if ($247 < +Math_abs(+(+HEAPF64[$3 >> 3])) * 2.0) {
   HEAP32[$0 >> 2] = _hyperg_2F1_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
   $290 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $290 | 0;
  }
  $265 = +Math_abs(+(+HEAPF64[$bp >> 3] * +HEAPF64[$bp >> 3] * +HEAPF64[$4 >> 3] * +HEAPF64[$4 >> 3]));
  if ($265 < +Math_abs(+(+HEAPF64[$bp >> 3])) * .001) if (+Math_abs(+(+HEAPF64[$ap >> 3])) < 10.0) {
   HEAP32[$stat >> 2] = _gsl_sf_hyperg_1F1_e(+HEAPF64[$ap >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$bp >> 3] * +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
   $283 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * .001;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $283;
   HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
   $290 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $290 | 0;
  }
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(51912, 51896, 755, 24);
  HEAP32[$0 >> 2] = 24;
  $290 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $290 | 0;
 }
 HEAP32[$0 >> 2] = _pow_omx(+HEAPF64[$4 >> 3], +HEAPF64[$d >> 3], HEAP32[$5 >> 2] | 0) | 0;
 $290 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $290 | 0;
}
function _gsl_sf_ellint_RJ_e($x, $y, $z, $p, $mode, $result) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $p = +$p;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $13 = 0, $2 = 0, $253 = 0.0, $259 = 0.0, $265 = 0, $3 = 0, $4 = 0, $5 = 0, $52 = 0.0, $6 = 0, $90 = 0.0, $92 = 0.0, $94 = 0.0, $alfa = 0, $beta = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $e2 = 0, $e3 = 0, $ea = 0, $eb = 0, $ec = 0, $epslon = 0, $errtol = 0, $goal = 0, $lamda = 0, $lolim = 0, $mu = 0, $n = 0, $pn = 0, $pndev = 0, $power4 = 0, $prec = 0, $rcresult = 0, $rcstatus = 0, $s1 = 0, $s2 = 0, $s3 = 0, $sigma = 0, $uplim = 0, $xn = 0, $xndev = 0, $xnroot = 0, $yn = 0, $yndev = 0, $ynroot = 0, $zn = 0, $zndev = 0, $znroot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $0 = sp + 344 | 0;
 $1 = sp + 312 | 0;
 $2 = sp + 304 | 0;
 $3 = sp + 296 | 0;
 $4 = sp + 288 | 0;
 $5 = sp + 340 | 0;
 $6 = sp + 336 | 0;
 $goal = sp + 332 | 0;
 $errtol = sp + 280 | 0;
 $prec = sp + 272 | 0;
 $lolim = sp + 264 | 0;
 $uplim = sp + 256 | 0;
 $c1 = sp + 248 | 0;
 $c2 = sp + 240 | 0;
 $c3 = sp + 232 | 0;
 $c4 = sp + 224 | 0;
 $xn = sp + 216 | 0;
 $yn = sp + 208 | 0;
 $zn = sp + 200 | 0;
 $pn = sp + 192 | 0;
 $sigma = sp + 184 | 0;
 $power4 = sp + 176 | 0;
 $mu = sp + 168 | 0;
 $xndev = sp + 160 | 0;
 $yndev = sp + 152 | 0;
 $zndev = sp + 144 | 0;
 $pndev = sp + 136 | 0;
 $ea = sp + 128 | 0;
 $eb = sp + 120 | 0;
 $ec = sp + 112 | 0;
 $e2 = sp + 104 | 0;
 $e3 = sp + 96 | 0;
 $s1 = sp + 88 | 0;
 $s2 = sp + 80 | 0;
 $s3 = sp + 72 | 0;
 $n = sp + 324 | 0;
 $xnroot = sp + 64 | 0;
 $ynroot = sp + 56 | 0;
 $znroot = sp + 48 | 0;
 $lamda = sp + 40 | 0;
 $alfa = sp + 32 | 0;
 $beta = sp + 24 | 0;
 $epslon = sp + 16 | 0;
 $rcresult = sp;
 $rcstatus = sp + 320 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAPF64[$3 >> 3] = $z;
 HEAPF64[$4 >> 3] = $p;
 HEAP32[$5 >> 2] = $mode;
 HEAP32[$6 >> 2] = $result;
 HEAP32[$goal >> 2] = _GSL_MODE_PREC(HEAP32[$5 >> 2] | 0) | 0;
 HEAPF64[$errtol >> 3] = (HEAP32[$goal >> 2] | 0) == 0 ? .001 : .03;
 $13 = _gsl_prec_eps + (HEAP32[$goal >> 2] << 3) | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[$13 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[$13 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[$13 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[$13 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[$13 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[$13 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[$13 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[$13 + 7 >> 0];
 HEAPF64[$prec >> 3] = +HEAPF64[tempDoublePtr >> 3];
 HEAPF64[$lolim >> 3] = +Math_pow(1.1125369292536007e-307, .3333333333333333);
 HEAPF64[$uplim >> 3] = +Math_pow(3.5953862697246315e+307, .3333333333333333) * .3;
 HEAP32[sp + 328 >> 2] = 1e4;
 if (!(+HEAPF64[$1 >> 3] < 0.0)) if (!(+HEAPF64[$2 >> 3] < 0.0)) if (!(+HEAPF64[$3 >> 3] < 0.0)) {
  if (!(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] < +HEAPF64[$lolim >> 3])) if (!(+HEAPF64[$1 >> 3] + +HEAPF64[$3 >> 3] < +HEAPF64[$lolim >> 3])) if (!(+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3] < +HEAPF64[$lolim >> 3])) if (!(+HEAPF64[$4 >> 3] < +HEAPF64[$lolim >> 3])) {
   $52 = +_locMAX4(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3]);
   if (!($52 < +HEAPF64[$uplim >> 3])) {
    HEAPF64[HEAP32[$6 >> 2] >> 3] = nan;
    HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = nan;
    _gsl_error(29376, 29392, 322, 1);
    HEAP32[$0 >> 2] = 1;
    $265 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $265 | 0;
   }
   HEAPF64[$c1 >> 3] = .21428571428571427;
   HEAPF64[$c2 >> 3] = .3333333333333333;
   HEAPF64[$c3 >> 3] = .13636363636363635;
   HEAPF64[$c4 >> 3] = .11538461538461539;
   HEAPF64[$xn >> 3] = +HEAPF64[$1 >> 3];
   HEAPF64[$yn >> 3] = +HEAPF64[$2 >> 3];
   HEAPF64[$zn >> 3] = +HEAPF64[$3 >> 3];
   HEAPF64[$pn >> 3] = +HEAPF64[$4 >> 3];
   HEAPF64[$sigma >> 3] = 0.0;
   HEAPF64[$power4 >> 3] = 1.0;
   HEAP32[$n >> 2] = 0;
   while (1) {
    HEAPF64[$mu >> 3] = (+HEAPF64[$xn >> 3] + +HEAPF64[$yn >> 3] + +HEAPF64[$zn >> 3] + +HEAPF64[$pn >> 3] + +HEAPF64[$pn >> 3]) * .2;
    HEAPF64[$xndev >> 3] = (+HEAPF64[$mu >> 3] - +HEAPF64[$xn >> 3]) / +HEAPF64[$mu >> 3];
    HEAPF64[$yndev >> 3] = (+HEAPF64[$mu >> 3] - +HEAPF64[$yn >> 3]) / +HEAPF64[$mu >> 3];
    HEAPF64[$zndev >> 3] = (+HEAPF64[$mu >> 3] - +HEAPF64[$zn >> 3]) / +HEAPF64[$mu >> 3];
    HEAPF64[$pndev >> 3] = (+HEAPF64[$mu >> 3] - +HEAPF64[$pn >> 3]) / +HEAPF64[$mu >> 3];
    $90 = +Math_abs(+(+HEAPF64[$xndev >> 3]));
    $92 = +Math_abs(+(+HEAPF64[$yndev >> 3]));
    $94 = +Math_abs(+(+HEAPF64[$zndev >> 3]));
    HEAPF64[$epslon >> 3] = +_locMAX4($90, $92, $94, +Math_abs(+(+HEAPF64[$pndev >> 3])));
    if (+HEAPF64[$epslon >> 3] < +HEAPF64[$errtol >> 3]) {
     label = 17;
     break;
    }
    HEAPF64[$xnroot >> 3] = +Math_sqrt(+(+HEAPF64[$xn >> 3]));
    HEAPF64[$ynroot >> 3] = +Math_sqrt(+(+HEAPF64[$yn >> 3]));
    HEAPF64[$znroot >> 3] = +Math_sqrt(+(+HEAPF64[$zn >> 3]));
    HEAPF64[$lamda >> 3] = +HEAPF64[$xnroot >> 3] * (+HEAPF64[$ynroot >> 3] + +HEAPF64[$znroot >> 3]) + +HEAPF64[$ynroot >> 3] * +HEAPF64[$znroot >> 3];
    HEAPF64[$alfa >> 3] = +HEAPF64[$pn >> 3] * (+HEAPF64[$xnroot >> 3] + +HEAPF64[$ynroot >> 3] + +HEAPF64[$znroot >> 3]) + +HEAPF64[$xnroot >> 3] * +HEAPF64[$ynroot >> 3] * +HEAPF64[$znroot >> 3];
    HEAPF64[$alfa >> 3] = +HEAPF64[$alfa >> 3] * +HEAPF64[$alfa >> 3];
    HEAPF64[$beta >> 3] = +HEAPF64[$pn >> 3] * (+HEAPF64[$pn >> 3] + +HEAPF64[$lamda >> 3]) * (+HEAPF64[$pn >> 3] + +HEAPF64[$lamda >> 3]);
    HEAP32[$rcstatus >> 2] = _gsl_sf_ellint_RC_e(+HEAPF64[$alfa >> 3], +HEAPF64[$beta >> 3], HEAP32[$5 >> 2] | 0, $rcresult) | 0;
    if (HEAP32[$rcstatus >> 2] | 0) {
     label = 14;
     break;
    }
    HEAPF64[$sigma >> 3] = +HEAPF64[$sigma >> 3] + +HEAPF64[$power4 >> 3] * +HEAPF64[$rcresult >> 3];
    HEAPF64[$power4 >> 3] = +HEAPF64[$power4 >> 3] * .25;
    HEAPF64[$xn >> 3] = (+HEAPF64[$xn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAPF64[$yn >> 3] = (+HEAPF64[$yn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAPF64[$zn >> 3] = (+HEAPF64[$zn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAPF64[$pn >> 3] = (+HEAPF64[$pn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    if ((HEAP32[$n >> 2] | 0) == 1e4) {
     label = 16;
     break;
    }
   }
   if ((label | 0) == 14) {
    HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
    HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = 0.0;
    HEAP32[$0 >> 2] = HEAP32[$rcstatus >> 2];
    $265 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $265 | 0;
   } else if ((label | 0) == 16) {
    HEAPF64[HEAP32[$6 >> 2] >> 3] = nan;
    HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = nan;
    _gsl_error(29408, 29392, 305, 11);
    HEAP32[$0 >> 2] = 11;
    $265 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $265 | 0;
   } else if ((label | 0) == 17) {
    HEAPF64[$ea >> 3] = +HEAPF64[$xndev >> 3] * (+HEAPF64[$yndev >> 3] + +HEAPF64[$zndev >> 3]) + +HEAPF64[$yndev >> 3] * +HEAPF64[$zndev >> 3];
    HEAPF64[$eb >> 3] = +HEAPF64[$xndev >> 3] * +HEAPF64[$yndev >> 3] * +HEAPF64[$zndev >> 3];
    HEAPF64[$ec >> 3] = +HEAPF64[$pndev >> 3] * +HEAPF64[$pndev >> 3];
    HEAPF64[$e2 >> 3] = +HEAPF64[$ea >> 3] - +HEAPF64[$ec >> 3] * 3.0;
    HEAPF64[$e3 >> 3] = +HEAPF64[$eb >> 3] + +HEAPF64[$pndev >> 3] * 2.0 * (+HEAPF64[$ea >> 3] - +HEAPF64[$ec >> 3]);
    HEAPF64[$s1 >> 3] = +HEAPF64[$e2 >> 3] * (+HEAPF64[$e2 >> 3] * .10227272727272727 + -.21428571428571427 - +HEAPF64[$e3 >> 3] * .17307692307692307) + 1.0;
    HEAPF64[$s2 >> 3] = +HEAPF64[$eb >> 3] * (+HEAPF64[$pndev >> 3] * (+HEAPF64[$pndev >> 3] * .11538461538461539 + -.2727272727272727) + .16666666666666666);
    HEAPF64[$s3 >> 3] = +HEAPF64[$pndev >> 3] * +HEAPF64[$ea >> 3] * (.3333333333333333 - +HEAPF64[$pndev >> 3] * .13636363636363635) - +HEAPF64[$pndev >> 3] * .3333333333333333 * +HEAPF64[$ec >> 3];
    $253 = +HEAPF64[$sigma >> 3] * 3.0 + +HEAPF64[$power4 >> 3] * (+HEAPF64[$s1 >> 3] + +HEAPF64[$s2 >> 3] + +HEAPF64[$s3 >> 3]) / (+HEAPF64[$mu >> 3] * +Math_sqrt(+(+HEAPF64[$mu >> 3])));
    HEAPF64[HEAP32[$6 >> 2] >> 3] = $253;
    $259 = +HEAPF64[$prec >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$6 >> 2] >> 3]));
    HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = $259;
    HEAP32[$0 >> 2] = 0;
    $265 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $265 | 0;
   }
  }
  HEAPF64[HEAP32[$6 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(29376, 29392, 255, 1);
  HEAP32[$0 >> 2] = 1;
  $265 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $265 | 0;
 }
 HEAPF64[HEAP32[$6 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(29376, 29392, 252, 1);
 HEAP32[$0 >> 2] = 1;
 $265 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $265 | 0;
}
function _gsl_sf_hyperg_U_large_b_e($a, $b, $x, $result, $ln_multiplier) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 $ln_multiplier = $ln_multiplier | 0;
 var $0 = 0, $1 = 0, $13 = 0, $14 = 0.0, $145 = 0.0, $17 = 0.0, $196 = 0.0, $2 = 0, $201 = 0.0, $210 = 0.0, $214 = 0.0, $220 = 0.0, $222 = 0, $228 = 0.0, $230 = 0, $252 = 0.0, $257 = 0.0, $265 = 0.0, $270 = 0.0, $272 = 0.0, $279 = 0.0, $281 = 0, $287 = 0.0, $289 = 0, $293 = 0, $3 = 0, $37 = 0.0, $4 = 0, $5 = 0, $90 = 0.0, $96 = 0.0, $98 = 0, $M = 0, $M1 = 0, $M2 = 0, $N = 0, $epre = 0, $eps = 0, $lg_1mb = 0, $lg_1mb1 = 0, $lg_1pamb = 0, $lg_1pamb2 = 0, $lg_a = 0, $lg_a4 = 0, $lg_bm1 = 0, $lg_bm13 = 0, $lnpre1_err = 0, $lnpre1_val = 0, $lnpre2_err = 0, $lnpre2_val = 0, $lnpre_err = 0, $lnpre_val = 0, $lp1 = 0, $lp2 = 0, $max_lnpre_err = 0, $max_lnpre_val = 0, $omb_lnx = 0, $sgn_1mb = 0, $sgn_1pamb = 0, $sgn_a = 0, $sgn_bm1 = 0, $sgpre1 = 0, $sgpre2 = 0, $stat_e = 0, $t1 = 0, $t15 = 0, $t2 = 0, $t26 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $0 = sp + 420 | 0;
 $1 = sp + 400 | 0;
 $2 = sp + 392 | 0;
 $3 = sp + 384 | 0;
 $4 = sp + 416 | 0;
 $5 = sp + 412 | 0;
 $N = sp + 376 | 0;
 $eps = sp + 368 | 0;
 $lnpre_val = sp + 360 | 0;
 $lnpre_err = sp + 352 | 0;
 $M = sp + 336 | 0;
 $tmp = sp + 328 | 0;
 $lg_bm1 = sp + 312 | 0;
 $lg_a = sp + 296 | 0;
 $lg_1mb = sp + 280 | 0;
 $lg_1pamb = sp + 264 | 0;
 $epre = sp + 248 | 0;
 $stat_e = sp + 408 | 0;
 $omb_lnx = sp + 240 | 0;
 $lg_1mb1 = sp + 224 | 0;
 $sgn_1mb = sp + 216 | 0;
 $lg_1pamb2 = sp + 200 | 0;
 $sgn_1pamb = sp + 192 | 0;
 $lg_bm13 = sp + 176 | 0;
 $sgn_bm1 = sp + 168 | 0;
 $lg_a4 = sp + 152 | 0;
 $sgn_a = sp + 144 | 0;
 $M1 = sp + 128 | 0;
 $M2 = sp + 112 | 0;
 $lnpre1_val = sp + 104 | 0;
 $lnpre2_val = sp + 96 | 0;
 $lnpre1_err = sp + 88 | 0;
 $lnpre2_err = sp + 80 | 0;
 $sgpre1 = sp + 72 | 0;
 $sgpre2 = sp + 64 | 0;
 $max_lnpre_val = sp + 56 | 0;
 $max_lnpre_err = sp + 48 | 0;
 $lp1 = sp + 40 | 0;
 $lp2 = sp + 32 | 0;
 $t1 = sp + 24 | 0;
 $t2 = sp + 16 | 0;
 $t15 = sp + 8 | 0;
 $t26 = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$5 >> 2] = $ln_multiplier;
 HEAPF64[$N >> 3] = +Math_floor(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$eps >> 3] = +HEAPF64[$2 >> 3] - +HEAPF64[$N >> 3];
 $13 = +Math_abs(+(+HEAPF64[$eps >> 3])) < 1.4901161193847656e-8;
 $14 = +HEAPF64[$2 >> 3];
 if (!$13) {
  HEAPF64[$omb_lnx >> 3] = (1.0 - $14) * +Math_log(+(+HEAPF64[$3 >> 3]));
  _gsl_sf_hyperg_1F1_large_b_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $M1) | 0;
  _gsl_sf_hyperg_1F1_large_b_e(1.0 - +HEAPF64[$1 >> 3], 2.0 - +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $M2) | 0;
  _gsl_sf_lngamma_sgn_e(1.0 - +HEAPF64[$2 >> 3], $lg_1mb1, $sgn_1mb) | 0;
  _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3], $lg_1pamb2, $sgn_1pamb) | 0;
  _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3] - 1.0, $lg_bm13, $sgn_bm1) | 0;
  _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3], $lg_a4, $sgn_a) | 0;
  HEAPF64[$lnpre1_val >> 3] = +HEAPF64[$lg_1mb1 >> 3] - +HEAPF64[$lg_1pamb2 >> 3];
  HEAPF64[$lnpre1_err >> 3] = +HEAPF64[$lg_1mb1 + 8 >> 3] + +HEAPF64[$lg_1pamb2 + 8 >> 3];
  HEAPF64[$lnpre2_val >> 3] = +HEAPF64[$lg_bm13 >> 3] - +HEAPF64[$lg_a4 >> 3] - +HEAPF64[$omb_lnx >> 3] - +HEAPF64[$3 >> 3];
  $145 = +Math_abs(+(+HEAPF64[$omb_lnx >> 3]));
  HEAPF64[$lnpre2_err >> 3] = +HEAPF64[$lg_bm13 + 8 >> 3] + +HEAPF64[$lg_a4 + 8 >> 3] + ($145 + +Math_abs(+(+HEAPF64[$3 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[$sgpre1 >> 3] = +HEAPF64[$sgn_1mb >> 3] * +HEAPF64[$sgn_1pamb >> 3];
  HEAPF64[$sgpre2 >> 3] = +HEAPF64[$sgn_bm1 >> 3] * +HEAPF64[$sgn_a >> 3];
  if (!(+HEAPF64[$lnpre1_val >> 3] > 699.782712893384)) if (!(+HEAPF64[$lnpre2_val >> 3] > 699.782712893384)) {
   HEAPF64[$t15 >> 3] = +HEAPF64[$sgpre1 >> 3] * +Math_exp(+(+HEAPF64[$lnpre1_val >> 3]));
   HEAPF64[$t26 >> 3] = +HEAPF64[$sgpre2 >> 3] * +Math_exp(+(+HEAPF64[$lnpre2_val >> 3]));
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$t15 >> 3] * +HEAPF64[$M1 >> 3] + +HEAPF64[$t26 >> 3] * +HEAPF64[$M2 >> 3];
   $252 = +Math_abs(+(+HEAPF64[$t15 >> 3]));
   $257 = +Math_abs(+(+HEAPF64[$t26 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $252 * +HEAPF64[$M1 + 8 >> 3] + $257 * +HEAPF64[$M2 + 8 >> 3];
   $265 = +Math_exp(+(+HEAPF64[$lnpre1_err >> 3]));
   $270 = $265 * +Math_abs(+(+HEAPF64[$t15 >> 3] * +HEAPF64[$M1 >> 3]));
   $272 = +Math_exp(+(+HEAPF64[$lnpre2_err >> 3]));
   $279 = ($270 + $272 * +Math_abs(+(+HEAPF64[$t26 >> 3] * +HEAPF64[$M2 >> 3]))) * 2.220446049250313e-16;
   $281 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$281 >> 3] = +HEAPF64[$281 >> 3] + $279;
   $287 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   $289 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$289 >> 3] = +HEAPF64[$289 >> 3] + $287;
   HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $293 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $293 | 0;
  }
  HEAPF64[$max_lnpre_val >> 3] = +HEAPF64[$lnpre1_val >> 3] > +HEAPF64[$lnpre2_val >> 3] ? +HEAPF64[$lnpre1_val >> 3] : +HEAPF64[$lnpre2_val >> 3];
  HEAPF64[$max_lnpre_err >> 3] = +HEAPF64[$lnpre1_err >> 3] > +HEAPF64[$lnpre2_err >> 3] ? +HEAPF64[$lnpre1_err >> 3] : +HEAPF64[$lnpre2_err >> 3];
  HEAPF64[$lp1 >> 3] = +HEAPF64[$lnpre1_val >> 3] - +HEAPF64[$max_lnpre_val >> 3];
  HEAPF64[$lp2 >> 3] = +HEAPF64[$lnpre2_val >> 3] - +HEAPF64[$max_lnpre_val >> 3];
  HEAPF64[$t1 >> 3] = +HEAPF64[$sgpre1 >> 3] * +Math_exp(+(+HEAPF64[$lp1 >> 3]));
  HEAPF64[$t2 >> 3] = +HEAPF64[$sgpre2 >> 3] * +Math_exp(+(+HEAPF64[$lp2 >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$t1 >> 3] * +HEAPF64[$M1 >> 3] + +HEAPF64[$t2 >> 3] * +HEAPF64[$M2 >> 3];
  $196 = +Math_abs(+(+HEAPF64[$t1 >> 3]));
  $201 = +Math_abs(+(+HEAPF64[$t2 >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $196 * +HEAPF64[$M1 + 8 >> 3] + $201 * +HEAPF64[$M2 + 8 >> 3];
  $210 = +Math_exp(+(+HEAPF64[$max_lnpre_err >> 3])) * 2.220446049250313e-16;
  $214 = +Math_abs(+(+HEAPF64[$t1 >> 3] * +HEAPF64[$M1 >> 3]));
  $220 = $210 * ($214 + +Math_abs(+(+HEAPF64[$t2 >> 3] * +HEAPF64[$M2 >> 3])));
  $222 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$222 >> 3] = +HEAPF64[$222 >> 3] + $220;
  $228 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $230 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$230 >> 3] = +HEAPF64[$230 >> 3] + $228;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$max_lnpre_val >> 3];
  _gsl_error(51552, 51488, 215, 16);
  HEAP32[$0 >> 2] = 16;
  $293 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $293 | 0;
 }
 $17 = 1.0 - +HEAPF64[$2 >> 3];
 if ($14 > 1.0) {
  HEAPF64[$tmp >> 3] = $17 * +Math_log(+(+HEAPF64[$3 >> 3]));
  _gsl_sf_lngamma_e(+HEAPF64[$2 >> 3] - 1.0, $lg_bm1) | 0;
  _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3], $lg_a) | 0;
  HEAPF64[$lnpre_val >> 3] = +HEAPF64[$tmp >> 3] + +HEAPF64[$3 >> 3] + +HEAPF64[$lg_bm1 >> 3] - +HEAPF64[$lg_a >> 3];
  $37 = +Math_abs(+(+HEAPF64[$3 >> 3]));
  HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lg_bm1 + 8 >> 3] + +HEAPF64[$lg_a + 8 >> 3] + ($37 + +Math_abs(+(+HEAPF64[$tmp >> 3]))) * 2.220446049250313e-16;
  _gsl_sf_hyperg_1F1_large_b_e(1.0 - +HEAPF64[$1 >> 3], 2.0 - +HEAPF64[$2 >> 3], -+HEAPF64[$3 >> 3], $M) | 0;
 } else {
  _gsl_sf_lngamma_e($17, $lg_1mb) | 0;
  _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3], $lg_1pamb) | 0;
  HEAPF64[$lnpre_val >> 3] = +HEAPF64[$lg_1mb >> 3] - +HEAPF64[$lg_1pamb >> 3];
  HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lg_1mb + 8 >> 3] + +HEAPF64[$lg_1pamb + 8 >> 3];
  _gsl_sf_hyperg_1F1_large_b_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $M) | 0;
 }
 if (+HEAPF64[$lnpre_val >> 3] > 699.782712893384) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$M >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$M + 8 >> 3];
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$lnpre_val >> 3];
  _gsl_error(51552, 51488, 165, 16);
  HEAP32[$0 >> 2] = 16;
  $293 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $293 | 0;
 } else {
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], $epre) | 0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$epre >> 3] * +HEAPF64[$M >> 3];
  $90 = +HEAPF64[$epre >> 3] * +HEAPF64[$M + 8 >> 3] + +HEAPF64[$epre + 8 >> 3] * +Math_abs(+(+HEAPF64[$M >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $90;
  $96 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $98 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$98 >> 3] = +HEAPF64[$98 >> 3] + $96;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_e >> 2];
  $293 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $293 | 0;
 }
 return 0;
}
function _gsl_sf_mathieu_b_array($order_min, $order_max, $qq, $work, $result_array) {
 $order_min = $order_min | 0;
 $order_max = $order_max | 0;
 $qq = +$qq;
 $work = $work | 0;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $111 = 0.0, $135 = 0, $138 = 0, $145 = 0.0, $148 = 0, $163 = 0, $172 = 0, $194 = 0.0, $2 = 0, $217 = 0, $3 = 0, $4 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $65 = 0.0, $68 = 0, $7 = 0, $8 = 0, $83 = 0, $9 = 0, $bb = 0, $eval = 0, $evec = 0, $even_order = 0, $extra_values = 0, $ii = 0, $jj = 0, $mat = 0, $odd_order = 0, $wmat = 0, $zz = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $0 = sp + 268 | 0;
 $1 = sp + 264 | 0;
 $2 = sp + 260 | 0;
 $3 = sp;
 $4 = sp + 256 | 0;
 $5 = sp + 252 | 0;
 $even_order = sp + 248 | 0;
 $odd_order = sp + 244 | 0;
 $extra_values = sp + 240 | 0;
 $ii = sp + 236 | 0;
 $jj = sp + 232 | 0;
 $zz = sp + 228 | 0;
 $bb = sp + 224 | 0;
 $mat = sp + 200 | 0;
 $evec = sp + 176 | 0;
 $eval = sp + 156 | 0;
 $wmat = sp + 152 | 0;
 $6 = sp + 128 | 0;
 $7 = sp + 104 | 0;
 $8 = sp + 80 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 32 | 0;
 $11 = sp + 8 | 0;
 HEAP32[$1 >> 2] = $order_min;
 HEAP32[$2 >> 2] = $order_max;
 HEAPF64[$3 >> 3] = $qq;
 HEAP32[$4 >> 2] = $work;
 HEAP32[$5 >> 2] = $result_array;
 HEAP32[$even_order >> 2] = (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) - 1;
 HEAP32[$odd_order >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2];
 HEAP32[$extra_values >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2];
 HEAP32[$zz >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 56 >> 2];
 HEAP32[$bb >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2];
 HEAP32[$wmat >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 68 >> 2];
 if ((HEAP32[$2 >> 2] | 0) >>> 0 <= (HEAP32[HEAP32[$4 >> 2] >> 2] | 0) >>> 0) if (!((HEAP32[$1 >> 2] | 0) < 0 ? 1 : (HEAP32[$2 >> 2] | 0) <= (HEAP32[$1 >> 2] | 0))) {
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (Math_imul(HEAP32[$even_order >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0) >>> 0) break;
   HEAPF64[(HEAP32[$zz >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (HEAP32[$even_order >> 2] | 0) >>> 0) break;
   HEAP32[$jj >> 2] = 0;
   while (1) {
    $56 = HEAP32[$ii >> 2] | 0;
    if ((HEAP32[$jj >> 2] | 0) >>> 0 >= (HEAP32[$even_order >> 2] | 0) >>> 0) break;
    $59 = HEAP32[$ii >> 2] | 0;
    do if (($56 | 0) == (HEAP32[$jj >> 2] | 0)) {
     $65 = +((Math_imul($59 + 1 << 2, (HEAP32[$ii >> 2] | 0) + 1 | 0) | 0) >>> 0);
     $68 = Math_imul(HEAP32[$ii >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0;
     HEAPF64[(HEAP32[$zz >> 2] | 0) + ($68 + (HEAP32[$jj >> 2] | 0) << 3) >> 3] = $65;
    } else {
     if (($59 | 0) != ((HEAP32[$jj >> 2] | 0) + 1 | 0)) if (((HEAP32[$ii >> 2] | 0) + 1 | 0) != (HEAP32[$jj >> 2] | 0)) break;
     $83 = Math_imul(HEAP32[$ii >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0;
     HEAPF64[(HEAP32[$zz >> 2] | 0) + ($83 + (HEAP32[$jj >> 2] | 0) << 3) >> 3] = +HEAPF64[$3 >> 3];
    } while (0);
    HEAP32[$jj >> 2] = (HEAP32[$jj >> 2] | 0) + 1;
   }
   HEAP32[$ii >> 2] = $56 + 1;
  }
  _gsl_matrix_view_array($6 | 0, HEAP32[$zz >> 2] | 0, HEAP32[$even_order >> 2] | 0, HEAP32[$even_order >> 2] | 0);
  HEAP32[$mat + 0 >> 2] = HEAP32[$6 + 0 >> 2];
  HEAP32[$mat + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$mat + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$mat + 12 >> 2] = HEAP32[$6 + 12 >> 2];
  HEAP32[$mat + 16 >> 2] = HEAP32[$6 + 16 >> 2];
  HEAP32[$mat + 20 >> 2] = HEAP32[$6 + 20 >> 2];
  _gsl_vector_subvector($7 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 60 >> 2] | 0, 0, HEAP32[$even_order >> 2] | 0);
  HEAP32[$eval + 0 >> 2] = HEAP32[$7 + 0 >> 2];
  HEAP32[$eval + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$eval + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  HEAP32[$eval + 12 >> 2] = HEAP32[$7 + 12 >> 2];
  HEAP32[$eval + 16 >> 2] = HEAP32[$7 + 16 >> 2];
  _gsl_matrix_submatrix($8 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 64 >> 2] | 0, 0, 0, HEAP32[$even_order >> 2] | 0, HEAP32[$even_order >> 2] | 0);
  HEAP32[$evec + 0 >> 2] = HEAP32[$8 + 0 >> 2];
  HEAP32[$evec + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$evec + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$evec + 12 >> 2] = HEAP32[$8 + 12 >> 2];
  HEAP32[$evec + 16 >> 2] = HEAP32[$8 + 16 >> 2];
  HEAP32[$evec + 20 >> 2] = HEAP32[$8 + 20 >> 2];
  _gsl_eigen_symmv($mat | 0, $eval | 0, $evec | 0, HEAP32[$wmat >> 2] | 0) | 0;
  _gsl_eigen_symmv_sort($eval | 0, $evec | 0, 0) | 0;
  HEAPF64[HEAP32[$bb >> 2] >> 3] = 0.0;
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= ((HEAP32[$even_order >> 2] | 0) - (HEAP32[$extra_values >> 2] | 0) | 0) >>> 0) break;
   $111 = +_gsl_vector_get($eval | 0, HEAP32[$ii >> 2] | 0);
   HEAPF64[(HEAP32[$bb >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) + 1 << 1 << 3) >> 3] = $111;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (Math_imul(HEAP32[$odd_order >> 2] | 0, HEAP32[$odd_order >> 2] | 0) | 0) >>> 0) break;
   HEAPF64[(HEAP32[$zz >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (HEAP32[$odd_order >> 2] | 0) >>> 0) break;
   HEAP32[$jj >> 2] = 0;
   while (1) {
    $135 = HEAP32[$ii >> 2] | 0;
    if ((HEAP32[$jj >> 2] | 0) >>> 0 >= (HEAP32[$odd_order >> 2] | 0) >>> 0) break;
    $138 = HEAP32[$ii >> 2] | 0;
    do if (($135 | 0) == (HEAP32[$jj >> 2] | 0)) {
     $145 = +((Math_imul(($138 << 1) + 1 | 0, (HEAP32[$ii >> 2] << 1) + 1 | 0) | 0) >>> 0);
     $148 = Math_imul(HEAP32[$ii >> 2] | 0, HEAP32[$odd_order >> 2] | 0) | 0;
     HEAPF64[(HEAP32[$zz >> 2] | 0) + ($148 + (HEAP32[$jj >> 2] | 0) << 3) >> 3] = $145;
    } else {
     if (($138 | 0) != ((HEAP32[$jj >> 2] | 0) + 1 | 0)) if (((HEAP32[$ii >> 2] | 0) + 1 | 0) != (HEAP32[$jj >> 2] | 0)) break;
     $163 = Math_imul(HEAP32[$ii >> 2] | 0, HEAP32[$odd_order >> 2] | 0) | 0;
     HEAPF64[(HEAP32[$zz >> 2] | 0) + ($163 + (HEAP32[$jj >> 2] | 0) << 3) >> 3] = +HEAPF64[$3 >> 3];
    } while (0);
    HEAP32[$jj >> 2] = (HEAP32[$jj >> 2] | 0) + 1;
   }
   HEAP32[$ii >> 2] = $135 + 1;
  }
  $172 = HEAP32[$zz >> 2] | 0;
  HEAPF64[$172 >> 3] = +HEAPF64[$172 >> 3] - +HEAPF64[$3 >> 3];
  _gsl_matrix_view_array($9 | 0, HEAP32[$zz >> 2] | 0, HEAP32[$odd_order >> 2] | 0, HEAP32[$odd_order >> 2] | 0);
  HEAP32[$mat + 0 >> 2] = HEAP32[$9 + 0 >> 2];
  HEAP32[$mat + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$mat + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$mat + 12 >> 2] = HEAP32[$9 + 12 >> 2];
  HEAP32[$mat + 16 >> 2] = HEAP32[$9 + 16 >> 2];
  HEAP32[$mat + 20 >> 2] = HEAP32[$9 + 20 >> 2];
  _gsl_vector_subvector($10 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 60 >> 2] | 0, 0, HEAP32[$odd_order >> 2] | 0);
  HEAP32[$eval + 0 >> 2] = HEAP32[$10 + 0 >> 2];
  HEAP32[$eval + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$eval + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$eval + 12 >> 2] = HEAP32[$10 + 12 >> 2];
  HEAP32[$eval + 16 >> 2] = HEAP32[$10 + 16 >> 2];
  _gsl_matrix_submatrix($11 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 64 >> 2] | 0, 0, 0, HEAP32[$odd_order >> 2] | 0, HEAP32[$odd_order >> 2] | 0);
  HEAP32[$evec + 0 >> 2] = HEAP32[$11 + 0 >> 2];
  HEAP32[$evec + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$evec + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  HEAP32[$evec + 12 >> 2] = HEAP32[$11 + 12 >> 2];
  HEAP32[$evec + 16 >> 2] = HEAP32[$11 + 16 >> 2];
  HEAP32[$evec + 20 >> 2] = HEAP32[$11 + 20 >> 2];
  _gsl_eigen_symmv($mat | 0, $eval | 0, $evec | 0, HEAP32[$wmat >> 2] | 0) | 0;
  _gsl_eigen_symmv_sort($eval | 0, $evec | 0, 0) | 0;
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 >= ((HEAP32[$odd_order >> 2] | 0) - (HEAP32[$extra_values >> 2] | 0) | 0) >>> 0) break;
   $194 = +_gsl_vector_get($eval | 0, HEAP32[$ii >> 2] | 0);
   HEAPF64[(HEAP32[$bb >> 2] | 0) + ((HEAP32[$ii >> 2] << 1) + 1 << 3) >> 3] = $194;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAP32[$ii >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) break;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = +HEAPF64[(HEAP32[$bb >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = 0;
  $217 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $217 | 0;
 }
 _gsl_error(54600, 54536, 819, 4);
 HEAP32[$0 >> 2] = 4;
 $217 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $217 | 0;
}
function _gsl_ran_binomial($rng, $p, $n) {
 $rng = $rng | 0;
 $p = +$p;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $122 = 0.0, $155 = 0.0, $170 = 0.0, $186 = 0.0, $2 = 0, $218 = 0, $278 = 0.0, $3 = 0, $313 = 0.0, $324 = 0.0, $338 = 0.0, $341 = 0.0, $344 = 0.0, $347 = 0.0, $360 = 0, $361 = 0, $63 = 0.0, $accept = 0, $al = 0, $amaxp = 0, $ar = 0, $c = 0, $f = 0, $f0 = 0, $f1 = 0, $f2 = 0, $ffm = 0, $flipped = 0, $fm = 0, $g = 0, $i = 0, $i3 = 0, $ix = 0, $k = 0, $lambda_l = 0, $lambda_r = 0, $m = 0, $np = 0, $npq = 0, $p1 = 0, $p2 = 0, $p3 = 0, $p4 = 0, $q = 0, $s = 0, $u = 0, $u1 = 0, $v = 0, $var = 0, $w1 = 0, $x = 0, $x1 = 0, $xl = 0, $xm = 0, $xr = 0, $ynorm = 0, $z1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $0 = sp + 312 | 0;
 $1 = sp + 308 | 0;
 $2 = sp + 272 | 0;
 $3 = sp + 304 | 0;
 $ix = sp + 300 | 0;
 $flipped = sp + 296 | 0;
 $q = sp + 264 | 0;
 $s = sp + 256 | 0;
 $np = sp + 248 | 0;
 $f0 = sp + 240 | 0;
 $f = sp + 232 | 0;
 $u = sp + 224 | 0;
 $k = sp + 292 | 0;
 $ffm = sp + 216 | 0;
 $m = sp + 288 | 0;
 $fm = sp + 208 | 0;
 $xm = sp + 200 | 0;
 $npq = sp + 192 | 0;
 $p1 = sp + 184 | 0;
 $xl = sp + 176 | 0;
 $xr = sp + 168 | 0;
 $c = sp + 160 | 0;
 $p2 = sp + 152 | 0;
 $al = sp + 144 | 0;
 $lambda_l = sp + 136 | 0;
 $ar = sp + 128 | 0;
 $lambda_r = sp + 120 | 0;
 $p3 = sp + 112 | 0;
 $p4 = sp + 104 | 0;
 $var = sp + 96 | 0;
 $accept = sp + 88 | 0;
 $u1 = sp + 80 | 0;
 $v = sp + 72 | 0;
 $x = sp + 64 | 0;
 $g = sp + 56 | 0;
 $f2 = sp + 48 | 0;
 $i = sp + 284 | 0;
 $i3 = sp + 280 | 0;
 $amaxp = sp + 40 | 0;
 $ynorm = sp + 32 | 0;
 $x1 = sp + 24 | 0;
 $w1 = sp + 16 | 0;
 $f1 = sp + 8 | 0;
 $z1 = sp;
 HEAP32[$1 >> 2] = $rng;
 HEAPF64[$2 >> 3] = $p;
 HEAP32[$3 >> 2] = $n;
 HEAP32[$flipped >> 2] = 0;
 if (!(HEAP32[$3 >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $361 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $361 | 0;
 }
 if (+HEAPF64[$2 >> 3] > .5) {
  HEAPF64[$2 >> 3] = 1.0 - +HEAPF64[$2 >> 3];
  HEAP32[$flipped >> 2] = 1;
 }
 HEAPF64[$q >> 3] = 1.0 - +HEAPF64[$2 >> 3];
 HEAPF64[$s >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$q >> 3];
 HEAPF64[$np >> 3] = +((HEAP32[$3 >> 2] | 0) >>> 0) * +HEAPF64[$2 >> 3];
 L8 : do if (+HEAPF64[$np >> 3] < 14.0) {
  HEAPF64[$f0 >> 3] = +_gsl_pow_uint(+(+HEAPF64[$q >> 3]), HEAP32[$3 >> 2] | 0);
  L10 : while (1) {
   HEAPF64[$f >> 3] = +HEAPF64[$f0 >> 3];
   HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
   HEAP32[$ix >> 2] = 0;
   while (1) {
    if ((HEAP32[$ix >> 2] | 0) > 110) continue L10;
    if (+HEAPF64[$u >> 3] < +HEAPF64[$f >> 3]) break L8;
    HEAPF64[$u >> 3] = +HEAPF64[$u >> 3] - +HEAPF64[$f >> 3];
    HEAPF64[$f >> 3] = +HEAPF64[$f >> 3] * (+HEAPF64[$s >> 3] * +(((HEAP32[$3 >> 2] | 0) - (HEAP32[$ix >> 2] | 0) | 0) >>> 0) / +((HEAP32[$ix >> 2] | 0) + 1 | 0));
    HEAP32[$ix >> 2] = (HEAP32[$ix >> 2] | 0) + 1;
   }
  }
 } else {
  HEAPF64[$ffm >> 3] = +HEAPF64[$np >> 3] + +HEAPF64[$2 >> 3];
  HEAP32[$m >> 2] = ~~+HEAPF64[$ffm >> 3];
  HEAPF64[$fm >> 3] = +(HEAP32[$m >> 2] | 0);
  HEAPF64[$xm >> 3] = +HEAPF64[$fm >> 3] + .5;
  HEAPF64[$npq >> 3] = +HEAPF64[$np >> 3] * +HEAPF64[$q >> 3];
  $63 = +Math_sqrt(+(+HEAPF64[$npq >> 3])) * 2.195;
  HEAPF64[$p1 >> 3] = +Math_floor(+($63 - +HEAPF64[$q >> 3] * 4.6)) + .5;
  HEAPF64[$xl >> 3] = +HEAPF64[$xm >> 3] - +HEAPF64[$p1 >> 3];
  HEAPF64[$xr >> 3] = +HEAPF64[$xm >> 3] + +HEAPF64[$p1 >> 3];
  HEAPF64[$c >> 3] = 20.5 / (+HEAPF64[$fm >> 3] + 15.3) + .134;
  HEAPF64[$p2 >> 3] = +HEAPF64[$p1 >> 3] * (+HEAPF64[$c >> 3] + 1.0 + +HEAPF64[$c >> 3]);
  HEAPF64[$al >> 3] = (+HEAPF64[$ffm >> 3] - +HEAPF64[$xl >> 3]) / (+HEAPF64[$ffm >> 3] - +HEAPF64[$xl >> 3] * +HEAPF64[$2 >> 3]);
  HEAPF64[$lambda_l >> 3] = +HEAPF64[$al >> 3] * (+HEAPF64[$al >> 3] * .5 + 1.0);
  HEAPF64[$ar >> 3] = (+HEAPF64[$xr >> 3] - +HEAPF64[$ffm >> 3]) / (+HEAPF64[$xr >> 3] * +HEAPF64[$q >> 3]);
  HEAPF64[$lambda_r >> 3] = +HEAPF64[$ar >> 3] * (+HEAPF64[$ar >> 3] * .5 + 1.0);
  HEAPF64[$p3 >> 3] = +HEAPF64[$p2 >> 3] + +HEAPF64[$c >> 3] / +HEAPF64[$lambda_l >> 3];
  HEAPF64[$p4 >> 3] = +HEAPF64[$p3 >> 3] + +HEAPF64[$c >> 3] / +HEAPF64[$lambda_r >> 3];
  L17 : while (1) {
   $122 = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
   HEAPF64[$u1 >> 3] = $122 * +HEAPF64[$p4 >> 3];
   HEAPF64[$v >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
   if (+HEAPF64[$u1 >> 3] <= +HEAPF64[$p1 >> 3]) break;
   do if (+HEAPF64[$u1 >> 3] <= +HEAPF64[$p2 >> 3]) {
    HEAPF64[$x >> 3] = +HEAPF64[$xl >> 3] + (+HEAPF64[$u1 >> 3] - +HEAPF64[$p1 >> 3]) / +HEAPF64[$c >> 3];
    $155 = +Math_abs(+(+HEAPF64[$x >> 3] - +HEAPF64[$xm >> 3]));
    HEAPF64[$v >> 3] = +HEAPF64[$v >> 3] * +HEAPF64[$c >> 3] + 1.0 - $155 / +HEAPF64[$p1 >> 3];
    if (+HEAPF64[$v >> 3] > 1.0 | +HEAPF64[$v >> 3] <= 0.0) continue L17;
    HEAP32[$ix >> 2] = ~~+HEAPF64[$x >> 3];
   } else if (+HEAPF64[$u1 >> 3] <= +HEAPF64[$p3 >> 3]) {
    $170 = +Math_log(+(+HEAPF64[$v >> 3]));
    HEAP32[$ix >> 2] = ~~(+HEAPF64[$xl >> 3] + $170 / +HEAPF64[$lambda_l >> 3]);
    if ((HEAP32[$ix >> 2] | 0) < 0) continue L17;
    HEAPF64[$v >> 3] = +HEAPF64[$v >> 3] * (+HEAPF64[$u1 >> 3] - +HEAPF64[$p2 >> 3]) * +HEAPF64[$lambda_l >> 3];
    break;
   } else {
    $186 = +Math_log(+(+HEAPF64[$v >> 3]));
    HEAP32[$ix >> 2] = ~~(+HEAPF64[$xr >> 3] - $186 / +HEAPF64[$lambda_r >> 3]);
    if (+(HEAP32[$ix >> 2] | 0) > +((HEAP32[$3 >> 2] | 0) >>> 0)) continue L17;
    HEAPF64[$v >> 3] = +HEAPF64[$v >> 3] * (+HEAPF64[$u1 >> 3] - +HEAPF64[$p3 >> 3]) * +HEAPF64[$lambda_r >> 3];
    break;
   } while (0);
   HEAP32[$k >> 2] = Math_abs((HEAP32[$ix >> 2] | 0) - (HEAP32[$m >> 2] | 0) | 0) | 0;
   if ((HEAP32[$k >> 2] | 0) <= 20) {
    HEAPF64[$g >> 3] = +(((HEAP32[$3 >> 2] | 0) + 1 | 0) >>> 0) * +HEAPF64[$s >> 3];
    HEAPF64[$f2 >> 3] = 1.0;
    HEAPF64[$var >> 3] = +HEAPF64[$v >> 3];
    $218 = HEAP32[$m >> 2] | 0;
    L32 : do if ((HEAP32[$m >> 2] | 0) < (HEAP32[$ix >> 2] | 0)) {
     HEAP32[$i >> 2] = $218 + 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) > (HEAP32[$ix >> 2] | 0)) break L32;
      HEAPF64[$f2 >> 3] = +HEAPF64[$f2 >> 3] * (+HEAPF64[$g >> 3] / +(HEAP32[$i >> 2] | 0) - +HEAPF64[$s >> 3]);
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
     }
    } else if (($218 | 0) > (HEAP32[$ix >> 2] | 0)) {
     HEAP32[$i3 >> 2] = (HEAP32[$ix >> 2] | 0) + 1;
     while (1) {
      if ((HEAP32[$i3 >> 2] | 0) > (HEAP32[$m >> 2] | 0)) break L32;
      HEAPF64[$f2 >> 3] = +HEAPF64[$f2 >> 3] / (+HEAPF64[$g >> 3] / +(HEAP32[$i3 >> 2] | 0) - +HEAPF64[$s >> 3]);
      HEAP32[$i3 >> 2] = (HEAP32[$i3 >> 2] | 0) + 1;
     }
    } while (0);
    HEAPF64[$accept >> 3] = +HEAPF64[$f2 >> 3];
   } else {
    HEAPF64[$var >> 3] = +Math_log(+(+HEAPF64[$v >> 3]));
    if (+(HEAP32[$k >> 2] | 0) < +HEAPF64[$npq >> 3] / 2.0 - 1.0) {
     HEAPF64[$amaxp >> 3] = +(HEAP32[$k >> 2] | 0) / +HEAPF64[$npq >> 3] * ((+(HEAP32[$k >> 2] | 0) * (+(HEAP32[$k >> 2] | 0) / 3.0 + .625) + .16666666666666666) / +HEAPF64[$npq >> 3] + .5);
     $278 = +(Math_imul(HEAP32[$k >> 2] | 0, HEAP32[$k >> 2] | 0) | 0);
     HEAPF64[$ynorm >> 3] = -($278 / (+HEAPF64[$npq >> 3] * 2.0));
     if (+HEAPF64[$var >> 3] < +HEAPF64[$ynorm >> 3] - +HEAPF64[$amaxp >> 3]) break L8;
     if (+HEAPF64[$var >> 3] > +HEAPF64[$ynorm >> 3] + +HEAPF64[$amaxp >> 3]) continue;
    }
    HEAPF64[$x1 >> 3] = +(HEAP32[$ix >> 2] | 0) + 1.0;
    HEAPF64[$w1 >> 3] = +(((HEAP32[$3 >> 2] | 0) - (HEAP32[$ix >> 2] | 0) | 0) >>> 0) + 1.0;
    HEAPF64[$f1 >> 3] = +HEAPF64[$fm >> 3] + 1.0;
    HEAPF64[$z1 >> 3] = +((HEAP32[$3 >> 2] | 0) >>> 0) + 1.0 - +HEAPF64[$fm >> 3];
    $313 = +HEAPF64[$xm >> 3] * +Math_log(+(+HEAPF64[$f1 >> 3] / +HEAPF64[$x1 >> 3]));
    $324 = $313 + (+(((HEAP32[$3 >> 2] | 0) - (HEAP32[$m >> 2] | 0) | 0) >>> 0) + .5) * +Math_log(+(+HEAPF64[$z1 >> 3] / +HEAPF64[$w1 >> 3]));
    $338 = $324 + +((HEAP32[$ix >> 2] | 0) - (HEAP32[$m >> 2] | 0) | 0) * +Math_log(+(+HEAPF64[$w1 >> 3] * +HEAPF64[$2 >> 3] / (+HEAPF64[$x1 >> 3] * +HEAPF64[$q >> 3])));
    $341 = $338 + +_Stirling(+HEAPF64[$f1 >> 3]);
    $344 = $341 + +_Stirling(+HEAPF64[$z1 >> 3]);
    $347 = $344 - +_Stirling(+HEAPF64[$x1 >> 3]);
    HEAPF64[$accept >> 3] = $347 - +_Stirling(+HEAPF64[$w1 >> 3]);
   }
   if (+HEAPF64[$var >> 3] <= +HEAPF64[$accept >> 3]) break L8;
  }
  HEAP32[$ix >> 2] = ~~(+HEAPF64[$xm >> 3] - +HEAPF64[$p1 >> 3] * +HEAPF64[$v >> 3] + +HEAPF64[$u1 >> 3]);
 } while (0);
 if (HEAP32[$flipped >> 2] | 0) $360 = (HEAP32[$3 >> 2] | 0) - (HEAP32[$ix >> 2] | 0) | 0; else $360 = HEAP32[$ix >> 2] | 0;
 HEAP32[$0 >> 2] = $360;
 $361 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $361 | 0;
}
function _gsl_sf_bessel_il_scaled_e($l, $x, $result) {
 $l = $l | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $101 = 0, $147 = 0.0, $149 = 0, $159 = 0, $165 = 0.0, $170 = 0.0, $181 = 0.0, $189 = 0.0, $2 = 0, $202 = 0, $207 = 0, $22 = 0, $250 = 0.0, $256 = 0.0, $263 = 0.0, $269 = 0.0, $271 = 0, $281 = 0, $282 = 0, $3 = 0, $53 = 0.0, $72 = 0, $79 = 0.0, $99 = 0.0, $LMAX = 0, $ax = 0, $b = 0, $ell = 0, $ell9 = 0, $i0_scaled = 0, $iell = 0, $iell7 = 0, $iellm1 = 0, $iellm18 = 0, $iellp1 = 0, $iellp16 = 0, $il = 0, $il1 = 0, $il3 = 0, $pre = 0, $pre5 = 0, $r_iell = 0, $r_iellp1 = 0, $rat = 0, $rt_term = 0, $sgn = 0, $stat = 0, $stat_CF1 = 0, $stat_a1 = 0, $stat_a2 = 0, $stat_i0 = 0, $stat_il = 0, $stat_il2 = 0, $stat_il4 = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $0 = sp + 272 | 0;
 $1 = sp + 268 | 0;
 $2 = sp + 208 | 0;
 $3 = sp + 264 | 0;
 $sgn = sp + 200 | 0;
 $ax = sp + 192 | 0;
 $il = sp + 176 | 0;
 $stat_il = sp + 260 | 0;
 $il1 = sp + 160 | 0;
 $stat_il2 = sp + 256 | 0;
 $il3 = sp + 144 | 0;
 $stat_il4 = sp + 252 | 0;
 $b = sp + 128 | 0;
 $stat = sp + 248 | 0;
 $pre = sp + 120 | 0;
 $i0_scaled = sp + 104 | 0;
 $stat_i0 = sp + 244 | 0;
 $rat = sp + 96 | 0;
 $stat_CF1 = sp + 240 | 0;
 $iellp1 = sp + 88 | 0;
 $iell = sp + 80 | 0;
 $iellm1 = sp + 72 | 0;
 $ell = sp + 236 | 0;
 $status = sp + 232 | 0;
 $pre5 = sp + 64 | 0;
 $rt_term = sp + 56 | 0;
 $LMAX = sp + 228 | 0;
 $r_iellp1 = sp + 40 | 0;
 $r_iell = sp + 24 | 0;
 $stat_a1 = sp + 224 | 0;
 $stat_a2 = sp + 220 | 0;
 $iellp16 = sp + 16 | 0;
 $iell7 = sp + 8 | 0;
 $iellm18 = sp;
 $ell9 = sp + 216 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$sgn >> 3] = 1.0;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 if (+HEAPF64[$2 >> 3] < 0.0) {
  HEAPF64[$sgn >> 3] = (HEAP32[$1 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0;
  HEAPF64[$2 >> 3] = -+HEAPF64[$2 >> 3];
 }
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(15648, 15632, 185, 1);
  HEAP32[$0 >> 2] = 1;
  $282 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $282 | 0;
 }
 $22 = (HEAP32[$1 >> 2] | 0) == 0;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $22 ? 1.0 : 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $282 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $282 | 0;
 }
 if ($22) {
  HEAP32[$stat_il >> 2] = _gsl_sf_bessel_i0_scaled_e(+HEAPF64[$2 >> 3], $il) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$sgn >> 3] * +HEAPF64[$il >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$il + 8 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_il >> 2];
  $282 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $282 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$stat_il2 >> 2] = _gsl_sf_bessel_i1_scaled_e(+HEAPF64[$2 >> 3], $il1) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$sgn >> 3] * +HEAPF64[$il1 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$il1 + 8 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_il2 >> 2];
  $282 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $282 | 0;
 }
 $53 = +HEAPF64[$2 >> 3];
 if ((HEAP32[$1 >> 2] | 0) == 2) {
  HEAP32[$stat_il4 >> 2] = _gsl_sf_bessel_i2_scaled_e($53, $il3) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$sgn >> 3] * +HEAPF64[$il3 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$il3 + 8 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_il4 >> 2];
  $282 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $282 | 0;
 }
 $72 = HEAP32[$1 >> 2] | 0;
 if ($53 * +HEAPF64[$2 >> 3] < (+(HEAP32[$1 >> 2] | 0) + 1.5) * 10.0 / 2.718281828459045) {
  HEAP32[$stat >> 2] = _gsl_sf_bessel_IJ_taylor_e(+($72 | 0) + .5, +HEAPF64[$2 >> 3], 1, 50, 2.220446049250313e-16, $b) | 0;
  $79 = +Math_exp(+-+HEAPF64[$ax >> 3]);
  HEAPF64[$pre >> 3] = $79 * +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$sgn >> 3] * +HEAPF64[$pre >> 3] * +HEAPF64[$b >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$b + 8 >> 3];
  $99 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $101 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$101 >> 3] = +HEAPF64[$101 >> 3] + $99;
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $282 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $282 | 0;
 }
 if (($72 | 0) < 150) {
  HEAP32[$stat_i0 >> 2] = _gsl_sf_bessel_i0_scaled_e(+HEAPF64[$ax >> 3], $i0_scaled) | 0;
  HEAP32[$stat_CF1 >> 2] = _bessel_il_CF1(HEAP32[$1 >> 2] | 0, +HEAPF64[$ax >> 3], 2.220446049250313e-16, $rat) | 0;
  HEAPF64[$iellp1 >> 3] = +HEAPF64[$rat >> 3] * 1.4916681462400413e-154;
  HEAPF64[$iell >> 3] = 1.4916681462400413e-154;
  HEAP32[$ell >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) < 1) break;
   HEAPF64[$iellm1 >> 3] = +HEAPF64[$iellp1 >> 3] + +((HEAP32[$ell >> 2] << 1) + 1 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$iell >> 3];
   HEAPF64[$iellp1 >> 3] = +HEAPF64[$iell >> 3];
   HEAPF64[$iell >> 3] = +HEAPF64[$iellm1 >> 3];
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + -1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$sgn >> 3] * +HEAPF64[$i0_scaled >> 3] * (1.4916681462400413e-154 / +HEAPF64[$iell >> 3]);
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$i0_scaled + 8 >> 3] * (1.4916681462400413e-154 / +HEAPF64[$iell >> 3]);
  $147 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $149 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$149 >> 3] = +HEAPF64[$149 >> 3] + $147;
  if (HEAP32[$stat_i0 >> 2] | 0) $159 = HEAP32[$stat_i0 >> 2] | 0; else $159 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $159;
  $282 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $282 | 0;
 }
 $165 = .29 / (+(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) + 1.0);
 $170 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) + 1.0;
 $181 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) + 1.0;
 if ($165 < .5 / ($170 + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3])) $189 = .29 / $181; else $189 = .5 / ($181 + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
 if ($189 < 30277272261966714.0e-22) {
  HEAP32[$status >> 2] = _gsl_sf_bessel_Inu_scaled_asymp_unif_e(+(HEAP32[$1 >> 2] | 0) + .5, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  HEAPF64[$pre5 >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
  $202 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$202 >> 3] = +HEAPF64[$202 >> 3] * +HEAPF64[$sgn >> 3] * +HEAPF64[$pre5 >> 3];
  $207 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$207 >> 3] = +HEAPF64[$207 >> 3] * +HEAPF64[$pre5 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $282 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $282 | 0;
 }
 HEAPF64[$rt_term >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
 HEAP32[$LMAX >> 2] = 489;
 HEAP32[$stat_a1 >> 2] = _gsl_sf_bessel_Inu_scaled_asymp_unif_e(490.5, +HEAPF64[$2 >> 3], $r_iellp1) | 0;
 HEAP32[$stat_a2 >> 2] = _gsl_sf_bessel_Inu_scaled_asymp_unif_e(489.5, +HEAPF64[$2 >> 3], $r_iell) | 0;
 HEAPF64[$iellp16 >> 3] = +HEAPF64[$r_iellp1 >> 3];
 HEAPF64[$iell7 >> 3] = +HEAPF64[$r_iell >> 3];
 HEAPF64[$iellm18 >> 3] = 0.0;
 HEAPF64[$iellp16 >> 3] = +HEAPF64[$iellp16 >> 3] * +HEAPF64[$rt_term >> 3];
 HEAPF64[$iell7 >> 3] = +HEAPF64[$iell7 >> 3] * +HEAPF64[$rt_term >> 3];
 HEAP32[$ell9 >> 2] = 489;
 while (1) {
  if ((HEAP32[$ell9 >> 2] | 0) < ((HEAP32[$1 >> 2] | 0) + 1 | 0)) break;
  HEAPF64[$iellm18 >> 3] = +HEAPF64[$iellp16 >> 3] + +((HEAP32[$ell9 >> 2] << 1) + 1 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$iell7 >> 3];
  HEAPF64[$iellp16 >> 3] = +HEAPF64[$iell7 >> 3];
  HEAPF64[$iell7 >> 3] = +HEAPF64[$iellm18 >> 3];
  HEAP32[$ell9 >> 2] = (HEAP32[$ell9 >> 2] | 0) + -1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$sgn >> 3] * +HEAPF64[$iellm18 >> 3];
 $250 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 $256 = +Math_abs(+(+HEAPF64[$r_iellp1 + 8 >> 3] / +HEAPF64[$r_iellp1 >> 3])) + 2.220446049250313e-16;
 $263 = $250 * ($256 + +Math_abs(+(+HEAPF64[$r_iell + 8 >> 3] / +HEAPF64[$r_iell >> 3])));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $263;
 $269 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $271 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + $269;
 if (HEAP32[$stat_a1 >> 2] | 0) $281 = HEAP32[$stat_a1 >> 2] | 0; else $281 = (HEAP32[$stat_a2 >> 2] | 0) != 0 ? HEAP32[$stat_a2 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $281;
 $282 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $282 | 0;
}
function _increment_state819($state) {
 $state = $state | 0;
 var $0 = 0, $328 = 0.0, $329 = 0, $334 = 0.0, $335 = 0, $carry = 0, $ir = 0, $jr = 0, $k = 0, $kmax = 0, $m = 0, $x = 0, $xdbl = 0, $xflt = 0, $y1 = 0, $y2 = 0, $y3 = 0, $ydbl = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $k = sp + 68 | 0;
 $kmax = sp + 64 | 0;
 $m = sp + 60 | 0;
 $x = sp + 32 | 0;
 $y1 = sp + 24 | 0;
 $y2 = sp + 16 | 0;
 $y3 = sp + 8 | 0;
 $xflt = sp + 56 | 0;
 $xdbl = sp + 52 | 0;
 $ydbl = sp + 48 | 0;
 $carry = sp;
 $ir = sp + 44 | 0;
 $jr = sp + 40 | 0;
 HEAP32[$0 >> 2] = $state;
 HEAP32[$xflt >> 2] = (HEAP32[$0 >> 2] | 0) + 200;
 HEAP32[$xdbl >> 2] = HEAP32[$0 >> 2];
 HEAP32[$ydbl >> 2] = (HEAP32[$0 >> 2] | 0) + 96;
 HEAPF64[$carry >> 3] = +HEAPF64[(HEAP32[$0 >> 2] | 0) + 192 >> 3];
 HEAP32[$ir >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 296 >> 2];
 HEAP32[$jr >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 300 >> 2];
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$ir >> 2] | 0) >>> 0 <= 0) break;
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$jr >> 2] << 3) >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[$y1 >> 3] - +HEAPF64[$carry >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$carry >> 3] = 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  } else HEAPF64[$carry >> 3] = 0.0;
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3] = +HEAPF64[$y2 >> 3];
  HEAP32[$ir >> 2] = HEAP32[80080 + (HEAP32[$ir >> 2] << 2) >> 2];
  HEAP32[$jr >> 2] = HEAP32[80080 + (HEAP32[$jr >> 2] << 2) >> 2];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[$kmax >> 2] = (HEAP32[(HEAP32[$0 >> 2] | 0) + 312 >> 2] | 0) - 12;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$kmax >> 2] | 0)) break;
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 56 >> 3] - +HEAPF64[HEAP32[$xdbl >> 2] >> 3];
  HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] - +HEAPF64[$carry >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 64 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 8 >> 3];
  if (+HEAPF64[$y1 >> 3] < 0.0) {
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] + 1.0;
  }
  HEAPF64[HEAP32[$xdbl >> 2] >> 3] = +HEAPF64[$y1 >> 3];
  HEAPF64[$y3 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 72 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 16 >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 8 >> 3] = +HEAPF64[$y2 >> 3];
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 80 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 24 >> 3];
  if (+HEAPF64[$y3 >> 3] < 0.0) {
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 16 >> 3] = +HEAPF64[$y3 >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 88 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 32 >> 3];
  if (+HEAPF64[$y1 >> 3] < 0.0) {
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 24 >> 3] = +HEAPF64[$y1 >> 3];
  HEAPF64[$y3 >> 3] = +HEAPF64[HEAP32[$xdbl >> 2] >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 40 >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 32 >> 3] = +HEAPF64[$y2 >> 3];
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 48 >> 3];
  if (+HEAPF64[$y3 >> 3] < 0.0) {
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 40 >> 3] = +HEAPF64[$y3 >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 56 >> 3];
  if (+HEAPF64[$y1 >> 3] < 0.0) {
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 48 >> 3] = +HEAPF64[$y1 >> 3];
  HEAPF64[$y3 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 24 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 64 >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 56 >> 3] = +HEAPF64[$y2 >> 3];
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 32 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 72 >> 3];
  if (+HEAPF64[$y3 >> 3] < 0.0) {
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 64 >> 3] = +HEAPF64[$y3 >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 40 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 80 >> 3];
  if (+HEAPF64[$y1 >> 3] < 0.0) {
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 72 >> 3] = +HEAPF64[$y1 >> 3];
  HEAPF64[$y3 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 48 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 88 >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 80 >> 3] = +HEAPF64[$y2 >> 3];
  if (+HEAPF64[$y3 >> 3] < 0.0) {
   HEAPF64[$carry >> 3] = 3.552713678800501e-15;
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] + 1.0;
  } else HEAPF64[$carry >> 3] = 0.0;
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 88 >> 3] = +HEAPF64[$y3 >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 12;
 }
 HEAP32[$kmax >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 312 >> 2];
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$kmax >> 2] | 0)) break;
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$jr >> 2] << 3) >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[$y1 >> 3] - +HEAPF64[$carry >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$carry >> 3] = 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  } else HEAPF64[$carry >> 3] = 0.0;
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3] = +HEAPF64[$y2 >> 3];
  HEAPF64[(HEAP32[$ydbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3] = +HEAPF64[$y2 >> 3] + 268435456.0;
  HEAP32[$ir >> 2] = HEAP32[80080 + (HEAP32[$ir >> 2] << 2) >> 2];
  HEAP32[$jr >> 2] = HEAP32[80080 + (HEAP32[$jr >> 2] << 2) >> 2];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[(HEAP32[$ydbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3] + 268435456.0;
 HEAP32[$k >> 2] = HEAP32[80080 + (HEAP32[$ir >> 2] << 2) >> 2];
 while (1) {
  if ((HEAP32[$k >> 2] | 0) <= 0) break;
  HEAPF64[(HEAP32[$ydbl >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] + 268435456.0;
  HEAP32[$k >> 2] = HEAP32[80080 + (HEAP32[$k >> 2] << 2) >> 2];
 }
 HEAP32[$k >> 2] = 0;
 HEAP32[$m >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 12) break;
  HEAPF64[$x >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[(HEAP32[$ydbl >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] - 268435456.0;
  if (+HEAPF64[$y2 >> 3] > +HEAPF64[$x >> 3]) HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] - 5.960464477539063e-8;
  HEAPF64[$y1 >> 3] = (+HEAPF64[$x >> 3] - +HEAPF64[$y2 >> 3]) * 16777216.0;
  $328 = +HEAPF64[$y1 >> 3];
  $329 = HEAP32[$m >> 2] | 0;
  HEAP32[$m >> 2] = $329 + 1;
  HEAPF32[(HEAP32[$xflt >> 2] | 0) + ($329 << 2) >> 2] = $328;
  $334 = +HEAPF64[$y2 >> 3];
  $335 = HEAP32[$m >> 2] | 0;
  HEAP32[$m >> 2] = $335 + 1;
  HEAPF32[(HEAP32[$xflt >> 2] | 0) + ($335 << 2) >> 2] = $334;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$0 >> 2] | 0) + 296 >> 2] = HEAP32[$ir >> 2];
 HEAP32[(HEAP32[$0 >> 2] | 0) + 304 >> 2] = HEAP32[$ir >> 2] << 1;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 308 >> 2] = HEAP32[$ir >> 2] << 1;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 300 >> 2] = HEAP32[$jr >> 2];
 HEAPF64[(HEAP32[$0 >> 2] | 0) + 192 >> 3] = +HEAPF64[$carry >> 3];
 STACKTOP = sp;
 return;
}
function _gsl_sf_coupling_3j_e($two_ja, $two_jb, $two_jc, $two_ma, $two_mb, $two_mc, $result) {
 $two_ja = $two_ja | 0;
 $two_jb = $two_jb | 0;
 $two_jc = $two_jc | 0;
 $two_ma = $two_ma | 0;
 $two_mb = $two_mb | 0;
 $two_mc = $two_mc | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $119 = 0, $124 = 0, $130 = 0, $135 = 0, $140 = 0, $145 = 0, $196 = 0, $2 = 0, $203 = 0, $210 = 0, $231 = 0, $241 = 0.0, $266 = 0, $277 = 0.0, $279 = 0, $282 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $bc1 = 0, $bc2 = 0, $bc3 = 0, $bcd1 = 0, $bcd2 = 0, $bcd3 = 0, $bcd4 = 0, $bcn1 = 0, $bcn2 = 0, $jca = 0, $jcb = 0, $jcc = 0, $jmma = 0, $jmmb = 0, $jmmc = 0, $jpma = 0, $jpmb = 0, $jpmc = 0, $jsum = 0, $k = 0, $kmax = 0, $kmin = 0, $lnorm = 0, $sign = 0, $status = 0, $sum_err = 0, $sum_neg = 0, $sum_pos = 0, $term = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $0 = sp + 288 | 0;
 $1 = sp + 284 | 0;
 $2 = sp + 280 | 0;
 $3 = sp + 276 | 0;
 $4 = sp + 272 | 0;
 $5 = sp + 268 | 0;
 $6 = sp + 264 | 0;
 $7 = sp + 260 | 0;
 $jca = sp + 256 | 0;
 $jcb = sp + 252 | 0;
 $jcc = sp + 248 | 0;
 $jmma = sp + 244 | 0;
 $jmmb = sp + 240 | 0;
 $jmmc = sp + 236 | 0;
 $jpma = sp + 232 | 0;
 $jpmb = sp + 228 | 0;
 $jpmc = sp + 224 | 0;
 $jsum = sp + 220 | 0;
 $kmin = sp + 216 | 0;
 $kmax = sp + 212 | 0;
 $k = sp + 208 | 0;
 $sign = sp + 204 | 0;
 $status = sp + 200 | 0;
 $sum_pos = sp + 192 | 0;
 $sum_neg = sp + 184 | 0;
 $sum_err = sp + 176 | 0;
 $bc1 = sp + 160 | 0;
 $bc2 = sp + 144 | 0;
 $bc3 = sp + 128 | 0;
 $bcn1 = sp + 112 | 0;
 $bcn2 = sp + 96 | 0;
 $bcd1 = sp + 80 | 0;
 $bcd2 = sp + 64 | 0;
 $bcd3 = sp + 48 | 0;
 $bcd4 = sp + 32 | 0;
 $term = sp + 16 | 0;
 $lnorm = sp;
 HEAP32[$1 >> 2] = $two_ja;
 HEAP32[$2 >> 2] = $two_jb;
 HEAP32[$3 >> 2] = $two_jc;
 HEAP32[$4 >> 2] = $two_ma;
 HEAP32[$5 >> 2] = $two_mb;
 HEAP32[$6 >> 2] = $two_mc;
 HEAP32[$7 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if ((HEAP32[$2 >> 2] | 0) >= 0) if ((HEAP32[$3 >> 2] | 0) >= 0) {
  if (!(_triangle_selection_fails(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0)) if (!(_m_selection_fails(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0)) {
   if (!(HEAP32[$4 >> 2] | 0)) if (!(HEAP32[$5 >> 2] | 0)) if (!(HEAP32[$6 >> 2] | 0)) if ((((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) % 4 | 0 | 0) == 2) {
    HEAPF64[HEAP32[$7 >> 2] >> 3] = 0.0;
    HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = 0.0;
    HEAP32[$0 >> 2] = 0;
    $282 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $282 | 0;
   }
   HEAP32[$jca >> 2] = (0 - (HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$jcb >> 2] = ((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$jcc >> 2] = ((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$jmma >> 2] = ((HEAP32[$1 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$jmmb >> 2] = ((HEAP32[$2 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$jmmc >> 2] = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$jpma >> 2] = ((HEAP32[$1 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$jpmb >> 2] = ((HEAP32[$2 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$jpmc >> 2] = ((HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$jsum >> 2] = ((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$kmin >> 2] = _locMax3(0, (HEAP32[$jpmb >> 2] | 0) - (HEAP32[$jmmc >> 2] | 0) | 0, (HEAP32[$jmma >> 2] | 0) - (HEAP32[$jpmc >> 2] | 0) | 0) | 0;
   HEAP32[$kmax >> 2] = _locMin3(HEAP32[$jcc >> 2] | 0, HEAP32[$jmma >> 2] | 0, HEAP32[$jpmb >> 2] | 0) | 0;
   HEAP32[$sign >> 2] = ((HEAP32[$kmin >> 2] | 0) - (HEAP32[$jpma >> 2] | 0) + (HEAP32[$jmmb >> 2] | 0) & 1 | 0) != 0 ? -1 : 1;
   HEAP32[$status >> 2] = 0;
   HEAPF64[$sum_pos >> 3] = 0.0;
   HEAPF64[$sum_neg >> 3] = 0.0;
   HEAPF64[$sum_err >> 3] = 0.0;
   $119 = _gsl_sf_lnchoose_e(HEAP32[$1 >> 2] | 0, HEAP32[$jcc >> 2] | 0, $bcn1) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $119;
   $124 = _gsl_sf_lnchoose_e(HEAP32[$2 >> 2] | 0, HEAP32[$jcc >> 2] | 0, $bcn2) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $124;
   $130 = _gsl_sf_lnchoose_e((HEAP32[$jsum >> 2] | 0) + 1 | 0, HEAP32[$jcc >> 2] | 0, $bcd1) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $130;
   $135 = _gsl_sf_lnchoose_e(HEAP32[$1 >> 2] | 0, HEAP32[$jmma >> 2] | 0, $bcd2) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $135;
   $140 = _gsl_sf_lnchoose_e(HEAP32[$2 >> 2] | 0, HEAP32[$jmmb >> 2] | 0, $bcd3) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $140;
   $145 = _gsl_sf_lnchoose_e(HEAP32[$3 >> 2] | 0, HEAP32[$jpmc >> 2] | 0, $bcd4) | 0;
   HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $145;
   HEAPF64[$lnorm >> 3] = (+HEAPF64[$bcn1 >> 3] + +HEAPF64[$bcn2 >> 3] - +HEAPF64[$bcd1 >> 3] - +HEAPF64[$bcd2 >> 3] - +HEAPF64[$bcd3 >> 3] - +HEAPF64[$bcd4 >> 3] - +Math_log(+(+(HEAP32[$3 >> 2] | 0) + 1.0))) * .5;
   HEAPF64[$lnorm + 8 >> 3] = (+HEAPF64[$bcn1 + 8 >> 3] + +HEAPF64[$bcn2 + 8 >> 3] + +HEAPF64[$bcd1 + 8 >> 3] + +HEAPF64[$bcd2 + 8 >> 3] + +HEAPF64[$bcd3 + 8 >> 3] + +HEAPF64[$bcd4 + 8 >> 3] + +Math_log(+(+(HEAP32[$3 >> 2] | 0) + 1.0)) * 2.220446049250313e-16) * .5;
   HEAP32[$k >> 2] = HEAP32[$kmin >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$kmax >> 2] | 0)) {
     label = 21;
     break;
    }
    $196 = _gsl_sf_lnchoose_e(HEAP32[$jcc >> 2] | 0, HEAP32[$k >> 2] | 0, $bc1) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $196;
    $203 = _gsl_sf_lnchoose_e(HEAP32[$jcb >> 2] | 0, (HEAP32[$jmma >> 2] | 0) - (HEAP32[$k >> 2] | 0) | 0, $bc2) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $203;
    $210 = _gsl_sf_lnchoose_e(HEAP32[$jca >> 2] | 0, (HEAP32[$jpmb >> 2] | 0) - (HEAP32[$k >> 2] | 0) | 0, $bc3) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $210;
    $231 = _gsl_sf_exp_err_e(+HEAPF64[$bc1 >> 3] + +HEAPF64[$bc2 >> 3] + +HEAPF64[$bc3 >> 3] + +HEAPF64[$lnorm >> 3], +HEAPF64[$bc1 + 8 >> 3] + +HEAPF64[$bc2 + 8 >> 3] + +HEAPF64[$bc3 + 8 >> 3] + +HEAPF64[$lnorm + 8 >> 3], $term) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $231;
    if (HEAP32[$status >> 2] | 0) {
     label = 16;
     break;
    }
    $241 = +HEAPF64[$term >> 3];
    if ((HEAP32[$sign >> 2] | 0) < 0) HEAPF64[$sum_neg >> 3] = +HEAPF64[$sum_neg >> 3] + $241; else HEAPF64[$sum_pos >> 3] = +HEAPF64[$sum_pos >> 3] + $241;
    HEAPF64[$sum_err >> 3] = +HEAPF64[$sum_err >> 3] + +HEAPF64[$term + 8 >> 3];
    HEAP32[$sign >> 2] = 0 - (HEAP32[$sign >> 2] | 0);
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   if ((label | 0) == 16) {
    HEAPF64[HEAP32[$7 >> 2] >> 3] = inf;
    HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = inf;
    _gsl_error(26464, 26448, 175, 16);
    HEAP32[$0 >> 2] = 16;
    $282 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $282 | 0;
   } else if ((label | 0) == 21) {
    HEAPF64[HEAP32[$7 >> 2] >> 3] = +HEAPF64[$sum_pos >> 3] - +HEAPF64[$sum_neg >> 3];
    HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = +HEAPF64[$sum_err >> 3];
    $266 = (HEAP32[$7 >> 2] | 0) + 8 | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + (+HEAPF64[$sum_pos >> 3] + +HEAPF64[$sum_neg >> 3]) * 4.440892098500626e-16;
    $277 = +((HEAP32[$kmax >> 2] | 0) - (HEAP32[$kmin >> 2] | 0) | 0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[HEAP32[$7 >> 2] >> 3]));
    $279 = (HEAP32[$7 >> 2] | 0) + 8 | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + $277;
    HEAP32[$0 >> 2] = 0;
    $282 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $282 | 0;
   }
  }
  HEAPF64[HEAP32[$7 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $282 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $282 | 0;
 }
 HEAPF64[HEAP32[$7 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(26432, 26448, 120, 1);
 HEAP32[$0 >> 2] = 1;
 $282 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $282 | 0;
}
function _gsl_sf_mathieu_alloc($nn, $qq) {
 $nn = $nn | 0;
 $qq = +$qq;
 var $0 = 0, $1 = 0, $103 = 0, $125 = 0, $152 = 0, $179 = 0, $2 = 0, $210 = 0, $243 = 0, $250 = 0, $278 = 0, $43 = 0, $54 = 0, $67 = 0, $83 = 0, $even_order = 0, $extra_values = 0, $odd_order = 0, $workspace = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp;
 $workspace = sp + 20 | 0;
 $even_order = sp + 16 | 0;
 $odd_order = sp + 12 | 0;
 $extra_values = sp + 8 | 0;
 HEAP32[$1 >> 2] = $nn;
 HEAPF64[$2 >> 3] = $qq;
 HEAP32[$even_order >> 2] = (((HEAP32[$1 >> 2] | 0) >>> 0) / 2 | 0) + 1;
 HEAP32[$odd_order >> 2] = (((HEAP32[$1 >> 2] | 0) + 1 | 0) >>> 0) / 2 | 0;
 HEAP32[$extra_values >> 2] = ~~(+Math_pow(+(+Math_abs(+(+HEAPF64[$2 >> 3]))), .37) * 2.1) + 9;
 HEAP32[$extra_values >> 2] = (HEAP32[$extra_values >> 2] | 0) + 20;
 if (!((HEAP32[$1 >> 2] | 0) + 1 | 0)) {
  _gsl_error(54808, 54856, 43, 4);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 HEAP32[$workspace >> 2] = _malloc(72) | 0;
 if (!(HEAP32[$workspace >> 2] | 0)) {
  _gsl_error(54880, 54856, 50, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 HEAP32[$even_order >> 2] = (HEAP32[$even_order >> 2] | 0) + (HEAP32[$extra_values >> 2] | 0);
 HEAP32[$odd_order >> 2] = (HEAP32[$odd_order >> 2] | 0) + (HEAP32[$extra_values >> 2] | 0);
 HEAP32[HEAP32[$workspace >> 2] >> 2] = HEAP32[$1 >> 2];
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 4 >> 2] = HEAP32[$even_order >> 2];
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 8 >> 2] = HEAP32[$odd_order >> 2];
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 12 >> 2] = HEAP32[$extra_values >> 2];
 $43 = _malloc((HEAP32[$1 >> 2] | 0) + 1 << 3) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] = $43;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0)) {
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(54920, 54856, 68, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 $54 = _malloc((HEAP32[$1 >> 2] | 0) + 1 << 3) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] = $54;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] | 0)) {
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0);
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(54976, 54856, 77, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 $67 = _malloc(HEAP32[$even_order >> 2] << 3) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 40 >> 2] = $67;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 40 >> 2] | 0)) {
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] | 0);
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(55032, 54856, 89, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 $83 = _malloc(HEAP32[$even_order >> 2] << 3) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 44 >> 2] = $83;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 44 >> 2] | 0)) {
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 40 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] | 0);
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(55032, 54856, 99, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 $103 = _malloc((HEAP32[$even_order >> 2] | 0) * 3 << 3) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 48 >> 2] = $103;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 48 >> 2] | 0)) {
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 44 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 40 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] | 0);
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(55032, 54856, 110, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 $125 = _malloc(HEAP32[$even_order >> 2] << 3) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 52 >> 2] = $125;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 52 >> 2] | 0)) {
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 48 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 44 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 40 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] | 0);
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(55032, 54856, 122, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 $152 = _malloc((Math_imul(HEAP32[$even_order >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0) << 3) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 56 >> 2] = $152;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 56 >> 2] | 0)) {
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 52 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 48 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 44 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 40 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] | 0);
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(55032, 54856, 135, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 $179 = _gsl_vector_alloc(HEAP32[$even_order >> 2] | 0) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 60 >> 2] = $179;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 60 >> 2] | 0)) {
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 56 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 52 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 48 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 44 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 40 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] | 0);
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(55072, 54856, 150, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 $210 = _gsl_matrix_alloc(HEAP32[$even_order >> 2] | 0, HEAP32[$even_order >> 2] | 0) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 64 >> 2] = $210;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 64 >> 2] | 0)) {
  _gsl_vector_free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 60 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 56 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 52 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 48 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 44 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 40 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] | 0);
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(55112, 54856, 166, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 $243 = _gsl_eigen_symmv_alloc(HEAP32[$even_order >> 2] | 0) | 0;
 HEAP32[(HEAP32[$workspace >> 2] | 0) + 68 >> 2] = $243;
 $250 = HEAP32[$workspace >> 2] | 0;
 if (!(HEAP32[(HEAP32[$workspace >> 2] | 0) + 68 >> 2] | 0)) {
  _gsl_matrix_free(HEAP32[$250 + 64 >> 2] | 0);
  _gsl_vector_free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 60 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 56 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 52 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 48 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 44 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 40 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 32 >> 2] | 0);
  _free(HEAP32[(HEAP32[$workspace >> 2] | 0) + 36 >> 2] | 0);
  _free(HEAP32[$workspace >> 2] | 0);
  _gsl_error(55152, 54856, 183, 8);
  HEAP32[$0 >> 2] = 0;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 } else {
  HEAP32[$0 >> 2] = $250;
  $278 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $278 | 0;
 }
 return 0;
}
function _gsl_sf_beta_inc_e($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $116 = 0, $134 = 0.0, $172 = 0.0, $178 = 0.0, $190 = 0, $2 = 0, $215 = 0.0, $224 = 0.0, $228 = 0, $234 = 0.0, $236 = 0, $248 = 0, $257 = 0, $3 = 0, $4 = 0, $55 = 0.0, $65 = 0.0, $71 = 0.0, $76 = 0.0, $90 = 0, $beta = 0, $cf = 0, $cf3 = 0, $f = 0, $ln_1mx = 0, $ln_beta = 0, $ln_pre_err = 0, $ln_pre_val = 0, $ln_x = 0, $prefactor = 0, $prefactor1 = 0, $stat = 0, $stat2 = 0, $stat5 = 0, $stat_beta = 0, $stat_cf = 0, $stat_cf4 = 0, $stat_exp = 0, $stat_f = 0, $stat_ln = 0, $stat_ln_1mx = 0, $stat_ln_beta = 0, $stat_ln_x = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 236 | 0;
 $1 = sp + 176 | 0;
 $2 = sp + 168 | 0;
 $3 = sp + 160 | 0;
 $4 = sp + 232 | 0;
 $f = sp + 144 | 0;
 $beta = sp + 128 | 0;
 $stat = sp + 228 | 0;
 $stat_f = sp + 224 | 0;
 $stat_beta = sp + 220 | 0;
 $prefactor = sp + 120 | 0;
 $ln_beta = sp + 104 | 0;
 $ln_x = sp + 88 | 0;
 $ln_1mx = sp + 72 | 0;
 $prefactor1 = sp + 56 | 0;
 $stat_ln_beta = sp + 216 | 0;
 $stat_ln_1mx = sp + 212 | 0;
 $stat_ln_x = sp + 208 | 0;
 $stat_ln = sp + 204 | 0;
 $ln_pre_val = sp + 48 | 0;
 $ln_pre_err = sp + 40 | 0;
 $stat_exp = sp + 200 | 0;
 $cf = sp + 24 | 0;
 $stat_cf = sp + 196 | 0;
 $stat2 = sp + 192 | 0;
 $cf3 = sp + 8 | 0;
 $stat_cf4 = sp + 188 | 0;
 $stat5 = sp + 184 | 0;
 $term = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (+HEAPF64[$3 >> 3] < 0.0 | +HEAPF64[$3 >> 3] > 1.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(25928, 25944, 115, 1);
  HEAP32[$0 >> 2] = 1;
  $257 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $257 | 0;
 }
 if (!(+_isnegint234(+HEAPF64[$1 >> 3]) != 0.0)) if (!(+_isnegint234(+HEAPF64[$2 >> 3]) != 0.0)) {
  if (+_isnegint234(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) != 0.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
   _gsl_error(25928, 25944, 119, 1);
   HEAP32[$0 >> 2] = 1;
   $257 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $257 | 0;
  }
  if (+HEAPF64[$3 >> 3] == 0.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $257 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $257 | 0;
  }
  if (+HEAPF64[$3 >> 3] == 1.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $257 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $257 | 0;
  }
  if (!(+HEAPF64[$1 >> 3] <= 0.0)) if (!(+HEAPF64[$2 >> 3] <= 0.0)) {
   HEAP32[$stat_ln_beta >> 2] = _gsl_sf_lnbeta_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $ln_beta) | 0;
   HEAP32[$stat_ln_1mx >> 2] = _gsl_sf_log_1plusx_e(-+HEAPF64[$3 >> 3], $ln_1mx) | 0;
   HEAP32[$stat_ln_x >> 2] = _gsl_sf_log_e(+HEAPF64[$3 >> 3], $ln_x) | 0;
   do if (HEAP32[$stat_ln_beta >> 2] | 0) $116 = HEAP32[$stat_ln_beta >> 2] | 0; else if (HEAP32[$stat_ln_1mx >> 2] | 0) {
    $116 = HEAP32[$stat_ln_1mx >> 2] | 0;
    break;
   } else {
    $116 = (HEAP32[$stat_ln_x >> 2] | 0) != 0 ? HEAP32[$stat_ln_x >> 2] | 0 : 0;
    break;
   } while (0);
   HEAP32[$stat_ln >> 2] = $116;
   HEAPF64[$ln_pre_val >> 3] = -+HEAPF64[$ln_beta >> 3] + +HEAPF64[$1 >> 3] * +HEAPF64[$ln_x >> 3] + +HEAPF64[$2 >> 3] * +HEAPF64[$ln_1mx >> 3];
   $134 = +HEAPF64[$ln_beta + 8 >> 3] + +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$ln_x + 8 >> 3]));
   HEAPF64[$ln_pre_err >> 3] = $134 + +Math_abs(+(+HEAPF64[$2 >> 3] * +HEAPF64[$ln_1mx + 8 >> 3]));
   HEAP32[$stat_exp >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$ln_pre_val >> 3], +HEAPF64[$ln_pre_err >> 3], $prefactor1) | 0;
   if (HEAP32[$stat_ln >> 2] | 0) {
    HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
    HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
    _gsl_error(25976, 25944, 160, 7);
    HEAP32[$0 >> 2] = 7;
    $257 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $257 | 0;
   }
   if (+HEAPF64[$3 >> 3] < (+HEAPF64[$1 >> 3] + 1.0) / (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] + 2.0)) {
    HEAP32[$stat_cf >> 2] = _beta_cont_frac235(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $cf) | 0;
    HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$prefactor1 >> 3] * +HEAPF64[$cf >> 3] / +HEAPF64[$1 >> 3];
    $172 = +Math_abs(+(+HEAPF64[$prefactor1 + 8 >> 3] * +HEAPF64[$cf >> 3]));
    $178 = $172 + +Math_abs(+(+HEAPF64[$prefactor1 >> 3] * +HEAPF64[$cf + 8 >> 3]));
    HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $178 / +HEAPF64[$1 >> 3];
    if (HEAP32[$stat_exp >> 2] | 0) $190 = HEAP32[$stat_exp >> 2] | 0; else $190 = (HEAP32[$stat_cf >> 2] | 0) != 0 ? HEAP32[$stat_cf >> 2] | 0 : 0;
    HEAP32[$stat2 >> 2] = $190;
    if (!(HEAP32[$stat2 >> 2] | 0)) if (+Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) < 2.2250738585072014e-308) {
     _gsl_error(25960, 25944, 173, 15);
     HEAP32[$0 >> 2] = 15;
     $257 = HEAP32[$0 >> 2] | 0;
     STACKTOP = sp;
     return $257 | 0;
    }
    HEAP32[$0 >> 2] = HEAP32[$stat2 >> 2];
    $257 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $257 | 0;
   }
   HEAP32[$stat_cf4 >> 2] = _beta_cont_frac235(+HEAPF64[$2 >> 3], +HEAPF64[$1 >> 3], 1.0 - +HEAPF64[$3 >> 3], $cf3) | 0;
   HEAPF64[$term >> 3] = +HEAPF64[$prefactor1 >> 3] * +HEAPF64[$cf3 >> 3] / +HEAPF64[$2 >> 3];
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0 - +HEAPF64[$term >> 3];
   $215 = +Math_abs(+(+HEAPF64[$prefactor1 + 8 >> 3] * +HEAPF64[$cf3 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $215 / +HEAPF64[$2 >> 3];
   $224 = +Math_abs(+(+HEAPF64[$prefactor1 >> 3] * +HEAPF64[$cf3 + 8 >> 3]));
   $228 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$228 >> 3] = +HEAPF64[$228 >> 3] + $224 / +HEAPF64[$2 >> 3];
   $234 = (+Math_abs(+(+HEAPF64[$term >> 3])) + 1.0) * 4.440892098500626e-16;
   $236 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$236 >> 3] = +HEAPF64[$236 >> 3] + $234;
   if ((HEAP32[$stat_exp >> 2] | 0) != 15) {
    if (HEAP32[$stat_exp >> 2] | 0) $248 = HEAP32[$stat_exp >> 2] | 0; else $248 = (HEAP32[$stat_cf4 >> 2] | 0) != 0 ? HEAP32[$stat_cf4 >> 2] | 0 : 0;
    HEAP32[$stat5 >> 2] = $248;
   } else HEAP32[$stat5 >> 2] = HEAP32[$stat_cf4 >> 2];
   if (!(HEAP32[$stat5 >> 2] | 0)) if (+Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) < 2.2250738585072014e-308) {
    _gsl_error(25960, 25944, 195, 15);
    HEAP32[$0 >> 2] = 15;
    $257 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $257 | 0;
   }
   HEAP32[$0 >> 2] = HEAP32[$stat5 >> 2];
   $257 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $257 | 0;
  }
  HEAP32[$stat_f >> 2] = _gsl_sf_hyperg_2F1_e(+HEAPF64[$1 >> 3], 1.0 - +HEAPF64[$2 >> 3], +HEAPF64[$1 >> 3] + 1.0, +HEAPF64[$3 >> 3], $f) | 0;
  HEAP32[$stat_beta >> 2] = _gsl_sf_beta_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $beta) | 0;
  $55 = +Math_pow(+(+HEAPF64[$3 >> 3]), +(+HEAPF64[$1 >> 3]));
  HEAPF64[$prefactor >> 3] = $55 / +HEAPF64[$1 >> 3];
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$prefactor >> 3] * +HEAPF64[$f >> 3] / +HEAPF64[$beta >> 3];
  $65 = +Math_abs(+(+HEAPF64[$prefactor >> 3]));
  $71 = $65 * +HEAPF64[$f + 8 >> 3] / +Math_abs(+(+HEAPF64[$beta >> 3]));
  $76 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3] / +HEAPF64[$beta >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $71 + $76 * +HEAPF64[$beta + 8 >> 3];
  if (HEAP32[$stat_f >> 2] | 0) $90 = HEAP32[$stat_f >> 2] | 0; else $90 = (HEAP32[$stat_beta >> 2] | 0) != 0 ? HEAP32[$stat_beta >> 2] | 0 : 0;
  HEAP32[$stat >> 2] = $90;
  if (!(HEAP32[$stat >> 2] | 0)) if (+Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(25960, 25944, 140, 15);
   HEAP32[$0 >> 2] = 15;
   $257 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $257 | 0;
  }
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $257 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $257 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(25928, 25944, 117, 1);
 HEAP32[$0 >> 2] = 1;
 $257 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $257 | 0;
}
function _hyperg_2F1_conj_luke($aR, $aI, $c, $xin, $result) {
 $aR = +$aR;
 $aI = +$aI;
 $c = +$c;
 $xin = +$xin;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $265 = 0.0, $3 = 0, $332 = 0.0, $341 = 0.0, $343 = 0, $347 = 0.0, $352 = 0.0, $354 = 0, $4 = 0, $An = 0, $Anm1 = 0, $Anm2 = 0, $Anm3 = 0, $Bn = 0, $Bnm1 = 0, $Bnm2 = 0, $Bnm3 = 0, $E = 0, $F = 0, $F1 = 0, $F2 = 0, $F3 = 0, $apb = 0, $atimesb = 0, $n = 0, $n2 = 0, $nm1 = 0, $nm2 = 0, $npam1_npbm1 = 0, $npam2_npbm2 = 0, $npcm1 = 0, $npcm2 = 0, $prec = 0, $r = 0, $stat_iter = 0, $t0 = 0, $t1 = 0, $t2 = 0, $tnm1 = 0, $tnm3 = 0, $tnm5 = 0, $x = 0, $x3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $0 = sp + 288 | 0;
 $1 = sp + 280 | 0;
 $2 = sp + 272 | 0;
 $3 = sp + 264 | 0;
 $4 = sp + 308 | 0;
 $stat_iter = sp + 304 | 0;
 $n = sp + 296 | 0;
 $x = sp + 248 | 0;
 $x3 = sp + 240 | 0;
 $atimesb = sp + 232 | 0;
 $apb = sp + 224 | 0;
 $t0 = sp + 216 | 0;
 $t1 = sp + 208 | 0;
 $t2 = sp + 200 | 0;
 $F = sp + 192 | 0;
 $prec = sp + 184 | 0;
 $Bnm3 = sp + 176 | 0;
 $Bnm2 = sp + 168 | 0;
 $Bnm1 = sp + 160 | 0;
 $Anm3 = sp + 152 | 0;
 $Anm2 = sp + 144 | 0;
 $Anm1 = sp + 136 | 0;
 $nm1 = sp + 128 | 0;
 $nm2 = sp + 120 | 0;
 $npam1_npbm1 = sp + 112 | 0;
 $npam2_npbm2 = sp + 104 | 0;
 $npcm1 = sp + 96 | 0;
 $npcm2 = sp + 88 | 0;
 $tnm1 = sp + 80 | 0;
 $tnm3 = sp + 72 | 0;
 $tnm5 = sp + 64 | 0;
 $n2 = sp + 56 | 0;
 $F1 = sp + 48 | 0;
 $F2 = sp + 40 | 0;
 $F3 = sp + 32 | 0;
 $E = sp + 24 | 0;
 $An = sp + 16 | 0;
 $Bn = sp + 8 | 0;
 $r = sp;
 HEAPF64[$0 >> 3] = $aR;
 HEAPF64[$1 >> 3] = $aI;
 HEAPF64[$2 >> 3] = $c;
 HEAPF64[$3 >> 3] = $xin;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[sp + 256 >> 3] = 1.0e+50;
 HEAP32[sp + 300 >> 2] = 1e4;
 HEAP32[$n >> 2] = 3;
 HEAPF64[$x >> 3] = -+HEAPF64[$3 >> 3];
 HEAPF64[$x3 >> 3] = +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3];
 HEAPF64[$atimesb >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 HEAPF64[$apb >> 3] = +HEAPF64[$0 >> 3] * 2.0;
 HEAPF64[$t0 >> 3] = +HEAPF64[$atimesb >> 3] / +HEAPF64[$2 >> 3];
 HEAPF64[$t1 >> 3] = (+HEAPF64[$atimesb >> 3] + +HEAPF64[$apb >> 3] + 1.0) / (+HEAPF64[$2 >> 3] * 2.0);
 HEAPF64[$t2 >> 3] = (+HEAPF64[$atimesb >> 3] + +HEAPF64[$apb >> 3] * 2.0 + 4.0) / ((+HEAPF64[$2 >> 3] + 1.0) * 2.0);
 HEAPF64[$F >> 3] = 1.0;
 HEAPF64[$Bnm3 >> 3] = 1.0;
 HEAPF64[$Bnm2 >> 3] = +HEAPF64[$t1 >> 3] * +HEAPF64[$x >> 3] + 1.0;
 HEAPF64[$Bnm1 >> 3] = +HEAPF64[$t2 >> 3] * +HEAPF64[$x >> 3] * (+HEAPF64[$t1 >> 3] / 3.0 * +HEAPF64[$x >> 3] + 1.0) + 1.0;
 HEAPF64[$Anm3 >> 3] = 1.0;
 HEAPF64[$Anm2 >> 3] = +HEAPF64[$Bnm2 >> 3] - +HEAPF64[$t0 >> 3] * +HEAPF64[$x >> 3];
 HEAPF64[$Anm1 >> 3] = +HEAPF64[$Bnm1 >> 3] - +HEAPF64[$t0 >> 3] * (+HEAPF64[$t2 >> 3] * +HEAPF64[$x >> 3] + 1.0) * +HEAPF64[$x >> 3] + +HEAPF64[$t0 >> 3] * +HEAPF64[$t1 >> 3] * (+HEAPF64[$2 >> 3] / (+HEAPF64[$2 >> 3] + 1.0)) * +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3];
 while (1) {
  HEAPF64[$nm1 >> 3] = +((HEAP32[$n >> 2] | 0) - 1 | 0);
  HEAPF64[$nm2 >> 3] = +((HEAP32[$n >> 2] | 0) - 2 | 0);
  HEAPF64[$npam1_npbm1 >> 3] = +HEAPF64[$atimesb >> 3] + +HEAPF64[$nm1 >> 3] * +HEAPF64[$apb >> 3] + +HEAPF64[$nm1 >> 3] * +HEAPF64[$nm1 >> 3];
  HEAPF64[$npam2_npbm2 >> 3] = +HEAPF64[$atimesb >> 3] + +HEAPF64[$nm2 >> 3] * +HEAPF64[$apb >> 3] + +HEAPF64[$nm2 >> 3] * +HEAPF64[$nm2 >> 3];
  HEAPF64[$npcm1 >> 3] = +HEAPF64[$nm1 >> 3] + +HEAPF64[$2 >> 3];
  HEAPF64[$npcm2 >> 3] = +HEAPF64[$nm2 >> 3] + +HEAPF64[$2 >> 3];
  HEAPF64[$tnm1 >> 3] = +((HEAP32[$n >> 2] << 1) - 1 | 0);
  HEAPF64[$tnm3 >> 3] = +((HEAP32[$n >> 2] << 1) - 3 | 0);
  HEAPF64[$tnm5 >> 3] = +((HEAP32[$n >> 2] << 1) - 5 | 0);
  HEAPF64[$n2 >> 3] = +(Math_imul(HEAP32[$n >> 2] | 0, HEAP32[$n >> 2] | 0) | 0);
  HEAPF64[$F1 >> 3] = (+HEAPF64[$n2 >> 3] * 3.0 + (+HEAPF64[$apb >> 3] - 6.0) * +(HEAP32[$n >> 2] | 0) + 2.0 - +HEAPF64[$atimesb >> 3] - +HEAPF64[$apb >> 3] * 2.0) / (+HEAPF64[$tnm3 >> 3] * 2.0 * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$F2 >> 3] = -(+HEAPF64[$n2 >> 3] * 3.0 - (+HEAPF64[$apb >> 3] + 6.0) * +(HEAP32[$n >> 2] | 0) + 2.0 - +HEAPF64[$atimesb >> 3]) * +HEAPF64[$npam1_npbm1 >> 3] / (+HEAPF64[$tnm1 >> 3] * 4.0 * +HEAPF64[$tnm3 >> 3] * +HEAPF64[$npcm2 >> 3] * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$F3 >> 3] = +HEAPF64[$npam2_npbm2 >> 3] * +HEAPF64[$npam1_npbm1 >> 3] * (+HEAPF64[$nm2 >> 3] * +HEAPF64[$nm2 >> 3] - +HEAPF64[$nm2 >> 3] * +HEAPF64[$apb >> 3] + +HEAPF64[$atimesb >> 3]) / (+HEAPF64[$tnm3 >> 3] * 8.0 * +HEAPF64[$tnm3 >> 3] * +HEAPF64[$tnm5 >> 3] * (+(HEAP32[$n >> 2] | 0) + +HEAPF64[$2 >> 3] - 3.0) * +HEAPF64[$npcm2 >> 3] * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$E >> 3] = -+HEAPF64[$npam1_npbm1 >> 3] * (+(HEAP32[$n >> 2] | 0) - +HEAPF64[$2 >> 3] - 1.0) / (+HEAPF64[$tnm3 >> 3] * 2.0 * +HEAPF64[$npcm2 >> 3] * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$An >> 3] = (+HEAPF64[$F1 >> 3] * +HEAPF64[$x >> 3] + 1.0) * +HEAPF64[$Anm1 >> 3] + (+HEAPF64[$E >> 3] + +HEAPF64[$F2 >> 3] * +HEAPF64[$x >> 3]) * +HEAPF64[$x >> 3] * +HEAPF64[$Anm2 >> 3] + +HEAPF64[$F3 >> 3] * +HEAPF64[$x3 >> 3] * +HEAPF64[$Anm3 >> 3];
  HEAPF64[$Bn >> 3] = (+HEAPF64[$F1 >> 3] * +HEAPF64[$x >> 3] + 1.0) * +HEAPF64[$Bnm1 >> 3] + (+HEAPF64[$E >> 3] + +HEAPF64[$F2 >> 3] * +HEAPF64[$x >> 3]) * +HEAPF64[$x >> 3] * +HEAPF64[$Bnm2 >> 3] + +HEAPF64[$F3 >> 3] * +HEAPF64[$x3 >> 3] * +HEAPF64[$Bnm3 >> 3];
  HEAPF64[$r >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
  $265 = +Math_abs(+(+HEAPF64[$F >> 3] - +HEAPF64[$r >> 3]));
  HEAPF64[$prec >> 3] = $265 / +Math_abs(+(+HEAPF64[$F >> 3]));
  HEAPF64[$F >> 3] = +HEAPF64[$r >> 3];
  if (+HEAPF64[$prec >> 3] < 2.220446049250313e-16) {
   label = 11;
   break;
  }
  if ((HEAP32[$n >> 2] | 0) > 1e4) {
   label = 11;
   break;
  }
  do if (+Math_abs(+(+HEAPF64[$An >> 3])) > 1.0e+50) label = 6; else if (+Math_abs(+(+HEAPF64[$Bn >> 3])) > 1.0e+50) label = 6; else {
   if (!(+Math_abs(+(+HEAPF64[$An >> 3])) < 9.999999999999999e-51)) if (!(+Math_abs(+(+HEAPF64[$Bn >> 3])) < 9.999999999999999e-51)) break;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] * 1.0e+50;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] * 1.0e+50;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] * 1.0e+50;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] * 1.0e+50;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] * 1.0e+50;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] * 1.0e+50;
   HEAPF64[$Anm3 >> 3] = +HEAPF64[$Anm3 >> 3] * 1.0e+50;
   HEAPF64[$Bnm3 >> 3] = +HEAPF64[$Bnm3 >> 3] * 1.0e+50;
  } while (0);
  if ((label | 0) == 6) {
   label = 0;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] / 1.0e+50;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] / 1.0e+50;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] / 1.0e+50;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] / 1.0e+50;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] / 1.0e+50;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] / 1.0e+50;
   HEAPF64[$Anm3 >> 3] = +HEAPF64[$Anm3 >> 3] / 1.0e+50;
   HEAPF64[$Bnm3 >> 3] = +HEAPF64[$Bnm3 >> 3] / 1.0e+50;
  }
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAPF64[$Bnm3 >> 3] = +HEAPF64[$Bnm2 >> 3];
  HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm1 >> 3];
  HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bn >> 3];
  HEAPF64[$Anm3 >> 3] = +HEAPF64[$Anm2 >> 3];
  HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm1 >> 3];
  HEAPF64[$Anm1 >> 3] = +HEAPF64[$An >> 3];
 }
 if ((label | 0) == 11) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$F >> 3];
  $332 = +Math_abs(+(+HEAPF64[$prec >> 3] * +HEAPF64[$F >> 3])) * 2.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $332;
  $341 = (+(HEAP32[$n >> 2] | 0) + 1.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$F >> 3]));
  $343 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$343 >> 3] = +HEAPF64[$343 >> 3] + $341;
  $347 = +Math_abs(+(+HEAPF64[$0 >> 3]));
  $352 = ($347 + +Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0) * 8.0;
  $354 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$354 >> 3] = +HEAPF64[$354 >> 3] * $352;
  HEAP32[$stat_iter >> 2] = (HEAP32[$n >> 2] | 0) >= 1e4 ? 11 : 0;
  STACKTOP = sp;
  return HEAP32[$stat_iter >> 2] | 0;
 }
 return 0;
}
function _gsl_sf_bessel_jl_e($l, $x, $result) {
 $l = $l | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $118 = 0.0, $13 = 0, $150 = 0.0, $185 = 0.0, $188 = 0, $189 = 0.0, $2 = 0, $201 = 0.0, $212 = 0.0, $214 = 0, $224 = 0, $236 = 0.0, $247 = 0.0, $249 = 0, $259 = 0, $260 = 0, $3 = 0, $30 = 0.0, $62 = 0.0, $64 = 0, $72 = 0, $79 = 0.0, $93 = 0.0, $b = 0, $b1 = 0, $b4 = 0, $b7 = 0, $ell = 0, $j0_result = 0, $j1_result = 0, $jell = 0, $jellm1 = 0, $jellp1 = 0, $pre = 0, $pre10 = 0, $pre11 = 0, $pre3 = 0, $pre6 = 0, $pre9 = 0, $ratio = 0, $sgn = 0, $stat_CF1 = 0, $stat_j0 = 0, $stat_j1 = 0, $status = 0, $status2 = 0, $status5 = 0, $status8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 232 | 0;
 $1 = sp + 228 | 0;
 $2 = sp + 184 | 0;
 $3 = sp + 224 | 0;
 $b = sp + 168 | 0;
 $status = sp + 220 | 0;
 $pre = sp + 160 | 0;
 $b1 = sp + 144 | 0;
 $status2 = sp + 216 | 0;
 $pre3 = sp + 136 | 0;
 $b4 = sp + 120 | 0;
 $status5 = sp + 212 | 0;
 $pre6 = sp + 112 | 0;
 $b7 = sp + 96 | 0;
 $status8 = sp + 208 | 0;
 $pre9 = sp + 88 | 0;
 $sgn = sp + 80 | 0;
 $ratio = sp + 72 | 0;
 $stat_CF1 = sp + 204 | 0;
 $jellp1 = sp + 64 | 0;
 $jell = sp + 56 | 0;
 $jellm1 = sp + 48 | 0;
 $ell = sp + 200 | 0;
 $j0_result = sp + 32 | 0;
 $stat_j0 = sp + 196 | 0;
 $pre10 = sp + 24 | 0;
 $j1_result = sp + 8 | 0;
 $stat_j1 = sp + 192 | 0;
 $pre11 = sp;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] < 0.0)) {
  $13 = HEAP32[$1 >> 2] | 0;
  if (+HEAPF64[$2 >> 3] == 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = ($13 | 0) > 0 ? 0.0 : 1.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  }
  if (!$13) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_j0_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_j1_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  }
  $30 = +HEAPF64[$2 >> 3];
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_j2_e($30, HEAP32[$3 >> 2] | 0) | 0;
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  }
  if ($30 * +HEAPF64[$2 >> 3] < (+(HEAP32[$1 >> 2] | 0) + .5) * 10.0 / 2.718281828459045) {
   HEAP32[$status >> 2] = _gsl_sf_bessel_IJ_taylor_e(+(HEAP32[$1 >> 2] | 0) + .5, +HEAPF64[$2 >> 3], -1, 50, 2.220446049250313e-16, $b) | 0;
   HEAPF64[$pre >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$b >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$b + 8 >> 3];
   $62 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $64 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$64 >> 3] = +HEAPF64[$64 >> 3] + $62;
   HEAP32[$0 >> 2] = HEAP32[$status >> 2];
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  }
  $72 = Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
  $79 = +(HEAP32[$1 >> 2] | 0);
  if (+HEAPF64[$2 >> 3] * .0001220703125 > +($72 + (HEAP32[$1 >> 2] | 0) | 0) + 1.0) {
   HEAP32[$status2 >> 2] = _gsl_sf_bessel_Jnu_asympx_e($79 + .5, +HEAPF64[$2 >> 3], $b1) | 0;
   HEAPF64[$pre3 >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre3 >> 3] * +HEAPF64[$b1 >> 3];
   $93 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $93 + +HEAPF64[$pre3 >> 3] * +HEAPF64[$b1 + 8 >> 3];
   HEAP32[$0 >> 2] = HEAP32[$status2 >> 2];
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  }
  if ($79 > 406.3746693038589) {
   HEAP32[$status5 >> 2] = _gsl_sf_bessel_Jnu_asymp_Olver_e(+(HEAP32[$1 >> 2] | 0) + .5, +HEAPF64[$2 >> 3], $b4) | 0;
   HEAPF64[$pre6 >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre6 >> 3] * +HEAPF64[$b4 >> 3];
   $118 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $118 + +HEAPF64[$pre6 >> 3] * +HEAPF64[$b4 + 8 >> 3];
   HEAP32[$0 >> 2] = HEAP32[$status5 >> 2];
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  }
  if (+HEAPF64[$2 >> 3] > 1.0e3) if (+HEAPF64[$2 >> 3] > +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0)) {
   HEAP32[$status8 >> 2] = _gsl_sf_bessel_Jnu_asympx_e(+(HEAP32[$1 >> 2] | 0) + .5, +HEAPF64[$2 >> 3], $b7) | 0;
   HEAPF64[$pre9 >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre9 >> 3] * +HEAPF64[$b7 >> 3];
   $150 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $150 + +HEAPF64[$pre9 >> 3] * +HEAPF64[$b7 + 8 >> 3];
   HEAP32[$0 >> 2] = HEAP32[$status8 >> 2];
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  }
  HEAP32[$stat_CF1 >> 2] = _gsl_sf_bessel_J_CF1(+(HEAP32[$1 >> 2] | 0) + .5, +HEAPF64[$2 >> 3], $ratio, $sgn) | 0;
  HEAPF64[$jellp1 >> 3] = +HEAPF64[$ratio >> 3] * 1.4901161193847656e-8;
  HEAPF64[$jell >> 3] = 1.4901161193847656e-8;
  HEAP32[$ell >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) <= 0) break;
   HEAPF64[$jellm1 >> 3] = -+HEAPF64[$jellp1 >> 3] + +((HEAP32[$ell >> 2] << 1) + 1 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$jell >> 3];
   HEAPF64[$jellp1 >> 3] = +HEAPF64[$jell >> 3];
   HEAPF64[$jell >> 3] = +HEAPF64[$jellm1 >> 3];
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + -1;
  }
  $185 = +Math_abs(+(+HEAPF64[$jell >> 3]));
  $188 = $185 > +Math_abs(+(+HEAPF64[$jellp1 >> 3]));
  $189 = +HEAPF64[$2 >> 3];
  if ($188) {
   HEAP32[$stat_j0 >> 2] = _gsl_sf_bessel_j0_e($189, $j0_result) | 0;
   HEAPF64[$pre10 >> 3] = 1.4901161193847656e-8 / +HEAPF64[$jell >> 3];
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$j0_result >> 3] * +HEAPF64[$pre10 >> 3];
   $201 = +HEAPF64[$j0_result + 8 >> 3] * +Math_abs(+(+HEAPF64[$pre10 >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $201;
   $212 = (+(HEAP32[$1 >> 2] | 0) * .5 + 1.0) * 8.881784197001252e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
   $214 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$214 >> 3] = +HEAPF64[$214 >> 3] + $212;
   if (HEAP32[$stat_j0 >> 2] | 0) $224 = HEAP32[$stat_j0 >> 2] | 0; else $224 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $224;
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  } else {
   HEAP32[$stat_j1 >> 2] = _gsl_sf_bessel_j1_e($189, $j1_result) | 0;
   HEAPF64[$pre11 >> 3] = 1.4901161193847656e-8 / +HEAPF64[$jellp1 >> 3];
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$j1_result >> 3] * +HEAPF64[$pre11 >> 3];
   $236 = +HEAPF64[$j1_result + 8 >> 3] * +Math_abs(+(+HEAPF64[$pre11 >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $236;
   $247 = (+(HEAP32[$1 >> 2] | 0) * .5 + 1.0) * 8.881784197001252e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
   $249 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$249 >> 3] = +HEAPF64[$249 >> 3] + $247;
   if (HEAP32[$stat_j1 >> 2] | 0) $259 = HEAP32[$stat_j1 >> 2] | 0; else $259 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $259;
   $260 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $260 | 0;
  }
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(15872, 15856, 158, 1);
 HEAP32[$0 >> 2] = 1;
 $260 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $260 | 0;
}
function _hyperg_2F1_luke($a, $b, $c, $xin, $result) {
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $xin = +$xin;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $345 = 0.0, $354 = 0.0, $356 = 0, $360 = 0.0, $365 = 0.0, $367 = 0, $4 = 0, $An = 0, $Anm1 = 0, $Anm2 = 0, $Anm3 = 0, $Bn = 0, $Bnm1 = 0, $Bnm2 = 0, $Bnm3 = 0, $E = 0, $F = 0, $F1 = 0, $F2 = 0, $F3 = 0, $n = 0, $n2 = 0, $npam1 = 0, $npam2 = 0, $npbm1 = 0, $npbm2 = 0, $npcm1 = 0, $npcm2 = 0, $prec = 0, $r = 0, $stat_iter = 0, $t0 = 0, $t1 = 0, $t2 = 0, $tnm1 = 0, $tnm3 = 0, $tnm5 = 0, $x = 0, $x3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $0 = sp + 272 | 0;
 $1 = sp + 264 | 0;
 $2 = sp + 256 | 0;
 $3 = sp + 248 | 0;
 $4 = sp + 292 | 0;
 $stat_iter = sp + 288 | 0;
 $n = sp + 280 | 0;
 $x = sp + 232 | 0;
 $x3 = sp + 224 | 0;
 $t0 = sp + 216 | 0;
 $t1 = sp + 208 | 0;
 $t2 = sp + 200 | 0;
 $F = sp + 192 | 0;
 $prec = sp + 184 | 0;
 $Bnm3 = sp + 176 | 0;
 $Bnm2 = sp + 168 | 0;
 $Bnm1 = sp + 160 | 0;
 $Anm3 = sp + 152 | 0;
 $Anm2 = sp + 144 | 0;
 $Anm1 = sp + 136 | 0;
 $npam1 = sp + 128 | 0;
 $npbm1 = sp + 120 | 0;
 $npcm1 = sp + 112 | 0;
 $npam2 = sp + 104 | 0;
 $npbm2 = sp + 96 | 0;
 $npcm2 = sp + 88 | 0;
 $tnm1 = sp + 80 | 0;
 $tnm3 = sp + 72 | 0;
 $tnm5 = sp + 64 | 0;
 $n2 = sp + 56 | 0;
 $F1 = sp + 48 | 0;
 $F2 = sp + 40 | 0;
 $F3 = sp + 32 | 0;
 $E = sp + 24 | 0;
 $An = sp + 16 | 0;
 $Bn = sp + 8 | 0;
 $r = sp;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $b;
 HEAPF64[$2 >> 3] = $c;
 HEAPF64[$3 >> 3] = $xin;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[sp + 240 >> 3] = 1.0e+50;
 HEAP32[sp + 284 >> 2] = 2e4;
 HEAP32[$n >> 2] = 3;
 HEAPF64[$x >> 3] = -+HEAPF64[$3 >> 3];
 HEAPF64[$x3 >> 3] = +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3];
 HEAPF64[$t0 >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3];
 HEAPF64[$t1 >> 3] = (+HEAPF64[$0 >> 3] + 1.0) * (+HEAPF64[$1 >> 3] + 1.0) / (+HEAPF64[$2 >> 3] * 2.0);
 HEAPF64[$t2 >> 3] = (+HEAPF64[$0 >> 3] + 2.0) * (+HEAPF64[$1 >> 3] + 2.0) / ((+HEAPF64[$2 >> 3] + 1.0) * 2.0);
 HEAPF64[$F >> 3] = 1.0;
 HEAPF64[$Bnm3 >> 3] = 1.0;
 HEAPF64[$Bnm2 >> 3] = +HEAPF64[$t1 >> 3] * +HEAPF64[$x >> 3] + 1.0;
 HEAPF64[$Bnm1 >> 3] = +HEAPF64[$t2 >> 3] * +HEAPF64[$x >> 3] * (+HEAPF64[$t1 >> 3] / 3.0 * +HEAPF64[$x >> 3] + 1.0) + 1.0;
 HEAPF64[$Anm3 >> 3] = 1.0;
 HEAPF64[$Anm2 >> 3] = +HEAPF64[$Bnm2 >> 3] - +HEAPF64[$t0 >> 3] * +HEAPF64[$x >> 3];
 HEAPF64[$Anm1 >> 3] = +HEAPF64[$Bnm1 >> 3] - +HEAPF64[$t0 >> 3] * (+HEAPF64[$t2 >> 3] * +HEAPF64[$x >> 3] + 1.0) * +HEAPF64[$x >> 3] + +HEAPF64[$t0 >> 3] * +HEAPF64[$t1 >> 3] * (+HEAPF64[$2 >> 3] / (+HEAPF64[$2 >> 3] + 1.0)) * +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3];
 while (1) {
  HEAPF64[$npam1 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$0 >> 3] - 1.0;
  HEAPF64[$npbm1 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$1 >> 3] - 1.0;
  HEAPF64[$npcm1 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$2 >> 3] - 1.0;
  HEAPF64[$npam2 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$0 >> 3] - 2.0;
  HEAPF64[$npbm2 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$1 >> 3] - 2.0;
  HEAPF64[$npcm2 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$2 >> 3] - 2.0;
  HEAPF64[$tnm1 >> 3] = +((HEAP32[$n >> 2] << 1) - 1 | 0);
  HEAPF64[$tnm3 >> 3] = +((HEAP32[$n >> 2] << 1) - 3 | 0);
  HEAPF64[$tnm5 >> 3] = +((HEAP32[$n >> 2] << 1) - 5 | 0);
  HEAPF64[$n2 >> 3] = +(Math_imul(HEAP32[$n >> 2] | 0, HEAP32[$n >> 2] | 0) | 0);
  HEAPF64[$F1 >> 3] = (+HEAPF64[$n2 >> 3] * 3.0 + (+HEAPF64[$0 >> 3] + +HEAPF64[$1 >> 3] - 6.0) * +(HEAP32[$n >> 2] | 0) + 2.0 - +HEAPF64[$0 >> 3] * +HEAPF64[$1 >> 3] - (+HEAPF64[$0 >> 3] + +HEAPF64[$1 >> 3]) * 2.0) / (+HEAPF64[$tnm3 >> 3] * 2.0 * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$F2 >> 3] = -(+HEAPF64[$n2 >> 3] * 3.0 - (+HEAPF64[$0 >> 3] + +HEAPF64[$1 >> 3] + 6.0) * +(HEAP32[$n >> 2] | 0) + 2.0 - +HEAPF64[$0 >> 3] * +HEAPF64[$1 >> 3]) * +HEAPF64[$npam1 >> 3] * +HEAPF64[$npbm1 >> 3] / (+HEAPF64[$tnm1 >> 3] * 4.0 * +HEAPF64[$tnm3 >> 3] * +HEAPF64[$npcm2 >> 3] * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$F3 >> 3] = +HEAPF64[$npam2 >> 3] * +HEAPF64[$npam1 >> 3] * +HEAPF64[$npbm2 >> 3] * +HEAPF64[$npbm1 >> 3] * (+(HEAP32[$n >> 2] | 0) - +HEAPF64[$0 >> 3] - 2.0) * (+(HEAP32[$n >> 2] | 0) - +HEAPF64[$1 >> 3] - 2.0) / (+HEAPF64[$tnm3 >> 3] * 8.0 * +HEAPF64[$tnm3 >> 3] * +HEAPF64[$tnm5 >> 3] * (+(HEAP32[$n >> 2] | 0) + +HEAPF64[$2 >> 3] - 3.0) * +HEAPF64[$npcm2 >> 3] * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$E >> 3] = -+HEAPF64[$npam1 >> 3] * +HEAPF64[$npbm1 >> 3] * (+(HEAP32[$n >> 2] | 0) - +HEAPF64[$2 >> 3] - 1.0) / (+HEAPF64[$tnm3 >> 3] * 2.0 * +HEAPF64[$npcm2 >> 3] * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$An >> 3] = (+HEAPF64[$F1 >> 3] * +HEAPF64[$x >> 3] + 1.0) * +HEAPF64[$Anm1 >> 3] + (+HEAPF64[$E >> 3] + +HEAPF64[$F2 >> 3] * +HEAPF64[$x >> 3]) * +HEAPF64[$x >> 3] * +HEAPF64[$Anm2 >> 3] + +HEAPF64[$F3 >> 3] * +HEAPF64[$x3 >> 3] * +HEAPF64[$Anm3 >> 3];
  HEAPF64[$Bn >> 3] = (+HEAPF64[$F1 >> 3] * +HEAPF64[$x >> 3] + 1.0) * +HEAPF64[$Bnm1 >> 3] + (+HEAPF64[$E >> 3] + +HEAPF64[$F2 >> 3] * +HEAPF64[$x >> 3]) * +HEAPF64[$x >> 3] * +HEAPF64[$Bnm2 >> 3] + +HEAPF64[$F3 >> 3] * +HEAPF64[$x3 >> 3] * +HEAPF64[$Bnm3 >> 3];
  HEAPF64[$r >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
  HEAPF64[$prec >> 3] = +Math_abs(+((+HEAPF64[$F >> 3] - +HEAPF64[$r >> 3]) / +HEAPF64[$F >> 3]));
  HEAPF64[$F >> 3] = +HEAPF64[$r >> 3];
  if (+HEAPF64[$prec >> 3] < 2.220446049250313e-16) {
   label = 11;
   break;
  }
  if ((HEAP32[$n >> 2] | 0) > 2e4) {
   label = 11;
   break;
  }
  do if (+Math_abs(+(+HEAPF64[$An >> 3])) > 1.0e+50) label = 6; else if (+Math_abs(+(+HEAPF64[$Bn >> 3])) > 1.0e+50) label = 6; else {
   if (!(+Math_abs(+(+HEAPF64[$An >> 3])) < 9.999999999999999e-51)) if (!(+Math_abs(+(+HEAPF64[$Bn >> 3])) < 9.999999999999999e-51)) break;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] * 1.0e+50;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] * 1.0e+50;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] * 1.0e+50;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] * 1.0e+50;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] * 1.0e+50;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] * 1.0e+50;
   HEAPF64[$Anm3 >> 3] = +HEAPF64[$Anm3 >> 3] * 1.0e+50;
   HEAPF64[$Bnm3 >> 3] = +HEAPF64[$Bnm3 >> 3] * 1.0e+50;
  } while (0);
  if ((label | 0) == 6) {
   label = 0;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] / 1.0e+50;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] / 1.0e+50;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] / 1.0e+50;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] / 1.0e+50;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] / 1.0e+50;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] / 1.0e+50;
   HEAPF64[$Anm3 >> 3] = +HEAPF64[$Anm3 >> 3] / 1.0e+50;
   HEAPF64[$Bnm3 >> 3] = +HEAPF64[$Bnm3 >> 3] / 1.0e+50;
  }
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAPF64[$Bnm3 >> 3] = +HEAPF64[$Bnm2 >> 3];
  HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm1 >> 3];
  HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bn >> 3];
  HEAPF64[$Anm3 >> 3] = +HEAPF64[$Anm2 >> 3];
  HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm1 >> 3];
  HEAPF64[$Anm1 >> 3] = +HEAPF64[$An >> 3];
 }
 if ((label | 0) == 11) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$F >> 3];
  $345 = +Math_abs(+(+HEAPF64[$prec >> 3] * +HEAPF64[$F >> 3])) * 2.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $345;
  $354 = (+(HEAP32[$n >> 2] | 0) + 1.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$F >> 3]));
  $356 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$356 >> 3] = +HEAPF64[$356 >> 3] + $354;
  $360 = +Math_abs(+(+HEAPF64[$0 >> 3]));
  $365 = ($360 + +Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0) * 8.0;
  $367 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$367 >> 3] = +HEAPF64[$367 >> 3] * $365;
  HEAP32[$stat_iter >> 2] = (HEAP32[$n >> 2] | 0) >= 2e4 ? 11 : 0;
  STACKTOP = sp;
  return HEAP32[$stat_iter >> 2] | 0;
 }
 return 0;
}
function _hyperg_1F1_U($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $126 = 0.0, $141 = 0.0, $147 = 0.0, $154 = 0.0, $183 = 0.0, $2 = 0, $202 = 0.0, $209 = 0.0, $21 = 0, $211 = 0.0, $249 = 0, $3 = 0, $56 = 0, $66 = 0.0, $87 = 0, $M = 0, $Mee_err = 0, $Mee_val = 0, $U = 0, $Uee_err = 0, $Uee_val = 0, $ap = 0, $bp = 0, $factorM_err = 0, $factorM_val = 0, $factorU_err = 0, $factorU_val = 0, $inner_err = 0, $inner_err2 = 0, $inner_val = 0, $inner_val1 = 0, $lg_1papmbp = 0, $lg_2mbp = 0, $lg_ap = 0, $lg_bp = 0, $lnc1_err = 0, $lnc1_val = 0, $lnpre_err = 0, $lnpre_val = 0, $ombp = 0, $sg_1papmbp = 0, $sg_2mbp = 0, $sg_ap = 0, $stat_F = 0, $stat_FU = 0, $stat_U = 0, $stat_e0 = 0, $stat_e1 = 0, $stat_lg0 = 0, $stat_lg1 = 0, $stat_lg2 = 0, $stat_lg3 = 0, $stat_lg4 = 0, $stat_lg5 = 0, $t1 = 0, $term_M = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 $0 = sp + 328 | 0;
 $1 = sp + 320 | 0;
 $2 = sp + 312 | 0;
 $3 = sp + 380 | 0;
 $bp = sp + 304 | 0;
 $ap = sp + 296 | 0;
 $lg_ap = sp + 280 | 0;
 $lg_bp = sp + 264 | 0;
 $sg_ap = sp + 256 | 0;
 $stat_lg0 = sp + 376 | 0;
 $stat_lg1 = sp + 372 | 0;
 $stat_lg2 = sp + 368 | 0;
 $t1 = sp + 248 | 0;
 $lnpre_val = sp + 240 | 0;
 $lnpre_err = sp + 232 | 0;
 $lg_2mbp = sp + 216 | 0;
 $lg_1papmbp = sp + 200 | 0;
 $sg_2mbp = sp + 192 | 0;
 $sg_1papmbp = sp + 184 | 0;
 $stat_lg3 = sp + 364 | 0;
 $stat_lg4 = sp + 360 | 0;
 $stat_lg5 = sp + 356 | 0;
 $lnc1_val = sp + 176 | 0;
 $lnc1_err = sp + 168 | 0;
 $M = sp + 152 | 0;
 $U = sp + 128 | 0;
 $stat_F = sp + 352 | 0;
 $stat_U = sp + 348 | 0;
 $stat_FU = sp + 344 | 0;
 $term_M = sp + 104 | 0;
 $stat_e0 = sp + 340 | 0;
 $ombp = sp + 96 | 0;
 $Uee_val = sp + 88 | 0;
 $Uee_err = sp + 80 | 0;
 $Mee_val = sp + 72 | 0;
 $Mee_err = sp + 64 | 0;
 $stat_e1 = sp + 336 | 0;
 $factorM_val = sp + 56 | 0;
 $factorM_err = sp + 48 | 0;
 $inner_val = sp + 40 | 0;
 $inner_err = sp + 32 | 0;
 $factorU_val = sp + 24 | 0;
 $factorU_err = sp + 16 | 0;
 $inner_val1 = sp + 8 | 0;
 $inner_err2 = sp;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $b;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$bp >> 3] = 2.0 - +HEAPF64[$1 >> 3];
 HEAPF64[$ap >> 3] = +HEAPF64[$0 >> 3] - +HEAPF64[$1 >> 3] + 1.0;
 HEAP32[$stat_lg0 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$ap >> 3], $lg_ap, $sg_ap) | 0;
 HEAP32[$stat_lg1 >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$bp >> 3], $lg_bp) | 0;
 if (HEAP32[$stat_lg0 >> 2] | 0) $21 = HEAP32[$stat_lg0 >> 2] | 0; else $21 = (HEAP32[$stat_lg1 >> 2] | 0) != 0 ? HEAP32[$stat_lg1 >> 2] | 0 : 0;
 HEAP32[$stat_lg2 >> 2] = $21;
 HEAPF64[$t1 >> 3] = (+HEAPF64[$bp >> 3] - 1.0) * +Math_log(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$lnpre_val >> 3] = +HEAPF64[$lg_ap >> 3] - +HEAPF64[$lg_bp >> 3] + +HEAPF64[$t1 >> 3];
 HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lg_ap + 8 >> 3] + +HEAPF64[$lg_bp + 8 >> 3] + +Math_abs(+(+HEAPF64[$t1 >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_lg3 >> 2] = _gsl_sf_lngamma_sgn_e(2.0 - +HEAPF64[$bp >> 3], $lg_2mbp, $sg_2mbp) | 0;
 HEAP32[$stat_lg4 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$ap >> 3] + 1.0 - +HEAPF64[$bp >> 3], $lg_1papmbp, $sg_1papmbp) | 0;
 if (HEAP32[$stat_lg3 >> 2] | 0) $56 = HEAP32[$stat_lg3 >> 2] | 0; else $56 = (HEAP32[$stat_lg4 >> 2] | 0) != 0 ? HEAP32[$stat_lg4 >> 2] | 0 : 0;
 HEAP32[$stat_lg5 >> 2] = $56;
 HEAPF64[$lnc1_val >> 3] = +HEAPF64[$lg_2mbp >> 3] - +HEAPF64[$lg_1papmbp >> 3];
 $66 = +Math_abs(+(+HEAPF64[$lg_2mbp >> 3]));
 HEAPF64[$lnc1_err >> 3] = +HEAPF64[$lg_2mbp + 8 >> 3] + +HEAPF64[$lg_1papmbp + 8 >> 3] + ($66 + +Math_abs(+(+HEAPF64[$lg_1papmbp >> 3]))) * 2.220446049250313e-16;
 HEAP32[$stat_F >> 2] = _gsl_sf_hyperg_1F1_e(+HEAPF64[$ap >> 3], +HEAPF64[$bp >> 3], +HEAPF64[$2 >> 3], $M) | 0;
 HEAP32[$stat_U >> 2] = _gsl_sf_hyperg_U_e10_e(+HEAPF64[$ap >> 3], +HEAPF64[$bp >> 3], +HEAPF64[$2 >> 3], $U) | 0;
 if (HEAP32[$stat_F >> 2] | 0) $87 = HEAP32[$stat_F >> 2] | 0; else $87 = (HEAP32[$stat_U >> 2] | 0) != 0 ? HEAP32[$stat_U >> 2] | 0 : 0;
 HEAP32[$stat_FU >> 2] = $87;
 HEAP32[$stat_e0 >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$lnc1_val >> 3], +HEAPF64[$lnc1_err >> 3], +HEAPF64[$sg_2mbp >> 3] * +HEAPF64[$sg_1papmbp >> 3] * +HEAPF64[$M >> 3], +HEAPF64[$M + 8 >> 3], $term_M) | 0;
 HEAPF64[$ombp >> 3] = 1.0 - +HEAPF64[$bp >> 3];
 HEAPF64[$Uee_val >> 3] = +(HEAP32[$U + 16 >> 2] | 0) * 2.302585092994046;
 HEAPF64[$Uee_err >> 3] = +Math_abs(+(+HEAPF64[$Uee_val >> 3])) * 4.440892098500626e-16;
 HEAPF64[$Mee_val >> 3] = +(HEAP32[$term_M + 16 >> 2] | 0) * 2.302585092994046;
 HEAPF64[$Mee_err >> 3] = +Math_abs(+(+HEAPF64[$Mee_val >> 3])) * 4.440892098500626e-16;
 if (+HEAPF64[$Uee_val >> 3] > +HEAPF64[$Mee_val >> 3]) {
  HEAPF64[$factorM_val >> 3] = +Math_exp(+(+HEAPF64[$Mee_val >> 3] - +HEAPF64[$Uee_val >> 3]));
  $126 = (+Math_abs(+(+HEAPF64[$Mee_val >> 3] - +HEAPF64[$Uee_val >> 3])) + 1.0) * 4.440892098500626e-16;
  HEAPF64[$factorM_err >> 3] = $126 * +HEAPF64[$factorM_val >> 3];
  HEAPF64[$inner_val >> 3] = +HEAPF64[$term_M >> 3] * +HEAPF64[$factorM_val >> 3] - +HEAPF64[$ombp >> 3] * +HEAPF64[$U >> 3];
  $141 = +Math_abs(+(+HEAPF64[$ombp >> 3]));
  $147 = +Math_abs(+(+HEAPF64[$term_M >> 3]));
  $154 = +Math_abs(+(+HEAPF64[$term_M >> 3] * +HEAPF64[$factorM_val >> 3]));
  HEAPF64[$inner_err >> 3] = +HEAPF64[$term_M + 8 >> 3] * +HEAPF64[$factorM_val >> 3] + $141 * +HEAPF64[$U + 8 >> 3] + $147 * +HEAPF64[$factorM_err >> 3] + ($154 + +Math_abs(+(+HEAPF64[$ombp >> 3] * +HEAPF64[$U >> 3]))) * 2.220446049250313e-16;
  HEAP32[$stat_e1 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3] + +HEAPF64[$Uee_val >> 3], +HEAPF64[$lnpre_err >> 3] + +HEAPF64[$Uee_err >> 3], +HEAPF64[$sg_ap >> 3] * +HEAPF64[$inner_val >> 3], +HEAPF64[$inner_err >> 3], HEAP32[$3 >> 2] | 0) | 0;
 } else {
  HEAPF64[$factorU_val >> 3] = +Math_exp(+(+HEAPF64[$Uee_val >> 3] - +HEAPF64[$Mee_val >> 3]));
  $183 = (+Math_abs(+(+HEAPF64[$Mee_val >> 3] - +HEAPF64[$Uee_val >> 3])) + 1.0) * 4.440892098500626e-16;
  HEAPF64[$factorU_err >> 3] = $183 * +HEAPF64[$factorU_val >> 3];
  HEAPF64[$inner_val1 >> 3] = +HEAPF64[$term_M >> 3] - +HEAPF64[$ombp >> 3] * +HEAPF64[$factorU_val >> 3] * +HEAPF64[$U >> 3];
  $202 = +HEAPF64[$term_M + 8 >> 3] + +Math_abs(+(+HEAPF64[$ombp >> 3] * +HEAPF64[$factorU_val >> 3] * +HEAPF64[$U + 8 >> 3]));
  $209 = $202 + +Math_abs(+(+HEAPF64[$ombp >> 3] * +HEAPF64[$factorU_err >> 3] * +HEAPF64[$U >> 3]));
  $211 = +Math_abs(+(+HEAPF64[$term_M >> 3]));
  HEAPF64[$inner_err2 >> 3] = $209 + ($211 + +Math_abs(+(+HEAPF64[$ombp >> 3] * +HEAPF64[$factorU_val >> 3] * +HEAPF64[$U >> 3]))) * 2.220446049250313e-16;
  HEAP32[$stat_e1 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3] + +HEAPF64[$Mee_val >> 3], +HEAPF64[$lnpre_err >> 3] + +HEAPF64[$Mee_err >> 3], +HEAPF64[$sg_ap >> 3] * +HEAPF64[$inner_val1 >> 3], +HEAPF64[$inner_err2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 }
 if (HEAP32[$stat_e1 >> 2] | 0) {
  $249 = HEAP32[$stat_e1 >> 2] | 0;
  STACKTOP = sp;
  return $249 | 0;
 }
 if (HEAP32[$stat_e0 >> 2] | 0) {
  $249 = HEAP32[$stat_e0 >> 2] | 0;
  STACKTOP = sp;
  return $249 | 0;
 }
 if (HEAP32[$stat_FU >> 2] | 0) {
  $249 = HEAP32[$stat_FU >> 2] | 0;
  STACKTOP = sp;
  return $249 | 0;
 }
 if (HEAP32[$stat_lg5 >> 2] | 0) {
  $249 = HEAP32[$stat_lg5 >> 2] | 0;
  STACKTOP = sp;
  return $249 | 0;
 } else {
  $249 = (HEAP32[$stat_lg2 >> 2] | 0) != 0 ? HEAP32[$stat_lg2 >> 2] | 0 : 0;
  STACKTOP = sp;
  return $249 | 0;
 }
 return 0;
}
function _lnpoch_pos($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $247 = 0.0, $257 = 0.0, $259 = 0, $264 = 0.0, $266 = 0.0, $271 = 0.0, $273 = 0, $279 = 0.0, $281 = 0, $3 = 0, $30 = 0.0, $301 = 0.0, $307 = 0.0, $309 = 0, $319 = 0, $320 = 0, $36 = 0.0, $42 = 0.0, $48 = 0.0, $50 = 0, $73 = 0.0, $75 = 0, $85 = 0, $a4 = 0, $a6 = 0, $absx = 0, $c1 = 0, $c3 = 0, $c5 = 0, $c7 = 0, $c8 = 0, $c9 = 0, $d3 = 0, $d5 = 0, $d7 = 0, $den = 0, $eps = 0, $eps1 = 0, $g1 = 0, $g2 = 0, $lg1 = 0, $lg2 = 0, $ln_1peps = 0, $p8 = 0, $poch_rel = 0, $ser = 0, $ser_1 = 0, $ser_2 = 0, $stat_1 = 0, $stat_2 = 0, $stat_e = 0, $stat_p = 0, $term1 = 0, $term2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $0 = sp + 300 | 0;
 $1 = sp + 272 | 0;
 $2 = sp + 264 | 0;
 $3 = sp + 296 | 0;
 $absx = sp + 256 | 0;
 $g1 = sp + 240 | 0;
 $g2 = sp + 224 | 0;
 $lg1 = sp + 208 | 0;
 $lg2 = sp + 192 | 0;
 $stat_1 = sp + 292 | 0;
 $stat_2 = sp + 288 | 0;
 $eps = sp + 184 | 0;
 $den = sp + 176 | 0;
 $d3 = sp + 168 | 0;
 $d5 = sp + 160 | 0;
 $d7 = sp + 152 | 0;
 $c1 = sp + 144 | 0;
 $c3 = sp + 136 | 0;
 $c5 = sp + 128 | 0;
 $c7 = sp + 120 | 0;
 $p8 = sp + 112 | 0;
 $c8 = sp + 104 | 0;
 $c9 = sp + 96 | 0;
 $a4 = sp + 88 | 0;
 $a6 = sp + 80 | 0;
 $ser_1 = sp + 72 | 0;
 $ser_2 = sp + 64 | 0;
 $ser = sp + 56 | 0;
 $term1 = sp + 48 | 0;
 $term2 = sp + 40 | 0;
 $ln_1peps = sp + 24 | 0;
 $poch_rel = sp + 8 | 0;
 $stat_p = sp + 284 | 0;
 $eps1 = sp;
 $stat_e = sp + 280 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$absx >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 if (!(+HEAPF64[$absx >> 3] > +HEAPF64[$1 >> 3] * .1)) {
  $10 = +HEAPF64[$absx >> 3];
  if (!($10 * +Math_log(+(+_GSL_MAX_DBL(+(+HEAPF64[$1 >> 3]), 2.0))) > .1)) {
   if (+HEAPF64[$1 >> 3] > 15.0 ? +HEAPF64[$absx >> 3] < +HEAPF64[$1 >> 3] * .1 : 0) {
    HEAPF64[$eps >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$1 >> 3];
    HEAPF64[$den >> 3] = +HEAPF64[$eps >> 3] + 1.0;
    HEAPF64[$d3 >> 3] = +HEAPF64[$den >> 3] * +HEAPF64[$den >> 3] * +HEAPF64[$den >> 3];
    HEAPF64[$d5 >> 3] = +HEAPF64[$d3 >> 3] * +HEAPF64[$den >> 3] * +HEAPF64[$den >> 3];
    HEAPF64[$d7 >> 3] = +HEAPF64[$d5 >> 3] * +HEAPF64[$den >> 3] * +HEAPF64[$den >> 3];
    HEAPF64[$c1 >> 3] = -+HEAPF64[$eps >> 3] / +HEAPF64[$den >> 3];
    HEAPF64[$c3 >> 3] = -+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] + 3.0) + 3.0) / +HEAPF64[$d3 >> 3];
    HEAPF64[$c5 >> 3] = -+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] + 5.0) + 10.0) + 10.0) + 5.0) / +HEAPF64[$d5 >> 3];
    HEAPF64[$c7 >> 3] = -+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] + 7.0) + 21.0) + 35.0) + 35.0) + 21.0) + 7.0) / +HEAPF64[$d7 >> 3];
    HEAPF64[$p8 >> 3] = +_gsl_sf_pow_int(+HEAPF64[$eps >> 3] + 1.0, 8);
    HEAPF64[$c8 >> 3] = 1.0 / +HEAPF64[$p8 >> 3] - 1.0;
    HEAPF64[$c9 >> 3] = 1.0 / (+HEAPF64[$p8 >> 3] * (+HEAPF64[$eps >> 3] + 1.0)) - 1.0;
    HEAPF64[$a4 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
    HEAPF64[$a6 >> 3] = +HEAPF64[$a4 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
    HEAPF64[$ser_1 >> 3] = +HEAPF64[$c1 >> 3] + +HEAPF64[$c3 >> 3] / (+HEAPF64[$1 >> 3] * 30.0 * +HEAPF64[$1 >> 3]) + +HEAPF64[$c5 >> 3] / (+HEAPF64[$a4 >> 3] * 105.0) + +HEAPF64[$c7 >> 3] / (+HEAPF64[$a6 >> 3] * 140.0);
    HEAPF64[$ser_2 >> 3] = +HEAPF64[$c8 >> 3] / (+HEAPF64[$a6 >> 3] * 99.0 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - +HEAPF64[$c9 >> 3] * .0019175269175269176 / (+HEAPF64[$a6 >> 3] * +HEAPF64[$a4 >> 3]);
    HEAPF64[$ser >> 3] = (+HEAPF64[$ser_1 >> 3] + +HEAPF64[$ser_2 >> 3]) / (+HEAPF64[$1 >> 3] * 12.0);
    HEAPF64[$term1 >> 3] = +HEAPF64[$2 >> 3] * +Math_log(+(+HEAPF64[$1 >> 3] / 2.718281828459045));
    _gsl_sf_log_1plusx_e(+HEAPF64[$eps >> 3], $ln_1peps) | 0;
    HEAPF64[$term2 >> 3] = (+HEAPF64[$2 >> 3] + +HEAPF64[$1 >> 3] - .5) * +HEAPF64[$ln_1peps >> 3];
    HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$term1 >> 3] + +HEAPF64[$term2 >> 3] + +HEAPF64[$ser >> 3];
    $247 = +Math_abs(+(+HEAPF64[$term1 >> 3])) * 2.220446049250313e-16;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $247;
    $257 = +Math_abs(+((+HEAPF64[$2 >> 3] + +HEAPF64[$1 >> 3] - .5) * +HEAPF64[$ln_1peps + 8 >> 3]));
    $259 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$259 >> 3] = +HEAPF64[$259 >> 3] + $257;
    $264 = +Math_abs(+(+HEAPF64[$ln_1peps >> 3])) * 2.220446049250313e-16;
    $266 = +Math_abs(+(+HEAPF64[$2 >> 3]));
    $271 = $264 * ($266 + +Math_abs(+(+HEAPF64[$1 >> 3])) + .5);
    $273 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$273 >> 3] = +HEAPF64[$273 >> 3] + $271;
    $279 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
    $281 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$281 >> 3] = +HEAPF64[$281 >> 3] + $279;
    HEAP32[$0 >> 2] = 0;
    $320 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $320 | 0;
   }
   HEAP32[$stat_p >> 2] = _pochrel_smallx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $poch_rel) | 0;
   HEAPF64[$eps1 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$poch_rel >> 3];
   HEAP32[$stat_e >> 2] = _gsl_sf_log_1plusx_e(+HEAPF64[$eps1 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $301 = +Math_abs(+(+HEAPF64[$2 >> 3] * +HEAPF64[$poch_rel + 8 >> 3] / (+HEAPF64[$eps1 >> 3] + 1.0))) * 2.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $301;
   $307 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $309 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] + $307;
   if (HEAP32[$stat_e >> 2] | 0) $319 = HEAP32[$stat_e >> 2] | 0; else $319 = (HEAP32[$stat_p >> 2] | 0) != 0 ? HEAP32[$stat_p >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $319;
   $320 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $320 | 0;
  }
 }
 if (+HEAPF64[$1 >> 3] < 171.0) if (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] < 171.0) {
  _gsl_sf_gammainv_e(+HEAPF64[$1 >> 3], $g1) | 0;
  _gsl_sf_gammainv_e(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3], $g2) | 0;
  $30 = -+Math_log(+(+HEAPF64[$g2 >> 3] / +HEAPF64[$g1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $30;
  $36 = +HEAPF64[$g1 + 8 >> 3] / +Math_abs(+(+HEAPF64[$g1 >> 3]));
  $42 = $36 + +HEAPF64[$g2 + 8 >> 3] / +Math_abs(+(+HEAPF64[$g2 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $42;
  $48 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $50 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$50 >> 3] = +HEAPF64[$50 >> 3] + $48;
  HEAP32[$0 >> 2] = 0;
  $320 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $320 | 0;
 }
 HEAP32[$stat_1 >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3], $lg1) | 0;
 HEAP32[$stat_2 >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3], $lg2) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$lg2 >> 3] - +HEAPF64[$lg1 >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$lg2 + 8 >> 3] + +HEAPF64[$lg1 + 8 >> 3];
 $73 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $75 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$75 >> 3] = +HEAPF64[$75 >> 3] + $73;
 if (HEAP32[$stat_1 >> 2] | 0) $85 = HEAP32[$stat_1 >> 2] | 0; else $85 = (HEAP32[$stat_2 >> 2] | 0) != 0 ? HEAP32[$stat_2 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $85;
 $320 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $320 | 0;
}
function _gamma_inc_Q_series($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $239 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0.0, $270 = 0.0, $271 = 0, $c1 = 0, $c10 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $c6 = 0, $c7 = 0, $c8 = 0, $c9 = 0, $el = 0, $lnx = 0, $n = 0, $stat_sum = 0, $sum = 0, $t = 0, $term1 = 0, $term2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 144 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 164 | 0;
 $term1 = sp + 128 | 0;
 $sum = sp + 120 | 0;
 $stat_sum = sp + 160 | 0;
 $term2 = sp + 112 | 0;
 $lnx = sp + 96 | 0;
 $el = sp + 88 | 0;
 $c1 = sp + 80 | 0;
 $c2 = sp + 72 | 0;
 $c3 = sp + 64 | 0;
 $c4 = sp + 56 | 0;
 $c5 = sp + 48 | 0;
 $c6 = sp + 40 | 0;
 $c7 = sp + 32 | 0;
 $c8 = sp + 24 | 0;
 $c9 = sp + 16 | 0;
 $c10 = sp + 8 | 0;
 $t = sp;
 $n = sp + 152 | 0;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 104 >> 3] = -2.4041138063191885;
 HEAPF64[$lnx >> 3] = +Math_log(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$el >> 3] = +HEAPF64[$lnx >> 3] + .5772156649015329;
 HEAPF64[$c1 >> 3] = -+HEAPF64[$el >> 3];
 HEAPF64[$c2 >> 3] = .8224670334241132 - +HEAPF64[$el >> 3] * .5 * +HEAPF64[$el >> 3];
 HEAPF64[$c3 >> 3] = +HEAPF64[$el >> 3] * (.8224670334241132 - +HEAPF64[$el >> 3] * +HEAPF64[$el >> 3] / 6.0) + -.40068563438653143;
 HEAPF64[$c4 >> 3] = (+HEAPF64[$lnx >> 3] + -1.7582434466614836) * -.041666666666666664 * (+HEAPF64[$lnx >> 3] + -.7644286572727164) * (+HEAPF64[$lnx >> 3] + .7239805716235077) * (+HEAPF64[$lnx >> 3] + 4.107554191916823);
 HEAPF64[$c5 >> 3] = (+HEAPF64[$lnx >> 3] + -2.065633960857159) * -.008333333333333333 * (+HEAPF64[$lnx >> 3] + -1.284598894708647) * (+HEAPF64[$lnx >> 3] + -.2758353575645414) * (+HEAPF64[$lnx >> 3] + 1.3367737133623963) * (+HEAPF64[$lnx >> 3] + 5.175372824275615);
 HEAPF64[$c6 >> 3] = (+HEAPF64[$lnx >> 3] + -2.308143364547832) * -.001388888888888889 * (+HEAPF64[$lnx >> 3] + -1.658465577069873) * (+HEAPF64[$lnx >> 3] + -.887680825600204) * (+HEAPF64[$lnx >> 3] + .17043847751371777) * (+HEAPF64[$lnx >> 3] + 1.921359701158639) * (+HEAPF64[$lnx >> 3] + 6.225785577954749);
 HEAPF64[$c7 >> 3] = (+HEAPF64[$lnx >> 3] + -2.50786579012918) * -.0001984126984126984 * (+HEAPF64[$lnx >> 3] + -1.94789008889582) * (+HEAPF64[$lnx >> 3] + -1.319483732261273) * (+HEAPF64[$lnx >> 3] + -.5281322700249279) * (+HEAPF64[$lnx >> 3] + .5913834939078759) * (+HEAPF64[$lnx >> 3] + 2.487681963337814) * (+HEAPF64[$lnx >> 3] + 7.26481607837624);
 HEAPF64[$c8 >> 3] = (+HEAPF64[$lnx >> 3] + -2.6773415449664) * -248015873015873.0e-19 * (+HEAPF64[$lnx >> 3] + -2.1828104482717) * (+HEAPF64[$lnx >> 3] + -1.6493503422774) * (+HEAPF64[$lnx >> 3] + -1.01409904829079) * (+HEAPF64[$lnx >> 3] + -.191366955370652) * (+HEAPF64[$lnx >> 3] + .995403817918724) * (+HEAPF64[$lnx >> 3] + 3.04132328352931) * (+HEAPF64[$lnx >> 3] + 8.29596655694125);
 HEAPF64[$c9 >> 3] = (+HEAPF64[$lnx >> 3] + -2.824348767046908) * -275573192239859.0e-20 * (+HEAPF64[$lnx >> 3] + -2.379849432270112) * (+HEAPF64[$lnx >> 3] + -1.914367472868996) * (+HEAPF64[$lnx >> 3] + -1.381452910292037) * (+HEAPF64[$lnx >> 3] + -.7294312810261694) * (+HEAPF64[$lnx >> 3] + .1299079285269565) * (+HEAPF64[$lnx >> 3] + 1.387333325188524) * (+HEAPF64[$lnx >> 3] + 3.585725886521076) * (+HEAPF64[$lnx >> 3] + 9.32142370738146);
 HEAPF64[$c10 >> 3] = (+HEAPF64[$lnx >> 3] + -2.954032964455691) * -2.75573192239859e-7 * (+HEAPF64[$lnx >> 3] + -2.549136692699185) * (+HEAPF64[$lnx >> 3] + -2.134827922927988) * (+HEAPF64[$lnx >> 3] + -1.674188107634945) * (+HEAPF64[$lnx >> 3] + -1.132594961609842) * (+HEAPF64[$lnx >> 3] + -.4590034650618494) * (+HEAPF64[$lnx >> 3] + .4399352987435699) * (+HEAPF64[$lnx >> 3] + 1.770223651765167) * (+HEAPF64[$lnx >> 3] + 4.123153904747408) * (+HEAPF64[$lnx >> 3] + 10.34262790814868);
 HEAPF64[$term1 >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$c1 >> 3] + +HEAPF64[$0 >> 3] * (+HEAPF64[$c2 >> 3] + +HEAPF64[$0 >> 3] * (+HEAPF64[$c3 >> 3] + +HEAPF64[$0 >> 3] * (+HEAPF64[$c4 >> 3] + +HEAPF64[$0 >> 3] * (+HEAPF64[$c5 >> 3] + +HEAPF64[$0 >> 3] * (+HEAPF64[$c6 >> 3] + +HEAPF64[$0 >> 3] * (+HEAPF64[$c7 >> 3] + +HEAPF64[$0 >> 3] * (+HEAPF64[$c8 >> 3] + +HEAPF64[$0 >> 3] * (+HEAPF64[$c9 >> 3] + +HEAPF64[$0 >> 3] * +HEAPF64[$c10 >> 3])))))))));
 HEAP32[sp + 156 >> 2] = 5e3;
 HEAPF64[$t >> 3] = 1.0;
 HEAPF64[$sum >> 3] = 1.0;
 HEAP32[$n >> 2] = 1;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= 5e3) break;
  HEAPF64[$t >> 3] = +HEAPF64[$t >> 3] * (-+HEAPF64[$1 >> 3] / (+(HEAP32[$n >> 2] | 0) + 1.0));
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + (+HEAPF64[$0 >> 3] + 1.0) / (+HEAPF64[$0 >> 3] + +(HEAP32[$n >> 2] | 0) + 1.0) * +HEAPF64[$t >> 3];
  if (+Math_abs(+(+HEAPF64[$t >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 if ((HEAP32[$n >> 2] | 0) == 5e3) {
  HEAP32[$stat_sum >> 2] = 11;
  $239 = +HEAPF64[$term1 >> 3];
  $240 = 1.0 - $239;
  $241 = +HEAPF64[$0 >> 3];
  $242 = $240 * $241;
  $243 = +HEAPF64[$0 >> 3];
  $244 = $243 + 1.0;
  $245 = $242 / $244;
  $246 = +HEAPF64[$1 >> 3];
  $247 = $245 * $246;
  $248 = +HEAPF64[$sum >> 3];
  $249 = $247 * $248;
  HEAPF64[$term2 >> 3] = $249;
  $250 = +HEAPF64[$term1 >> 3];
  $251 = +HEAPF64[$term2 >> 3];
  $252 = $250 + $251;
  $253 = HEAP32[$2 >> 2] | 0;
  HEAPF64[$253 >> 3] = $252;
  $254 = +HEAPF64[$term1 >> 3];
  $255 = +Math_abs(+$254);
  $256 = +HEAPF64[$term2 >> 3];
  $257 = +Math_abs(+$256);
  $258 = 2.0 * $257;
  $259 = $255 + $258;
  $260 = 2.220446049250313e-16 * $259;
  $261 = HEAP32[$2 >> 2] | 0;
  $262 = $261 + 8 | 0;
  HEAPF64[$262 >> 3] = $260;
  $263 = HEAP32[$2 >> 2] | 0;
  $264 = +HEAPF64[$263 >> 3];
  $265 = +Math_abs(+$264);
  $266 = 4.440892098500626e-16 * $265;
  $267 = HEAP32[$2 >> 2] | 0;
  $268 = $267 + 8 | 0;
  $269 = +HEAPF64[$268 >> 3];
  $270 = $269 + $266;
  HEAPF64[$268 >> 3] = $270;
  $271 = HEAP32[$stat_sum >> 2] | 0;
  STACKTOP = sp;
  return $271 | 0;
 } else {
  HEAP32[$stat_sum >> 2] = 0;
  $239 = +HEAPF64[$term1 >> 3];
  $240 = 1.0 - $239;
  $241 = +HEAPF64[$0 >> 3];
  $242 = $240 * $241;
  $243 = +HEAPF64[$0 >> 3];
  $244 = $243 + 1.0;
  $245 = $242 / $244;
  $246 = +HEAPF64[$1 >> 3];
  $247 = $245 * $246;
  $248 = +HEAPF64[$sum >> 3];
  $249 = $247 * $248;
  HEAPF64[$term2 >> 3] = $249;
  $250 = +HEAPF64[$term1 >> 3];
  $251 = +HEAPF64[$term2 >> 3];
  $252 = $250 + $251;
  $253 = HEAP32[$2 >> 2] | 0;
  HEAPF64[$253 >> 3] = $252;
  $254 = +HEAPF64[$term1 >> 3];
  $255 = +Math_abs(+$254);
  $256 = +HEAPF64[$term2 >> 3];
  $257 = +Math_abs(+$256);
  $258 = 2.0 * $257;
  $259 = $255 + $258;
  $260 = 2.220446049250313e-16 * $259;
  $261 = HEAP32[$2 >> 2] | 0;
  $262 = $261 + 8 | 0;
  HEAPF64[$262 >> 3] = $260;
  $263 = HEAP32[$2 >> 2] | 0;
  $264 = +HEAPF64[$263 >> 3];
  $265 = +Math_abs(+$264);
  $266 = 4.440892098500626e-16 * $265;
  $267 = HEAP32[$2 >> 2] | 0;
  $268 = $267 + 8 | 0;
  $269 = +HEAPF64[$268 >> 3];
  $270 = $269 + $266;
  HEAPF64[$268 >> 3] = $270;
  $271 = HEAP32[$stat_sum >> 2] | 0;
  STACKTOP = sp;
  return $271 | 0;
 }
 return 0;
}
function _gsl_sf_exprel_n_e($N, $x, $result) {
 $N = $N | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $116 = 0.0, $119 = 0.0, $15 = 0.0, $184 = 0.0, $186 = 0, $192 = 0.0, $194 = 0, $2 = 0, $217 = 0, $240 = 0.0, $243 = 0, $3 = 0, $48 = 0.0, $79 = 0.0, $82 = 0.0, $99 = 0.0, $bigG_ratio = 0, $bigGsum = 0, $k = 0, $k3 = 0, $lg_N = 0, $ln_bigG_ratio_pre = 0, $ln_x = 0, $lnf_N = 0, $lnf_N1 = 0, $lnpre_err = 0, $lnpre_val = 0, $lnr_err = 0, $lnr_val = 0, $lnterm = 0, $pre = 0, $stat_eG = 0, $stat_ex = 0, $sum = 0, $term = 0, $term2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $0 = sp + 192 | 0;
 $1 = sp + 188 | 0;
 $2 = sp + 160 | 0;
 $3 = sp + 184 | 0;
 $lnf_N = sp + 144 | 0;
 $lnr_val = sp + 136 | 0;
 $lnr_err = sp + 128 | 0;
 $lnterm = sp + 120 | 0;
 $ln_x = sp + 112 | 0;
 $lnf_N1 = sp + 96 | 0;
 $lg_N = sp + 88 | 0;
 $lnpre_val = sp + 80 | 0;
 $lnpre_err = sp + 72 | 0;
 $stat_eG = sp + 180 | 0;
 $bigG_ratio = sp + 56 | 0;
 $pre = sp + 40 | 0;
 $stat_ex = sp + 176 | 0;
 $ln_bigG_ratio_pre = sp + 32 | 0;
 $bigGsum = sp + 24 | 0;
 $term = sp + 16 | 0;
 $k = sp + 172 | 0;
 $sum = sp + 8 | 0;
 $term2 = sp;
 $k3 = sp + 168 | 0;
 HEAP32[$1 >> 2] = $N;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(31048, 31024, 426, 1);
  HEAP32[$0 >> 2] = 1;
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 $15 = +Math_abs(+(+HEAPF64[$2 >> 3]));
 if ($15 < +(HEAP32[$1 >> 2] | 0) * 6055454452393343.0e-21) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$2 >> 3] / +((HEAP32[$1 >> 2] | 0) + 1 | 0) * (+HEAPF64[$2 >> 3] / +((HEAP32[$1 >> 2] | 0) + 2 | 0) + 1.0) + 1.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16;
  HEAP32[$0 >> 2] = 0;
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$0 >> 2] = _gsl_sf_exp_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$0 >> 2] = _gsl_sf_exprel_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 $48 = +HEAPF64[$2 >> 3];
 if ((HEAP32[$1 >> 2] | 0) == 2) {
  HEAP32[$0 >> 2] = _gsl_sf_exprel_2_e($48, HEAP32[$3 >> 2] | 0) | 0;
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 if ($48 > +(HEAP32[$1 >> 2] | 0)) if (-+HEAPF64[$2 >> 3] + +(HEAP32[$1 >> 2] | 0) * (+Math_log(+(+HEAPF64[$2 >> 3] / +(HEAP32[$1 >> 2] | 0))) + 1.0) < -36.04365338911715) {
  _gsl_sf_lnfact_e(HEAP32[$1 >> 2] | 0, $lnf_N) | 0;
  HEAPF64[$lnterm >> 3] = +(HEAP32[$1 >> 2] | 0) * +Math_log(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$lnr_val >> 3] = +HEAPF64[$2 >> 3] + +HEAPF64[$lnf_N >> 3] - +HEAPF64[$lnterm >> 3];
  $79 = +Math_abs(+(+HEAPF64[$2 >> 3]));
  $82 = $79 + +Math_abs(+(+HEAPF64[$lnf_N >> 3]));
  HEAPF64[$lnr_err >> 3] = ($82 + +Math_abs(+(+HEAPF64[$lnterm >> 3]))) * 2.220446049250313e-16;
  HEAPF64[$lnr_err >> 3] = +HEAPF64[$lnr_err >> 3] + +HEAPF64[$lnf_N + 8 >> 3];
  HEAP32[$0 >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lnr_val >> 3], +HEAPF64[$lnr_err >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 $99 = +HEAPF64[$2 >> 3];
 if (!(+HEAPF64[$2 >> 3] > +(HEAP32[$1 >> 2] | 0))) {
  if ($99 > +(HEAP32[$1 >> 2] | 0) * -10.0) {
   HEAP32[$0 >> 2] = _exprel_n_CF(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $243 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $243 | 0;
  }
  HEAPF64[$sum >> 3] = 1.0;
  HEAPF64[$term2 >> 3] = 1.0;
  HEAP32[$k3 >> 2] = 1;
  while (1) {
   $217 = HEAP32[$1 >> 2] | 0;
   if ((HEAP32[$k3 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$term2 >> 3] = +HEAPF64[$term2 >> 3] * (+($217 - (HEAP32[$k3 >> 2] | 0) | 0) / +HEAPF64[$2 >> 3]);
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term2 >> 3];
   HEAP32[$k3 >> 2] = (HEAP32[$k3 >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +(0 - $217 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$sum >> 3];
  $240 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $240;
  HEAP32[$0 >> 2] = 0;
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 HEAPF64[$ln_x >> 3] = +Math_log(+$99);
 _gsl_sf_lnfact_e(HEAP32[$1 >> 2] | 0, $lnf_N1) | 0;
 HEAPF64[$lg_N >> 3] = +HEAPF64[$lnf_N1 >> 3] - +Math_log(+(+(HEAP32[$1 >> 2] | 0)));
 HEAPF64[$lnpre_val >> 3] = +HEAPF64[$2 >> 3] + +HEAPF64[$lnf_N1 >> 3] - +(HEAP32[$1 >> 2] | 0) * +HEAPF64[$ln_x >> 3];
 $116 = +Math_abs(+(+HEAPF64[$2 >> 3]));
 $119 = $116 + +Math_abs(+(+HEAPF64[$lnf_N1 >> 3]));
 HEAPF64[$lnpre_err >> 3] = ($119 + +Math_abs(+(+(HEAP32[$1 >> 2] | 0) * +HEAPF64[$ln_x >> 3]))) * 2.220446049250313e-16;
 HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lnpre_err >> 3] + +HEAPF64[$lnf_N1 + 8 >> 3];
 if (!(+HEAPF64[$lnpre_val >> 3] < 704.782712893384)) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31008, 31024, 508, 16);
  HEAP32[$0 >> 2] = 16;
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 HEAP32[$stat_ex >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], $pre) | 0;
 HEAPF64[$ln_bigG_ratio_pre >> 3] = -+HEAPF64[$2 >> 3] + +((HEAP32[$1 >> 2] | 0) - 1 | 0) * +HEAPF64[$ln_x >> 3] - +HEAPF64[$lg_N >> 3];
 HEAPF64[$bigGsum >> 3] = 1.0;
 HEAPF64[$term >> 3] = 1.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * (+((HEAP32[$1 >> 2] | 0) - (HEAP32[$k >> 2] | 0) | 0) / +HEAPF64[$2 >> 3]);
  HEAPF64[$bigGsum >> 3] = +HEAPF64[$bigGsum >> 3] + +HEAPF64[$term >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[$stat_eG >> 2] = _gsl_sf_exp_mult_e(+HEAPF64[$ln_bigG_ratio_pre >> 3], +HEAPF64[$bigGsum >> 3], $bigG_ratio) | 0;
 if (!(HEAP32[$stat_eG >> 2] | 0)) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre >> 3] * (1.0 - +HEAPF64[$bigG_ratio >> 3]);
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre >> 3] * (+HEAPF64[$bigG_ratio + 8 >> 3] + 4.440892098500626e-16);
  $184 = +HEAPF64[$pre + 8 >> 3] * +Math_abs(+(1.0 - +HEAPF64[$bigG_ratio >> 3]));
  $186 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$186 >> 3] = +HEAPF64[$186 >> 3] + $184;
  $192 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $194 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$194 >> 3] = +HEAPF64[$194 >> 3] + $192;
  HEAP32[$0 >> 2] = HEAP32[$stat_ex >> 2];
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 } else {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_eG >> 2];
  $243 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $243 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_JY_mu_restricted($mu, $x, $Jmu, $Jmup1, $Ymu, $Ymup1) {
 $mu = +$mu;
 $x = +$x;
 $Jmu = $Jmu | 0;
 $Jmup1 = $Jmup1 | 0;
 $Ymu = $Ymu | 0;
 $Ymup1 = $Ymup1 | 0;
 var $0 = 0, $1 = 0, $103 = 0, $106 = 0.0, $107 = 0.0, $135 = 0.0, $140 = 0.0, $149 = 0.0, $162 = 0.0, $195 = 0.0, $2 = 0, $200 = 0.0, $210 = 0, $234 = 0, $242 = 0, $250 = 0, $251 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $78 = 0.0, $80 = 0, $90 = 0, $J_ratio = 0, $J_sgn = 0, $Jmup2 = 0, $Jprime_J_ratio = 0, $P = 0, $Q = 0, $c = 0, $gamma = 0, $stat_CF1 = 0, $stat_CF2 = 0, $stat_J = 0, $stat_J0 = 0, $stat_J1 = 0, $stat_J11 = 0, $stat_J2 = 0, $stat_Y = 0, $stat_Y0 = 0, $stat_Y1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 144 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 140 | 0;
 $4 = sp + 136 | 0;
 $5 = sp + 132 | 0;
 $6 = sp + 128 | 0;
 $stat_Y = sp + 124 | 0;
 $stat_J = sp + 120 | 0;
 $Jmup2 = sp + 56 | 0;
 $stat_J1 = sp + 116 | 0;
 $stat_J2 = sp + 112 | 0;
 $c = sp + 48 | 0;
 $P = sp + 40 | 0;
 $Q = sp + 32 | 0;
 $J_ratio = sp + 24 | 0;
 $J_sgn = sp + 16 | 0;
 $stat_CF1 = sp + 108 | 0;
 $stat_CF2 = sp + 104 | 0;
 $Jprime_J_ratio = sp + 8 | 0;
 $gamma = sp;
 $stat_J0 = sp + 100 | 0;
 $stat_J11 = sp + 96 | 0;
 $stat_Y0 = sp + 92 | 0;
 $stat_Y1 = sp + 88 | 0;
 HEAPF64[$1 >> 3] = $mu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $Jmu;
 HEAP32[$4 >> 2] = $Jmup1;
 HEAP32[$5 >> 2] = $Ymu;
 HEAP32[$6 >> 2] = $Ymup1;
 if (!(+HEAPF64[$2 >> 3] < 0.0)) if (!(+Math_abs(+(+HEAPF64[$1 >> 3])) > .5)) {
  if (+HEAPF64[$2 >> 3] == 0.0) {
   $28 = HEAP32[$3 >> 2] | 0;
   if (+HEAPF64[$1 >> 3] == 0.0) {
    HEAPF64[$28 >> 3] = 1.0;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   } else {
    HEAPF64[$28 >> 3] = 0.0;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   }
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = 0.0;
   _gsl_error(10696, 10680, 464, 1);
   HEAP32[$0 >> 2] = 1;
   $251 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $251 | 0;
  }
  if (+HEAPF64[$2 >> 3] < 2.0) {
   HEAP32[$stat_J1 >> 2] = _gsl_sf_bessel_IJ_taylor_e(+HEAPF64[$1 >> 3] + 1.0, +HEAPF64[$2 >> 3], -1, 100, 2.220446049250313e-16, HEAP32[$4 >> 2] | 0) | 0;
   HEAP32[$stat_J2 >> 2] = _gsl_sf_bessel_IJ_taylor_e(+HEAPF64[$1 >> 3] + 2.0, +HEAPF64[$2 >> 3], -1, 100, 2.220446049250313e-16, $Jmup2) | 0;
   HEAPF64[$c >> 3] = (+HEAPF64[$1 >> 3] + 1.0) * 2.0 / +HEAPF64[$2 >> 3];
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$c >> 3] * +HEAPF64[HEAP32[$4 >> 2] >> 3] - +HEAPF64[$Jmup2 >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] + +HEAPF64[$Jmup2 + 8 >> 3];
   $78 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $80 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$80 >> 3] = +HEAPF64[$80 >> 3] + $78;
   if (HEAP32[$stat_J1 >> 2] | 0) $90 = HEAP32[$stat_J1 >> 2] | 0; else $90 = (HEAP32[$stat_J2 >> 2] | 0) != 0 ? HEAP32[$stat_J2 >> 2] | 0 : 0;
   HEAP32[$stat_J >> 2] = $90;
   HEAP32[$stat_Y >> 2] = _gsl_sf_bessel_Y_temme(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
   if (HEAP32[$stat_J >> 2] | 0) $103 = HEAP32[$stat_J >> 2] | 0; else $103 = (HEAP32[$stat_Y >> 2] | 0) != 0 ? HEAP32[$stat_Y >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $103;
   $251 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $251 | 0;
  }
  $106 = +HEAPF64[$1 >> 3];
  $107 = +HEAPF64[$2 >> 3];
  if (+HEAPF64[$2 >> 3] < 1.0e3) {
   HEAP32[$stat_CF1 >> 2] = _gsl_sf_bessel_J_CF1($106, $107, $J_ratio, $J_sgn) | 0;
   HEAP32[$stat_CF2 >> 2] = _gsl_sf_bessel_JY_steed_CF2(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $P, $Q) | 0;
   HEAPF64[$Jprime_J_ratio >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3] - +HEAPF64[$J_ratio >> 3];
   HEAPF64[$gamma >> 3] = (+HEAPF64[$P >> 3] - +HEAPF64[$Jprime_J_ratio >> 3]) / +HEAPF64[$Q >> 3];
   $135 = +HEAPF64[$J_sgn >> 3] * +Math_sqrt(+(2.0 / (+HEAPF64[$2 >> 3] * 3.141592653589793) / (+HEAPF64[$Q >> 3] + +HEAPF64[$gamma >> 3] * (+HEAPF64[$P >> 3] - +HEAPF64[$Jprime_J_ratio >> 3]))));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = $135;
   $140 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 8.881784197001252e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $140;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$J_ratio >> 3] * +HEAPF64[HEAP32[$3 >> 2] >> 3];
   $149 = +Math_abs(+(+HEAPF64[$J_ratio >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $149 * +HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3];
   HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$gamma >> 3] * +HEAPF64[HEAP32[$3 >> 2] >> 3];
   $162 = +Math_abs(+(+HEAPF64[$gamma >> 3]));
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $162 * +HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3];
   HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[HEAP32[$5 >> 2] >> 3] * (+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3] - +HEAPF64[$P >> 3] - +HEAPF64[$Q >> 3] / +HEAPF64[$gamma >> 3]);
   $195 = +HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] * +Math_abs(+(+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3] - +HEAPF64[$P >> 3] - +HEAPF64[$Q >> 3] / +HEAPF64[$gamma >> 3]));
   $200 = $195 + +Math_abs(+(+HEAPF64[HEAP32[$6 >> 2] >> 3])) * 8.881784197001252e-16;
   HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = $200;
   if (HEAP32[$stat_CF1 >> 2] | 0) $210 = HEAP32[$stat_CF1 >> 2] | 0; else $210 = (HEAP32[$stat_CF2 >> 2] | 0) != 0 ? HEAP32[$stat_CF2 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $210;
   $251 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $251 | 0;
  }
  HEAP32[$stat_J0 >> 2] = _gsl_sf_bessel_Jnu_asympx_e($106, $107, HEAP32[$3 >> 2] | 0) | 0;
  HEAP32[$stat_J11 >> 2] = _gsl_sf_bessel_Jnu_asympx_e(+HEAPF64[$1 >> 3] + 1.0, +HEAPF64[$2 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  HEAP32[$stat_Y0 >> 2] = _gsl_sf_bessel_Ynu_asympx_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$5 >> 2] | 0) | 0;
  HEAP32[$stat_Y1 >> 2] = _gsl_sf_bessel_Ynu_asympx_e(+HEAPF64[$1 >> 3] + 1.0, +HEAPF64[$2 >> 3], HEAP32[$6 >> 2] | 0) | 0;
  if (HEAP32[$stat_J0 >> 2] | 0) $234 = HEAP32[$stat_J0 >> 2] | 0; else $234 = (HEAP32[$stat_J11 >> 2] | 0) != 0 ? HEAP32[$stat_J11 >> 2] | 0 : 0;
  HEAP32[$stat_J >> 2] = $234;
  if (HEAP32[$stat_Y0 >> 2] | 0) $242 = HEAP32[$stat_Y0 >> 2] | 0; else $242 = (HEAP32[$stat_Y1 >> 2] | 0) != 0 ? HEAP32[$stat_Y1 >> 2] | 0 : 0;
  HEAP32[$stat_Y >> 2] = $242;
  if (HEAP32[$stat_J >> 2] | 0) $250 = HEAP32[$stat_J >> 2] | 0; else $250 = (HEAP32[$stat_Y >> 2] | 0) != 0 ? HEAP32[$stat_Y >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $250;
  $251 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $251 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = 0.0;
 _gsl_error(10696, 10680, 447, 1);
 HEAP32[$0 >> 2] = 1;
 $251 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $251 | 0;
}
function _gsl_sf_bessel_zero_Jnu_e($nu, $s, $result) {
 $nu = +$nu;
 $s = $s | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $122 = 0, $132 = 0, $158 = 0, $180 = 0.0, $189 = 0.0, $191 = 0, $197 = 0.0, $2 = 0, $226 = 0.0, $228 = 0, $232 = 0, $25 = 0, $3 = 0, $73 = 0, $L = 0, $L10 = 0, $L14 = 0, $L2 = 0, $L6 = 0, $arg = 0, $arg11 = 0, $arg15 = 0, $arg3 = 0, $arg7 = 0, $as = 0, $beta = 0, $c = 0, $c1 = 0, $c13 = 0, $c5 = 0, $c9 = 0, $chb = 0, $chb12 = 0, $chb16 = 0, $chb4 = 0, $chb8 = 0, $f1 = 0, $mc = 0, $minus_zeta = 0, $rat12 = 0, $stat_as = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 212 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 208 | 0;
 $3 = sp + 204 | 0;
 $c = sp + 200 | 0;
 $L = sp + 196 | 0;
 $arg = sp + 144 | 0;
 $chb = sp + 136 | 0;
 $c1 = sp + 192 | 0;
 $L2 = sp + 188 | 0;
 $arg3 = sp + 128 | 0;
 $chb4 = sp + 120 | 0;
 $c5 = sp + 184 | 0;
 $L6 = sp + 180 | 0;
 $arg7 = sp + 112 | 0;
 $chb8 = sp + 104 | 0;
 $c9 = sp + 176 | 0;
 $L10 = sp + 172 | 0;
 $arg11 = sp + 96 | 0;
 $chb12 = sp + 88 | 0;
 $c13 = sp + 168 | 0;
 $L14 = sp + 164 | 0;
 $arg15 = sp + 80 | 0;
 $chb16 = sp + 72 | 0;
 $beta = sp + 64 | 0;
 $mc = sp + 56 | 0;
 $rat12 = sp + 40 | 0;
 $as = sp + 24 | 0;
 $stat_as = sp + 160 | 0;
 $minus_zeta = sp + 16 | 0;
 $z = sp + 8 | 0;
 $f1 = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= -1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(20184, 20040, 1101, 1);
  HEAP32[$0 >> 2] = 1;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  if (+HEAPF64[$1 >> 3] == 0.0) {
   _gsl_error(20200, 20040, 1107, 4);
   HEAP32[$0 >> 2] = 4;
   $232 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $232 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $232 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $232 | 0;
  }
 }
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(20232, 20040, 1115, 24);
  HEAP32[$0 >> 2] = 24;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) == 1) {
  $25 = HEAP32[$2 >> 2] | 0;
  if (+HEAPF64[$1 >> 3] < 2.0) {
   HEAP32[$c >> 2] = HEAP32[20248 + ($25 << 2) >> 2];
   HEAP32[$L >> 2] = HEAP32[20336 + (HEAP32[$2 >> 2] << 2) >> 2];
   HEAPF64[$arg >> 3] = +HEAPF64[$1 >> 3] / 2.0;
   HEAPF64[$chb >> 3] = +_clenshaw(HEAP32[$c >> 2] | 0, (HEAP32[$L >> 2] | 0) - 1 | 0, +HEAPF64[$arg >> 3]);
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$chb >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3] * 2.0e-15;
  } else {
   HEAP32[$c1 >> 2] = HEAP32[20424 + ($25 << 2) >> 2];
   HEAP32[$L2 >> 2] = HEAP32[20472 + (HEAP32[$2 >> 2] << 2) >> 2];
   HEAPF64[$arg3 >> 3] = +Math_pow(+(2.0 / +HEAPF64[$1 >> 3]), .6666666666666666);
   HEAPF64[$chb4 >> 3] = +_clenshaw(HEAP32[$c1 >> 2] | 0, (HEAP32[$L2 >> 2] | 0) - 1 | 0, +HEAPF64[$arg3 >> 3]);
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$chb4 >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3] * 2.0e-15;
  }
  HEAP32[$0 >> 2] = 0;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) >>> 0 <= 10) {
  $73 = HEAP32[$2 >> 2] | 0;
  if (+HEAPF64[$1 >> 3] < +((HEAP32[$2 >> 2] | 0) >>> 0)) {
   HEAP32[$c5 >> 2] = HEAP32[20248 + ($73 << 2) >> 2];
   HEAP32[$L6 >> 2] = HEAP32[20336 + (HEAP32[$2 >> 2] << 2) >> 2];
   HEAPF64[$arg7 >> 3] = +HEAPF64[$1 >> 3] / +((HEAP32[$2 >> 2] | 0) >>> 0);
   HEAPF64[$chb8 >> 3] = +_clenshaw(HEAP32[$c5 >> 2] | 0, (HEAP32[$L6 >> 2] | 0) - 1 | 0, +HEAPF64[$arg7 >> 3]);
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$chb8 >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3] * 2.0e-15;
  } else {
   HEAP32[$c9 >> 2] = HEAP32[20424 + ($73 << 2) >> 2];
   HEAP32[$L10 >> 2] = HEAP32[20472 + (HEAP32[$2 >> 2] << 2) >> 2];
   HEAPF64[$arg11 >> 3] = +Math_pow(+(+((HEAP32[$2 >> 2] | 0) >>> 0) / +HEAPF64[$1 >> 3]), .6666666666666666);
   HEAPF64[$chb12 >> 3] = +_clenshaw(HEAP32[$c9 >> 2] | 0, (HEAP32[$L10 >> 2] | 0) - 1 | 0, +HEAPF64[$arg11 >> 3]);
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$chb12 >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3] * 2.0e-15;
   if ((HEAP32[$2 >> 2] | 0) == 5) {
    $122 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$122 >> 3] = +HEAPF64[$122 >> 3] * 5.0e6;
   }
  }
  HEAP32[$0 >> 2] = 0;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 $132 = HEAP32[$2 >> 2] | 0;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 <= 20 ? +((HEAP32[$2 >> 2] | 0) >>> 0) > +HEAPF64[$1 >> 3] * .5 : 0) {
  HEAP32[$c13 >> 2] = HEAP32[20248 + ($132 << 2) >> 2];
  HEAP32[$L14 >> 2] = HEAP32[20336 + (HEAP32[$2 >> 2] << 2) >> 2];
  HEAPF64[$arg15 >> 3] = +HEAPF64[$1 >> 3] / (+((HEAP32[$2 >> 2] | 0) >>> 0) * 2.0);
  HEAPF64[$chb16 >> 3] = +_clenshaw(HEAP32[$c13 >> 2] | 0, (HEAP32[$L14 >> 2] | 0) - 1 | 0, +HEAPF64[$arg15 >> 3]);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$chb16 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$chb16 >> 3] * 4.0e-15;
  HEAP32[$0 >> 2] = 0;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 $158 = HEAP32[$2 >> 2] | 0;
 if (+($132 >>> 0) > +HEAPF64[$1 >> 3] * 2.0) {
  HEAPF64[$beta >> 3] = (+($158 >>> 0) + +HEAPF64[$1 >> 3] * .5 - .25) * 3.141592653589793;
  HEAPF64[$mc >> 3] = +_mcmahon_correction(+HEAPF64[$1 >> 3] * 4.0 * +HEAPF64[$1 >> 3], +HEAPF64[$beta >> 3]);
  _gsl_sf_pow_int_e(+HEAPF64[$1 >> 3] / +HEAPF64[$beta >> 3], 14, $rat12) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$beta >> 3] * +HEAPF64[$mc >> 3];
  $180 = +Math_abs(+(+HEAPF64[$beta >> 3])) * 4.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $180 * +HEAPF64[$rat12 >> 3];
  $189 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3] * 2.220446049250313e-16)) * 4.0;
  $191 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$191 >> 3] = +HEAPF64[$191 >> 3] + $189;
  HEAP32[$0 >> 2] = 0;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 } else {
  HEAP32[$stat_as >> 2] = _gsl_sf_airy_zero_Ai_e($158, $as) | 0;
  $197 = -+Math_pow(+(+HEAPF64[$1 >> 3]), -.6666666666666666);
  HEAPF64[$minus_zeta >> 3] = $197 * +HEAPF64[$as >> 3];
  HEAPF64[$z >> 3] = +_gsl_sf_bessel_Olver_zofmzeta(+HEAPF64[$minus_zeta >> 3]);
  HEAPF64[$f1 >> 3] = +_olver_f1(+HEAPF64[$z >> 3], +HEAPF64[$minus_zeta >> 3]);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$z >> 3] + +HEAPF64[$f1 >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = .001 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  $226 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $228 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$228 >> 3] = +HEAPF64[$228 >> 3] + $226;
  HEAP32[$0 >> 2] = HEAP32[$stat_as >> 2];
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 return 0;
}
function _expint_E1_impl($x, $result, $scale) {
 $x = +$x;
 $result = $result | 0;
 $scale = $scale | 0;
 var $0 = 0, $1 = 0, $112 = 0.0, $118 = 0.0, $120 = 0, $129 = 0.0, $137 = 0.0, $155 = 0.0, $161 = 0.0, $163 = 0, $167 = 0.0, $17 = 0.0, $175 = 0.0, $194 = 0.0, $196 = 0, $2 = 0, $211 = 0.0, $234 = 0.0, $236 = 0, $248 = 0, $25 = 0.0, $3 = 0, $43 = 0.0, $47 = 0.0, $49 = 0, $53 = 0.0, $61 = 0.0, $80 = 0.0, $82 = 0, $86 = 0.0, $94 = 0.0, $ln_term = 0, $ln_term4 = 0, $result_c = 0, $result_c10 = 0, $result_c2 = 0, $result_c3 = 0, $result_c6 = 0, $result_c8 = 0, $s = 0, $s1 = 0, $s7 = 0, $s9 = 0, $scale_factor = 0, $scale_factor5 = 0, $xmax = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $0 = sp + 192 | 0;
 $1 = sp + 176 | 0;
 $2 = sp + 188 | 0;
 $3 = sp + 184 | 0;
 $xmax = sp + 160 | 0;
 $s = sp + 152 | 0;
 $result_c = sp + 136 | 0;
 $s1 = sp + 128 | 0;
 $result_c2 = sp + 112 | 0;
 $ln_term = sp + 104 | 0;
 $scale_factor = sp + 96 | 0;
 $result_c3 = sp + 80 | 0;
 $ln_term4 = sp + 72 | 0;
 $scale_factor5 = sp + 64 | 0;
 $result_c6 = sp + 48 | 0;
 $s7 = sp + 40 | 0;
 $result_c8 = sp + 24 | 0;
 $s9 = sp + 16 | 0;
 $result_c10 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$3 >> 2] = $scale;
 HEAPF64[sp + 168 >> 3] = 708.3964185322641;
 HEAPF64[$xmax >> 3] = 708.3964185322641 - +Math_log(708.3964185322641);
 if (+HEAPF64[$1 >> 3] < -+HEAPF64[$xmax >> 3]) if (!(HEAP32[$3 >> 2] | 0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31464, 31312, 298, 16);
  HEAP32[$0 >> 2] = 16;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 }
 $17 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] <= -10.0) {
  if (HEAP32[$3 >> 2] | 0) $25 = 1.0; else $25 = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$s >> 3] = 1.0 / $17 * $25;
  _cheb_eval_e332(32840, 20.0 / +HEAPF64[$1 >> 3] + 1.0, $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$s >> 3] * (+HEAPF64[$result_c >> 3] + 1.0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$s >> 3] * +HEAPF64[$result_c + 8 >> 3];
  $43 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0) * 4.440892098500626e-16;
  $47 = $43 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  $49 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$49 >> 3] = +HEAPF64[$49 >> 3] + $47;
  HEAP32[$0 >> 2] = 0;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 }
 $53 = +HEAPF64[$1 >> 3];
 if ($17 <= -4.0) {
  if (HEAP32[$3 >> 2] | 0) $61 = 1.0; else $61 = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$s1 >> 3] = 1.0 / $53 * $61;
  _cheb_eval_e332(32496, (40.0 / +HEAPF64[$1 >> 3] + 7.0) / 3.0, $result_c2) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$s1 >> 3] * (+HEAPF64[$result_c2 >> 3] + 1.0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$s1 >> 3] * +HEAPF64[$result_c2 + 8 >> 3];
  $80 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $82 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$82 >> 3] = +HEAPF64[$82 >> 3] + $80;
  HEAP32[$0 >> 2] = 0;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 }
 $86 = +HEAPF64[$1 >> 3];
 if ($53 <= -1.0) {
  HEAPF64[$ln_term >> 3] = -+Math_log(+(+Math_abs(+$86)));
  if (HEAP32[$3 >> 2] | 0) $94 = +Math_exp(+(+HEAPF64[$1 >> 3])); else $94 = 1.0;
  HEAPF64[$scale_factor >> 3] = $94;
  _cheb_eval_e332(32264, (+HEAPF64[$1 >> 3] * 2.0 + 5.0) / 3.0, $result_c3) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$scale_factor >> 3] * (+HEAPF64[$ln_term >> 3] + +HEAPF64[$result_c3 >> 3]);
  $112 = +HEAPF64[$scale_factor >> 3] * (+HEAPF64[$result_c3 + 8 >> 3] + +Math_abs(+(+HEAPF64[$ln_term >> 3])) * 2.220446049250313e-16);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $112;
  $118 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $120 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$120 >> 3] = +HEAPF64[$120 >> 3] + $118;
  HEAP32[$0 >> 2] = 0;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 }
 if ($86 == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(31432, 31312, 329, 1);
  HEAP32[$0 >> 2] = 1;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 }
 $129 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] <= 1.0) {
  HEAPF64[$ln_term4 >> 3] = -+Math_log(+(+Math_abs(+$129)));
  if (HEAP32[$3 >> 2] | 0) $137 = +Math_exp(+(+HEAPF64[$1 >> 3])); else $137 = 1.0;
  HEAPF64[$scale_factor5 >> 3] = $137;
  _cheb_eval_e332(32080, +HEAPF64[$1 >> 3], $result_c6) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$scale_factor5 >> 3] * (+HEAPF64[$ln_term4 >> 3] - .6875 + +HEAPF64[$1 >> 3] + +HEAPF64[$result_c6 >> 3]);
  $155 = +HEAPF64[$scale_factor5 >> 3] * (+HEAPF64[$result_c6 + 8 >> 3] + +Math_abs(+(+HEAPF64[$ln_term4 >> 3])) * 2.220446049250313e-16);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $155;
  $161 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $163 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$163 >> 3] = +HEAPF64[$163 >> 3] + $161;
  HEAP32[$0 >> 2] = 0;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 }
 $167 = +HEAPF64[$1 >> 3];
 if ($129 <= 4.0) {
  if (HEAP32[$3 >> 2] | 0) $175 = 1.0; else $175 = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$s7 >> 3] = 1.0 / $167 * $175;
  _cheb_eval_e332(31920, (8.0 / +HEAPF64[$1 >> 3] - 5.0) / 3.0, $result_c8) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$s7 >> 3] * (+HEAPF64[$result_c8 >> 3] + 1.0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$s7 >> 3] * +HEAPF64[$result_c8 + 8 >> 3];
  $194 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $196 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$196 >> 3] = +HEAPF64[$196 >> 3] + $194;
  HEAP32[$0 >> 2] = 0;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 }
 if (!($167 <= +HEAPF64[$xmax >> 3])) if (!(HEAP32[$3 >> 2] | 0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(31448, 31312, 363, 15);
  HEAP32[$0 >> 2] = 15;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 }
 if (HEAP32[$3 >> 2] | 0) $211 = 1.0; else $211 = +Math_exp(+-+HEAPF64[$1 >> 3]);
 HEAPF64[$s9 >> 3] = 1.0 / +HEAPF64[$1 >> 3] * $211;
 _cheb_eval_e332(31688, 8.0 / +HEAPF64[$1 >> 3] - 1.0, $result_c10) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$s9 >> 3] * (+HEAPF64[$result_c10 >> 3] + 1.0);
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$s9 >> 3] * (+HEAPF64[$result_c10 + 8 >> 3] + 2.220446049250313e-16);
 $234 = (+HEAPF64[$1 >> 3] + 1.0) * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
 $236 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$236 >> 3] = +HEAPF64[$236 >> 3] + $234;
 if (+HEAPF64[HEAP32[$2 >> 2] >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(31448, 31312, 358, 15);
  HEAP32[$0 >> 2] = 15;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $248 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $248 | 0;
 }
 return 0;
}
function _gsl_sf_legendre_sphPlm_e($l, $m, $x, $result) {
 $l = $l | 0;
 $m = $m | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $112 = 0.0, $123 = 0.0, $130 = 0.0, $143 = 0.0, $145 = 0, $159 = 0.0, $161 = 0, $2 = 0, $240 = 0.0, $250 = 0.0, $278 = 0.0, $281 = 0, $3 = 0, $4 = 0, $41 = 0.0, $43 = 0, $83 = 0.0, $95 = 0.0, $P = 0, $ell = 0, $ex_pre = 0, $factor1 = 0, $factor2 = 0, $lncirc = 0, $lnpoch = 0, $lnpre_err = 0, $lnpre_val = 0, $pre = 0, $rat1 = 0, $rat2 = 0, $sgn = 0, $sr = 0, $stat_P = 0, $y_ell = 0, $y_ell_err = 0, $y_mm = 0, $y_mm_err = 0, $y_mmp1 = 0, $y_mmp1_err = 0, $y_mmp1_factor = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 220 | 0;
 $1 = sp + 216 | 0;
 $2 = sp + 212 | 0;
 $3 = sp + 192 | 0;
 $4 = sp + 208 | 0;
 $P = sp + 176 | 0;
 $stat_P = sp + 204 | 0;
 $pre = sp + 168 | 0;
 $lncirc = sp + 152 | 0;
 $lnpoch = sp + 136 | 0;
 $lnpre_val = sp + 128 | 0;
 $lnpre_err = sp + 120 | 0;
 $ex_pre = sp + 104 | 0;
 $sr = sp + 96 | 0;
 $sgn = sp + 88 | 0;
 $y_mmp1_factor = sp + 80 | 0;
 $y_mm = sp + 72 | 0;
 $y_mm_err = sp + 64 | 0;
 $y_mmp1 = sp + 56 | 0;
 $y_mmp1_err = sp + 48 | 0;
 $y_ell = sp + 40 | 0;
 $y_ell_err = sp + 32 | 0;
 $ell = sp + 200 | 0;
 $rat1 = sp + 24 | 0;
 $rat2 = sp + 16 | 0;
 $factor1 = sp + 8 | 0;
 $factor2 = sp;
 HEAP32[$1 >> 2] = $l;
 HEAP32[$2 >> 2] = $m;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if ((HEAP32[$2 >> 2] | 0) >= 0) if ((HEAP32[$1 >> 2] | 0) >= (HEAP32[$2 >> 2] | 0)) if (!(+HEAPF64[$3 >> 3] < -1.0 | +HEAPF64[$3 >> 3] > 1.0)) {
  if (!(HEAP32[$2 >> 2] | 0)) {
   HEAP32[$stat_P >> 2] = _gsl_sf_legendre_Pl_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$3 >> 3], $P) | 0;
   HEAPF64[$pre >> 3] = +Math_sqrt(+((+(HEAP32[$1 >> 2] | 0) * 2.0 + 1.0) / 12.566370614359172));
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$P >> 3];
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$P + 8 >> 3];
   $41 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   $43 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$43 >> 3] = +HEAPF64[$43 >> 3] + $41;
   HEAP32[$0 >> 2] = HEAP32[$stat_P >> 2];
   $281 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $281 | 0;
  }
  if (+HEAPF64[$3 >> 3] == 1.0 | +HEAPF64[$3 >> 3] == -1.0) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $281 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $281 | 0;
  }
  HEAPF64[$sgn >> 3] = (HEAP32[$2 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0;
  HEAPF64[$y_mmp1_factor >> 3] = +HEAPF64[$3 >> 3] * +Math_sqrt(+(+(HEAP32[$2 >> 2] | 0) * 2.0 + 3.0));
  _gsl_sf_log_1plusx_e(-+HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3], $lncirc) | 0;
  _gsl_sf_lnpoch_e(+(HEAP32[$2 >> 2] | 0), .5, $lnpoch) | 0;
  HEAPF64[$lnpre_val >> 3] = (+HEAPF64[$lnpoch >> 3] + +(HEAP32[$2 >> 2] | 0) * +HEAPF64[$lncirc >> 3]) * .5 + -.28618247146235004;
  $83 = +Math_abs(+(+(HEAP32[$2 >> 2] | 0)));
  HEAPF64[$lnpre_err >> 3] = (+HEAPF64[$lnpoch + 8 >> 3] + $83 * +HEAPF64[$lncirc + 8 >> 3]) * .5 + 6.354527381232656e-17;
  HEAPF64[$ex_pre >> 3] = +Math_exp(+(+HEAPF64[$lnpre_val >> 3]));
  $95 = (+_sinh(+(+HEAPF64[$lnpre_err >> 3])) + 2.220446049250313e-16) * 2.0;
  HEAPF64[$ex_pre + 8 >> 3] = $95 * +HEAPF64[$ex_pre >> 3];
  HEAPF64[$sr >> 3] = +Math_sqrt(+((1.0 / +(HEAP32[$2 >> 2] | 0) + 2.0) / 12.566370614359172));
  HEAPF64[$y_mm >> 3] = +HEAPF64[$sgn >> 3] * +HEAPF64[$sr >> 3] * +HEAPF64[$ex_pre >> 3];
  $112 = +Math_abs(+(+HEAPF64[$y_mm >> 3])) * 4.440892098500626e-16;
  HEAPF64[$y_mm_err >> 3] = $112 + +HEAPF64[$sr >> 3] * +HEAPF64[$ex_pre + 8 >> 3];
  $123 = 1.0 / (+Math_abs(+(1.0 - +HEAPF64[$3 >> 3])) + 2.220446049250313e-16) + 1.0;
  HEAPF64[$y_mm_err >> 3] = +HEAPF64[$y_mm_err >> 3] * $123;
  HEAPF64[$y_mmp1 >> 3] = +HEAPF64[$y_mmp1_factor >> 3] * +HEAPF64[$y_mm >> 3];
  $130 = +Math_abs(+(+HEAPF64[$y_mmp1_factor >> 3]));
  HEAPF64[$y_mmp1_err >> 3] = $130 * +HEAPF64[$y_mm_err >> 3];
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$y_mm >> 3];
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$y_mm_err >> 3];
   $143 = +Math_abs(+(+HEAPF64[$y_mm >> 3])) * 4.440892098500626e-16;
   $145 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$145 >> 3] = +HEAPF64[$145 >> 3] + $143;
   HEAP32[$0 >> 2] = 0;
   $281 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $281 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == ((HEAP32[$2 >> 2] | 0) + 1 | 0)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$y_mmp1 >> 3];
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$y_mmp1_err >> 3];
   $159 = +Math_abs(+(+HEAPF64[$y_mmp1 >> 3])) * 4.440892098500626e-16;
   $161 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$161 >> 3] = +HEAPF64[$161 >> 3] + $159;
   HEAP32[$0 >> 2] = 0;
   $281 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $281 | 0;
  }
  HEAPF64[$y_ell >> 3] = 0.0;
  HEAP32[$ell >> 2] = (HEAP32[$2 >> 2] | 0) + 2;
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$rat1 >> 3] = +((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / +((HEAP32[$ell >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0);
   HEAPF64[$rat2 >> 3] = (+((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) - 1.0) / (+((HEAP32[$ell >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0) - 1.0);
   HEAPF64[$factor1 >> 3] = +Math_sqrt(+(+HEAPF64[$rat1 >> 3] * (+(HEAP32[$ell >> 2] | 0) * 2.0 + 1.0) * (+(HEAP32[$ell >> 2] | 0) * 2.0 - 1.0)));
   HEAPF64[$factor2 >> 3] = +Math_sqrt(+(+HEAPF64[$rat1 >> 3] * +HEAPF64[$rat2 >> 3] * (+(HEAP32[$ell >> 2] | 0) * 2.0 + 1.0) / (+(HEAP32[$ell >> 2] | 0) * 2.0 - 3.0)));
   HEAPF64[$y_ell >> 3] = (+HEAPF64[$3 >> 3] * +HEAPF64[$y_mmp1 >> 3] * +HEAPF64[$factor1 >> 3] - (+((HEAP32[$ell >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0) - 1.0) * +HEAPF64[$y_mm >> 3] * +HEAPF64[$factor2 >> 3]) / +((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0);
   HEAPF64[$y_mm >> 3] = +HEAPF64[$y_mmp1 >> 3];
   HEAPF64[$y_mmp1 >> 3] = +HEAPF64[$y_ell >> 3];
   $240 = +Math_abs(+(+HEAPF64[$3 >> 3] * +HEAPF64[$factor1 >> 3]));
   $250 = +Math_abs(+((+((HEAP32[$ell >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0) - 1.0) * +HEAPF64[$factor2 >> 3]));
   HEAPF64[$y_ell_err >> 3] = ($240 * +HEAPF64[$y_mmp1_err >> 3] + $250 * +HEAPF64[$y_mm_err >> 3]) * .5 / +Math_abs(+(+((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0)));
   HEAPF64[$y_mm_err >> 3] = +HEAPF64[$y_mmp1_err >> 3];
   HEAPF64[$y_mmp1_err >> 3] = +HEAPF64[$y_ell_err >> 3];
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$y_ell >> 3];
  $278 = +HEAPF64[$y_ell_err >> 3] + (+((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) * .5 + 1.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$y_ell >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $278;
  HEAP32[$0 >> 2] = 0;
  $281 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $281 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(53496, 53512, 508, 1);
 HEAP32[$0 >> 2] = 1;
 $281 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $281 | 0;
}
function _gsl_sf_mathieu_Ms_array($kind, $nmin, $nmax, $qq, $zz, $work, $result_array) {
 $kind = $kind | 0;
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $qq = +$qq;
 $zz = +$zz;
 $work = $work | 0;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $117 = 0.0, $137 = 0.0, $155 = 0.0, $159 = 0.0, $173 = 0, $174 = 0.0, $192 = 0.0, $2 = 0, $212 = 0.0, $225 = 0, $29 = 0.0, $3 = 0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0, $66 = 0, $7 = 0, $80 = 0.0, $84 = 0.0, $98 = 0, $99 = 0.0, $amax = 0, $bb = 0, $coeff = 0, $even_odd = 0, $fc = 0, $fn = 0, $ii = 0, $j1c = 0, $j1mc = 0, $j1pc = 0, $kk = 0, $maxerr = 0, $mm = 0, $order = 0, $pi = 0, $status = 0, $u1 = 0, $u2 = 0, $z2c = 0, $z2mc = 0, $z2pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976 | 0;
 $0 = sp + 968 | 0;
 $1 = sp + 964 | 0;
 $2 = sp + 960 | 0;
 $3 = sp + 956 | 0;
 $4 = sp + 912 | 0;
 $5 = sp + 904 | 0;
 $6 = sp + 952 | 0;
 $7 = sp + 948 | 0;
 $even_odd = sp + 944 | 0;
 $order = sp + 940 | 0;
 $ii = sp + 936 | 0;
 $kk = sp + 932 | 0;
 $mm = sp + 928 | 0;
 $status = sp + 924 | 0;
 $maxerr = sp + 896 | 0;
 $amax = sp + 888 | 0;
 $pi = sp + 880 | 0;
 $fn = sp + 872 | 0;
 $coeff = sp + 72 | 0;
 $fc = sp + 64 | 0;
 $j1c = sp + 56 | 0;
 $z2c = sp + 48 | 0;
 $j1mc = sp + 40 | 0;
 $z2mc = sp + 32 | 0;
 $j1pc = sp + 24 | 0;
 $z2pc = sp + 16 | 0;
 $u1 = sp + 8 | 0;
 $u2 = sp;
 $bb = sp + 920 | 0;
 HEAP32[$1 >> 2] = $kind;
 HEAP32[$2 >> 2] = $nmin;
 HEAP32[$3 >> 2] = $nmax;
 HEAPF64[$4 >> 3] = $qq;
 HEAPF64[$5 >> 3] = $zz;
 HEAP32[$6 >> 2] = $work;
 HEAP32[$7 >> 2] = $result_array;
 HEAPF64[$maxerr >> 3] = 1.0e-14;
 HEAPF64[$pi >> 3] = 3.141592653589793;
 HEAP32[$bb >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2];
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= ((HEAP32[$3 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) + 1 | 0)) break;
  HEAPF64[(HEAP32[$7 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 if (+HEAPF64[$4 >> 3] <= 0.0) {
  _gsl_error(54728, 54760, 379, 4);
  HEAP32[$0 >> 2] = 4;
  $225 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $225 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < 1 | (HEAP32[$1 >> 2] | 0) > 2) {
  _gsl_error(54784, 54760, 383, 4);
  HEAP32[$0 >> 2] = 4;
  $225 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $225 | 0;
 }
 HEAP32[$mm >> 2] = 0;
 HEAPF64[$amax >> 3] = 0.0;
 $29 = +Math_sqrt(+(+HEAPF64[$4 >> 3]));
 HEAPF64[$u1 >> 3] = $29 * +Math_exp(+(+HEAPF64[$5 >> 3] * -1.0));
 $35 = +Math_sqrt(+(+HEAPF64[$4 >> 3]));
 HEAPF64[$u2 >> 3] = $35 * +Math_exp(+(+HEAPF64[$5 >> 3]));
 _gsl_sf_mathieu_b_array(0, HEAP32[$3 >> 2] | 0, +HEAPF64[$4 >> 3], HEAP32[$6 >> 2] | 0, HEAP32[$bb >> 2] | 0) | 0;
 HEAP32[$ii >> 2] = 0;
 HEAP32[$order >> 2] = HEAP32[$2 >> 2];
 while (1) {
  if ((HEAP32[$order >> 2] | 0) > (HEAP32[$3 >> 2] | 0)) {
   label = 37;
   break;
  }
  HEAPF64[$fn >> 3] = 0.0;
  HEAP32[$even_odd >> 2] = 0;
  HEAP32[$even_odd >> 2] = ((HEAP32[$order >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
  if (!(HEAP32[$order >> 2] | 0)) HEAPF64[(HEAP32[$7 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0; else {
   HEAP32[$status >> 2] = _gsl_sf_mathieu_b_coeff(HEAP32[$order >> 2] | 0, +HEAPF64[$4 >> 3], +HEAPF64[(HEAP32[$bb >> 2] | 0) + (HEAP32[$order >> 2] << 3) >> 3], $coeff) | 0;
   if (HEAP32[$status >> 2] | 0) {
    label = 13;
    break;
   }
   $66 = (HEAP32[$even_odd >> 2] | 0) == 0;
   HEAP32[$kk >> 2] = 0;
   if ($66) {
    while (1) {
     if ((HEAP32[$kk >> 2] | 0) >= 100) break;
     if (+HEAPF64[$amax >> 3] > +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]))) $80 = +HEAPF64[$amax >> 3]; else $80 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
     HEAPF64[$amax >> 3] = $80;
     $84 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
     if ($84 / +HEAPF64[$amax >> 3] < +HEAPF64[$maxerr >> 3]) break;
     HEAPF64[$j1mc >> 3] = +_gsl_sf_bessel_Jn(HEAP32[$kk >> 2] | 0, +HEAPF64[$u1 >> 3]);
     HEAPF64[$j1pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 2 | 0, +HEAPF64[$u1 >> 3]);
     $98 = HEAP32[$kk >> 2] | 0;
     $99 = +HEAPF64[$u2 >> 3];
     if ((HEAP32[$1 >> 2] | 0) == 1) {
      HEAPF64[$z2mc >> 3] = +_gsl_sf_bessel_Jn($98, $99);
      HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 2 | 0, +HEAPF64[$u2 >> 3]);
     } else {
      HEAPF64[$z2mc >> 3] = +_gsl_sf_bessel_Yn($98, $99);
      HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Yn((HEAP32[$kk >> 2] | 0) + 2 | 0, +HEAPF64[$u2 >> 3]);
     }
     $117 = +Math_pow(-1.0, +(+(HEAP32[$order >> 2] | 0) * .5 + +(HEAP32[$kk >> 2] | 0) + 1.0));
     HEAPF64[$fc >> 3] = $117 * +HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3];
     HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + +HEAPF64[$fc >> 3] * (+HEAPF64[$j1mc >> 3] * +HEAPF64[$z2pc >> 3] - +HEAPF64[$j1pc >> 3] * +HEAPF64[$z2mc >> 3]);
     HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
    }
    $137 = +Math_sqrt(+(+HEAPF64[$pi >> 3] / 2.0));
    HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] * ($137 / +HEAPF64[$coeff >> 3]);
   } else {
    while (1) {
     if ((HEAP32[$kk >> 2] | 0) >= 100) break;
     if (+HEAPF64[$amax >> 3] > +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]))) $155 = +HEAPF64[$amax >> 3]; else $155 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
     HEAPF64[$amax >> 3] = $155;
     $159 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
     if ($159 / +HEAPF64[$amax >> 3] < +HEAPF64[$maxerr >> 3]) break;
     HEAPF64[$j1c >> 3] = +_gsl_sf_bessel_Jn(HEAP32[$kk >> 2] | 0, +HEAPF64[$u1 >> 3]);
     HEAPF64[$j1pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u1 >> 3]);
     $173 = HEAP32[$kk >> 2] | 0;
     $174 = +HEAPF64[$u2 >> 3];
     if ((HEAP32[$1 >> 2] | 0) == 1) {
      HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Jn($173, $174);
      HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u2 >> 3]);
     } else {
      HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Yn($173, $174);
      HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Yn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u2 >> 3]);
     }
     $192 = +Math_pow(-1.0, +(+((HEAP32[$order >> 2] | 0) - 1 | 0) * .5 + +(HEAP32[$kk >> 2] | 0)));
     HEAPF64[$fc >> 3] = $192 * +HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3];
     HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + +HEAPF64[$fc >> 3] * (+HEAPF64[$j1c >> 3] * +HEAPF64[$z2pc >> 3] - +HEAPF64[$j1pc >> 3] * +HEAPF64[$z2c >> 3]);
     HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
    }
    $212 = +Math_sqrt(+(+HEAPF64[$pi >> 3] / 2.0));
    HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] * ($212 / +HEAPF64[$coeff >> 3]);
   }
   HEAPF64[(HEAP32[$7 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = +HEAPF64[$fn >> 3];
  }
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  HEAP32[$order >> 2] = (HEAP32[$order >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $225 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $225 | 0;
 } else if ((label | 0) == 37) {
  HEAP32[$0 >> 2] = 0;
  $225 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $225 | 0;
 }
 return 0;
}
function _dilog_xge0($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $102 = 0.0, $176 = 0.0, $185 = 0.0, $2 = 0, $203 = 0.0, $209 = 0.0, $212 = 0.0, $216 = 0.0, $218 = 0, $22 = 0.0, $224 = 0.0, $226 = 0, $231 = 0.0, $241 = 0, $28 = 0.0, $31 = 0.0, $35 = 0.0, $37 = 0, $43 = 0.0, $45 = 0, $5 = 0.0, $50 = 0.0, $60 = 0.0, $74 = 0.0, $80 = 0.0, $83 = 0.0, $87 = 0.0, $89 = 0, $95 = 0.0, $97 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $c6 = 0, $c7 = 0, $c8 = 0, $eps = 0, $lne = 0, $log_term = 0, $log_x = 0, $log_x3 = 0, $log_x9 = 0, $ser = 0, $ser1 = 0, $ser7 = 0, $stat_ser = 0, $stat_ser2 = 0, $stat_ser8 = 0, $t2 = 0, $t211 = 0, $t25 = 0, $t3 = 0, $t312 = 0, $t36 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $0 = sp + 264 | 0;
 $1 = sp + 240 | 0;
 $2 = sp + 260 | 0;
 $ser = sp + 224 | 0;
 $stat_ser = sp + 256 | 0;
 $log_x = sp + 216 | 0;
 $t2 = sp + 200 | 0;
 $t3 = sp + 192 | 0;
 $ser1 = sp + 176 | 0;
 $stat_ser2 = sp + 252 | 0;
 $log_x3 = sp + 168 | 0;
 $log_term = sp + 160 | 0;
 $t25 = sp + 144 | 0;
 $t36 = sp + 136 | 0;
 $eps = sp + 128 | 0;
 $lne = sp + 120 | 0;
 $c1 = sp + 104 | 0;
 $c2 = sp + 96 | 0;
 $c3 = sp + 88 | 0;
 $c4 = sp + 80 | 0;
 $c5 = sp + 72 | 0;
 $c6 = sp + 64 | 0;
 $c7 = sp + 56 | 0;
 $c8 = sp + 48 | 0;
 $ser7 = sp + 32 | 0;
 $stat_ser8 = sp + 248 | 0;
 $log_x9 = sp + 24 | 0;
 $t211 = sp + 8 | 0;
 $t312 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] > 2.0) {
  HEAP32[$stat_ser >> 2] = _dilog_series_2(1.0 / $5, $ser) | 0;
  HEAPF64[$log_x >> 3] = +Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[sp + 208 >> 3] = 3.289868133696453;
  HEAPF64[$t2 >> 3] = +HEAPF64[$ser >> 3];
  HEAPF64[$t3 >> 3] = +HEAPF64[$log_x >> 3] * .5 * +HEAPF64[$log_x >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.289868133696453 - +HEAPF64[$t2 >> 3] - +HEAPF64[$t3 >> 3];
  $22 = +Math_abs(+(+HEAPF64[$log_x >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $22 + +HEAPF64[$ser + 8 >> 3];
  $28 = +Math_abs(3.289868133696453);
  $31 = $28 + +Math_abs(+(+HEAPF64[$t2 >> 3]));
  $35 = ($31 + +Math_abs(+(+HEAPF64[$t3 >> 3]))) * 2.220446049250313e-16;
  $37 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$37 >> 3] = +HEAPF64[$37 >> 3] + $35;
  $43 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $45 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$45 >> 3] = +HEAPF64[$45 >> 3] + $43;
  HEAP32[$0 >> 2] = HEAP32[$stat_ser >> 2];
  $241 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $50 = +HEAPF64[$1 >> 3];
 if ($5 > 1.01) {
  HEAP32[$stat_ser2 >> 2] = _dilog_series_2(1.0 - 1.0 / $50, $ser1) | 0;
  HEAPF64[$log_x3 >> 3] = +Math_log(+(+HEAPF64[$1 >> 3]));
  $60 = +Math_log(+(1.0 - 1.0 / +HEAPF64[$1 >> 3]));
  HEAPF64[$log_term >> 3] = +HEAPF64[$log_x3 >> 3] * ($60 + +HEAPF64[$log_x3 >> 3] * .5);
  HEAPF64[sp + 152 >> 3] = 1.6449340668482264;
  HEAPF64[$t25 >> 3] = +HEAPF64[$ser1 >> 3];
  HEAPF64[$t36 >> 3] = +HEAPF64[$log_term >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$t25 >> 3] + 1.6449340668482264 - +HEAPF64[$t36 >> 3];
  $74 = +Math_abs(+(+HEAPF64[$log_x3 >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $74 + +HEAPF64[$ser1 + 8 >> 3];
  $80 = +Math_abs(1.6449340668482264);
  $83 = $80 + +Math_abs(+(+HEAPF64[$t25 >> 3]));
  $87 = ($83 + +Math_abs(+(+HEAPF64[$t36 >> 3]))) * 2.220446049250313e-16;
  $89 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$89 >> 3] = +HEAPF64[$89 >> 3] + $87;
  $95 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $97 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$97 >> 3] = +HEAPF64[$97 >> 3] + $95;
  HEAP32[$0 >> 2] = HEAP32[$stat_ser2 >> 2];
  $241 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $102 = +HEAPF64[$1 >> 3];
 if ($50 > 1.0) {
  HEAPF64[$eps >> 3] = $102 - 1.0;
  HEAPF64[$lne >> 3] = +Math_log(+(+HEAPF64[$eps >> 3]));
  HEAPF64[sp + 112 >> 3] = 1.6449340668482264;
  HEAPF64[$c1 >> 3] = 1.0 - +HEAPF64[$lne >> 3];
  HEAPF64[$c2 >> 3] = -(1.0 - +HEAPF64[$lne >> 3] * 2.0) / 4.0;
  HEAPF64[$c3 >> 3] = (1.0 - +HEAPF64[$lne >> 3] * 3.0) / 9.0;
  HEAPF64[$c4 >> 3] = -(1.0 - +HEAPF64[$lne >> 3] * 4.0) / 16.0;
  HEAPF64[$c5 >> 3] = (1.0 - +HEAPF64[$lne >> 3] * 5.0) / 25.0;
  HEAPF64[$c6 >> 3] = -(1.0 - +HEAPF64[$lne >> 3] * 6.0) / 36.0;
  HEAPF64[$c7 >> 3] = (1.0 - +HEAPF64[$lne >> 3] * 7.0) / 49.0;
  HEAPF64[$c8 >> 3] = -(1.0 - +HEAPF64[$lne >> 3] * 8.0) / 64.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$eps >> 3] * (+HEAPF64[$c1 >> 3] + +HEAPF64[$eps >> 3] * (+HEAPF64[$c2 >> 3] + +HEAPF64[$eps >> 3] * (+HEAPF64[$c3 >> 3] + +HEAPF64[$eps >> 3] * (+HEAPF64[$c4 >> 3] + +HEAPF64[$eps >> 3] * (+HEAPF64[$c5 >> 3] + +HEAPF64[$eps >> 3] * (+HEAPF64[$c6 >> 3] + +HEAPF64[$eps >> 3] * (+HEAPF64[$c7 >> 3] + +HEAPF64[$eps >> 3] * +HEAPF64[$c8 >> 3]))))))) + 1.6449340668482264;
  $176 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $176;
  HEAP32[$0 >> 2] = 0;
  $241 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 }
 if ($102 == 1.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.6449340668482264;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 7.304974700020789e-16;
  HEAP32[$0 >> 2] = 0;
  $241 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $185 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] > .5) {
  HEAP32[$stat_ser8 >> 2] = _dilog_series_2(1.0 - $185, $ser7) | 0;
  HEAPF64[$log_x9 >> 3] = +Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[sp + 16 >> 3] = 1.6449340668482264;
  HEAPF64[$t211 >> 3] = +HEAPF64[$ser7 >> 3];
  HEAPF64[$t312 >> 3] = +HEAPF64[$log_x9 >> 3] * +Math_log(+(1.0 - +HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.6449340668482264 - +HEAPF64[$t211 >> 3] - +HEAPF64[$t312 >> 3];
  $203 = +Math_abs(+(+HEAPF64[$log_x9 >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $203 + +HEAPF64[$ser7 + 8 >> 3];
  $209 = +Math_abs(1.6449340668482264);
  $212 = $209 + +Math_abs(+(+HEAPF64[$t211 >> 3]));
  $216 = ($212 + +Math_abs(+(+HEAPF64[$t312 >> 3]))) * 2.220446049250313e-16;
  $218 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$218 >> 3] = +HEAPF64[$218 >> 3] + $216;
  $224 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $226 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$226 >> 3] = +HEAPF64[$226 >> 3] + $224;
  HEAP32[$0 >> 2] = HEAP32[$stat_ser8 >> 2];
  $241 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $231 = +HEAPF64[$1 >> 3];
 if ($185 > .25) {
  HEAP32[$0 >> 2] = _dilog_series_2($231, HEAP32[$2 >> 2] | 0) | 0;
  $241 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 }
 if ($231 > 0.0) {
  HEAP32[$0 >> 2] = _dilog_series_1(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $241 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $241 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 }
 return 0;
}
function _gsl_sf_mathieu_b_coeff($order, $qq, $aa, $coeff) {
 $order = $order | 0;
 $qq = +$qq;
 $aa = +$aa;
 $coeff = $coeff | 0;
 var $0 = 0, $1 = 0, $122 = 0.0, $172 = 0.0, $198 = 0.0, $2 = 0, $268 = 0, $279 = 0, $284 = 0, $29 = 0.0, $3 = 0, $4 = 0, $40 = 0.0, $64 = 0.0, $de = 0, $e1 = 0, $e2 = 0, $eps = 0, $even_odd = 0, $ff = 0, $g1 = 0, $g2 = 0, $ii = 0, $ni = 0, $nn = 0, $ratio = 0, $sum = 0, $x1 = 0, $x2 = 0, $xh = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944 | 0;
 $0 = sp + 928 | 0;
 $1 = sp + 924 | 0;
 $2 = sp + 896 | 0;
 $3 = sp + 888 | 0;
 $4 = sp + 920 | 0;
 $ni = sp + 916 | 0;
 $nn = sp + 912 | 0;
 $ii = sp + 908 | 0;
 $even_odd = sp + 904 | 0;
 $eps = sp + 880 | 0;
 $g1 = sp + 872 | 0;
 $g2 = sp + 864 | 0;
 $x1 = sp + 856 | 0;
 $x2 = sp + 848 | 0;
 $e1 = sp + 840 | 0;
 $e2 = sp + 832 | 0;
 $de = sp + 824 | 0;
 $xh = sp + 816 | 0;
 $sum = sp + 808 | 0;
 $ratio = sp + 800 | 0;
 $ff = sp;
 HEAP32[$1 >> 2] = $order;
 HEAPF64[$2 >> 3] = $qq;
 HEAPF64[$3 >> 3] = $aa;
 HEAP32[$4 >> 2] = $coeff;
 HEAPF64[$eps >> 3] = 1.0e-10;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
 HEAP32[$even_odd >> 2] = 0;
 HEAP32[$even_odd >> 2] = ((HEAP32[$1 >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
 if ((HEAP32[$1 >> 2] | 0) > 100) {
  HEAP32[$0 >> 2] = -1;
  $284 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $284 | 0;
 }
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >= 100) break;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAPF64[(HEAP32[$4 >> 2] | 0) + ((((HEAP32[$1 >> 2] | 0) - 1 | 0) / 2 | 0) << 3) >> 3] = 1.0;
  HEAP32[$0 >> 2] = 0;
  $284 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $284 | 0;
 }
 do if ((HEAP32[$1 >> 2] | 0) < 5) {
  HEAP32[$nn >> 2] = 0;
  HEAPF64[$sum >> 3] = 0.0;
  $29 = +HEAPF64[$3 >> 3];
  if (!(HEAP32[$even_odd >> 2] | 0)) {
   HEAPF64[$ratio >> 3] = ($29 - 4.0) / +HEAPF64[$2 >> 3];
   break;
  } else {
   HEAPF64[$ratio >> 3] = ($29 - 1.0 - +HEAPF64[$2 >> 3]) / +HEAPF64[$2 >> 3];
   break;
  }
 } else {
  $40 = +HEAPF64[$3 >> 3];
  L15 : do if (!(HEAP32[$even_odd >> 2] | 0)) {
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = ($40 - 4.0) / +HEAPF64[$2 >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[HEAP32[$4 >> 2] >> 3] * 2.0 + +HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] * 4.0;
   HEAP32[$ii >> 2] = 2;
   while (1) {
    if ((HEAP32[$ii >> 2] | 0) >= ((HEAP32[$1 >> 2] | 0) / 2 | 0 | 0)) break L15;
    $64 = +HEAPF64[$3 >> 3] - +(Math_imul(HEAP32[$ii >> 2] << 2, HEAP32[$ii >> 2] | 0) | 0);
    HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = $64 / +HEAPF64[$2 >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3] - +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 2 << 3) >> 3];
    HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +((HEAP32[$ii >> 2] | 0) + 1 << 1 | 0) * +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
    HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
   }
  } else {
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = ($40 - 1.0) / +HEAPF64[$2 >> 3] + 1.0;
   HEAPF64[$sum >> 3] = +HEAPF64[HEAP32[$4 >> 2] >> 3] + +HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] * 3.0;
   HEAP32[$ii >> 2] = 2;
   while (1) {
    if ((HEAP32[$ii >> 2] | 0) >= (((HEAP32[$1 >> 2] | 0) / 2 | 0) + 1 | 0)) break L15;
    $122 = +HEAPF64[$3 >> 3] - +(Math_imul((HEAP32[$ii >> 2] << 1) - 1 | 0, (HEAP32[$ii >> 2] << 1) - 1 | 0) | 0);
    HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = $122 / +HEAPF64[$2 >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3] - +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 2 << 3) >> 3];
    HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +(((HEAP32[$ii >> 2] | 0) + 1 << 1) - 1 | 0) * +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
    HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$nn >> 2] = (HEAP32[$ii >> 2] | 0) - 1;
  HEAPF64[$ratio >> 3] = +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$nn >> 2] << 3) >> 3] / +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$nn >> 2] | 0) - 1 << 3) >> 3];
 } while (0);
 HEAP32[$ni >> 2] = 100 - (HEAP32[$nn >> 2] | 0) - 1;
 $172 = -+HEAPF64[$2 >> 3];
 if (!(HEAP32[$even_odd >> 2] | 0)) HEAPF64[$x1 >> 3] = $172 / 40804.0; else HEAPF64[$x1 >> 3] = $172 / 40401.0;
 HEAPF64[$g1 >> 3] = +HEAPF64[$ratio >> 3];
 _backward_recurse_s(+HEAPF64[$3 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$x1 >> 3], $ff, $g1, HEAP32[$even_odd >> 2] | 0, HEAP32[$ni >> 2] | 0);
 HEAPF64[$x2 >> 3] = +HEAPF64[$g1 >> 3];
 HEAPF64[$g2 >> 3] = +HEAPF64[$ratio >> 3];
 _backward_recurse_s(+HEAPF64[$3 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$x2 >> 3], $ff, $g2, HEAP32[$even_odd >> 2] | 0, HEAP32[$ni >> 2] | 0);
 while (1) {
  HEAPF64[$e1 >> 3] = +HEAPF64[$g1 >> 3] - +HEAPF64[$x1 >> 3];
  HEAPF64[$e2 >> 3] = +HEAPF64[$g2 >> 3] - +HEAPF64[$x2 >> 3];
  HEAPF64[$de >> 3] = +HEAPF64[$e1 >> 3] - +HEAPF64[$e2 >> 3];
  $198 = +Math_abs(+(+HEAPF64[$de >> 3]));
  if ($198 < +HEAPF64[$eps >> 3]) break;
  HEAPF64[$xh >> 3] = (+HEAPF64[$e1 >> 3] * +HEAPF64[$x2 >> 3] - +HEAPF64[$e2 >> 3] * +HEAPF64[$x1 >> 3]) / +HEAPF64[$de >> 3];
  HEAPF64[$x1 >> 3] = +HEAPF64[$x2 >> 3];
  HEAPF64[$g1 >> 3] = +HEAPF64[$g2 >> 3];
  HEAPF64[$x2 >> 3] = +HEAPF64[$xh >> 3];
  HEAPF64[$g2 >> 3] = +HEAPF64[$ratio >> 3];
  _backward_recurse_s(+HEAPF64[$3 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$x2 >> 3], $ff, $g2, HEAP32[$even_odd >> 2] | 0, HEAP32[$ni >> 2] | 0);
 }
 HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +((HEAP32[$nn >> 2] | 0) + 1 << 1 | 0) * +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$nn >> 2] << 3) >> 3];
 HEAP32[$ii >> 2] = (HEAP32[$nn >> 2] | 0) + 1;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= 100) break;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = +HEAPF64[$ff + ((HEAP32[$ii >> 2] | 0) - (HEAP32[$nn >> 2] | 0) - 1 << 3) >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +((HEAP32[$ii >> 2] | 0) + 1 << 1 | 0) * +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
  L41 : do if (+Math_abs(+(+HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3])) < 1.0e-20) while (1) {
   if ((HEAP32[$ii >> 2] | 0) >= 100) break L41;
   $268 = HEAP32[$ii >> 2] | 0;
   HEAP32[$ii >> 2] = $268 + 1;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + ($268 << 3) >> 3] = 0.0;
  } while (0);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= 100) break;
  $279 = (HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) | 0;
  HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] / +HEAPF64[$sum >> 3];
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 HEAP32[$0 >> 2] = 0;
 $284 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $284 | 0;
}
function _gsl_sf_mathieu_a_coeff($order, $qq, $aa, $coeff) {
 $order = $order | 0;
 $qq = +$qq;
 $aa = +$aa;
 $coeff = $coeff | 0;
 var $0 = 0, $1 = 0, $129 = 0.0, $173 = 0.0, $199 = 0.0, $2 = 0, $259 = 0, $270 = 0, $275 = 0, $28 = 0.0, $3 = 0, $38 = 0.0, $4 = 0, $77 = 0.0, $de = 0, $e1 = 0, $e2 = 0, $eps = 0, $even_odd = 0, $ff = 0, $g1 = 0, $g2 = 0, $ii = 0, $ni = 0, $nn = 0, $ratio = 0, $sum = 0, $x1 = 0, $x2 = 0, $xh = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944 | 0;
 $0 = sp + 928 | 0;
 $1 = sp + 924 | 0;
 $2 = sp + 896 | 0;
 $3 = sp + 888 | 0;
 $4 = sp + 920 | 0;
 $ni = sp + 916 | 0;
 $nn = sp + 912 | 0;
 $ii = sp + 908 | 0;
 $even_odd = sp + 904 | 0;
 $eps = sp + 880 | 0;
 $g1 = sp + 872 | 0;
 $g2 = sp + 864 | 0;
 $x1 = sp + 856 | 0;
 $x2 = sp + 848 | 0;
 $e1 = sp + 840 | 0;
 $e2 = sp + 832 | 0;
 $de = sp + 824 | 0;
 $xh = sp + 816 | 0;
 $sum = sp + 808 | 0;
 $ratio = sp + 800 | 0;
 $ff = sp;
 HEAP32[$1 >> 2] = $order;
 HEAPF64[$2 >> 3] = $qq;
 HEAPF64[$3 >> 3] = $aa;
 HEAP32[$4 >> 2] = $coeff;
 HEAPF64[$eps >> 3] = 1.0e-14;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
 HEAP32[$even_odd >> 2] = 0;
 HEAP32[$even_odd >> 2] = ((HEAP32[$1 >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
 if ((HEAP32[$1 >> 2] | 0) > 100) {
  HEAP32[$0 >> 2] = -1;
  $275 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $275 | 0;
 }
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >= 100) break;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (((HEAP32[$1 >> 2] | 0) / 2 | 0) << 3) >> 3] = 1.0;
  HEAP32[$0 >> 2] = 0;
  $275 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $275 | 0;
 }
 do if ((HEAP32[$1 >> 2] | 0) < 5) {
  HEAP32[$nn >> 2] = 0;
  HEAPF64[$sum >> 3] = 0.0;
  $28 = +HEAPF64[$3 >> 3];
  if (!(HEAP32[$even_odd >> 2] | 0)) {
   HEAPF64[$ratio >> 3] = $28 / +HEAPF64[$2 >> 3];
   break;
  } else {
   HEAPF64[$ratio >> 3] = ($28 - 1.0 - +HEAPF64[$2 >> 3]) / +HEAPF64[$2 >> 3];
   break;
  }
 } else {
  $38 = +HEAPF64[$3 >> 3];
  L15 : do if (!(HEAP32[$even_odd >> 2] | 0)) {
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $38 / +HEAPF64[$2 >> 3];
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 16 >> 3] = (+HEAPF64[$3 >> 3] - 4.0) / +HEAPF64[$2 >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] - 2.0;
   HEAPF64[$sum >> 3] = +HEAPF64[HEAP32[$4 >> 2] >> 3] + +HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] + +HEAPF64[(HEAP32[$4 >> 2] | 0) + 16 >> 3];
   HEAP32[$ii >> 2] = 3;
   while (1) {
    if ((HEAP32[$ii >> 2] | 0) >= (((HEAP32[$1 >> 2] | 0) / 2 | 0) + 1 | 0)) break L15;
    $77 = +HEAPF64[$3 >> 3] - +(Math_imul((HEAP32[$ii >> 2] | 0) - 1 << 2, (HEAP32[$ii >> 2] | 0) - 1 | 0) | 0);
    HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = $77 / +HEAPF64[$2 >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3] - +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 2 << 3) >> 3];
    HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
    HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
   }
  } else {
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = ($38 - 1.0) / +HEAPF64[$2 >> 3] - 1.0;
   HEAPF64[$sum >> 3] = +HEAPF64[HEAP32[$4 >> 2] >> 3] + +HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3];
   HEAP32[$ii >> 2] = 2;
   while (1) {
    if ((HEAP32[$ii >> 2] | 0) >= (((HEAP32[$1 >> 2] | 0) / 2 | 0) + 1 | 0)) break L15;
    $129 = +HEAPF64[$3 >> 3] - +(Math_imul((HEAP32[$ii >> 2] << 1) - 1 | 0, (HEAP32[$ii >> 2] << 1) - 1 | 0) | 0);
    HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = $129 / +HEAPF64[$2 >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3] - +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 2 << 3) >> 3];
    HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
    HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$nn >> 2] = (HEAP32[$ii >> 2] | 0) - 1;
  HEAPF64[$ratio >> 3] = +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$nn >> 2] << 3) >> 3] / +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$nn >> 2] | 0) - 1 << 3) >> 3];
 } while (0);
 HEAP32[$ni >> 2] = 100 - (HEAP32[$nn >> 2] | 0) - 1;
 $173 = -+HEAPF64[$2 >> 3];
 if (!(HEAP32[$even_odd >> 2] | 0)) HEAPF64[$x1 >> 3] = $173 / 4.0e4; else HEAPF64[$x1 >> 3] = $173 / 40401.0;
 HEAPF64[$g1 >> 3] = +HEAPF64[$ratio >> 3];
 _backward_recurse_c(+HEAPF64[$3 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$x1 >> 3], $ff, $g1, HEAP32[$even_odd >> 2] | 0, HEAP32[$ni >> 2] | 0);
 HEAPF64[$x2 >> 3] = +HEAPF64[$g1 >> 3];
 HEAPF64[$g2 >> 3] = +HEAPF64[$ratio >> 3];
 _backward_recurse_c(+HEAPF64[$3 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$x2 >> 3], $ff, $g2, HEAP32[$even_odd >> 2] | 0, HEAP32[$ni >> 2] | 0);
 while (1) {
  HEAPF64[$e1 >> 3] = +HEAPF64[$g1 >> 3] - +HEAPF64[$x1 >> 3];
  HEAPF64[$e2 >> 3] = +HEAPF64[$g2 >> 3] - +HEAPF64[$x2 >> 3];
  HEAPF64[$de >> 3] = +HEAPF64[$e1 >> 3] - +HEAPF64[$e2 >> 3];
  $199 = +Math_abs(+(+HEAPF64[$de >> 3]));
  if ($199 < +HEAPF64[$eps >> 3]) break;
  HEAPF64[$xh >> 3] = (+HEAPF64[$e1 >> 3] * +HEAPF64[$x2 >> 3] - +HEAPF64[$e2 >> 3] * +HEAPF64[$x1 >> 3]) / +HEAPF64[$de >> 3];
  HEAPF64[$x1 >> 3] = +HEAPF64[$x2 >> 3];
  HEAPF64[$g1 >> 3] = +HEAPF64[$g2 >> 3];
  HEAPF64[$x2 >> 3] = +HEAPF64[$xh >> 3];
  HEAPF64[$g2 >> 3] = +HEAPF64[$ratio >> 3];
  _backward_recurse_c(+HEAPF64[$3 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$x2 >> 3], $ff, $g2, HEAP32[$even_odd >> 2] | 0, HEAP32[$ni >> 2] | 0);
 }
 HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$nn >> 2] << 3) >> 3];
 HEAP32[$ii >> 2] = (HEAP32[$nn >> 2] | 0) + 1;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= 100) break;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = +HEAPF64[$ff + ((HEAP32[$ii >> 2] | 0) - (HEAP32[$nn >> 2] | 0) - 1 << 3) >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3];
  L41 : do if (+Math_abs(+(+HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3])) < 1.0e-20) while (1) {
   if ((HEAP32[$ii >> 2] | 0) >= 100) break L41;
   $259 = HEAP32[$ii >> 2] | 0;
   HEAP32[$ii >> 2] = $259 + 1;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + ($259 << 3) >> 3] = 0.0;
  } while (0);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= 100) break;
  $270 = (HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) | 0;
  HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] / +HEAPF64[$sum >> 3];
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 HEAP32[$0 >> 2] = 0;
 $275 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $275 | 0;
}
function _increment_state814($state) {
 $state = $state | 0;
 var $0 = 0, $carry = 0, $ir = 0, $jr = 0, $k = 0, $kmax = 0, $xdbl = 0, $y1 = 0, $y2 = 0, $y3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $k = sp + 48 | 0;
 $kmax = sp + 44 | 0;
 $y1 = sp + 24 | 0;
 $y2 = sp + 16 | 0;
 $y3 = sp + 8 | 0;
 $xdbl = sp + 40 | 0;
 $carry = sp;
 $ir = sp + 36 | 0;
 $jr = sp + 32 | 0;
 HEAP32[$0 >> 2] = $state;
 HEAP32[$xdbl >> 2] = HEAP32[$0 >> 2];
 HEAPF64[$carry >> 3] = +HEAPF64[(HEAP32[$0 >> 2] | 0) + 96 >> 3];
 HEAP32[$ir >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 104 >> 2];
 HEAP32[$jr >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 108 >> 2];
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$ir >> 2] | 0) >>> 0 <= 0) break;
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$jr >> 2] << 3) >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[$y1 >> 3] - +HEAPF64[$carry >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$carry >> 3] = 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  } else HEAPF64[$carry >> 3] = 0.0;
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3] = +HEAPF64[$y2 >> 3];
  HEAP32[$ir >> 2] = HEAP32[79800 + (HEAP32[$ir >> 2] << 2) >> 2];
  HEAP32[$jr >> 2] = HEAP32[79800 + (HEAP32[$jr >> 2] << 2) >> 2];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[$kmax >> 2] = (HEAP32[(HEAP32[$0 >> 2] | 0) + 116 >> 2] | 0) - 12;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$kmax >> 2] | 0)) break;
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 56 >> 3] - +HEAPF64[HEAP32[$xdbl >> 2] >> 3];
  HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] - +HEAPF64[$carry >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 64 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 8 >> 3];
  if (+HEAPF64[$y1 >> 3] < 0.0) {
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] + 1.0;
  }
  HEAPF64[HEAP32[$xdbl >> 2] >> 3] = +HEAPF64[$y1 >> 3];
  HEAPF64[$y3 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 72 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 16 >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 8 >> 3] = +HEAPF64[$y2 >> 3];
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 80 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 24 >> 3];
  if (+HEAPF64[$y3 >> 3] < 0.0) {
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 16 >> 3] = +HEAPF64[$y3 >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 88 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 32 >> 3];
  if (+HEAPF64[$y1 >> 3] < 0.0) {
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 24 >> 3] = +HEAPF64[$y1 >> 3];
  HEAPF64[$y3 >> 3] = +HEAPF64[HEAP32[$xdbl >> 2] >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 40 >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 32 >> 3] = +HEAPF64[$y2 >> 3];
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 48 >> 3];
  if (+HEAPF64[$y3 >> 3] < 0.0) {
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 40 >> 3] = +HEAPF64[$y3 >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 56 >> 3];
  if (+HEAPF64[$y1 >> 3] < 0.0) {
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 48 >> 3] = +HEAPF64[$y1 >> 3];
  HEAPF64[$y3 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 24 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 64 >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 56 >> 3] = +HEAPF64[$y2 >> 3];
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 32 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 72 >> 3];
  if (+HEAPF64[$y3 >> 3] < 0.0) {
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 64 >> 3] = +HEAPF64[$y3 >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 40 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 80 >> 3];
  if (+HEAPF64[$y1 >> 3] < 0.0) {
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y1 >> 3] = +HEAPF64[$y1 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 72 >> 3] = +HEAPF64[$y1 >> 3];
  HEAPF64[$y3 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 48 >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 88 >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] - 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  }
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 80 >> 3] = +HEAPF64[$y2 >> 3];
  if (+HEAPF64[$y3 >> 3] < 0.0) {
   HEAPF64[$carry >> 3] = 3.552713678800501e-15;
   HEAPF64[$y3 >> 3] = +HEAPF64[$y3 >> 3] + 1.0;
  } else HEAPF64[$carry >> 3] = 0.0;
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + 88 >> 3] = +HEAPF64[$y3 >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 12;
 }
 HEAP32[$kmax >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 116 >> 2];
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$kmax >> 2] | 0)) break;
  HEAPF64[$y1 >> 3] = +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$jr >> 2] << 3) >> 3] - +HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3];
  HEAPF64[$y2 >> 3] = +HEAPF64[$y1 >> 3] - +HEAPF64[$carry >> 3];
  if (+HEAPF64[$y2 >> 3] < 0.0) {
   HEAPF64[$carry >> 3] = 3.552713678800501e-15;
   HEAPF64[$y2 >> 3] = +HEAPF64[$y2 >> 3] + 1.0;
  } else HEAPF64[$carry >> 3] = 0.0;
  HEAPF64[(HEAP32[$xdbl >> 2] | 0) + (HEAP32[$ir >> 2] << 3) >> 3] = +HEAPF64[$y2 >> 3];
  HEAP32[$ir >> 2] = HEAP32[79800 + (HEAP32[$ir >> 2] << 2) >> 2];
  HEAP32[$jr >> 2] = HEAP32[79800 + (HEAP32[$jr >> 2] << 2) >> 2];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$0 >> 2] | 0) + 104 >> 2] = HEAP32[$ir >> 2];
 HEAP32[(HEAP32[$0 >> 2] | 0) + 112 >> 2] = HEAP32[$ir >> 2];
 HEAP32[(HEAP32[$0 >> 2] | 0) + 108 >> 2] = HEAP32[$jr >> 2];
 HEAPF64[(HEAP32[$0 >> 2] | 0) + 96 >> 3] = +HEAPF64[$carry >> 3];
 STACKTOP = sp;
 return;
}
function _hyperg_U_finite_sum($N, $a, $b, $x, $xeps, $result) {
 $N = $N | 0;
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $xeps = +$xeps;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $135 = 0.0, $141 = 0.0, $170 = 0.0, $186 = 0.0, $194 = 0.0, $198 = 0.0, $2 = 0, $211 = 0.0, $218 = 0.0, $228 = 0.0, $230 = 0, $234 = 0, $242 = 0, $3 = 0, $32 = 0.0, $4 = 0, $40 = 0.0, $5 = 0, $6 = 0, $63 = 0.0, $71 = 0.0, $75 = 0.0, $81 = 0.0, $84 = 0.0, $86 = 0, $92 = 0.0, $94 = 0, $98 = 0, $M = 0, $coeff_err = 0, $coeff_val = 0, $gamr = 0, $gbm1 = 0, $i = 0, $mult = 0, $mult3 = 0, $pe_err = 0, $pe_val = 0, $poch = 0, $powx1N = 0, $stat_gamr = 0, $stat_gbm1 = 0, $stat_p = 0, $stat_poch = 0, $sum_err = 0, $sum_val = 0, $t_err = 0, $t_err2 = 0, $t_val = 0, $t_val1 = 0, $xi1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 232 | 0;
 $1 = sp + 228 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 184 | 0;
 $4 = sp + 176 | 0;
 $5 = sp + 168 | 0;
 $6 = sp + 224 | 0;
 $i = sp + 220 | 0;
 $sum_val = sp + 160 | 0;
 $sum_err = sp + 152 | 0;
 $t_val = sp + 144 | 0;
 $t_err = sp + 136 | 0;
 $poch = sp + 120 | 0;
 $stat_poch = sp + 216 | 0;
 $xi1 = sp + 112 | 0;
 $mult = sp + 104 | 0;
 $M = sp + 212 | 0;
 $gbm1 = sp + 88 | 0;
 $gamr = sp + 72 | 0;
 $stat_gbm1 = sp + 208 | 0;
 $stat_gamr = sp + 204 | 0;
 $t_val1 = sp + 64 | 0;
 $t_err2 = sp + 56 | 0;
 $mult3 = sp + 48 | 0;
 $powx1N = sp + 32 | 0;
 $stat_p = sp + 200 | 0;
 $pe_val = sp + 24 | 0;
 $pe_err = sp + 16 | 0;
 $coeff_val = sp + 8 | 0;
 $coeff_err = sp;
 HEAP32[$1 >> 2] = $N;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 HEAPF64[$4 >> 3] = $x;
 HEAPF64[$5 >> 3] = $xeps;
 HEAP32[$6 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) <= 0) {
  HEAPF64[$t_val >> 3] = 1.0;
  HEAPF64[$t_err >> 3] = 0.0;
  HEAPF64[$sum_val >> 3] = 1.0;
  HEAPF64[$sum_err >> 3] = 0.0;
  HEAP32[$i >> 2] = 1;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) > (0 - (HEAP32[$1 >> 2] | 0) | 0)) break;
   HEAPF64[$xi1 >> 3] = +((HEAP32[$i >> 2] | 0) - 1 | 0);
   HEAPF64[$mult >> 3] = (+HEAPF64[$2 >> 3] + +HEAPF64[$xi1 >> 3]) * +HEAPF64[$4 >> 3] / ((+HEAPF64[$3 >> 3] + +HEAPF64[$xi1 >> 3]) * (+HEAPF64[$xi1 >> 3] + 1.0));
   HEAPF64[$t_val >> 3] = +HEAPF64[$t_val >> 3] * +HEAPF64[$mult >> 3];
   $32 = +Math_abs(+(+HEAPF64[$mult >> 3]));
   $40 = $32 * +HEAPF64[$t_err >> 3] + +Math_abs(+(+HEAPF64[$t_val >> 3])) * 8.0 * 2.0 * 2.220446049250313e-16;
   HEAPF64[$t_err >> 3] = +HEAPF64[$t_err >> 3] + $40;
   HEAPF64[$sum_val >> 3] = +HEAPF64[$sum_val >> 3] + +HEAPF64[$t_val >> 3];
   HEAPF64[$sum_err >> 3] = +HEAPF64[$sum_err >> 3] + +HEAPF64[$t_err >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$stat_poch >> 2] = _gsl_sf_poch_e(+HEAPF64[$2 >> 3] + 1.0 - +HEAPF64[$3 >> 3], -+HEAPF64[$2 >> 3], $poch) | 0;
  HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$sum_val >> 3] * +HEAPF64[$poch >> 3];
  $63 = +Math_abs(+(+HEAPF64[$sum_val >> 3]));
  $71 = $63 * +HEAPF64[$poch + 8 >> 3] + +HEAPF64[$sum_err >> 3] * +Math_abs(+(+HEAPF64[$poch >> 3]));
  HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = $71;
  $75 = +Math_abs(+(+HEAPF64[$poch >> 3]));
  $81 = $75 * (+Math_abs(+(+(HEAP32[$1 >> 2] | 0))) + 2.0) * 2.220446049250313e-16;
  $84 = $81 * +Math_abs(+(+HEAPF64[$sum_val >> 3]));
  $86 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
  HEAPF64[$86 >> 3] = +HEAPF64[$86 >> 3] + $84;
  $92 = +Math_abs(+(+HEAPF64[HEAP32[$6 >> 2] >> 3])) * 4.440892098500626e-16;
  $94 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
  HEAPF64[$94 >> 3] = +HEAPF64[$94 >> 3] + $92;
  $98 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
  HEAPF64[$98 >> 3] = +HEAPF64[$98 >> 3] * 2.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_poch >> 2];
  $242 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $242 | 0;
 }
 HEAP32[$M >> 2] = (HEAP32[$1 >> 2] | 0) - 2;
 if ((HEAP32[$M >> 2] | 0) < 0) {
  HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $242 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $242 | 0;
 }
 HEAPF64[$t_val1 >> 3] = 1.0;
 HEAPF64[$t_err2 >> 3] = 0.0;
 HEAPF64[$sum_val >> 3] = 1.0;
 HEAPF64[$sum_err >> 3] = 0.0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > (HEAP32[$M >> 2] | 0)) break;
  HEAPF64[$mult3 >> 3] = (+HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3] + +(HEAP32[$i >> 2] | 0)) * +HEAPF64[$4 >> 3] / ((1.0 - +HEAPF64[$3 >> 3] + +(HEAP32[$i >> 2] | 0)) * +(HEAP32[$i >> 2] | 0));
  HEAPF64[$t_val1 >> 3] = +HEAPF64[$t_val1 >> 3] * +HEAPF64[$mult3 >> 3];
  $135 = +HEAPF64[$t_err2 >> 3] * +Math_abs(+(+HEAPF64[$mult3 >> 3]));
  $141 = $135 + +Math_abs(+(+HEAPF64[$t_val1 >> 3])) * 8.0 * 2.0 * 2.220446049250313e-16;
  HEAPF64[$t_err2 >> 3] = +HEAPF64[$t_err2 >> 3] + $141;
  HEAPF64[$sum_val >> 3] = +HEAPF64[$sum_val >> 3] + +HEAPF64[$t_val1 >> 3];
  HEAPF64[$sum_err >> 3] = +HEAPF64[$sum_err >> 3] + +HEAPF64[$t_err2 >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$stat_gbm1 >> 2] = _gsl_sf_gamma_e(+HEAPF64[$3 >> 3] - 1.0, $gbm1) | 0;
 HEAP32[$stat_gamr >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$2 >> 3], $gamr) | 0;
 if (!(HEAP32[$stat_gbm1 >> 2] | 0)) {
  HEAP32[$stat_p >> 2] = _gsl_sf_pow_int_e(+HEAPF64[$4 >> 3], 1 - (HEAP32[$1 >> 2] | 0) | 0, $powx1N) | 0;
  HEAPF64[$pe_val >> 3] = +HEAPF64[$powx1N >> 3] * +HEAPF64[$5 >> 3];
  $170 = +HEAPF64[$powx1N + 8 >> 3] * +Math_abs(+(+HEAPF64[$5 >> 3]));
  HEAPF64[$pe_err >> 3] = $170 + +Math_abs(+(+HEAPF64[$pe_val >> 3])) * 4.440892098500626e-16;
  HEAPF64[$coeff_val >> 3] = +HEAPF64[$gbm1 >> 3] * +HEAPF64[$gamr >> 3] * +HEAPF64[$pe_val >> 3];
  $186 = +HEAPF64[$gbm1 + 8 >> 3] * +Math_abs(+(+HEAPF64[$gamr >> 3] * +HEAPF64[$pe_val >> 3]));
  $194 = $186 + +HEAPF64[$gamr + 8 >> 3] * +Math_abs(+(+HEAPF64[$gbm1 >> 3] * +HEAPF64[$pe_val >> 3]));
  $198 = +Math_abs(+(+HEAPF64[$gbm1 >> 3] * +HEAPF64[$gamr >> 3]));
  HEAPF64[$coeff_err >> 3] = $194 + $198 * +HEAPF64[$pe_err >> 3] + +Math_abs(+(+HEAPF64[$coeff_val >> 3])) * 4.440892098500626e-16;
  HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$sum_val >> 3] * +HEAPF64[$coeff_val >> 3];
  $211 = +Math_abs(+(+HEAPF64[$sum_val >> 3]));
  $218 = $211 * +HEAPF64[$coeff_err >> 3] + +HEAPF64[$sum_err >> 3] * +Math_abs(+(+HEAPF64[$coeff_val >> 3]));
  HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = $218;
  $228 = (+(HEAP32[$M >> 2] | 0) + 2.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[HEAP32[$6 >> 2] >> 3]));
  $230 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
  HEAPF64[$230 >> 3] = +HEAPF64[$230 >> 3] + $228;
  $234 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
  HEAPF64[$234 >> 3] = +HEAPF64[$234 >> 3] * 2.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_p >> 2];
  $242 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $242 | 0;
 } else {
  HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_gbm1 >> 2];
  $242 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $242 | 0;
 }
 return 0;
}
function _gsl_sf_ellint_RD_e($x, $y, $z, $mode, $result) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $12 = 0, $183 = 0.0, $189 = 0.0, $195 = 0, $2 = 0, $3 = 0, $38 = 0.0, $4 = 0, $45 = 0.0, $5 = 0, $74 = 0.0, $76 = 0.0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $ea = 0, $eb = 0, $ec = 0, $ed = 0, $ef = 0, $epslon = 0, $errtol = 0, $goal = 0, $lamda = 0, $lolim = 0, $mu = 0, $n = 0, $power4 = 0, $prec = 0, $s1 = 0, $s2 = 0, $sigma = 0, $uplim = 0, $xn = 0, $xndev = 0, $xnroot = 0, $yn = 0, $yndev = 0, $ynroot = 0, $zn = 0, $zndev = 0, $znroot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $0 = sp + 276 | 0;
 $1 = sp + 248 | 0;
 $2 = sp + 240 | 0;
 $3 = sp + 232 | 0;
 $4 = sp + 272 | 0;
 $5 = sp + 268 | 0;
 $goal = sp + 264 | 0;
 $errtol = sp + 224 | 0;
 $prec = sp + 216 | 0;
 $lolim = sp + 208 | 0;
 $uplim = sp + 200 | 0;
 $c1 = sp + 192 | 0;
 $c2 = sp + 184 | 0;
 $c3 = sp + 176 | 0;
 $c4 = sp + 168 | 0;
 $xn = sp + 160 | 0;
 $yn = sp + 152 | 0;
 $zn = sp + 144 | 0;
 $sigma = sp + 136 | 0;
 $power4 = sp + 128 | 0;
 $ea = sp + 120 | 0;
 $eb = sp + 112 | 0;
 $ec = sp + 104 | 0;
 $ed = sp + 96 | 0;
 $ef = sp + 88 | 0;
 $s1 = sp + 80 | 0;
 $s2 = sp + 72 | 0;
 $mu = sp + 64 | 0;
 $xndev = sp + 56 | 0;
 $yndev = sp + 48 | 0;
 $zndev = sp + 40 | 0;
 $n = sp + 256 | 0;
 $xnroot = sp + 32 | 0;
 $ynroot = sp + 24 | 0;
 $znroot = sp + 16 | 0;
 $lamda = sp + 8 | 0;
 $epslon = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAPF64[$3 >> 3] = $z;
 HEAP32[$4 >> 2] = $mode;
 HEAP32[$5 >> 2] = $result;
 HEAP32[$goal >> 2] = _GSL_MODE_PREC(HEAP32[$4 >> 2] | 0) | 0;
 HEAPF64[$errtol >> 3] = (HEAP32[$goal >> 2] | 0) == 0 ? .001 : .03;
 $12 = _gsl_prec_eps + (HEAP32[$goal >> 2] << 3) | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[$12 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[$12 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[$12 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[$12 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[$12 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[$12 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[$12 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[$12 + 7 >> 0];
 HEAPF64[$prec >> 3] = +HEAPF64[tempDoublePtr >> 3];
 HEAPF64[$lolim >> 3] = 2.0 / +Math_pow(1.7976931348623157e+308, .6666666666666666);
 HEAPF64[$uplim >> 3] = +Math_pow(+(+HEAPF64[$errtol >> 3] * .1 / 2.2250738585072014e-308), .6666666666666666);
 HEAP32[sp + 260 >> 2] = 1e4;
 if (!((+HEAPF64[$1 >> 3] < +HEAPF64[$2 >> 3] ? +HEAPF64[$1 >> 3] : +HEAPF64[$2 >> 3]) < 0.0)) {
  if (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] < +HEAPF64[$3 >> 3]) $38 = +HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]; else $38 = +HEAPF64[$3 >> 3];
  if (!($38 < +HEAPF64[$lolim >> 3])) {
   $45 = +_locMAX3(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3]);
   if (!($45 < +HEAPF64[$uplim >> 3])) {
    HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
    _gsl_error(29376, 29392, 177, 1);
    HEAP32[$0 >> 2] = 1;
    $195 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $195 | 0;
   }
   HEAPF64[$c1 >> 3] = .21428571428571427;
   HEAPF64[$c2 >> 3] = .16666666666666666;
   HEAPF64[$c3 >> 3] = .4090909090909091;
   HEAPF64[$c4 >> 3] = .11538461538461539;
   HEAPF64[$xn >> 3] = +HEAPF64[$1 >> 3];
   HEAPF64[$yn >> 3] = +HEAPF64[$2 >> 3];
   HEAPF64[$zn >> 3] = +HEAPF64[$3 >> 3];
   HEAPF64[$sigma >> 3] = 0.0;
   HEAPF64[$power4 >> 3] = 1.0;
   HEAP32[$n >> 2] = 0;
   while (1) {
    HEAPF64[$mu >> 3] = (+HEAPF64[$xn >> 3] + +HEAPF64[$yn >> 3] + +HEAPF64[$zn >> 3] * 3.0) * .2;
    HEAPF64[$xndev >> 3] = (+HEAPF64[$mu >> 3] - +HEAPF64[$xn >> 3]) / +HEAPF64[$mu >> 3];
    HEAPF64[$yndev >> 3] = (+HEAPF64[$mu >> 3] - +HEAPF64[$yn >> 3]) / +HEAPF64[$mu >> 3];
    HEAPF64[$zndev >> 3] = (+HEAPF64[$mu >> 3] - +HEAPF64[$zn >> 3]) / +HEAPF64[$mu >> 3];
    $74 = +Math_abs(+(+HEAPF64[$xndev >> 3]));
    $76 = +Math_abs(+(+HEAPF64[$yndev >> 3]));
    HEAPF64[$epslon >> 3] = +_locMAX3($74, $76, +Math_abs(+(+HEAPF64[$zndev >> 3])));
    if (+HEAPF64[$epslon >> 3] < +HEAPF64[$errtol >> 3]) {
     label = 12;
     break;
    }
    HEAPF64[$xnroot >> 3] = +Math_sqrt(+(+HEAPF64[$xn >> 3]));
    HEAPF64[$ynroot >> 3] = +Math_sqrt(+(+HEAPF64[$yn >> 3]));
    HEAPF64[$znroot >> 3] = +Math_sqrt(+(+HEAPF64[$zn >> 3]));
    HEAPF64[$lamda >> 3] = +HEAPF64[$xnroot >> 3] * (+HEAPF64[$ynroot >> 3] + +HEAPF64[$znroot >> 3]) + +HEAPF64[$ynroot >> 3] * +HEAPF64[$znroot >> 3];
    HEAPF64[$sigma >> 3] = +HEAPF64[$sigma >> 3] + +HEAPF64[$power4 >> 3] / (+HEAPF64[$znroot >> 3] * (+HEAPF64[$zn >> 3] + +HEAPF64[$lamda >> 3]));
    HEAPF64[$power4 >> 3] = +HEAPF64[$power4 >> 3] * .25;
    HEAPF64[$xn >> 3] = (+HEAPF64[$xn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAPF64[$yn >> 3] = (+HEAPF64[$yn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAPF64[$zn >> 3] = (+HEAPF64[$zn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    if ((HEAP32[$n >> 2] | 0) == 1e4) {
     label = 11;
     break;
    }
   }
   if ((label | 0) == 11) {
    HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
    _gsl_error(29408, 29392, 162, 11);
    HEAP32[$0 >> 2] = 11;
    $195 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $195 | 0;
   } else if ((label | 0) == 12) {
    HEAPF64[$ea >> 3] = +HEAPF64[$xndev >> 3] * +HEAPF64[$yndev >> 3];
    HEAPF64[$eb >> 3] = +HEAPF64[$zndev >> 3] * +HEAPF64[$zndev >> 3];
    HEAPF64[$ec >> 3] = +HEAPF64[$ea >> 3] - +HEAPF64[$eb >> 3];
    HEAPF64[$ed >> 3] = +HEAPF64[$ea >> 3] - +HEAPF64[$eb >> 3] * 6.0;
    HEAPF64[$ef >> 3] = +HEAPF64[$ed >> 3] + +HEAPF64[$ec >> 3] + +HEAPF64[$ec >> 3];
    HEAPF64[$s1 >> 3] = +HEAPF64[$ed >> 3] * (+HEAPF64[$ed >> 3] * .10227272727272728 + -.21428571428571427 - +HEAPF64[$zndev >> 3] * .17307692307692307 * +HEAPF64[$ef >> 3]);
    HEAPF64[$s2 >> 3] = +HEAPF64[$zndev >> 3] * (+HEAPF64[$ef >> 3] * .16666666666666666 + +HEAPF64[$zndev >> 3] * (+HEAPF64[$ec >> 3] * -.4090909090909091 + +HEAPF64[$zndev >> 3] * .11538461538461539 * +HEAPF64[$ea >> 3]));
    $183 = +HEAPF64[$sigma >> 3] * 3.0 + +HEAPF64[$power4 >> 3] * (+HEAPF64[$s1 >> 3] + 1.0 + +HEAPF64[$s2 >> 3]) / (+HEAPF64[$mu >> 3] * +Math_sqrt(+(+HEAPF64[$mu >> 3])));
    HEAPF64[HEAP32[$5 >> 2] >> 3] = $183;
    $189 = +HEAPF64[$prec >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3]));
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $189;
    HEAP32[$0 >> 2] = 0;
    $195 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $195 | 0;
   }
  }
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(29376, 29392, 127, 1);
 HEAP32[$0 >> 2] = 1;
 $195 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $195 | 0;
}
function _gsl_ran_discrete_preproc($Kevents, $ProbArray) {
 $Kevents = $Kevents | 0;
 $ProbArray = $ProbArray | 0;
 var $0 = 0, $1 = 0, $150 = 0, $156 = 0, $2 = 0, $214 = 0, $223 = 0, $232 = 0, $26 = 0, $31 = 0, $Bigs = 0, $Dest = 0, $E = 0, $Smalls = 0, $b = 0, $d = 0, $g = 0, $k = 0, $mean = 0, $nBigs = 0, $nSmalls = 0, $pTotal = 0, $s = 0, $status = 0, $which = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 76 | 0;
 $2 = sp + 72 | 0;
 $k = sp + 68 | 0;
 $b = sp + 64 | 0;
 $s = sp + 60 | 0;
 $g = sp + 56 | 0;
 $nBigs = sp + 52 | 0;
 $nSmalls = sp + 48 | 0;
 $Bigs = sp + 44 | 0;
 $Smalls = sp + 40 | 0;
 $E = sp + 36 | 0;
 $pTotal = sp + 16 | 0;
 $mean = sp + 8 | 0;
 $d = sp;
 $which = sp + 32 | 0;
 $Dest = sp + 28 | 0;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $Kevents;
 HEAP32[$2 >> 2] = $ProbArray;
 HEAPF64[$pTotal >> 3] = 0.0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 1) {
  _gsl_error(65856, 65904, 228, 4);
  HEAP32[$0 >> 2] = 0;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  if (+HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] < 0.0) {
   label = 6;
   break;
  }
  HEAPF64[$pTotal >> 3] = +HEAPF64[$pTotal >> 3] + +HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 if ((label | 0) == 6) {
  _gsl_error(65920, 65904, 238, 4);
  HEAP32[$0 >> 2] = 0;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 HEAP32[$g >> 2] = _malloc(12) | 0;
 HEAP32[HEAP32[$g >> 2] >> 2] = HEAP32[$1 >> 2];
 $26 = _malloc(HEAP32[$1 >> 2] << 3) | 0;
 HEAP32[(HEAP32[$g >> 2] | 0) + 8 >> 2] = $26;
 $31 = _malloc(HEAP32[$1 >> 2] << 2) | 0;
 HEAP32[(HEAP32[$g >> 2] | 0) + 4 >> 2] = $31;
 HEAP32[$E >> 2] = _malloc(HEAP32[$1 >> 2] << 3) | 0;
 if (!(HEAP32[$E >> 2] | 0)) {
  _gsl_error(65960, 65904, 252, 8);
  HEAP32[$0 >> 2] = 0;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  HEAPF64[(HEAP32[$E >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] / +HEAPF64[$pTotal >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[$mean >> 3] = 1.0 / +((HEAP32[$1 >> 2] | 0) >>> 0);
 HEAP32[$nBigs >> 2] = 0;
 HEAP32[$nSmalls >> 2] = 0;
 HEAP32[$which >> 2] = HEAP32[(HEAP32[$g >> 2] | 0) + 4 >> 2];
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  if (+HEAPF64[(HEAP32[$E >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] < +HEAPF64[$mean >> 3]) {
   HEAP32[$nSmalls >> 2] = (HEAP32[$nSmalls >> 2] | 0) + 1;
   HEAP32[(HEAP32[$which >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] = 0;
  } else {
   HEAP32[$nBigs >> 2] = (HEAP32[$nBigs >> 2] | 0) + 1;
   HEAP32[(HEAP32[$which >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] = 1;
  }
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[$Bigs >> 2] = _new_stack(HEAP32[$nBigs >> 2] | 0) | 0;
 HEAP32[$Smalls >> 2] = _new_stack(HEAP32[$nSmalls >> 2] | 0) | 0;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  HEAP32[$Dest >> 2] = (HEAP32[(HEAP32[$which >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] | 0) != 0 ? HEAP32[$Bigs >> 2] | 0 : HEAP32[$Smalls >> 2] | 0;
  HEAP32[$status >> 2] = _push_stack(HEAP32[$Dest >> 2] | 0, HEAP32[$k >> 2] | 0) | 0;
  if (HEAP32[$status >> 2] | 0) {
   label = 22;
   break;
  }
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 if ((label | 0) == 22) {
  _gsl_error(66e3, 65904, 280, 5);
  HEAP32[$0 >> 2] = 0;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 while (1) {
  if ((_size_stack(HEAP32[$Smalls >> 2] | 0) | 0) >>> 0 <= 0) break;
  HEAP32[$s >> 2] = _pop_stack(HEAP32[$Smalls >> 2] | 0) | 0;
  if (!(_size_stack(HEAP32[$Bigs >> 2] | 0) | 0)) {
   HEAP32[(HEAP32[(HEAP32[$g >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$s >> 2] << 2) >> 2] = HEAP32[$s >> 2];
   HEAPF64[(HEAP32[(HEAP32[$g >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$s >> 2] << 3) >> 3] = 1.0;
   continue;
  }
  HEAP32[$b >> 2] = _pop_stack(HEAP32[$Bigs >> 2] | 0) | 0;
  HEAP32[(HEAP32[(HEAP32[$g >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$s >> 2] << 2) >> 2] = HEAP32[$b >> 2];
  HEAPF64[(HEAP32[(HEAP32[$g >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$s >> 2] << 3) >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0) * +HEAPF64[(HEAP32[$E >> 2] | 0) + (HEAP32[$s >> 2] << 3) >> 3];
  HEAPF64[$d >> 3] = +HEAPF64[$mean >> 3] - +HEAPF64[(HEAP32[$E >> 2] | 0) + (HEAP32[$s >> 2] << 3) >> 3];
  $150 = (HEAP32[$E >> 2] | 0) + (HEAP32[$s >> 2] << 3) | 0;
  HEAPF64[$150 >> 3] = +HEAPF64[$150 >> 3] + +HEAPF64[$d >> 3];
  $156 = (HEAP32[$E >> 2] | 0) + (HEAP32[$b >> 2] << 3) | 0;
  HEAPF64[$156 >> 3] = +HEAPF64[$156 >> 3] - +HEAPF64[$d >> 3];
  if (+HEAPF64[(HEAP32[$E >> 2] | 0) + (HEAP32[$b >> 2] << 3) >> 3] < +HEAPF64[$mean >> 3]) {
   _push_stack(HEAP32[$Smalls >> 2] | 0, HEAP32[$b >> 2] | 0) | 0;
   continue;
  }
  if (+HEAPF64[(HEAP32[$E >> 2] | 0) + (HEAP32[$b >> 2] << 3) >> 3] > +HEAPF64[$mean >> 3]) {
   _push_stack(HEAP32[$Bigs >> 2] | 0, HEAP32[$b >> 2] | 0) | 0;
   continue;
  } else {
   HEAP32[(HEAP32[(HEAP32[$g >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$b >> 2] << 2) >> 2] = HEAP32[$b >> 2];
   HEAPF64[(HEAP32[(HEAP32[$g >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$b >> 2] << 3) >> 3] = 1.0;
   continue;
  }
 }
 while (1) {
  if ((_size_stack(HEAP32[$Bigs >> 2] | 0) | 0) >>> 0 <= 0) break;
  HEAP32[$b >> 2] = _pop_stack(HEAP32[$Bigs >> 2] | 0) | 0;
  HEAP32[(HEAP32[(HEAP32[$g >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$b >> 2] << 2) >> 2] = HEAP32[$b >> 2];
  HEAPF64[(HEAP32[(HEAP32[$g >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$b >> 2] << 3) >> 3] = 1.0;
 }
 if (_size_stack(HEAP32[$Smalls >> 2] | 0) | 0) {
  _gsl_error(66024, 65904, 322, 7);
  HEAP32[$0 >> 2] = 0;
  $232 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $232 | 0;
 }
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  $214 = (HEAP32[(HEAP32[$g >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$k >> 2] << 3) | 0;
  HEAPF64[$214 >> 3] = +HEAPF64[$214 >> 3] + +((HEAP32[$k >> 2] | 0) >>> 0);
  $223 = (HEAP32[(HEAP32[$g >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$k >> 2] << 3) | 0;
  HEAPF64[$223 >> 3] = +HEAPF64[$223 >> 3] / +((HEAP32[$1 >> 2] | 0) >>> 0);
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 _free_stack(HEAP32[$Bigs >> 2] | 0);
 _free_stack(HEAP32[$Smalls >> 2] | 0);
 _free(HEAP32[$E >> 2] | 0);
 HEAP32[$0 >> 2] = HEAP32[$g >> 2];
 $232 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $232 | 0;
}
function _gsl_sf_coupling_9j_e($two_ja, $two_jb, $two_jc, $two_jd, $two_je, $two_jf, $two_jg, $two_jh, $two_ji, $result) {
 $two_ja = $two_ja | 0;
 $two_jb = $two_jb | 0;
 $two_jc = $two_jc | 0;
 $two_jd = $two_jd | 0;
 $two_je = $two_je | 0;
 $two_jf = $two_jf | 0;
 $two_jg = $two_jg | 0;
 $two_jh = $two_jh | 0;
 $two_ji = $two_ji | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0, $107 = 0, $116 = 0, $142 = 0.0, $151 = 0.0, $160 = 0.0, $2 = 0, $204 = 0.0, $206 = 0, $218 = 0.0, $220 = 0, $223 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $68 = 0, $7 = 0, $72 = 0, $8 = 0, $9 = 0, $98 = 0, $phase = 0, $s1 = 0, $s2 = 0, $s3 = 0, $status = 0, $sum_neg = 0, $sum_pos = 0, $sumsq_err = 0, $term = 0, $term_err = 0, $tk = 0, $tkmax = 0, $tkmin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 152 | 0;
 $1 = sp + 148 | 0;
 $2 = sp + 144 | 0;
 $3 = sp + 140 | 0;
 $4 = sp + 136 | 0;
 $5 = sp + 132 | 0;
 $6 = sp + 128 | 0;
 $7 = sp + 124 | 0;
 $8 = sp + 120 | 0;
 $9 = sp + 116 | 0;
 $10 = sp + 112 | 0;
 $tk = sp + 108 | 0;
 $tkmin = sp + 104 | 0;
 $tkmax = sp + 100 | 0;
 $sum_pos = sp + 88 | 0;
 $sum_neg = sp + 80 | 0;
 $sumsq_err = sp + 72 | 0;
 $phase = sp + 64 | 0;
 $s1 = sp + 48 | 0;
 $s2 = sp + 32 | 0;
 $s3 = sp + 16 | 0;
 $term = sp + 8 | 0;
 $term_err = sp;
 $status = sp + 96 | 0;
 HEAP32[$1 >> 2] = $two_ja;
 HEAP32[$2 >> 2] = $two_jb;
 HEAP32[$3 >> 2] = $two_jc;
 HEAP32[$4 >> 2] = $two_jd;
 HEAP32[$5 >> 2] = $two_je;
 HEAP32[$6 >> 2] = $two_jf;
 HEAP32[$7 >> 2] = $two_jg;
 HEAP32[$8 >> 2] = $two_jh;
 HEAP32[$9 >> 2] = $two_ji;
 HEAP32[$10 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if ((HEAP32[$2 >> 2] | 0) >= 0) if ((HEAP32[$3 >> 2] | 0) >= 0) if ((HEAP32[$4 >> 2] | 0) >= 0) if ((HEAP32[$5 >> 2] | 0) >= 0) if ((HEAP32[$6 >> 2] | 0) >= 0) if ((HEAP32[$7 >> 2] | 0) >= 0) if ((HEAP32[$8 >> 2] | 0) >= 0) if ((HEAP32[$9 >> 2] | 0) >= 0) {
  if (!(_triangle_selection_fails(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0)) if (!(_triangle_selection_fails(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0)) if (!(_triangle_selection_fails(HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0)) if (!(_triangle_selection_fails(HEAP32[$1 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0)) if (!(_triangle_selection_fails(HEAP32[$2 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0)) if (!(_triangle_selection_fails(HEAP32[$3 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0)) {
   $68 = Math_abs((HEAP32[$1 >> 2] | 0) - (HEAP32[$9 >> 2] | 0) | 0) | 0;
   $72 = Math_abs((HEAP32[$8 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) | 0;
   HEAP32[$tkmin >> 2] = _locMax3($68, $72, Math_abs((HEAP32[$2 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0) | 0) | 0;
   HEAP32[$tkmax >> 2] = _locMin3((HEAP32[$1 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0, (HEAP32[$8 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) | 0, (HEAP32[$2 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0) | 0;
   HEAPF64[$sum_pos >> 3] = 0.0;
   HEAPF64[$sum_neg >> 3] = 0.0;
   HEAPF64[$sumsq_err >> 3] = 0.0;
   HEAP32[$tk >> 2] = HEAP32[$tkmin >> 2];
   while (1) {
    if ((HEAP32[$tk >> 2] | 0) > (HEAP32[$tkmax >> 2] | 0)) {
     label = 26;
     break;
    }
    HEAP32[$status >> 2] = 0;
    $98 = _gsl_sf_coupling_6j_e(HEAP32[$1 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$tk >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$7 >> 2] | 0, $s1) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $98;
    $107 = _gsl_sf_coupling_6j_e(HEAP32[$2 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$tk >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$5 >> 2] | 0, $s2) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $107;
    $116 = _gsl_sf_coupling_6j_e(HEAP32[$1 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$tk >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, $s3) | 0;
    HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $116;
    if (HEAP32[$status >> 2] | 0) {
     label = 21;
     break;
    }
    HEAPF64[$term >> 3] = +HEAPF64[$s1 >> 3] * +HEAPF64[$s2 >> 3] * +HEAPF64[$s3 >> 3];
    HEAPF64[$term_err >> 3] = +HEAPF64[$s1 + 8 >> 3] * +Math_abs(+(+HEAPF64[$s2 >> 3] * +HEAPF64[$s3 >> 3]));
    $142 = +HEAPF64[$s2 + 8 >> 3] * +Math_abs(+(+HEAPF64[$s1 >> 3] * +HEAPF64[$s3 >> 3]));
    HEAPF64[$term_err >> 3] = +HEAPF64[$term_err >> 3] + $142;
    $151 = +HEAPF64[$s3 + 8 >> 3] * +Math_abs(+(+HEAPF64[$s1 >> 3] * +HEAPF64[$s2 >> 3]));
    HEAPF64[$term_err >> 3] = +HEAPF64[$term_err >> 3] + $151;
    $160 = +((HEAP32[$tk >> 2] | 0) + 1 | 0) * +HEAPF64[$term >> 3];
    if (+HEAPF64[$term >> 3] >= 0.0) HEAPF64[$sum_pos >> 3] = +HEAPF64[$sum_pos >> 3] + $160; else HEAPF64[$sum_neg >> 3] = +HEAPF64[$sum_neg >> 3] - $160;
    HEAPF64[$sumsq_err >> 3] = +HEAPF64[$sumsq_err >> 3] + +((HEAP32[$tk >> 2] | 0) + 1 | 0) * +HEAPF64[$term_err >> 3] * +((HEAP32[$tk >> 2] | 0) + 1 | 0) * +HEAPF64[$term_err >> 3];
    HEAP32[$tk >> 2] = (HEAP32[$tk >> 2] | 0) + 2;
   }
   if ((label | 0) == 21) {
    HEAPF64[HEAP32[$10 >> 2] >> 3] = inf;
    HEAPF64[(HEAP32[$10 >> 2] | 0) + 8 >> 3] = inf;
    _gsl_error(26464, 26448, 376, 16);
    HEAP32[$0 >> 2] = 16;
    $223 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $223 | 0;
   } else if ((label | 0) == 26) {
    HEAPF64[$phase >> 3] = (HEAP32[$tkmin >> 2] & 1 | 0) != 0 ? -1.0 : 1.0;
    HEAPF64[HEAP32[$10 >> 2] >> 3] = +HEAPF64[$phase >> 3] * (+HEAPF64[$sum_pos >> 3] - +HEAPF64[$sum_neg >> 3]);
    HEAPF64[(HEAP32[$10 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$sum_pos >> 3] + +HEAPF64[$sum_neg >> 3]) * 4.440892098500626e-16;
    $204 = +Math_sqrt(+(+HEAPF64[$sumsq_err >> 3] / (+((HEAP32[$tkmax >> 2] | 0) - (HEAP32[$tkmin >> 2] | 0) | 0) * .5 + 1.0)));
    $206 = (HEAP32[$10 >> 2] | 0) + 8 | 0;
    HEAPF64[$206 >> 3] = +HEAPF64[$206 >> 3] + $204;
    $218 = (+((HEAP32[$tkmax >> 2] | 0) - (HEAP32[$tkmin >> 2] | 0) | 0) + 2.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[HEAP32[$10 >> 2] >> 3]));
    $220 = (HEAP32[$10 >> 2] | 0) + 8 | 0;
    HEAPF64[$220 >> 3] = +HEAPF64[$220 >> 3] + $218;
    HEAP32[$0 >> 2] = 0;
    $223 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $223 | 0;
   }
  }
  HEAPF64[HEAP32[$10 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$10 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $223 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $223 | 0;
 }
 HEAPF64[HEAP32[$10 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$10 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(26432, 26448, 344, 1);
 HEAP32[$0 >> 2] = 1;
 $223 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $223 | 0;
}
function _hyperg_1F1_luke($a, $c, $xin, $result) {
 $a = +$a;
 $c = +$c;
 $xin = +$xin;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $282 = 0.0, $291 = 0.0, $293 = 0, $3 = 0, $An = 0, $Anm1 = 0, $Anm2 = 0, $Anm3 = 0, $Bn = 0, $Bnm1 = 0, $Bnm2 = 0, $Bnm3 = 0, $E = 0, $F = 0, $F1 = 0, $F2 = 0, $F3 = 0, $n = 0, $npam1 = 0, $npam2 = 0, $npcm1 = 0, $npcm2 = 0, $prec = 0, $r = 0, $t0 = 0, $t1 = 0, $t2 = 0, $tnm1 = 0, $tnm3 = 0, $tnm5 = 0, $x = 0, $x3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $0 = sp + 240 | 0;
 $1 = sp + 232 | 0;
 $2 = sp + 224 | 0;
 $3 = sp + 256 | 0;
 $n = sp + 248 | 0;
 $x = sp + 208 | 0;
 $x3 = sp + 200 | 0;
 $t0 = sp + 192 | 0;
 $t1 = sp + 184 | 0;
 $t2 = sp + 176 | 0;
 $F = sp + 168 | 0;
 $prec = sp + 160 | 0;
 $Bnm3 = sp + 152 | 0;
 $Bnm2 = sp + 144 | 0;
 $Bnm1 = sp + 136 | 0;
 $Anm3 = sp + 128 | 0;
 $Anm2 = sp + 120 | 0;
 $Anm1 = sp + 112 | 0;
 $npam1 = sp + 104 | 0;
 $npcm1 = sp + 96 | 0;
 $npam2 = sp + 88 | 0;
 $npcm2 = sp + 80 | 0;
 $tnm1 = sp + 72 | 0;
 $tnm3 = sp + 64 | 0;
 $tnm5 = sp + 56 | 0;
 $F1 = sp + 48 | 0;
 $F2 = sp + 40 | 0;
 $F3 = sp + 32 | 0;
 $E = sp + 24 | 0;
 $An = sp + 16 | 0;
 $Bn = sp + 8 | 0;
 $r = sp;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $c;
 HEAPF64[$2 >> 3] = $xin;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[sp + 216 >> 3] = 1.0e+50;
 HEAP32[sp + 252 >> 2] = 5e3;
 HEAP32[$n >> 2] = 3;
 HEAPF64[$x >> 3] = -+HEAPF64[$2 >> 3];
 HEAPF64[$x3 >> 3] = +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3];
 HEAPF64[$t0 >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[$t1 >> 3] = (+HEAPF64[$0 >> 3] + 1.0) / (+HEAPF64[$1 >> 3] * 2.0);
 HEAPF64[$t2 >> 3] = (+HEAPF64[$0 >> 3] + 2.0) / ((+HEAPF64[$1 >> 3] + 1.0) * 2.0);
 HEAPF64[$F >> 3] = 1.0;
 HEAPF64[$Bnm3 >> 3] = 1.0;
 HEAPF64[$Bnm2 >> 3] = +HEAPF64[$t1 >> 3] * +HEAPF64[$x >> 3] + 1.0;
 HEAPF64[$Bnm1 >> 3] = +HEAPF64[$t2 >> 3] * +HEAPF64[$x >> 3] * (+HEAPF64[$t1 >> 3] / 3.0 * +HEAPF64[$x >> 3] + 1.0) + 1.0;
 HEAPF64[$Anm3 >> 3] = 1.0;
 HEAPF64[$Anm2 >> 3] = +HEAPF64[$Bnm2 >> 3] - +HEAPF64[$t0 >> 3] * +HEAPF64[$x >> 3];
 HEAPF64[$Anm1 >> 3] = +HEAPF64[$Bnm1 >> 3] - +HEAPF64[$t0 >> 3] * (+HEAPF64[$t2 >> 3] * +HEAPF64[$x >> 3] + 1.0) * +HEAPF64[$x >> 3] + +HEAPF64[$t0 >> 3] * +HEAPF64[$t1 >> 3] * (+HEAPF64[$1 >> 3] / (+HEAPF64[$1 >> 3] + 1.0)) * +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3];
 while (1) {
  HEAPF64[$npam1 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$0 >> 3] - 1.0;
  HEAPF64[$npcm1 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$1 >> 3] - 1.0;
  HEAPF64[$npam2 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$0 >> 3] - 2.0;
  HEAPF64[$npcm2 >> 3] = +(HEAP32[$n >> 2] | 0) + +HEAPF64[$1 >> 3] - 2.0;
  HEAPF64[$tnm1 >> 3] = +((HEAP32[$n >> 2] << 1) - 1 | 0);
  HEAPF64[$tnm3 >> 3] = +((HEAP32[$n >> 2] << 1) - 3 | 0);
  HEAPF64[$tnm5 >> 3] = +((HEAP32[$n >> 2] << 1) - 5 | 0);
  HEAPF64[$F1 >> 3] = (+(HEAP32[$n >> 2] | 0) - +HEAPF64[$0 >> 3] - 2.0) / (+HEAPF64[$tnm3 >> 3] * 2.0 * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$F2 >> 3] = (+(HEAP32[$n >> 2] | 0) + +HEAPF64[$0 >> 3]) * +HEAPF64[$npam1 >> 3] / (+HEAPF64[$tnm1 >> 3] * 4.0 * +HEAPF64[$tnm3 >> 3] * +HEAPF64[$npcm2 >> 3] * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$F3 >> 3] = -+HEAPF64[$npam2 >> 3] * +HEAPF64[$npam1 >> 3] * (+(HEAP32[$n >> 2] | 0) - +HEAPF64[$0 >> 3] - 2.0) / (+HEAPF64[$tnm3 >> 3] * 8.0 * +HEAPF64[$tnm3 >> 3] * +HEAPF64[$tnm5 >> 3] * (+(HEAP32[$n >> 2] | 0) + +HEAPF64[$1 >> 3] - 3.0) * +HEAPF64[$npcm2 >> 3] * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$E >> 3] = -+HEAPF64[$npam1 >> 3] * (+(HEAP32[$n >> 2] | 0) - +HEAPF64[$1 >> 3] - 1.0) / (+HEAPF64[$tnm3 >> 3] * 2.0 * +HEAPF64[$npcm2 >> 3] * +HEAPF64[$npcm1 >> 3]);
  HEAPF64[$An >> 3] = (+HEAPF64[$F1 >> 3] * +HEAPF64[$x >> 3] + 1.0) * +HEAPF64[$Anm1 >> 3] + (+HEAPF64[$E >> 3] + +HEAPF64[$F2 >> 3] * +HEAPF64[$x >> 3]) * +HEAPF64[$x >> 3] * +HEAPF64[$Anm2 >> 3] + +HEAPF64[$F3 >> 3] * +HEAPF64[$x3 >> 3] * +HEAPF64[$Anm3 >> 3];
  HEAPF64[$Bn >> 3] = (+HEAPF64[$F1 >> 3] * +HEAPF64[$x >> 3] + 1.0) * +HEAPF64[$Bnm1 >> 3] + (+HEAPF64[$E >> 3] + +HEAPF64[$F2 >> 3] * +HEAPF64[$x >> 3]) * +HEAPF64[$x >> 3] * +HEAPF64[$Bnm2 >> 3] + +HEAPF64[$F3 >> 3] * +HEAPF64[$x3 >> 3] * +HEAPF64[$Bnm3 >> 3];
  HEAPF64[$r >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
  HEAPF64[$prec >> 3] = +Math_abs(+((+HEAPF64[$F >> 3] - +HEAPF64[$r >> 3]) / +HEAPF64[$F >> 3]));
  HEAPF64[$F >> 3] = +HEAPF64[$r >> 3];
  if (+HEAPF64[$prec >> 3] < 2.220446049250313e-16) {
   label = 11;
   break;
  }
  if ((HEAP32[$n >> 2] | 0) > 5e3) {
   label = 11;
   break;
  }
  do if (+Math_abs(+(+HEAPF64[$An >> 3])) > 1.0e+50) label = 6; else if (+Math_abs(+(+HEAPF64[$Bn >> 3])) > 1.0e+50) label = 6; else {
   if (!(+Math_abs(+(+HEAPF64[$An >> 3])) < 9.999999999999999e-51)) if (!(+Math_abs(+(+HEAPF64[$Bn >> 3])) < 9.999999999999999e-51)) break;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] * 1.0e+50;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] * 1.0e+50;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] * 1.0e+50;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] * 1.0e+50;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] * 1.0e+50;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] * 1.0e+50;
   HEAPF64[$Anm3 >> 3] = +HEAPF64[$Anm3 >> 3] * 1.0e+50;
   HEAPF64[$Bnm3 >> 3] = +HEAPF64[$Bnm3 >> 3] * 1.0e+50;
  } while (0);
  if ((label | 0) == 6) {
   label = 0;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] / 1.0e+50;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] / 1.0e+50;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] / 1.0e+50;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] / 1.0e+50;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] / 1.0e+50;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] / 1.0e+50;
   HEAPF64[$Anm3 >> 3] = +HEAPF64[$Anm3 >> 3] / 1.0e+50;
   HEAPF64[$Bnm3 >> 3] = +HEAPF64[$Bnm3 >> 3] / 1.0e+50;
  }
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAPF64[$Bnm3 >> 3] = +HEAPF64[$Bnm2 >> 3];
  HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm1 >> 3];
  HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bn >> 3];
  HEAPF64[$Anm3 >> 3] = +HEAPF64[$Anm2 >> 3];
  HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm1 >> 3];
  HEAPF64[$Anm1 >> 3] = +HEAPF64[$An >> 3];
 }
 if ((label | 0) == 11) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$F >> 3];
  $282 = +Math_abs(+(+HEAPF64[$F >> 3] * +HEAPF64[$prec >> 3])) * 2.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $282;
  $291 = (+(HEAP32[$n >> 2] | 0) - 1.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$F >> 3]));
  $293 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$293 >> 3] = +HEAPF64[$293 >> 3] + $291;
  STACKTOP = sp;
  return 0;
 }
 return 0;
}
function _gsl_sf_mathieu_Mc_array($kind, $nmin, $nmax, $qq, $zz, $work, $result_array) {
 $kind = $kind | 0;
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $qq = +$qq;
 $zz = +$zz;
 $work = $work | 0;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $115 = 0.0, $133 = 0.0, $137 = 0.0, $151 = 0, $152 = 0.0, $170 = 0.0, $190 = 0.0, $2 = 0, $203 = 0, $29 = 0.0, $3 = 0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0, $61 = 0, $7 = 0, $75 = 0.0, $79 = 0.0, $89 = 0, $90 = 0.0, $99 = 0.0, $aa = 0, $amax = 0, $coeff = 0, $even_odd = 0, $fc = 0, $fn = 0, $ii = 0, $j1c = 0, $j1pc = 0, $kk = 0, $maxerr = 0, $mm = 0, $order = 0, $pi = 0, $status = 0, $u1 = 0, $u2 = 0, $z2c = 0, $z2pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 960 | 0;
 $0 = sp + 952 | 0;
 $1 = sp + 948 | 0;
 $2 = sp + 944 | 0;
 $3 = sp + 940 | 0;
 $4 = sp + 896 | 0;
 $5 = sp + 888 | 0;
 $6 = sp + 936 | 0;
 $7 = sp + 932 | 0;
 $even_odd = sp + 928 | 0;
 $order = sp + 924 | 0;
 $ii = sp + 920 | 0;
 $kk = sp + 916 | 0;
 $mm = sp + 912 | 0;
 $status = sp + 908 | 0;
 $maxerr = sp + 880 | 0;
 $amax = sp + 872 | 0;
 $pi = sp + 864 | 0;
 $fn = sp + 856 | 0;
 $coeff = sp + 56 | 0;
 $fc = sp + 48 | 0;
 $j1c = sp + 40 | 0;
 $z2c = sp + 32 | 0;
 $j1pc = sp + 24 | 0;
 $z2pc = sp + 16 | 0;
 $u1 = sp + 8 | 0;
 $u2 = sp;
 $aa = sp + 904 | 0;
 HEAP32[$1 >> 2] = $kind;
 HEAP32[$2 >> 2] = $nmin;
 HEAP32[$3 >> 2] = $nmax;
 HEAPF64[$4 >> 3] = $qq;
 HEAPF64[$5 >> 3] = $zz;
 HEAP32[$6 >> 2] = $work;
 HEAP32[$7 >> 2] = $result_array;
 HEAPF64[$maxerr >> 3] = 1.0e-14;
 HEAPF64[$pi >> 3] = 3.141592653589793;
 HEAP32[$aa >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2];
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= ((HEAP32[$3 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) + 1 | 0)) break;
  HEAPF64[(HEAP32[$7 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 if (+HEAPF64[$4 >> 3] <= 0.0) {
  _gsl_error(54728, 54760, 273, 4);
  HEAP32[$0 >> 2] = 4;
  $203 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $203 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < 1 | (HEAP32[$1 >> 2] | 0) > 2) {
  _gsl_error(54784, 54760, 277, 4);
  HEAP32[$0 >> 2] = 4;
  $203 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $203 | 0;
 }
 HEAP32[$mm >> 2] = 0;
 HEAPF64[$amax >> 3] = 0.0;
 $29 = +Math_sqrt(+(+HEAPF64[$4 >> 3]));
 HEAPF64[$u1 >> 3] = $29 * +Math_exp(+(+HEAPF64[$5 >> 3] * -1.0));
 $35 = +Math_sqrt(+(+HEAPF64[$4 >> 3]));
 HEAPF64[$u2 >> 3] = $35 * +Math_exp(+(+HEAPF64[$5 >> 3]));
 _gsl_sf_mathieu_a_array(0, HEAP32[$3 >> 2] | 0, +HEAPF64[$4 >> 3], HEAP32[$6 >> 2] | 0, HEAP32[$aa >> 2] | 0) | 0;
 HEAP32[$ii >> 2] = 0;
 HEAP32[$order >> 2] = HEAP32[$2 >> 2];
 while (1) {
  if ((HEAP32[$order >> 2] | 0) > (HEAP32[$3 >> 2] | 0)) {
   label = 34;
   break;
  }
  HEAPF64[$fn >> 3] = 0.0;
  HEAP32[$even_odd >> 2] = 0;
  HEAP32[$even_odd >> 2] = ((HEAP32[$order >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
  HEAP32[$status >> 2] = _gsl_sf_mathieu_a_coeff(HEAP32[$order >> 2] | 0, +HEAPF64[$4 >> 3], +HEAPF64[(HEAP32[$aa >> 2] | 0) + (HEAP32[$order >> 2] << 3) >> 3], $coeff) | 0;
  if (HEAP32[$status >> 2] | 0) {
   label = 11;
   break;
  }
  $61 = (HEAP32[$even_odd >> 2] | 0) == 0;
  HEAP32[$kk >> 2] = 0;
  if ($61) {
   while (1) {
    if ((HEAP32[$kk >> 2] | 0) >= 100) break;
    if (+HEAPF64[$amax >> 3] > +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]))) $75 = +HEAPF64[$amax >> 3]; else $75 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
    HEAPF64[$amax >> 3] = $75;
    $79 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
    if ($79 / +HEAPF64[$amax >> 3] < +HEAPF64[$maxerr >> 3]) break;
    HEAPF64[$j1c >> 3] = +_gsl_sf_bessel_Jn(HEAP32[$kk >> 2] | 0, +HEAPF64[$u1 >> 3]);
    $89 = HEAP32[$kk >> 2] | 0;
    $90 = +HEAPF64[$u2 >> 3];
    if ((HEAP32[$1 >> 2] | 0) == 1) HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Jn($89, $90); else HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Yn($89, $90);
    $99 = +Math_pow(-1.0, +(+(HEAP32[$order >> 2] | 0) * .5 + +(HEAP32[$kk >> 2] | 0)));
    HEAPF64[$fc >> 3] = $99 * +HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3];
    HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + +HEAPF64[$fc >> 3] * +HEAPF64[$j1c >> 3] * +HEAPF64[$z2c >> 3];
    HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
   }
   $115 = +Math_sqrt(+(+HEAPF64[$pi >> 3] / 2.0));
   HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] * ($115 / +HEAPF64[$coeff >> 3]);
  } else {
   while (1) {
    if ((HEAP32[$kk >> 2] | 0) >= 100) break;
    if (+HEAPF64[$amax >> 3] > +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]))) $133 = +HEAPF64[$amax >> 3]; else $133 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
    HEAPF64[$amax >> 3] = $133;
    $137 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
    if ($137 / +HEAPF64[$amax >> 3] < +HEAPF64[$maxerr >> 3]) break;
    HEAPF64[$j1c >> 3] = +_gsl_sf_bessel_Jn(HEAP32[$kk >> 2] | 0, +HEAPF64[$u1 >> 3]);
    HEAPF64[$j1pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u1 >> 3]);
    $151 = HEAP32[$kk >> 2] | 0;
    $152 = +HEAPF64[$u2 >> 3];
    if ((HEAP32[$1 >> 2] | 0) == 1) {
     HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Jn($151, $152);
     HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u2 >> 3]);
    } else {
     HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Yn($151, $152);
     HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Yn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u2 >> 3]);
    }
    $170 = +Math_pow(-1.0, +(+((HEAP32[$order >> 2] | 0) - 1 | 0) * .5 + +(HEAP32[$kk >> 2] | 0)));
    HEAPF64[$fc >> 3] = $170 * +HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3];
    HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + +HEAPF64[$fc >> 3] * (+HEAPF64[$j1c >> 3] * +HEAPF64[$z2pc >> 3] + +HEAPF64[$j1pc >> 3] * +HEAPF64[$z2c >> 3]);
    HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
   }
   $190 = +Math_sqrt(+(+HEAPF64[$pi >> 3] / 2.0));
   HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] * ($190 / +HEAPF64[$coeff >> 3]);
  }
  HEAPF64[(HEAP32[$7 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = +HEAPF64[$fn >> 3];
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  HEAP32[$order >> 2] = (HEAP32[$order >> 2] | 0) + 1;
 }
 if ((label | 0) == 11) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $203 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $203 | 0;
 } else if ((label | 0) == 34) {
  HEAP32[$0 >> 2] = 0;
  $203 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $203 | 0;
 }
 return 0;
}
function _coulomb_FG0_series($eta, $x, $F, $G) {
 $eta = +$eta;
 $x = +$x;
 $F = $F | 0;
 $G = $G | 0;
 var $0 = 0, $1 = 0, $140 = 0.0, $144 = 0.0, $148 = 0, $154 = 0.0, $156 = 0, $171 = 0.0, $179 = 0.0, $182 = 0.0, $188 = 0.0, $199 = 0.0, $2 = 0, $202 = 0.0, $204 = 0, $210 = 0.0, $212 = 0, $224 = 0, $225 = 0, $3 = 0, $4 = 0, $C0 = 0, $abs_du = 0, $abs_dv = 0, $abs_u = 0, $abs_v = 0, $ln2x = 0, $m = 0, $m_mm1 = 0, $max_abs_du = 0, $max_abs_dv = 0, $psi_stat = 0, $r1pie = 0, $stat_CL = 0, $tex = 0, $u_abs_del_prev = 0, $u_m = 0, $u_mm1 = 0, $u_mm2 = 0, $u_sum = 0, $u_sum_err = 0, $v_abs_del_prev = 0, $v_m = 0, $v_mm1 = 0, $v_mm2 = 0, $v_sum = 0, $v_sum_err = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $0 = sp + 248 | 0;
 $1 = sp + 216 | 0;
 $2 = sp + 208 | 0;
 $3 = sp + 244 | 0;
 $4 = sp + 240 | 0;
 $x2 = sp + 200 | 0;
 $tex = sp + 192 | 0;
 $C0 = sp + 176 | 0;
 $stat_CL = sp + 232 | 0;
 $r1pie = sp + 160 | 0;
 $psi_stat = sp + 228 | 0;
 $u_mm2 = sp + 152 | 0;
 $u_mm1 = sp + 144 | 0;
 $u_m = sp + 136 | 0;
 $v_mm2 = sp + 128 | 0;
 $v_mm1 = sp + 120 | 0;
 $v_m = sp + 112 | 0;
 $u_sum = sp + 104 | 0;
 $v_sum = sp + 96 | 0;
 $u_abs_del_prev = sp + 88 | 0;
 $v_abs_del_prev = sp + 80 | 0;
 $m = sp + 224 | 0;
 $u_sum_err = sp + 72 | 0;
 $v_sum_err = sp + 64 | 0;
 $ln2x = sp + 56 | 0;
 $abs_du = sp + 48 | 0;
 $abs_dv = sp + 40 | 0;
 $m_mm1 = sp + 32 | 0;
 $max_abs_du = sp + 24 | 0;
 $max_abs_dv = sp + 16 | 0;
 $abs_u = sp + 8 | 0;
 $abs_v = sp;
 HEAPF64[$1 >> 3] = $eta;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $F;
 HEAP32[$4 >> 2] = $G;
 HEAP32[sp + 236 >> 2] = 800;
 HEAPF64[$x2 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
 HEAPF64[$tex >> 3] = +HEAPF64[$1 >> 3] * 2.0 * +HEAPF64[$2 >> 3];
 HEAP32[$stat_CL >> 2] = _CLeta(0.0, +HEAPF64[$1 >> 3], $C0) | 0;
 HEAP32[$psi_stat >> 2] = _gsl_sf_psi_1piy_e(+HEAPF64[$1 >> 3], $r1pie) | 0;
 HEAPF64[$u_mm2 >> 3] = 0.0;
 HEAPF64[$u_mm1 >> 3] = +HEAPF64[$2 >> 3];
 HEAPF64[$v_mm2 >> 3] = 1.0;
 HEAPF64[$v_mm1 >> 3] = +HEAPF64[$tex >> 3] * (+HEAPF64[$r1pie >> 3] + .15443132980306573);
 HEAPF64[$u_sum >> 3] = +HEAPF64[$u_mm2 >> 3] + +HEAPF64[$u_mm1 >> 3];
 HEAPF64[$v_sum >> 3] = +HEAPF64[$v_mm2 >> 3] + +HEAPF64[$v_mm1 >> 3];
 HEAPF64[$u_abs_del_prev >> 3] = +Math_abs(+(+HEAPF64[$u_sum >> 3]));
 HEAPF64[$v_abs_del_prev >> 3] = +Math_abs(+(+HEAPF64[$v_sum >> 3]));
 HEAP32[$m >> 2] = 2;
 HEAPF64[$u_sum_err >> 3] = +Math_abs(+(+HEAPF64[$u_sum >> 3])) * 4.440892098500626e-16;
 HEAPF64[$v_sum_err >> 3] = +Math_abs(+(+HEAPF64[$v_sum >> 3])) * 4.440892098500626e-16;
 HEAPF64[$ln2x >> 3] = +Math_log(+(+HEAPF64[$2 >> 3] * 2.0));
 while (1) {
  if ((HEAP32[$m >> 2] | 0) >= 800) break;
  HEAPF64[$m_mm1 >> 3] = +(HEAP32[$m >> 2] | 0) * (+(HEAP32[$m >> 2] | 0) - 1.0);
  HEAPF64[$u_m >> 3] = (+HEAPF64[$tex >> 3] * +HEAPF64[$u_mm1 >> 3] - +HEAPF64[$x2 >> 3] * +HEAPF64[$u_mm2 >> 3]) / +HEAPF64[$m_mm1 >> 3];
  HEAPF64[$v_m >> 3] = (+HEAPF64[$tex >> 3] * +HEAPF64[$v_mm1 >> 3] - +HEAPF64[$x2 >> 3] * +HEAPF64[$v_mm2 >> 3] - +HEAPF64[$1 >> 3] * 2.0 * +((HEAP32[$m >> 2] << 1) - 1 | 0) * +HEAPF64[$u_m >> 3]) / +HEAPF64[$m_mm1 >> 3];
  HEAPF64[$u_sum >> 3] = +HEAPF64[$u_sum >> 3] + +HEAPF64[$u_m >> 3];
  HEAPF64[$v_sum >> 3] = +HEAPF64[$v_sum >> 3] + +HEAPF64[$v_m >> 3];
  HEAPF64[$abs_du >> 3] = +Math_abs(+(+HEAPF64[$u_m >> 3]));
  HEAPF64[$abs_dv >> 3] = +Math_abs(+(+HEAPF64[$v_m >> 3]));
  HEAPF64[$u_sum_err >> 3] = +HEAPF64[$u_sum_err >> 3] + +HEAPF64[$abs_du >> 3] * 4.440892098500626e-16;
  HEAPF64[$v_sum_err >> 3] = +HEAPF64[$v_sum_err >> 3] + +HEAPF64[$abs_dv >> 3] * 4.440892098500626e-16;
  if ((HEAP32[$m >> 2] | 0) > 15) {
   HEAPF64[$max_abs_du >> 3] = +HEAPF64[$abs_du >> 3] > +HEAPF64[$u_abs_del_prev >> 3] ? +HEAPF64[$abs_du >> 3] : +HEAPF64[$u_abs_del_prev >> 3];
   HEAPF64[$max_abs_dv >> 3] = +HEAPF64[$abs_dv >> 3] > +HEAPF64[$v_abs_del_prev >> 3] ? +HEAPF64[$abs_dv >> 3] : +HEAPF64[$v_abs_del_prev >> 3];
   HEAPF64[$abs_u >> 3] = +Math_abs(+(+HEAPF64[$u_sum >> 3]));
   HEAPF64[$abs_v >> 3] = +Math_abs(+(+HEAPF64[$v_sum >> 3]));
   if (+HEAPF64[$max_abs_du >> 3] / (+HEAPF64[$max_abs_du >> 3] + +HEAPF64[$abs_u >> 3]) < 8.881784197001252e-15) if (+HEAPF64[$max_abs_dv >> 3] / (+HEAPF64[$max_abs_dv >> 3] + +HEAPF64[$abs_v >> 3]) < 8.881784197001252e-15) break;
  }
  HEAPF64[$u_abs_del_prev >> 3] = +HEAPF64[$abs_du >> 3];
  HEAPF64[$v_abs_del_prev >> 3] = +HEAPF64[$abs_dv >> 3];
  HEAPF64[$u_mm2 >> 3] = +HEAPF64[$u_mm1 >> 3];
  HEAPF64[$u_mm1 >> 3] = +HEAPF64[$u_m >> 3];
  HEAPF64[$v_mm2 >> 3] = +HEAPF64[$v_mm1 >> 3];
  HEAPF64[$v_mm1 >> 3] = +HEAPF64[$v_m >> 3];
  HEAP32[$m >> 2] = (HEAP32[$m >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$C0 >> 3] * +HEAPF64[$u_sum >> 3];
 $140 = +HEAPF64[$C0 + 8 >> 3] * +Math_abs(+(+HEAPF64[$u_sum >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $140;
 $144 = +Math_abs(+(+HEAPF64[$C0 >> 3]));
 $148 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$148 >> 3] = +HEAPF64[$148 >> 3] + $144 * +HEAPF64[$u_sum_err >> 3];
 $154 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $156 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$156 >> 3] = +HEAPF64[$156 >> 3] + $154;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = (+HEAPF64[$v_sum >> 3] + +HEAPF64[$1 >> 3] * 2.0 * +HEAPF64[$u_sum >> 3] * +HEAPF64[$ln2x >> 3]) / +HEAPF64[$C0 >> 3];
 $171 = +Math_abs(+(+HEAPF64[$v_sum >> 3]));
 $179 = $171 + +Math_abs(+(+HEAPF64[$1 >> 3] * 2.0 * +HEAPF64[$u_sum >> 3] * +HEAPF64[$ln2x >> 3]));
 $182 = $179 / +Math_abs(+(+HEAPF64[$C0 >> 3]));
 $188 = $182 * +Math_abs(+(+HEAPF64[$C0 + 8 >> 3] / +HEAPF64[$C0 >> 3]));
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $188;
 $199 = +HEAPF64[$v_sum_err >> 3] + +Math_abs(+(+HEAPF64[$1 >> 3] * 2.0 * +HEAPF64[$u_sum_err >> 3] * +HEAPF64[$ln2x >> 3]));
 $202 = $199 / +Math_abs(+(+HEAPF64[$C0 >> 3]));
 $204 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$204 >> 3] = +HEAPF64[$204 >> 3] + $202;
 $210 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
 $212 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$212 >> 3] = +HEAPF64[$212 >> 3] + $210;
 if ((HEAP32[$m >> 2] | 0) == 800) {
  _gsl_error(26256, 26240, 440, 11);
  HEAP32[$0 >> 2] = 11;
  $225 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $225 | 0;
 }
 if (HEAP32[$psi_stat >> 2] | 0) $224 = HEAP32[$psi_stat >> 2] | 0; else $224 = (HEAP32[$stat_CL >> 2] | 0) != 0 ? HEAP32[$stat_CL >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $224;
 $225 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $225 | 0;
}
function _gsl_sf_mathieu_Ms($kind, $order, $qq, $zz, $result) {
 $kind = $kind | 0;
 $order = $order | 0;
 $qq = +$qq;
 $zz = +$zz;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $116 = 0.0, $134 = 0.0, $138 = 0.0, $152 = 0, $153 = 0.0, $171 = 0.0, $18 = 0.0, $191 = 0.0, $2 = 0, $206 = 0, $209 = 0, $24 = 0.0, $3 = 0, $4 = 0, $45 = 0, $5 = 0, $59 = 0.0, $63 = 0.0, $77 = 0, $78 = 0.0, $96 = 0.0, $aa = 0, $amax = 0, $coeff = 0, $even_odd = 0, $factor = 0, $fc = 0, $fn = 0, $j1c = 0, $j1mc = 0, $j1pc = 0, $kk = 0, $maxerr = 0, $pi = 0, $status = 0, $u1 = 0, $u2 = 0, $z2c = 0, $z2mc = 0, $z2pc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976 | 0;
 $0 = sp + 972 | 0;
 $1 = sp + 968 | 0;
 $2 = sp + 964 | 0;
 $3 = sp + 936 | 0;
 $4 = sp + 928 | 0;
 $5 = sp + 960 | 0;
 $even_odd = sp + 956 | 0;
 $kk = sp + 952 | 0;
 $status = sp + 944 | 0;
 $maxerr = sp + 920 | 0;
 $amax = sp + 912 | 0;
 $pi = sp + 904 | 0;
 $fn = sp + 896 | 0;
 $factor = sp + 888 | 0;
 $coeff = sp + 88 | 0;
 $fc = sp + 80 | 0;
 $j1c = sp + 72 | 0;
 $z2c = sp + 64 | 0;
 $j1mc = sp + 56 | 0;
 $z2mc = sp + 48 | 0;
 $j1pc = sp + 40 | 0;
 $z2pc = sp + 32 | 0;
 $u1 = sp + 24 | 0;
 $u2 = sp + 16 | 0;
 $aa = sp;
 HEAP32[$1 >> 2] = $kind;
 HEAP32[$2 >> 2] = $order;
 HEAPF64[$3 >> 3] = $qq;
 HEAPF64[$4 >> 3] = $zz;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$maxerr >> 3] = 1.0e-14;
 HEAPF64[$pi >> 3] = 3.141592653589793;
 if (+HEAPF64[$3 >> 3] <= 0.0) {
  _gsl_error(54728, 54760, 150, 4);
  HEAP32[$0 >> 2] = 4;
  $209 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $209 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < 1 | (HEAP32[$1 >> 2] | 0) > 2) {
  _gsl_error(54784, 54760, 154, 4);
  HEAP32[$0 >> 2] = 4;
  $209 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $209 | 0;
 }
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $209 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $209 | 0;
 }
 HEAP32[sp + 948 >> 2] = 0;
 HEAPF64[$amax >> 3] = 0.0;
 HEAPF64[$fn >> 3] = 0.0;
 $18 = +Math_sqrt(+(+HEAPF64[$3 >> 3]));
 HEAPF64[$u1 >> 3] = $18 * +Math_exp(+(+HEAPF64[$4 >> 3] * -1.0));
 $24 = +Math_sqrt(+(+HEAPF64[$3 >> 3]));
 HEAPF64[$u2 >> 3] = $24 * +Math_exp(+(+HEAPF64[$4 >> 3]));
 HEAP32[$even_odd >> 2] = 0;
 HEAP32[$even_odd >> 2] = ((HEAP32[$2 >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
 HEAP32[$status >> 2] = _gsl_sf_mathieu_b(HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], $aa) | 0;
 if (HEAP32[$status >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $209 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $209 | 0;
 }
 HEAP32[$status >> 2] = _gsl_sf_mathieu_b_coeff(HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], +HEAPF64[$aa >> 3], $coeff) | 0;
 if (HEAP32[$status >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $209 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $209 | 0;
 }
 $45 = (HEAP32[$even_odd >> 2] | 0) == 0;
 HEAP32[$kk >> 2] = 0;
 if ($45) {
  while (1) {
   if ((HEAP32[$kk >> 2] | 0) >= 100) break;
   if (+HEAPF64[$amax >> 3] > +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]))) $59 = +HEAPF64[$amax >> 3]; else $59 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
   HEAPF64[$amax >> 3] = $59;
   $63 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
   if ($63 / +HEAPF64[$amax >> 3] < +HEAPF64[$maxerr >> 3]) break;
   HEAPF64[$j1mc >> 3] = +_gsl_sf_bessel_Jn(HEAP32[$kk >> 2] | 0, +HEAPF64[$u1 >> 3]);
   HEAPF64[$j1pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 2 | 0, +HEAPF64[$u1 >> 3]);
   $77 = HEAP32[$kk >> 2] | 0;
   $78 = +HEAPF64[$u2 >> 3];
   if ((HEAP32[$1 >> 2] | 0) == 1) {
    HEAPF64[$z2mc >> 3] = +_gsl_sf_bessel_Jn($77, $78);
    HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 2 | 0, +HEAPF64[$u2 >> 3]);
   } else {
    HEAPF64[$z2mc >> 3] = +_gsl_sf_bessel_Yn($77, $78);
    HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Yn((HEAP32[$kk >> 2] | 0) + 2 | 0, +HEAPF64[$u2 >> 3]);
   }
   $96 = +Math_pow(-1.0, +(+(HEAP32[$2 >> 2] | 0) * .5 + +(HEAP32[$kk >> 2] | 0) + 1.0));
   HEAPF64[$fc >> 3] = $96 * +HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3];
   HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + +HEAPF64[$fc >> 3] * (+HEAPF64[$j1mc >> 3] * +HEAPF64[$z2pc >> 3] - +HEAPF64[$j1pc >> 3] * +HEAPF64[$z2mc >> 3]);
   HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
  }
  $116 = +Math_sqrt(+(+HEAPF64[$pi >> 3] / 2.0));
  HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] * ($116 / +HEAPF64[$coeff >> 3]);
 } else {
  while (1) {
   if ((HEAP32[$kk >> 2] | 0) >= 100) break;
   if (+HEAPF64[$amax >> 3] > +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]))) $134 = +HEAPF64[$amax >> 3]; else $134 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
   HEAPF64[$amax >> 3] = $134;
   $138 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
   if ($138 / +HEAPF64[$amax >> 3] < +HEAPF64[$maxerr >> 3]) break;
   HEAPF64[$j1c >> 3] = +_gsl_sf_bessel_Jn(HEAP32[$kk >> 2] | 0, +HEAPF64[$u1 >> 3]);
   HEAPF64[$j1pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u1 >> 3]);
   $152 = HEAP32[$kk >> 2] | 0;
   $153 = +HEAPF64[$u2 >> 3];
   if ((HEAP32[$1 >> 2] | 0) == 1) {
    HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Jn($152, $153);
    HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u2 >> 3]);
   } else {
    HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Yn($152, $153);
    HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Yn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u2 >> 3]);
   }
   $171 = +Math_pow(-1.0, +(+((HEAP32[$2 >> 2] | 0) - 1 | 0) * .5 + +(HEAP32[$kk >> 2] | 0)));
   HEAPF64[$fc >> 3] = $171 * +HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3];
   HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + +HEAPF64[$fc >> 3] * (+HEAPF64[$j1c >> 3] * +HEAPF64[$z2pc >> 3] - +HEAPF64[$j1pc >> 3] * +HEAPF64[$z2c >> 3]);
   HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
  }
  $191 = +Math_sqrt(+(+HEAPF64[$pi >> 3] / 2.0));
  HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] * ($191 / +HEAPF64[$coeff >> 3]);
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$fn >> 3];
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16;
 HEAPF64[$factor >> 3] = +Math_abs(+(+HEAPF64[$fn >> 3]));
 if (+HEAPF64[$factor >> 3] > 1.0) {
  $206 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$206 >> 3] = +HEAPF64[$206 >> 3] * +HEAPF64[$factor >> 3];
 }
 HEAP32[$0 >> 2] = 0;
 $209 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $209 | 0;
}
function _pochrel_smallx($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $14 = 0.0, $148 = 0.0, $171 = 0.0, $175 = 0.0, $180 = 0.0, $2 = 0, $20 = 0.0, $214 = 0.0, $216 = 0.0, $220 = 0.0, $227 = 0.0, $231 = 0.0, $233 = 0, $236 = 0, $3 = 0, $6 = 0.0, $alnvar = 0, $b = 0, $binv = 0, $bp = 0, $dexprl = 0, $dpoch1 = 0, $gbern = 0, $gbk = 0, $i = 0, $incr = 0, $j = 0, $k = 0, $nterms = 0, $poly1 = 0, $q = 0, $rho = 0, $sinpx2 = 0, $sinpxx = 0, $stat_dexprl = 0, $t1 = 0, $t2 = 0, $term = 0, $trig = 0, $var = 0, $var2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $0 = sp + 404 | 0;
 $1 = sp + 368 | 0;
 $2 = sp + 360 | 0;
 $3 = sp + 400 | 0;
 $bp = sp + 336 | 0;
 $incr = sp + 396 | 0;
 $b = sp + 328 | 0;
 $dpoch1 = sp + 320 | 0;
 $dexprl = sp + 304 | 0;
 $stat_dexprl = sp + 392 | 0;
 $i = sp + 388 | 0;
 $var = sp + 296 | 0;
 $alnvar = sp + 288 | 0;
 $q = sp + 280 | 0;
 $poly1 = sp + 272 | 0;
 $nterms = sp + 384 | 0;
 $var2 = sp + 264 | 0;
 $rho = sp + 256 | 0;
 $term = sp + 248 | 0;
 $gbern = sp + 56 | 0;
 $k = sp + 380 | 0;
 $j = sp + 376 | 0;
 $gbk = sp + 48 | 0;
 $binv = sp + 40 | 0;
 $sinpxx = sp + 32 | 0;
 $sinpx2 = sp + 24 | 0;
 $t1 = sp + 16 | 0;
 $t2 = sp + 8 | 0;
 $trig = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[sp + 352 >> 3] = 1.3684286665667226e+153;
 HEAPF64[sp + 344 >> 3] = -36.7368005696771;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAP32[$0 >> 2] = _gsl_sf_psi_e($6, HEAP32[$3 >> 2] | 0) | 0;
  $236 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $236 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if ($6 < -.5) $14 = 1.0 - $10 - +HEAPF64[$2 >> 3]; else $14 = $10;
 HEAPF64[$bp >> 3] = $14;
 if (+HEAPF64[$bp >> 3] < 10.0) $20 = 11.0 - +HEAPF64[$bp >> 3]; else $20 = 0.0;
 HEAP32[$incr >> 2] = ~~$20;
 HEAPF64[$b >> 3] = +HEAPF64[$bp >> 3] + +(HEAP32[$incr >> 2] | 0);
 HEAPF64[$var >> 3] = +HEAPF64[$b >> 3] + (+HEAPF64[$2 >> 3] - 1.0) * .5;
 HEAPF64[$alnvar >> 3] = +Math_log(+(+HEAPF64[$var >> 3]));
 HEAPF64[$q >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$alnvar >> 3];
 HEAPF64[$poly1 >> 3] = 0.0;
 L11 : do if (+HEAPF64[$var >> 3] < 1.3684286665667226e+153) {
  HEAP32[$nterms >> 2] = ~~(18.36840028483855 / +HEAPF64[$alnvar >> 3] + 1.0);
  HEAPF64[$var2 >> 3] = 1.0 / +HEAPF64[$var >> 3] / +HEAPF64[$var >> 3];
  HEAPF64[$rho >> 3] = (+HEAPF64[$2 >> 3] + 1.0) * .5;
  HEAPF64[$term >> 3] = +HEAPF64[$var2 >> 3];
  HEAPF64[$gbern + 8 >> 3] = 1.0;
  HEAPF64[$gbern + 16 >> 3] = -+HEAPF64[$rho >> 3] / 12.0;
  HEAPF64[$poly1 >> 3] = +HEAPF64[$gbern + 16 >> 3] * +HEAPF64[$term >> 3];
  if ((HEAP32[$nterms >> 2] | 0) > 20) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   _gsl_error(55328, 55208, 128, 7);
   HEAP32[$0 >> 2] = 7;
   $236 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $236 | 0;
  }
  HEAP32[$k >> 2] = 2;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) > (HEAP32[$nterms >> 2] | 0)) break L11;
   HEAPF64[$gbk >> 3] = 0.0;
   HEAP32[$j >> 2] = 1;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) > (HEAP32[$k >> 2] | 0)) break;
    HEAPF64[$gbk >> 3] = +HEAPF64[$gbk >> 3] + +HEAPF64[55336 + ((HEAP32[$k >> 2] | 0) - (HEAP32[$j >> 2] | 0) + 1 << 3) >> 3] * +HEAPF64[$gbern + (HEAP32[$j >> 2] << 3) >> 3];
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   HEAPF64[$gbern + ((HEAP32[$k >> 2] | 0) + 1 << 3) >> 3] = -+HEAPF64[$rho >> 3] * +HEAPF64[$gbk >> 3] / +(HEAP32[$k >> 2] | 0);
   HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * (+((HEAP32[$k >> 2] << 1) - 2 | 0) - +HEAPF64[$2 >> 3]) * (+((HEAP32[$k >> 2] << 1) - 1 | 0) - +HEAPF64[$2 >> 3]) * +HEAPF64[$var2 >> 3];
   HEAPF64[$poly1 >> 3] = +HEAPF64[$poly1 >> 3] + +HEAPF64[$gbern + ((HEAP32[$k >> 2] | 0) + 1 << 3) >> 3] * +HEAPF64[$term >> 3];
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[$stat_dexprl >> 2] = _gsl_sf_expm1_e(+HEAPF64[$q >> 3], $dexprl) | 0;
 if (HEAP32[$stat_dexprl >> 2] | 0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_dexprl >> 2];
  $236 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $236 | 0;
 }
 HEAPF64[$dexprl >> 3] = +HEAPF64[$dexprl >> 3] / +HEAPF64[$q >> 3];
 HEAPF64[$poly1 >> 3] = +HEAPF64[$poly1 >> 3] * (+HEAPF64[$2 >> 3] - 1.0);
 HEAPF64[$dpoch1 >> 3] = +HEAPF64[$dexprl >> 3] * (+HEAPF64[$alnvar >> 3] + +HEAPF64[$q >> 3] * +HEAPF64[$poly1 >> 3]) + +HEAPF64[$poly1 >> 3];
 HEAP32[$i >> 2] = (HEAP32[$incr >> 2] | 0) - 1;
 while (1) {
  $148 = +HEAPF64[$bp >> 3];
  if ((HEAP32[$i >> 2] | 0) < 0) break;
  HEAPF64[$binv >> 3] = 1.0 / ($148 + +(HEAP32[$i >> 2] | 0));
  HEAPF64[$dpoch1 >> 3] = (+HEAPF64[$dpoch1 >> 3] - +HEAPF64[$binv >> 3]) / (+HEAPF64[$2 >> 3] * +HEAPF64[$binv >> 3] + 1.0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 if ($148 == +HEAPF64[$1 >> 3]) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$dpoch1 >> 3];
  $171 = (+Math_abs(+(+(HEAP32[$incr >> 2] | 0))) + 1.0) * 4.440892098500626e-16;
  $175 = $171 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $175;
  HEAP32[$0 >> 2] = 0;
  $236 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $236 | 0;
 } else {
  $180 = +Math_sin(+(+HEAPF64[$2 >> 3] * 3.141592653589793));
  HEAPF64[$sinpxx >> 3] = $180 / +HEAPF64[$2 >> 3];
  HEAPF64[$sinpx2 >> 3] = +Math_sin(+(+HEAPF64[$2 >> 3] * 1.5707963267948966));
  HEAPF64[$t1 >> 3] = +HEAPF64[$sinpxx >> 3] / +Math_tan(+(+HEAPF64[$b >> 3] * 3.141592653589793));
  HEAPF64[$t2 >> 3] = +HEAPF64[$sinpx2 >> 3] * 2.0 * (+HEAPF64[$sinpx2 >> 3] / +HEAPF64[$2 >> 3]);
  HEAPF64[$trig >> 3] = +HEAPF64[$t1 >> 3] - +HEAPF64[$t2 >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$dpoch1 >> 3] * (+HEAPF64[$2 >> 3] * +HEAPF64[$trig >> 3] + 1.0) + +HEAPF64[$trig >> 3];
  $214 = (+Math_abs(+(+HEAPF64[$dpoch1 >> 3] * +HEAPF64[$2 >> 3])) + 1.0) * 2.220446049250313e-16;
  $216 = +Math_abs(+(+HEAPF64[$t1 >> 3]));
  $220 = $214 * ($216 + +Math_abs(+(+HEAPF64[$t2 >> 3])));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $220;
  $227 = (+Math_abs(+(+(HEAP32[$incr >> 2] | 0))) + 1.0) * 4.440892098500626e-16;
  $231 = $227 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  $233 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$233 >> 3] = +HEAPF64[$233 >> 3] + $231;
  HEAP32[$0 >> 2] = 0;
  $236 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $236 | 0;
 }
 return 0;
}
function _hyperg_1F1_small_a_bgt0($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $110 = 0.0, $152 = 0.0, $155 = 0.0, $160 = 0.0, $162 = 0, $172 = 0, $173 = 0.0, $180 = 0.0, $183 = 0.0, $2 = 0, $228 = 0, $3 = 0, $4 = 0, $51 = 0.0, $57 = 0.0, $59 = 0, $88 = 0.0, $Mb = 0, $Mbm1 = 0, $Mbp1 = 0, $abs_ap1mb = 0, $abs_bma = 0, $abs_oma = 0, $ap1mb = 0, $ax = 0, $b_del = 0, $bma = 0, $bp = 0, $err_rat = 0, $oma = 0, $r_Mb = 0, $r_Mbp1 = 0, $stat_0 = 0, $stat_1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 172 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 144 | 0;
 $3 = sp + 136 | 0;
 $4 = sp + 168 | 0;
 $bma = sp + 128 | 0;
 $oma = sp + 120 | 0;
 $ap1mb = sp + 112 | 0;
 $abs_bma = sp + 104 | 0;
 $abs_oma = sp + 96 | 0;
 $abs_ap1mb = sp + 88 | 0;
 $ax = sp + 80 | 0;
 $b_del = sp + 72 | 0;
 $bp = sp + 64 | 0;
 $r_Mbp1 = sp + 48 | 0;
 $r_Mb = sp + 32 | 0;
 $Mbp1 = sp + 24 | 0;
 $Mb = sp + 16 | 0;
 $Mbm1 = sp + 8 | 0;
 $stat_0 = sp + 164 | 0;
 $stat_1 = sp + 160 | 0;
 $err_rat = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$bma >> 3] = +HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3];
 HEAPF64[$oma >> 3] = 1.0 - +HEAPF64[$1 >> 3];
 HEAPF64[$ap1mb >> 3] = +HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3];
 HEAPF64[$abs_bma >> 3] = +Math_abs(+(+HEAPF64[$bma >> 3]));
 HEAPF64[$abs_oma >> 3] = +Math_abs(+(+HEAPF64[$oma >> 3]));
 HEAPF64[$abs_ap1mb >> 3] = +Math_abs(+(+HEAPF64[$ap1mb >> 3]));
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$3 >> 3]));
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $228 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $228 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) if (+HEAPF64[$2 >> 3] >= 1.0) {
  HEAP32[$0 >> 2] = _hyperg_1F1_1(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $228 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $228 | 0;
 }
 if (+HEAPF64[$1 >> 3] == -1.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3] * +HEAPF64[$3 >> 3] + 1.0;
  $51 = (+Math_abs(+(+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3] * +HEAPF64[$3 >> 3])) + 1.0) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $51;
  $57 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $59 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$59 >> 3] = +HEAPF64[$59 >> 3] + $57;
  HEAP32[$0 >> 2] = 0;
  $228 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $228 | 0;
 }
 if (+HEAPF64[$2 >> 3] >= +HEAPF64[$ax >> 3] * 1.4) {
  HEAP32[$0 >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $228 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $228 | 0;
 }
 if (!(+HEAPF64[$3 >> 3] > 0.0)) {
  if (+HEAPF64[$ax >> 3] < 10.0) if (+HEAPF64[$2 >> 3] < 10.0) {
   HEAP32[$0 >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $228 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $228 | 0;
  }
  if (+HEAPF64[$ax >> 3] >= 100.0) if ((+HEAPF64[$abs_ap1mb >> 3] > 1.0 ? +HEAPF64[$abs_ap1mb >> 3] : 1.0) < +HEAPF64[$ax >> 3] * .99) {
   HEAP32[$0 >> 2] = _hyperg_1F1_asymp_negx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $228 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $228 | 0;
  }
  HEAP32[$0 >> 2] = _hyperg_1F1_luke(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $228 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $228 | 0;
 }
 if (+HEAPF64[$3 >> 3] > 100.0) if (+HEAPF64[$abs_bma >> 3] * +HEAPF64[$abs_oma >> 3] < +HEAPF64[$3 >> 3] * .5) {
  HEAP32[$0 >> 2] = _hyperg_1F1_asymp_posx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $228 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $228 | 0;
 }
 $88 = +HEAPF64[$3 >> 3];
 if (!(+HEAPF64[$2 >> 3] < 5.0e6)) {
  $173 = +Math_abs(+$88);
  if ($173 < +Math_abs(+(+HEAPF64[$2 >> 3]))) {
   $180 = +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$3 >> 3]));
   $183 = +Math_sqrt(+(+Math_abs(+(+HEAPF64[$2 >> 3]))));
   if ($180 < $183 * +Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3]))) {
    HEAP32[$0 >> 2] = _hyperg_1F1_largebx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
    $228 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $228 | 0;
   }
  }
  HEAP32[$0 >> 2] = _hyperg_1F1_large2bm4a(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $228 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $228 | 0;
 }
 HEAPF64[$b_del >> 3] = +Math_ceil(+(1.4 * $88 - +HEAPF64[$2 >> 3])) + 1.0;
 HEAPF64[$bp >> 3] = +HEAPF64[$2 >> 3] + +HEAPF64[$b_del >> 3];
 HEAP32[$stat_0 >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$1 >> 3], +HEAPF64[$bp >> 3] + 1.0, +HEAPF64[$3 >> 3], $r_Mbp1) | 0;
 HEAP32[$stat_1 >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$1 >> 3], +HEAPF64[$bp >> 3], +HEAPF64[$3 >> 3], $r_Mb) | 0;
 $110 = +Math_abs(+(+HEAPF64[$r_Mbp1 + 8 >> 3] / +HEAPF64[$r_Mbp1 >> 3]));
 HEAPF64[$err_rat >> 3] = $110 + +Math_abs(+(+HEAPF64[$r_Mb + 8 >> 3] / +HEAPF64[$r_Mb >> 3]));
 HEAPF64[$Mbp1 >> 3] = +HEAPF64[$r_Mbp1 >> 3];
 HEAPF64[$Mb >> 3] = +HEAPF64[$r_Mb >> 3];
 while (1) {
  if (!(+HEAPF64[$bp >> 3] > +HEAPF64[$2 >> 3] + .1)) break;
  HEAPF64[$Mbm1 >> 3] = ((+HEAPF64[$3 >> 3] + +HEAPF64[$bp >> 3] - 1.0) * +HEAPF64[$Mb >> 3] - +HEAPF64[$3 >> 3] * (+HEAPF64[$bp >> 3] - +HEAPF64[$1 >> 3]) / +HEAPF64[$bp >> 3] * +HEAPF64[$Mbp1 >> 3]) / (+HEAPF64[$bp >> 3] - 1.0);
  HEAPF64[$bp >> 3] = +HEAPF64[$bp >> 3] - 1.0;
  HEAPF64[$Mbp1 >> 3] = +HEAPF64[$Mb >> 3];
  HEAPF64[$Mb >> 3] = +HEAPF64[$Mbm1 >> 3];
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Mb >> 3];
 $152 = +HEAPF64[$err_rat >> 3] * (+Math_abs(+(+HEAPF64[$b_del >> 3])) + 1.0);
 $155 = $152 * +Math_abs(+(+HEAPF64[$Mb >> 3]));
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $155;
 $160 = +Math_abs(+(+HEAPF64[$Mb >> 3])) * 4.440892098500626e-16;
 $162 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$162 >> 3] = +HEAPF64[$162 >> 3] + $160;
 if (HEAP32[$stat_0 >> 2] | 0) $172 = HEAP32[$stat_0 >> 2] | 0; else $172 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $172;
 $228 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $228 | 0;
}
function _gsl_sf_bessel_In_scaled_e($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $109 = 0.0, $111 = 0, $130 = 0, $135 = 0.0, $139 = 0.0, $149 = 0.0, $15 = 0.0, $157 = 0.0, $2 = 0, $226 = 0, $227 = 0, $3 = 0, $51 = 0.0, $53 = 0, $I0_scaled = 0, $Ik = 0, $Ik2 = 0, $Ikm1 = 0, $Ikm13 = 0, $Ikp1 = 0, $Ikp11 = 0, $ax = 0, $ex = 0, $k = 0, $k4 = 0, $nhi = 0, $r_Ik = 0, $r_Ikp1 = 0, $rat = 0, $stat_CF1 = 0, $stat_I0 = 0, $stat_In = 0, $stat_a1 = 0, $stat_a2 = 0, $stat_as = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 188 | 0;
 $1 = sp + 184 | 0;
 $2 = sp + 136 | 0;
 $3 = sp + 180 | 0;
 $ax = sp + 128 | 0;
 $t = sp + 112 | 0;
 $ex = sp + 104 | 0;
 $stat_In = sp + 176 | 0;
 $I0_scaled = sp + 88 | 0;
 $stat_I0 = sp + 172 | 0;
 $rat = sp + 80 | 0;
 $stat_CF1 = sp + 168 | 0;
 $Ikp1 = sp + 72 | 0;
 $Ik = sp + 64 | 0;
 $Ikm1 = sp + 56 | 0;
 $k = sp + 164 | 0;
 $stat_as = sp + 160 | 0;
 $nhi = sp + 156 | 0;
 $r_Ikp1 = sp + 40 | 0;
 $r_Ik = sp + 24 | 0;
 $stat_a1 = sp + 152 | 0;
 $stat_a2 = sp + 148 | 0;
 $Ikp11 = sp + 16 | 0;
 $Ik2 = sp + 8 | 0;
 $Ikm13 = sp;
 $k4 = sp + 144 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 HEAP32[$1 >> 2] = Math_abs(HEAP32[$1 >> 2] | 0) | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$0 >> 2] = _gsl_sf_bessel_I0_scaled_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 $15 = +HEAPF64[$2 >> 3];
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$0 >> 2] = _gsl_sf_bessel_I1_scaled_e($15, HEAP32[$3 >> 2] | 0) | 0;
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 if ($15 == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 if (+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] < (+(HEAP32[$1 >> 2] | 0) + 1.0) * 10.0 / 2.718281828459045) {
  HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$ax >> 3]);
  HEAP32[$stat_In >> 2] = _gsl_sf_bessel_IJ_taylor_e(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$ax >> 3], 1, 50, 2.220446049250313e-16, $t) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$t >> 3] * +HEAPF64[$ex >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$t + 8 >> 3] * +HEAPF64[$ex >> 3];
  $51 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $53 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$53 >> 3] = +HEAPF64[$53 >> 3] + $51;
  if (+HEAPF64[$2 >> 3] < 0.0) if (HEAP32[$1 >> 2] & 1) HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[HEAP32[$3 >> 2] >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_In >> 2];
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < 150) if (+HEAPF64[$ax >> 3] < 1.0e7) {
  HEAP32[$stat_I0 >> 2] = _gsl_sf_bessel_I0_scaled_e(+HEAPF64[$ax >> 3], $I0_scaled) | 0;
  HEAP32[$stat_CF1 >> 2] = _gsl_sf_bessel_I_CF1_ser(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$ax >> 3], $rat) | 0;
  HEAPF64[$Ikp1 >> 3] = +HEAPF64[$rat >> 3] * 1.4916681462400413e-154;
  HEAPF64[$Ik >> 3] = 1.4916681462400413e-154;
  HEAP32[$k >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$k >> 2] | 0) < 1) break;
   HEAPF64[$Ikm1 >> 3] = +HEAPF64[$Ikp1 >> 3] + +(HEAP32[$k >> 2] | 0) * 2.0 / +HEAPF64[$ax >> 3] * +HEAPF64[$Ik >> 3];
   HEAPF64[$Ikp1 >> 3] = +HEAPF64[$Ik >> 3];
   HEAPF64[$Ik >> 3] = +HEAPF64[$Ikm1 >> 3];
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + -1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$I0_scaled >> 3] * (1.4916681462400413e-154 / +HEAPF64[$Ik >> 3]);
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$I0_scaled + 8 >> 3] * (1.4916681462400413e-154 / +HEAPF64[$Ik >> 3]);
  $109 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $111 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$111 >> 3] = +HEAPF64[$111 >> 3] + $109;
  if (+HEAPF64[$2 >> 3] < 0.0) if (HEAP32[$1 >> 2] & 1) HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[HEAP32[$3 >> 2] >> 3];
  if (HEAP32[$stat_I0 >> 2] | 0) $130 = HEAP32[$stat_I0 >> 2] | 0; else $130 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $130;
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 $135 = .29 / +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0);
 $139 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0);
 $149 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0);
 if ($135 < .5 / ($139 + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3])) $157 = .29 / $149; else $157 = .5 / ($149 + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
 if ($157 < 30277272261966714.0e-22) {
  HEAP32[$stat_as >> 2] = _gsl_sf_bessel_Inu_scaled_asymp_unif_e(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$ax >> 3], HEAP32[$3 >> 2] | 0) | 0;
  if (+HEAPF64[$2 >> 3] < 0.0) if (HEAP32[$1 >> 2] & 1) HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[HEAP32[$3 >> 2] >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_as >> 2];
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 HEAP32[$nhi >> 2] = 489;
 HEAP32[$stat_a1 >> 2] = _gsl_sf_bessel_Inu_scaled_asymp_unif_e(490.0, +HEAPF64[$ax >> 3], $r_Ikp1) | 0;
 HEAP32[$stat_a2 >> 2] = _gsl_sf_bessel_Inu_scaled_asymp_unif_e(489.0, +HEAPF64[$ax >> 3], $r_Ik) | 0;
 HEAPF64[$Ikp11 >> 3] = +HEAPF64[$r_Ikp1 >> 3];
 HEAPF64[$Ik2 >> 3] = +HEAPF64[$r_Ik >> 3];
 HEAP32[$k4 >> 2] = 489;
 while (1) {
  if ((HEAP32[$k4 >> 2] | 0) <= (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[$Ikm13 >> 3] = +HEAPF64[$Ikp11 >> 3] + +(HEAP32[$k4 >> 2] | 0) * 2.0 / +HEAPF64[$ax >> 3] * +HEAPF64[$Ik2 >> 3];
  HEAPF64[$Ikp11 >> 3] = +HEAPF64[$Ik2 >> 3];
  HEAPF64[$Ik2 >> 3] = +HEAPF64[$Ikm13 >> 3];
  HEAP32[$k4 >> 2] = (HEAP32[$k4 >> 2] | 0) + -1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$Ik2 >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$Ik2 >> 3] * (+HEAPF64[$r_Ikp1 + 8 >> 3] / +HEAPF64[$r_Ikp1 >> 3] + +HEAPF64[$r_Ik + 8 >> 3] / +HEAPF64[$r_Ik >> 3]);
 if (+HEAPF64[$2 >> 3] < 0.0) if (HEAP32[$1 >> 2] & 1) HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[HEAP32[$3 >> 2] >> 3];
 if (HEAP32[$stat_a1 >> 2] | 0) $226 = HEAP32[$stat_a1 >> 2] | 0; else $226 = (HEAP32[$stat_a2 >> 2] | 0) != 0 ? HEAP32[$stat_a2 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $226;
 $227 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $227 | 0;
}
function _gsl_sf_lnpoch_sgn_e($a, $x, $result, $sgn) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 $sgn = $sgn | 0;
 var $0 = 0, $1 = 0, $135 = 0.0, $142 = 0.0, $145 = 0.0, $147 = 0, $153 = 0.0, $155 = 0, $190 = 0.0, $192 = 0, $2 = 0, $211 = 0, $3 = 0, $4 = 0, $49 = 0, $79 = 0, $83 = 0, $f = 0, $lg_a = 0, $lg_apn = 0, $lnp_pos = 0, $lnterm = 0, $result_pos = 0, $s = 0, $s2 = 0, $s_a = 0, $s_apn = 0, $sin_1 = 0, $sin_2 = 0, $stat = 0, $stat1 = 0, $stat_a = 0, $stat_apn = 0, $stat_pp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 172 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 128 | 0;
 $3 = sp + 168 | 0;
 $4 = sp + 164 | 0;
 $result_pos = sp + 112 | 0;
 $stat = sp + 160 | 0;
 $f = sp + 104 | 0;
 $s = sp + 96 | 0;
 $stat1 = sp + 156 | 0;
 $s2 = sp + 88 | 0;
 $sin_1 = sp + 80 | 0;
 $sin_2 = sp + 72 | 0;
 $lnp_pos = sp + 56 | 0;
 $stat_pp = sp + 152 | 0;
 $lnterm = sp + 48 | 0;
 $lg_apn = sp + 32 | 0;
 $lg_a = sp + 16 | 0;
 $s_apn = sp + 8 | 0;
 $s_a = sp;
 $stat_apn = sp + 148 | 0;
 $stat_a = sp + 144 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$4 >> 2] = $sgn;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $211 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 if (+HEAPF64[$1 >> 3] > 0.0) if (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] > 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAP32[$0 >> 2] = _lnpoch_pos(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $211 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 if (+HEAPF64[$1 >> 3] <= 0.0) if (+HEAPF64[$1 >> 3] == +Math_floor(+(+HEAPF64[$1 >> 3]))) {
  if (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] < 0.0) if (+HEAPF64[$2 >> 3] == +Math_floor(+(+HEAPF64[$2 >> 3]))) {
   HEAP32[$stat >> 2] = _lnpoch_pos(-+HEAPF64[$1 >> 3], -+HEAPF64[$2 >> 3], $result_pos) | 0;
   HEAPF64[$f >> 3] = +Math_log(+(+HEAPF64[$1 >> 3] / (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3])));
   $49 = +_fmod(+(+HEAPF64[$2 >> 3]), 2.0) == 0.0;
   HEAPF64[$s >> 3] = +(($49 ? 1 : -1) | 0);
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$f >> 3] - +HEAPF64[$result_pos >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_pos + 8 >> 3] + +HEAPF64[$f >> 3] * 4.440892098500626e-16;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$s >> 3];
   HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
   $211 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $211 | 0;
  }
  if (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] == 0.0) {
   HEAP32[$stat1 >> 2] = _gsl_sf_lngamma_sgn_e(-+HEAPF64[$1 >> 3] + 1.0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
   $79 = +_fmod(+-+HEAPF64[$1 >> 3], 2.0) == 0.0;
   HEAPF64[$s2 >> 3] = +(($79 ? 1 : -1) | 0);
   $83 = HEAP32[$4 >> 2] | 0;
   HEAPF64[$83 >> 3] = +HEAPF64[$83 >> 3] * +HEAPF64[$s2 >> 3];
   HEAP32[$0 >> 2] = HEAP32[$stat1 >> 2];
   $211 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $211 | 0;
  } else {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = -inf;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
   HEAP32[$0 >> 2] = 0;
   $211 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $211 | 0;
  }
 }
 if (+HEAPF64[$1 >> 3] < 0.0) if (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] < 0.0) {
  HEAPF64[$sin_1 >> 3] = +Math_sin(+((1.0 - +HEAPF64[$1 >> 3]) * 3.141592653589793));
  HEAPF64[$sin_2 >> 3] = +Math_sin(+((1.0 - +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3]) * 3.141592653589793));
  if (!(+HEAPF64[$sin_1 >> 3] == 0.0)) if (!(+HEAPF64[$sin_2 >> 3] == 0.0)) {
   HEAP32[$stat_pp >> 2] = _lnpoch_pos(1.0 - +HEAPF64[$1 >> 3], -+HEAPF64[$2 >> 3], $lnp_pos) | 0;
   HEAPF64[$lnterm >> 3] = +Math_log(+(+Math_abs(+(+HEAPF64[$sin_1 >> 3] / +HEAPF64[$sin_2 >> 3]))));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$lnterm >> 3] - +HEAPF64[$lnp_pos >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$lnp_pos + 8 >> 3];
   $135 = +Math_abs(+(1.0 - +HEAPF64[$1 >> 3]));
   $142 = ($135 + +Math_abs(+(1.0 - +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3]))) * 4.440892098500626e-16;
   $145 = $142 * +Math_abs(+(+HEAPF64[$lnterm >> 3]));
   $147 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$147 >> 3] = +HEAPF64[$147 >> 3] + $145;
   $153 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $155 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$155 >> 3] = +HEAPF64[$155 >> 3] + $153;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +((+HEAPF64[$sin_1 >> 3] * +HEAPF64[$sin_2 >> 3] >= 0.0 ? 1 : -1) | 0);
   HEAP32[$0 >> 2] = HEAP32[$stat_pp >> 2];
   $211 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $211 | 0;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(55192, 55208, 349, 1);
  HEAP32[$0 >> 2] = 1;
  $211 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 HEAP32[$stat_apn >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3], $lg_apn, $s_apn) | 0;
 HEAP32[$stat_a >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3], $lg_a, $s_a) | 0;
 if (!(HEAP32[$stat_apn >> 2] | 0)) if (!(HEAP32[$stat_a >> 2] | 0)) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$lg_apn >> 3] - +HEAPF64[$lg_a >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$lg_apn + 8 >> 3] + +HEAPF64[$lg_a + 8 >> 3];
  $190 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $192 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$192 >> 3] = +HEAPF64[$192 >> 3] + $190;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$s_a >> 3] * +HEAPF64[$s_apn >> 3];
  HEAP32[$0 >> 2] = 0;
  $211 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 if ((HEAP32[$stat_apn >> 2] | 0) != 1) if ((HEAP32[$stat_a >> 2] | 0) != 1) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAP32[$0 >> 2] = -1;
  $211 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(55192, 55208, 380, 1);
 HEAP32[$0 >> 2] = 1;
 $211 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $211 | 0;
}
function _gsl_sf_legendre_H3d_1_e($lambda, $eta, $result) {
 $lambda = +$lambda;
 $eta = +$eta;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $134 = 0.0, $135 = 0.0, $158 = 0.0, $163 = 0.0, $187 = 0.0, $198 = 0, $2 = 0, $206 = 0.0, $211 = 0.0, $213 = 0, $219 = 0.0, $221 = 0, $224 = 0, $3 = 0, $69 = 0.0, $81 = 0.0, $85 = 0.0, $91 = 0.0, $93 = 0, $98 = 0.0, $cos_term = 0, $cos_term_err = 0, $cos_xi_result = 0, $coth_term = 0, $etasq = 0, $lsq = 0, $lsqp1 = 0, $pre = 0, $pre_err = 0, $pre_val = 0, $sin_term = 0, $sin_term_err = 0, $sin_xi_result = 0, $sinh_term = 0, $sinh_term1 = 0, $t1 = 0, $term1 = 0, $term12 = 0, $term2 = 0, $term23 = 0, $xi = 0, $xisq = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 212 | 0;
 $1 = sp + 200 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 208 | 0;
 $xi = sp + 184 | 0;
 $lsq = sp + 176 | 0;
 $lsqp1 = sp + 168 | 0;
 $etasq = sp + 160 | 0;
 $xisq = sp + 152 | 0;
 $term1 = sp + 144 | 0;
 $term2 = sp + 136 | 0;
 $sinh_term = sp + 128 | 0;
 $pre = sp + 120 | 0;
 $sin_term = sp + 112 | 0;
 $cos_term = sp + 104 | 0;
 $coth_term = sp + 96 | 0;
 $sinh_term1 = sp + 88 | 0;
 $sin_term_err = sp + 80 | 0;
 $cos_term_err = sp + 72 | 0;
 $t1 = sp + 64 | 0;
 $pre_val = sp + 56 | 0;
 $pre_err = sp + 48 | 0;
 $term12 = sp + 40 | 0;
 $term23 = sp + 32 | 0;
 $sin_xi_result = sp + 16 | 0;
 $cos_xi_result = sp;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $eta;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$xi >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3] * +HEAPF64[$1 >> 3]));
 HEAPF64[$lsq >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 HEAPF64[$lsqp1 >> 3] = +HEAPF64[$lsq >> 3] + 1.0;
 if (+HEAPF64[$2 >> 3] < 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(52792, 52808, 293, 1);
  HEAP32[$0 >> 2] = 1;
  $224 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $224 | 0;
 }
 if (!(+HEAPF64[$2 >> 3] == 0.0)) if (!(+HEAPF64[$1 >> 3] == 0.0)) {
  if (+HEAPF64[$xi >> 3] < .000740095979741405) if (+HEAPF64[$2 >> 3] < .000740095979741405) {
   HEAPF64[$etasq >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
   HEAPF64[$xisq >> 3] = +HEAPF64[$xi >> 3] * +HEAPF64[$xi >> 3];
   HEAPF64[$term1 >> 3] = (+HEAPF64[$etasq >> 3] + +HEAPF64[$xisq >> 3]) / 3.0;
   HEAPF64[$term2 >> 3] = -(+HEAPF64[$etasq >> 3] * 2.0 * +HEAPF64[$etasq >> 3] + +HEAPF64[$etasq >> 3] * 5.0 * +HEAPF64[$xisq >> 3] + +HEAPF64[$xisq >> 3] * 3.0 * +HEAPF64[$xisq >> 3]) / 90.0;
   HEAPF64[$sinh_term >> 3] = 1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / 6.0 * (1.0 - +HEAPF64[$2 >> 3] * .11666666666666667 * +HEAPF64[$2 >> 3]);
   $69 = +HEAPF64[$sinh_term >> 3] / +Math_sqrt(+(+HEAPF64[$lsqp1 >> 3]));
   HEAPF64[$pre >> 3] = $69 / +HEAPF64[$2 >> 3];
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre >> 3] * (+HEAPF64[$term1 >> 3] + +HEAPF64[$term2 >> 3]);
   $81 = +Math_abs(+(+HEAPF64[$term1 >> 3]));
   $85 = +HEAPF64[$pre >> 3] * 2.220446049250313e-16 * ($81 + +Math_abs(+(+HEAPF64[$term2 >> 3])));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $85;
   $91 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $93 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$93 >> 3] = +HEAPF64[$93 >> 3] + $91;
   HEAP32[$0 >> 2] = 0;
   $224 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $224 | 0;
  }
  $98 = +HEAPF64[$xi >> 3];
  if (+HEAPF64[$xi >> 3] < .000740095979741405) {
   HEAPF64[$sin_term >> 3] = 1.0 - $98 * +HEAPF64[$xi >> 3] / 6.0 * (1.0 - +HEAPF64[$xi >> 3] * +HEAPF64[$xi >> 3] / 20.0);
   HEAPF64[$cos_term >> 3] = 1.0 - +HEAPF64[$xi >> 3] * .5 * +HEAPF64[$xi >> 3] * (1.0 - +HEAPF64[$xi >> 3] * +HEAPF64[$xi >> 3] / 12.0);
   HEAPF64[$sin_term_err >> 3] = 2.220446049250313e-16;
   HEAPF64[$cos_term_err >> 3] = 2.220446049250313e-16;
  } else {
   _gsl_sf_sin_e($98, $sin_xi_result) | 0;
   _gsl_sf_cos_e(+HEAPF64[$xi >> 3], $cos_xi_result) | 0;
   HEAPF64[$sin_term >> 3] = +HEAPF64[$sin_xi_result >> 3] / +HEAPF64[$xi >> 3];
   HEAPF64[$cos_term >> 3] = +HEAPF64[$cos_xi_result >> 3];
   HEAPF64[$sin_term_err >> 3] = +HEAPF64[$sin_xi_result + 8 >> 3] / +Math_abs(+(+HEAPF64[$xi >> 3]));
   HEAPF64[$cos_term_err >> 3] = +HEAPF64[$cos_xi_result + 8 >> 3];
  }
  $134 = +HEAPF64[$2 >> 3];
  $135 = +HEAPF64[$2 >> 3];
  if (+HEAPF64[$2 >> 3] < .000740095979741405) {
   HEAPF64[$coth_term >> 3] = $134 * $135 / 3.0 * (1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / 15.0) + 1.0;
   HEAPF64[$sinh_term1 >> 3] = 1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / 6.0 * (1.0 - +HEAPF64[$2 >> 3] * .11666666666666667 * +HEAPF64[$2 >> 3]);
  } else {
   HEAPF64[$coth_term >> 3] = $134 / +_tanh(+$135);
   $158 = +HEAPF64[$2 >> 3];
   HEAPF64[$sinh_term1 >> 3] = $158 / +_sinh(+(+HEAPF64[$2 >> 3]));
  }
  $163 = +Math_sqrt(+(+HEAPF64[$lsqp1 >> 3]));
  HEAPF64[$t1 >> 3] = $163 * +HEAPF64[$2 >> 3];
  HEAPF64[$pre_val >> 3] = +HEAPF64[$sinh_term1 >> 3] / +HEAPF64[$t1 >> 3];
  HEAPF64[$pre_err >> 3] = +Math_abs(+(+HEAPF64[$pre_val >> 3])) * 4.440892098500626e-16;
  HEAPF64[$term12 >> 3] = +HEAPF64[$sin_term >> 3] * +HEAPF64[$coth_term >> 3];
  HEAPF64[$term23 >> 3] = +HEAPF64[$cos_term >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre_val >> 3] * (+HEAPF64[$term12 >> 3] - +HEAPF64[$term23 >> 3]);
  $187 = +HEAPF64[$pre_err >> 3] * +Math_abs(+(+HEAPF64[$term12 >> 3] - +HEAPF64[$term23 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $187;
  $198 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$198 >> 3] = +HEAPF64[$198 >> 3] + +HEAPF64[$pre_val >> 3] * (+HEAPF64[$sin_term_err >> 3] * +HEAPF64[$coth_term >> 3] + +HEAPF64[$cos_term_err >> 3]);
  $206 = +HEAPF64[$pre_val >> 3] * +Math_abs(+(+HEAPF64[$term12 >> 3] - +HEAPF64[$term23 >> 3]));
  $211 = $206 * (+Math_abs(+(+HEAPF64[$2 >> 3])) + 1.0) * 2.220446049250313e-16;
  $213 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$213 >> 3] = +HEAPF64[$213 >> 3] + $211;
  $219 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $221 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$221 >> 3] = +HEAPF64[$221 >> 3] + $219;
  HEAP32[$0 >> 2] = 0;
  $224 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $224 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAP32[$0 >> 2] = 0;
 $224 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $224 | 0;
}
function _psi_x($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $117 = 0.0, $124 = 0.0, $132 = 0.0, $138 = 0, $144 = 0.0, $146 = 0, $150 = 0.0, $167 = 0.0, $175 = 0.0, $181 = 0, $187 = 0.0, $189 = 0, $193 = 0.0, $2 = 0, $210 = 0, $216 = 0.0, $218 = 0, $227 = 0, $37 = 0.0, $52 = 0.0, $62 = 0, $68 = 0.0, $70 = 0, $74 = 0.0, $88 = 0.0, $90 = 0, $95 = 0.0, $c = 0, $result_c = 0, $result_c1 = 0, $s = 0, $t = 0, $t1 = 0, $t13 = 0, $t15 = 0, $t2 = 0, $t24 = 0, $t3 = 0, $v = 0, $v2 = 0, $v6 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 148 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 144 | 0;
 $y = sp + 128 | 0;
 $t = sp + 120 | 0;
 $result_c = sp + 104 | 0;
 $s = sp + 96 | 0;
 $c = sp + 88 | 0;
 $result_c1 = sp + 72 | 0;
 $v = sp + 64 | 0;
 $t1 = sp + 56 | 0;
 $t2 = sp + 48 | 0;
 $t3 = sp + 40 | 0;
 $v2 = sp + 32 | 0;
 $t13 = sp + 24 | 0;
 $t24 = sp + 16 | 0;
 $t15 = sp + 8 | 0;
 $v6 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$y >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$1 >> 3] == 0.0 | +HEAPF64[$1 >> 3] == -1.0 | +HEAPF64[$1 >> 3] == -2.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(55568, 55584, 385, 1);
  HEAP32[$0 >> 2] = 1;
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 if (+HEAPF64[$y >> 3] >= 2.0) {
  HEAPF64[$t >> 3] = 8.0 / (+HEAPF64[$y >> 3] * +HEAPF64[$y >> 3]) - 1.0;
  _cheb_eval_e592(58016, +HEAPF64[$t >> 3], $result_c) | 0;
  if (!(+HEAPF64[$1 >> 3] < 0.0)) {
   $74 = +Math_log(+(+HEAPF64[$y >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = $74 - .5 / +HEAPF64[$1 >> 3] + +HEAPF64[$result_c >> 3];
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_c + 8 >> 3];
   $88 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
   $90 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
   HEAPF64[$90 >> 3] = +HEAPF64[$90 >> 3] + $88;
   HEAP32[$0 >> 2] = 0;
   $227 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $227 | 0;
  }
  HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$1 >> 3] * 3.141592653589793));
  HEAPF64[$c >> 3] = +Math_cos(+(+HEAPF64[$1 >> 3] * 3.141592653589793));
  if (+Math_abs(+(+HEAPF64[$s >> 3])) < 2.983336292480083e-154) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
   _gsl_error(55568, 55584, 395, 1);
   HEAP32[$0 >> 2] = 1;
   $227 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $227 | 0;
  } else {
   $37 = +Math_log(+(+HEAPF64[$y >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = $37 - .5 / +HEAPF64[$1 >> 3] + +HEAPF64[$result_c >> 3] - +HEAPF64[$c >> 3] * 3.141592653589793 / +HEAPF64[$s >> 3];
   $52 = +Math_abs(+(+HEAPF64[$1 >> 3])) * 3.141592653589793 * 2.220446049250313e-16;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $52 / (+HEAPF64[$s >> 3] * +HEAPF64[$s >> 3]);
   $62 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
   HEAPF64[$62 >> 3] = +HEAPF64[$62 >> 3] + +HEAPF64[$result_c + 8 >> 3];
   $68 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
   $70 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
   HEAPF64[$70 >> 3] = +HEAPF64[$70 >> 3] + $68;
   HEAP32[$0 >> 2] = 0;
   $227 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $227 | 0;
  }
 }
 $95 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAPF64[$v >> 3] = $95 + 2.0;
  HEAPF64[$t1 >> 3] = 1.0 / +HEAPF64[$1 >> 3];
  HEAPF64[$t2 >> 3] = 1.0 / (+HEAPF64[$1 >> 3] + 1.0);
  HEAPF64[$t3 >> 3] = 1.0 / +HEAPF64[$v >> 3];
  _cheb_eval_e592(57856, +HEAPF64[$v >> 3] * 2.0 - 1.0, $result_c1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -(+HEAPF64[$t1 >> 3] + +HEAPF64[$t2 >> 3] + +HEAPF64[$t3 >> 3]) + +HEAPF64[$result_c1 >> 3];
  $117 = +Math_abs(+(+HEAPF64[$t1 >> 3]));
  $124 = $117 + +Math_abs(+(+HEAPF64[$1 >> 3] / (+HEAPF64[$t2 >> 3] * +HEAPF64[$t2 >> 3])));
  $132 = ($124 + +Math_abs(+(+HEAPF64[$1 >> 3] / (+HEAPF64[$t3 >> 3] * +HEAPF64[$t3 >> 3])))) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $132;
  $138 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$138 >> 3] = +HEAPF64[$138 >> 3] + +HEAPF64[$result_c1 + 8 >> 3];
  $144 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  $146 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$146 >> 3] = +HEAPF64[$146 >> 3] + $144;
  HEAP32[$0 >> 2] = 0;
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 $150 = +HEAPF64[$1 >> 3];
 if ($95 < 0.0) {
  HEAPF64[$v2 >> 3] = $150 + 1.0;
  HEAPF64[$t13 >> 3] = 1.0 / +HEAPF64[$1 >> 3];
  HEAPF64[$t24 >> 3] = 1.0 / +HEAPF64[$v2 >> 3];
  _cheb_eval_e592(57856, +HEAPF64[$v2 >> 3] * 2.0 - 1.0, $result_c1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -(+HEAPF64[$t13 >> 3] + +HEAPF64[$t24 >> 3]) + +HEAPF64[$result_c1 >> 3];
  $167 = +Math_abs(+(+HEAPF64[$t13 >> 3]));
  $175 = ($167 + +Math_abs(+(+HEAPF64[$1 >> 3] / (+HEAPF64[$t24 >> 3] * +HEAPF64[$t24 >> 3])))) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $175;
  $181 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$181 >> 3] = +HEAPF64[$181 >> 3] + +HEAPF64[$result_c1 + 8 >> 3];
  $187 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  $189 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$189 >> 3] = +HEAPF64[$189 >> 3] + $187;
  HEAP32[$0 >> 2] = 0;
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 $193 = +HEAPF64[$1 >> 3];
 if ($150 < 1.0) {
  HEAPF64[$t15 >> 3] = 1.0 / $193;
  _cheb_eval_e592(57856, +HEAPF64[$1 >> 3] * 2.0 - 1.0, $result_c1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$t15 >> 3] + +HEAPF64[$result_c1 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$t15 >> 3] * 2.220446049250313e-16;
  $210 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$210 >> 3] = +HEAPF64[$210 >> 3] + +HEAPF64[$result_c1 + 8 >> 3];
  $216 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  $218 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$218 >> 3] = +HEAPF64[$218 >> 3] + $216;
  HEAP32[$0 >> 2] = 0;
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 } else {
  HEAPF64[$v6 >> 3] = $193 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e592(57856, +HEAPF64[$v6 >> 3] * 2.0 - 1.0, HEAP32[$2 >> 2] | 0) | 0;
  $227 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $227 | 0;
 }
 return 0;
}
function _coulomb_FG_series($lam, $eta, $x, $F, $G) {
 $lam = +$lam;
 $eta = +$eta;
 $x = +$x;
 $F = $F | 0;
 $G = $G | 0;
 var $0 = 0, $1 = 0, $147 = 0.0, $166 = 0.0, $195 = 0.0, $2 = 0, $201 = 0.0, $213 = 0, $214 = 0, $3 = 0, $4 = 0, $5 = 0, $A_abs_del_prev = 0, $A_sum = 0, $B_abs_del_prev = 0, $B_sum = 0, $ClamA = 0, $ClamB = 0, $FA = 0, $FB = 0, $abs_A = 0, $abs_B = 0, $abs_dA = 0, $abs_dB = 0, $cos_phi_lam = 0, $m = 0, $max_abs_dA = 0, $max_abs_dB = 0, $pow_x = 0, $sin_phi_lam = 0, $stat_A = 0, $stat_B = 0, $stat_conn = 0, $tlp1 = 0, $uA_m = 0, $uA_mm1 = 0, $uA_mm2 = 0, $uB_m = 0, $uB_mm1 = 0, $uB_mm2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $0 = sp + 276 | 0;
 $1 = sp + 240 | 0;
 $2 = sp + 232 | 0;
 $3 = sp + 224 | 0;
 $4 = sp + 272 | 0;
 $5 = sp + 268 | 0;
 $ClamA = sp + 208 | 0;
 $ClamB = sp + 192 | 0;
 $stat_A = sp + 260 | 0;
 $stat_B = sp + 256 | 0;
 $tlp1 = sp + 184 | 0;
 $pow_x = sp + 176 | 0;
 $cos_phi_lam = sp + 168 | 0;
 $sin_phi_lam = sp + 160 | 0;
 $uA_mm2 = sp + 152 | 0;
 $uA_mm1 = sp + 144 | 0;
 $uA_m = sp + 136 | 0;
 $uB_mm2 = sp + 128 | 0;
 $uB_mm1 = sp + 120 | 0;
 $uB_m = sp + 112 | 0;
 $A_sum = sp + 104 | 0;
 $B_sum = sp + 96 | 0;
 $A_abs_del_prev = sp + 88 | 0;
 $B_abs_del_prev = sp + 80 | 0;
 $FA = sp + 64 | 0;
 $FB = sp + 48 | 0;
 $m = sp + 252 | 0;
 $stat_conn = sp + 248 | 0;
 $abs_dA = sp + 40 | 0;
 $abs_dB = sp + 32 | 0;
 $max_abs_dA = sp + 24 | 0;
 $max_abs_dB = sp + 16 | 0;
 $abs_A = sp + 8 | 0;
 $abs_B = sp;
 HEAPF64[$1 >> 3] = $lam;
 HEAPF64[$2 >> 3] = $eta;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $F;
 HEAP32[$5 >> 2] = $G;
 HEAP32[sp + 264 >> 2] = 800;
 HEAP32[$stat_A >> 2] = _CLeta(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $ClamA) | 0;
 HEAP32[$stat_B >> 2] = _CLeta(-+HEAPF64[$1 >> 3] - 1.0, +HEAPF64[$2 >> 3], $ClamB) | 0;
 HEAPF64[$tlp1 >> 3] = +HEAPF64[$1 >> 3] * 2.0 + 1.0;
 HEAPF64[$pow_x >> 3] = +Math_pow(+(+HEAPF64[$3 >> 3]), +(+HEAPF64[$1 >> 3]));
 HEAPF64[$uA_mm2 >> 3] = 1.0;
 HEAPF64[$uA_mm1 >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] + 1.0);
 HEAPF64[$uB_mm2 >> 3] = 1.0;
 HEAPF64[$uB_mm1 >> 3] = -+HEAPF64[$3 >> 3] * +HEAPF64[$2 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[$A_sum >> 3] = +HEAPF64[$uA_mm2 >> 3] + +HEAPF64[$uA_mm1 >> 3];
 HEAPF64[$B_sum >> 3] = +HEAPF64[$uB_mm2 >> 3] + +HEAPF64[$uB_mm1 >> 3];
 HEAPF64[$A_abs_del_prev >> 3] = +Math_abs(+(+HEAPF64[$A_sum >> 3]));
 HEAPF64[$B_abs_del_prev >> 3] = +Math_abs(+(+HEAPF64[$B_sum >> 3]));
 HEAP32[$m >> 2] = 2;
 HEAP32[$stat_conn >> 2] = _coulomb_connection(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $cos_phi_lam, $sin_phi_lam) | 0;
 if ((HEAP32[$stat_conn >> 2] | 0) == 15) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(26264, 26240, 308, 16);
  HEAP32[$0 >> 2] = 16;
  $214 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $214 | 0;
 }
 while (1) {
  if ((HEAP32[$m >> 2] | 0) >= 800) break;
  HEAPF64[$uA_m >> 3] = +HEAPF64[$3 >> 3] * (+HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$uA_mm1 >> 3] - +HEAPF64[$3 >> 3] * +HEAPF64[$uA_mm2 >> 3]) / (+(HEAP32[$m >> 2] | 0) * (+(HEAP32[$m >> 2] | 0) + +HEAPF64[$tlp1 >> 3]));
  HEAPF64[$uB_m >> 3] = +HEAPF64[$3 >> 3] * (+HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$uB_mm1 >> 3] - +HEAPF64[$3 >> 3] * +HEAPF64[$uB_mm2 >> 3]) / (+(HEAP32[$m >> 2] | 0) * (+(HEAP32[$m >> 2] | 0) - +HEAPF64[$tlp1 >> 3]));
  HEAPF64[$A_sum >> 3] = +HEAPF64[$A_sum >> 3] + +HEAPF64[$uA_m >> 3];
  HEAPF64[$B_sum >> 3] = +HEAPF64[$B_sum >> 3] + +HEAPF64[$uB_m >> 3];
  HEAPF64[$abs_dA >> 3] = +Math_abs(+(+HEAPF64[$uA_m >> 3]));
  HEAPF64[$abs_dB >> 3] = +Math_abs(+(+HEAPF64[$uB_m >> 3]));
  if ((HEAP32[$m >> 2] | 0) > 15) {
   HEAPF64[$max_abs_dA >> 3] = +HEAPF64[$abs_dA >> 3] > +HEAPF64[$A_abs_del_prev >> 3] ? +HEAPF64[$abs_dA >> 3] : +HEAPF64[$A_abs_del_prev >> 3];
   HEAPF64[$max_abs_dB >> 3] = +HEAPF64[$abs_dB >> 3] > +HEAPF64[$B_abs_del_prev >> 3] ? +HEAPF64[$abs_dB >> 3] : +HEAPF64[$B_abs_del_prev >> 3];
   HEAPF64[$abs_A >> 3] = +Math_abs(+(+HEAPF64[$A_sum >> 3]));
   HEAPF64[$abs_B >> 3] = +Math_abs(+(+HEAPF64[$B_sum >> 3]));
   if (+HEAPF64[$max_abs_dA >> 3] / (+HEAPF64[$max_abs_dA >> 3] + +HEAPF64[$abs_A >> 3]) < 8.881784197001252e-16) if (+HEAPF64[$max_abs_dB >> 3] / (+HEAPF64[$max_abs_dB >> 3] + +HEAPF64[$abs_B >> 3]) < 8.881784197001252e-16) break;
  }
  HEAPF64[$A_abs_del_prev >> 3] = +HEAPF64[$abs_dA >> 3];
  HEAPF64[$B_abs_del_prev >> 3] = +HEAPF64[$abs_dB >> 3];
  HEAPF64[$uA_mm2 >> 3] = +HEAPF64[$uA_mm1 >> 3];
  HEAPF64[$uA_mm1 >> 3] = +HEAPF64[$uA_m >> 3];
  HEAPF64[$uB_mm2 >> 3] = +HEAPF64[$uB_mm1 >> 3];
  HEAPF64[$uB_mm1 >> 3] = +HEAPF64[$uB_m >> 3];
  HEAP32[$m >> 2] = (HEAP32[$m >> 2] | 0) + 1;
 }
 HEAPF64[$FA >> 3] = +HEAPF64[$A_sum >> 3] * +HEAPF64[$ClamA >> 3] * +HEAPF64[$pow_x >> 3] * +HEAPF64[$3 >> 3];
 $147 = +Math_abs(+(+HEAPF64[$A_sum >> 3]));
 HEAPF64[$FA + 8 >> 3] = $147 * +HEAPF64[$ClamA + 8 >> 3] * +HEAPF64[$pow_x >> 3] * +HEAPF64[$3 >> 3] + +Math_abs(+(+HEAPF64[$FA >> 3])) * 4.440892098500626e-16;
 HEAPF64[$FB >> 3] = +HEAPF64[$B_sum >> 3] * +HEAPF64[$ClamB >> 3] / +HEAPF64[$pow_x >> 3];
 $166 = +Math_abs(+(+HEAPF64[$B_sum >> 3]));
 HEAPF64[$FB + 8 >> 3] = $166 * +HEAPF64[$ClamB + 8 >> 3] / +HEAPF64[$pow_x >> 3] + +Math_abs(+(+HEAPF64[$FB >> 3])) * 4.440892098500626e-16;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$FA >> 3];
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$FA + 8 >> 3];
 HEAPF64[HEAP32[$5 >> 2] >> 3] = (+HEAPF64[$FA >> 3] * +HEAPF64[$cos_phi_lam >> 3] - +HEAPF64[$FB >> 3]) / +HEAPF64[$sin_phi_lam >> 3];
 $195 = +HEAPF64[$FA + 8 >> 3] * +Math_abs(+(+HEAPF64[$cos_phi_lam >> 3]));
 $201 = ($195 + +HEAPF64[$FB + 8 >> 3]) / +Math_abs(+(+HEAPF64[$sin_phi_lam >> 3]));
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $201;
 if ((HEAP32[$m >> 2] | 0) >= 800) {
  _gsl_error(26256, 26240, 356, 11);
  HEAP32[$0 >> 2] = 11;
  $214 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $214 | 0;
 }
 if (HEAP32[$stat_A >> 2] | 0) $213 = HEAP32[$stat_A >> 2] | 0; else $213 = (HEAP32[$stat_B >> 2] | 0) != 0 ? HEAP32[$stat_B >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $213;
 $214 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $214 | 0;
}
function _gsl_sf_bessel_Jn_e($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0, $112 = 0, $119 = 0.0, $120 = 0.0, $125 = 0, $149 = 0.0, $152 = 0, $153 = 0.0, $180 = 0.0, $190 = 0, $191 = 0, $2 = 0, $3 = 0, $38 = 0.0, $79 = 0.0, $81 = 0, $92 = 0, $93 = 0, $Jk = 0, $Jkm1 = 0, $Jkp1 = 0, $ans = 0, $b = 0, $b0 = 0, $b05 = 0, $b1 = 0, $b14 = 0, $err = 0, $k = 0, $ratio = 0, $sgn = 0, $sign = 0, $stat_CF1 = 0, $stat_J0 = 0, $stat_J1 = 0, $stat_b = 0, $status = 0, $status1 = 0, $status2 = 0, $status3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $0 = sp + 192 | 0;
 $1 = sp + 188 | 0;
 $2 = sp + 136 | 0;
 $3 = sp + 184 | 0;
 $sign = sp + 180 | 0;
 $b0 = sp + 120 | 0;
 $stat_J0 = sp + 176 | 0;
 $b1 = sp + 104 | 0;
 $stat_J1 = sp + 172 | 0;
 $b = sp + 88 | 0;
 $status = sp + 168 | 0;
 $status1 = sp + 164 | 0;
 $status2 = sp + 160 | 0;
 $status3 = sp + 156 | 0;
 $ans = sp + 80 | 0;
 $err = sp + 72 | 0;
 $ratio = sp + 64 | 0;
 $sgn = sp + 56 | 0;
 $stat_b = sp + 152 | 0;
 $stat_CF1 = sp + 148 | 0;
 $Jkp1 = sp + 48 | 0;
 $Jk = sp + 40 | 0;
 $Jkm1 = sp + 32 | 0;
 $k = sp + 144 | 0;
 $b14 = sp + 16 | 0;
 $b05 = sp;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$sign >> 2] = 1;
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  HEAP32[$1 >> 2] = 0 - (HEAP32[$1 >> 2] | 0);
  if (HEAP32[$1 >> 2] & 1) HEAP32[$sign >> 2] = 0 - (HEAP32[$sign >> 2] | 0);
 }
 if (+HEAPF64[$2 >> 3] < 0.0) {
  HEAPF64[$2 >> 3] = -+HEAPF64[$2 >> 3];
  if (HEAP32[$1 >> 2] & 1) HEAP32[$sign >> 2] = 0 - (HEAP32[$sign >> 2] | 0);
 }
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$stat_J0 >> 2] = _gsl_sf_bessel_J0_e(+HEAPF64[$2 >> 3], $b0) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +(HEAP32[$sign >> 2] | 0) * +HEAPF64[$b0 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$b0 + 8 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_J0 >> 2];
  $191 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $191 | 0;
 }
 $38 = +HEAPF64[$2 >> 3];
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$stat_J1 >> 2] = _gsl_sf_bessel_J1_e($38, $b1) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +(HEAP32[$sign >> 2] | 0) * +HEAPF64[$b1 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$b1 + 8 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_J1 >> 2];
  $191 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $191 | 0;
 }
 if ($38 == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $191 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $191 | 0;
 }
 if (+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] < (+(HEAP32[$1 >> 2] | 0) + 1.0) * 10.0 * .000740095979741405) {
  HEAP32[$status >> 2] = _gsl_sf_bessel_IJ_taylor_e(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$2 >> 3], -1, 50, 2.220446049250313e-16, $b) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +(HEAP32[$sign >> 2] | 0) * +HEAPF64[$b >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$b + 8 >> 3];
  $79 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $81 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$81 >> 3] = +HEAPF64[$81 >> 3] + $79;
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $191 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $191 | 0;
 }
 $92 = +HEAPF64[$2 >> 3] * .0001220703125 > +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) + 1.0;
 $93 = HEAP32[$1 >> 2] | 0;
 if ($92) {
  HEAP32[$status1 >> 2] = _gsl_sf_bessel_Jnu_asympx_e(+($93 | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $100 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$100 >> 3] = +HEAPF64[$100 >> 3] * +(HEAP32[$sign >> 2] | 0);
  HEAP32[$0 >> 2] = HEAP32[$status1 >> 2];
  $191 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $191 | 0;
 }
 if (($93 | 0) > 50) {
  HEAP32[$status2 >> 2] = _gsl_sf_bessel_Jnu_asymp_Olver_e(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $112 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$112 >> 3] = +HEAPF64[$112 >> 3] * +(HEAP32[$sign >> 2] | 0);
  HEAP32[$0 >> 2] = HEAP32[$status2 >> 2];
  $191 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $191 | 0;
 }
 $119 = +(HEAP32[$1 >> 2] | 0);
 $120 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$2 >> 3] > 1.0e3) {
  HEAP32[$status3 >> 2] = _gsl_sf_bessel_Jnu_asympx_e($119, $120, HEAP32[$3 >> 2] | 0) | 0;
  $125 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$125 >> 3] = +HEAPF64[$125 >> 3] * +(HEAP32[$sign >> 2] | 0);
  HEAP32[$0 >> 2] = HEAP32[$status3 >> 2];
  $191 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $191 | 0;
 }
 HEAP32[$stat_CF1 >> 2] = _gsl_sf_bessel_J_CF1($119, $120, $ratio, $sgn) | 0;
 HEAPF64[$Jkp1 >> 3] = +HEAPF64[$ratio >> 3] * 1.4916681462400413e-154;
 HEAPF64[$Jk >> 3] = 1.4916681462400413e-154;
 HEAP32[$k >> 2] = HEAP32[$1 >> 2];
 while (1) {
  if ((HEAP32[$k >> 2] | 0) <= 0) break;
  HEAPF64[$Jkm1 >> 3] = +(HEAP32[$k >> 2] | 0) * 2.0 / +HEAPF64[$2 >> 3] * +HEAPF64[$Jk >> 3] - +HEAPF64[$Jkp1 >> 3];
  HEAPF64[$Jkp1 >> 3] = +HEAPF64[$Jk >> 3];
  HEAPF64[$Jk >> 3] = +HEAPF64[$Jkm1 >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + -1;
 }
 $149 = +Math_abs(+(+HEAPF64[$Jkp1 >> 3]));
 $152 = $149 > +Math_abs(+(+HEAPF64[$Jk >> 3]));
 $153 = +HEAPF64[$2 >> 3];
 if ($152) {
  HEAP32[$stat_b >> 2] = _gsl_sf_bessel_J1_e($153, $b14) | 0;
  HEAPF64[$ans >> 3] = +HEAPF64[$b14 >> 3] / +HEAPF64[$Jkp1 >> 3] * 1.4916681462400413e-154;
  HEAPF64[$err >> 3] = +HEAPF64[$b14 + 8 >> 3] / +HEAPF64[$Jkp1 >> 3] * 1.4916681462400413e-154;
 } else {
  HEAP32[$stat_b >> 2] = _gsl_sf_bessel_J0_e($153, $b05) | 0;
  HEAPF64[$ans >> 3] = +HEAPF64[$b05 >> 3] / +HEAPF64[$Jk >> 3] * 1.4916681462400413e-154;
  HEAPF64[$err >> 3] = +HEAPF64[$b05 + 8 >> 3] / +HEAPF64[$Jk >> 3] * 1.4916681462400413e-154;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +(HEAP32[$sign >> 2] | 0) * +HEAPF64[$ans >> 3];
 $180 = +Math_abs(+(+HEAPF64[$err >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $180;
 if (HEAP32[$stat_CF1 >> 2] | 0) $190 = HEAP32[$stat_CF1 >> 2] | 0; else $190 = (HEAP32[$stat_b >> 2] | 0) != 0 ? HEAP32[$stat_b >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $190;
 $191 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $191 | 0;
}
function _gsl_sf_elljac_e($u, $m, $sn, $cn, $dn) {
 $u = +$u;
 $m = +$m;
 $sn = $sn | 0;
 $cn = $cn | 0;
 $dn = $dn | 0;
 var $0 = 0, $1 = 0, $156 = 0.0, $16 = 0.0, $168 = 0.0, $173 = 0.0, $184 = 0.0, $19 = 0.0, $2 = 0, $200 = 0, $246 = 0.0, $251 = 0.0, $261 = 0, $27 = 0.0, $3 = 0, $31 = 0.0, $4 = 0, $46 = 0.0, $5 = 0, $75 = 0.0, $96 = 0.0, $c = 0, $cos_umu = 0, $d = 0, $mu = 0, $n = 0, $nu = 0, $r = 0, $sin_umu = 0, $status = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 $0 = sp + 584 | 0;
 $1 = sp + 552 | 0;
 $2 = sp + 544 | 0;
 $3 = sp + 580 | 0;
 $4 = sp + 576 | 0;
 $5 = sp + 572 | 0;
 $status = sp + 568 | 0;
 $mu = sp + 416 | 0;
 $nu = sp + 288 | 0;
 $c = sp + 160 | 0;
 $d = sp + 32 | 0;
 $sin_umu = sp + 24 | 0;
 $cos_umu = sp + 16 | 0;
 $t = sp + 8 | 0;
 $r = sp;
 $n = sp + 560 | 0;
 HEAPF64[$1 >> 3] = $u;
 HEAPF64[$2 >> 3] = $m;
 HEAP32[$3 >> 2] = $sn;
 HEAP32[$4 >> 2] = $cn;
 HEAP32[$5 >> 2] = $dn;
 if (+Math_abs(+(+HEAPF64[$2 >> 3])) > 1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  _gsl_error(30040, 30056, 46, 1);
  HEAP32[$0 >> 2] = 1;
  $261 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $261 | 0;
 }
 if (+Math_abs(+(+HEAPF64[$2 >> 3])) < 4.440892098500626e-16) {
  $16 = +Math_sin(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $16;
  $19 = +Math_cos(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $19;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 1.0;
  HEAP32[$0 >> 2] = 0;
  $261 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $261 | 0;
 }
 if (+Math_abs(+(+HEAPF64[$2 >> 3] - 1.0)) < 4.440892098500626e-16) {
  $27 = +_tanh(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $27;
  $31 = 1.0 / +_cosh(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $31;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[HEAP32[$4 >> 2] >> 3];
  HEAP32[$0 >> 2] = 0;
  $261 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $261 | 0;
 }
 HEAP32[$status >> 2] = 0;
 HEAP32[sp + 564 >> 2] = 16;
 HEAP32[$n >> 2] = 0;
 HEAPF64[$mu >> 3] = 1.0;
 HEAPF64[$nu >> 3] = +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3]));
 while (1) {
  $46 = +Math_abs(+(+HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3] - +HEAPF64[$nu + (HEAP32[$n >> 2] << 3) >> 3]));
  if (!($46 > +Math_abs(+(+HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3] + +HEAPF64[$nu + (HEAP32[$n >> 2] << 3) >> 3])) * 8.881784197001252e-16)) break;
  HEAPF64[$mu + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3] = (+HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3] + +HEAPF64[$nu + (HEAP32[$n >> 2] << 3) >> 3]) * .5;
  $75 = +Math_sqrt(+(+HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3] * +HEAPF64[$nu + (HEAP32[$n >> 2] << 3) >> 3]));
  HEAPF64[$nu + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3] = $75;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  if ((HEAP32[$n >> 2] | 0) >= 15) {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) HEAP32[$status >> 2] = 11;
 HEAPF64[$sin_umu >> 3] = +Math_sin(+(+HEAPF64[$1 >> 3] * +HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3]));
 HEAPF64[$cos_umu >> 3] = +Math_cos(+(+HEAPF64[$1 >> 3] * +HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3]));
 $96 = +Math_abs(+(+HEAPF64[$sin_umu >> 3]));
 if ($96 < +Math_abs(+(+HEAPF64[$cos_umu >> 3]))) {
  HEAPF64[$t >> 3] = +HEAPF64[$sin_umu >> 3] / +HEAPF64[$cos_umu >> 3];
  HEAPF64[$c + (HEAP32[$n >> 2] << 3) >> 3] = +HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3] * +HEAPF64[$t >> 3];
  HEAPF64[$d + (HEAP32[$n >> 2] << 3) >> 3] = 1.0;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) <= 0) break;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + -1;
   HEAPF64[$c + (HEAP32[$n >> 2] << 3) >> 3] = +HEAPF64[$d + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3] * +HEAPF64[$c + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3];
   HEAPF64[$r >> 3] = +HEAPF64[$c + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3] * +HEAPF64[$c + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3] / +HEAPF64[$mu + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3];
   HEAPF64[$d + (HEAP32[$n >> 2] << 3) >> 3] = (+HEAPF64[$r >> 3] + +HEAPF64[$nu + (HEAP32[$n >> 2] << 3) >> 3]) / (+HEAPF64[$r >> 3] + +HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3]);
  }
  $156 = +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3]));
  HEAPF64[HEAP32[$5 >> 2] >> 3] = $156 / +HEAPF64[$d + (HEAP32[$n >> 2] << 3) >> 3];
  $168 = +HEAPF64[HEAP32[$5 >> 2] >> 3] * +((+HEAPF64[$cos_umu >> 3] >= 0.0 ? 1 : -1) | 0);
  $173 = $168 / +_gsl_hypot(1.0, +(+HEAPF64[$c + (HEAP32[$n >> 2] << 3) >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $173;
  $184 = +HEAPF64[HEAP32[$4 >> 2] >> 3] * +HEAPF64[$c + (HEAP32[$n >> 2] << 3) >> 3] / +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $184;
 } else {
  HEAPF64[$t >> 3] = +HEAPF64[$cos_umu >> 3] / +HEAPF64[$sin_umu >> 3];
  HEAPF64[$c + (HEAP32[$n >> 2] << 3) >> 3] = +HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3] * +HEAPF64[$t >> 3];
  HEAPF64[$d + (HEAP32[$n >> 2] << 3) >> 3] = 1.0;
  while (1) {
   $200 = HEAP32[$n >> 2] | 0;
   if ((HEAP32[$n >> 2] | 0) <= 0) break;
   HEAP32[$n >> 2] = $200 + -1;
   HEAPF64[$c + (HEAP32[$n >> 2] << 3) >> 3] = +HEAPF64[$d + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3] * +HEAPF64[$c + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3];
   HEAPF64[$r >> 3] = +HEAPF64[$c + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3] * +HEAPF64[$c + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3] / +HEAPF64[$mu + ((HEAP32[$n >> 2] | 0) + 1 << 3) >> 3];
   HEAPF64[$d + (HEAP32[$n >> 2] << 3) >> 3] = (+HEAPF64[$r >> 3] + +HEAPF64[$nu + (HEAP32[$n >> 2] << 3) >> 3]) / (+HEAPF64[$r >> 3] + +HEAPF64[$mu + (HEAP32[$n >> 2] << 3) >> 3]);
  }
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$d + ($200 << 3) >> 3];
  $246 = +((+HEAPF64[$sin_umu >> 3] >= 0.0 ? 1 : -1) | 0);
  $251 = $246 / +_gsl_hypot(1.0, +(+HEAPF64[$c + (HEAP32[$n >> 2] << 3) >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $251;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$c + (HEAP32[$n >> 2] << 3) >> 3] * +HEAPF64[HEAP32[$3 >> 2] >> 3];
 }
 HEAP32[$0 >> 2] = HEAP32[$status >> 2];
 $261 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $261 | 0;
}
function _gsl_sf_bessel_Jnu_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $103 = 0, $15 = 0, $174 = 0.0, $184 = 0, $185 = 0, $2 = 0, $27 = 0.0, $3 = 0, $38 = 0.0, $53 = 0.0, $54 = 0.0, $93 = 0.0, $Jmu = 0, $Jmup1_Jmu = 0, $Jmuprime_Jmu = 0, $Jn = 0, $Jnm1 = 0, $Jnp1 = 0, $Jnup1_Jnu = 0, $N = 0, $P = 0, $Q = 0, $Y_mu = 0, $Y_mup1 = 0, $Yn = 0, $Ynm1 = 0, $Ynp1 = 0, $gamma = 0, $mu = 0, $n = 0, $n1 = 0, $sgn_Jmu = 0, $sgn_Jnu = 0, $stat_CF1 = 0, $stat_CF2 = 0, $stat_mu = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $0 = sp + 204 | 0;
 $1 = sp + 168 | 0;
 $2 = sp + 160 | 0;
 $3 = sp + 200 | 0;
 $N = sp + 196 | 0;
 $mu = sp + 152 | 0;
 $Jnup1_Jnu = sp + 144 | 0;
 $sgn_Jnu = sp + 136 | 0;
 $stat_CF1 = sp + 192 | 0;
 $Y_mu = sp + 120 | 0;
 $Y_mup1 = sp + 104 | 0;
 $stat_mu = sp + 188 | 0;
 $Ynm1 = sp + 96 | 0;
 $Yn = sp + 88 | 0;
 $Ynp1 = sp + 80 | 0;
 $n = sp + 184 | 0;
 $Jmu = sp + 72 | 0;
 $Jmup1_Jmu = sp + 64 | 0;
 $sgn_Jmu = sp + 56 | 0;
 $Jmuprime_Jmu = sp + 48 | 0;
 $P = sp + 40 | 0;
 $Q = sp + 32 | 0;
 $stat_CF2 = sp + 180 | 0;
 $gamma = sp + 24 | 0;
 $Jnp1 = sp + 16 | 0;
 $Jn = sp + 8 | 0;
 $Jnm1 = sp;
 $n1 = sp + 176 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] < 0.0)) if (!(+HEAPF64[$1 >> 3] < 0.0)) {
  if (+HEAPF64[$2 >> 3] == 0.0) {
   $15 = HEAP32[$3 >> 2] | 0;
   if (+HEAPF64[$1 >> 3] == 0.0) {
    HEAPF64[$15 >> 3] = 1.0;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   } else {
    HEAPF64[$15 >> 3] = 0.0;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   }
   HEAP32[$0 >> 2] = 0;
   $185 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $185 | 0;
  }
  $27 = +HEAPF64[$1 >> 3];
  if (+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] < (+HEAPF64[$1 >> 3] + 1.0) * 10.0) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_IJ_taylor_e($27, +HEAPF64[$2 >> 3], -1, 100, 2.220446049250313e-16, HEAP32[$3 >> 2] | 0) | 0;
   $185 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $185 | 0;
  }
  if ($27 > 50.0) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_Jnu_asymp_Olver_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $185 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $185 | 0;
  }
  $38 = +HEAPF64[$1 >> 3];
  if (+HEAPF64[$2 >> 3] > 1.0e3) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_Jnu_asympx_e($38, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $185 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $185 | 0;
  }
  HEAP32[$N >> 2] = ~~($38 + .5);
  HEAPF64[$mu >> 3] = +HEAPF64[$1 >> 3] - +(HEAP32[$N >> 2] | 0);
  HEAP32[$stat_CF1 >> 2] = _gsl_sf_bessel_J_CF1(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $Jnup1_Jnu, $sgn_Jnu) | 0;
  $53 = +HEAPF64[$mu >> 3];
  $54 = +HEAPF64[$2 >> 3];
  if (+HEAPF64[$2 >> 3] < 2.0) {
   HEAP32[$stat_mu >> 2] = _gsl_sf_bessel_Y_temme($53, $54, $Y_mu, $Y_mup1) | 0;
   HEAPF64[$Ynm1 >> 3] = +HEAPF64[$Y_mu >> 3];
   HEAPF64[$Yn >> 3] = +HEAPF64[$Y_mup1 >> 3];
   HEAPF64[$Ynp1 >> 3] = 0.0;
   HEAP32[$n >> 2] = 1;
   while (1) {
    if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$N >> 2] | 0)) break;
    HEAPF64[$Ynp1 >> 3] = (+HEAPF64[$mu >> 3] + +(HEAP32[$n >> 2] | 0)) * 2.0 / +HEAPF64[$2 >> 3] * +HEAPF64[$Yn >> 3] - +HEAPF64[$Ynm1 >> 3];
    HEAPF64[$Ynm1 >> 3] = +HEAPF64[$Yn >> 3];
    HEAPF64[$Yn >> 3] = +HEAPF64[$Ynp1 >> 3];
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
   }
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 2.0 / (+HEAPF64[$2 >> 3] * 3.141592653589793) / (+HEAPF64[$Jnup1_Jnu >> 3] * +HEAPF64[$Yn >> 3] - +HEAPF64[$Ynp1 >> 3]);
   $93 = (+(HEAP32[$N >> 2] | 0) + 2.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $93;
   if (HEAP32[$stat_mu >> 2] | 0) $103 = HEAP32[$stat_mu >> 2] | 0; else $103 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $103;
   $185 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $185 | 0;
  } else {
   HEAP32[$stat_CF2 >> 2] = _gsl_sf_bessel_JY_steed_CF2($53, $54, $P, $Q) | 0;
   HEAPF64[$Jnp1 >> 3] = +HEAPF64[$sgn_Jnu >> 3] * 1.4916681462400413e-154 * +HEAPF64[$Jnup1_Jnu >> 3];
   HEAPF64[$Jn >> 3] = +HEAPF64[$sgn_Jnu >> 3] * 1.4916681462400413e-154;
   HEAP32[$n1 >> 2] = HEAP32[$N >> 2];
   while (1) {
    if ((HEAP32[$n1 >> 2] | 0) <= 0) break;
    HEAPF64[$Jnm1 >> 3] = (+HEAPF64[$mu >> 3] + +(HEAP32[$n1 >> 2] | 0)) * 2.0 / +HEAPF64[$2 >> 3] * +HEAPF64[$Jn >> 3] - +HEAPF64[$Jnp1 >> 3];
    HEAPF64[$Jnp1 >> 3] = +HEAPF64[$Jn >> 3];
    HEAPF64[$Jn >> 3] = +HEAPF64[$Jnm1 >> 3];
    HEAP32[$n1 >> 2] = (HEAP32[$n1 >> 2] | 0) + -1;
   }
   HEAPF64[$Jmup1_Jmu >> 3] = +HEAPF64[$Jnp1 >> 3] / +HEAPF64[$Jn >> 3];
   HEAPF64[$sgn_Jmu >> 3] = +((+HEAPF64[$Jn >> 3] >= 0.0 ? 1 : -1) | 0);
   HEAPF64[$Jmuprime_Jmu >> 3] = +HEAPF64[$mu >> 3] / +HEAPF64[$2 >> 3] - +HEAPF64[$Jmup1_Jmu >> 3];
   HEAPF64[$gamma >> 3] = (+HEAPF64[$P >> 3] - +HEAPF64[$Jmuprime_Jmu >> 3]) / +HEAPF64[$Q >> 3];
   HEAPF64[$Jmu >> 3] = +HEAPF64[$sgn_Jmu >> 3] * +Math_sqrt(+(2.0 / (+HEAPF64[$2 >> 3] * 3.141592653589793) / (+HEAPF64[$Q >> 3] + +HEAPF64[$gamma >> 3] * (+HEAPF64[$P >> 3] - +HEAPF64[$Jmuprime_Jmu >> 3]))));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$Jmu >> 3] * +HEAPF64[$sgn_Jnu >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Jn >> 3];
   $174 = (+(HEAP32[$N >> 2] | 0) + 2.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $174;
   if (HEAP32[$stat_CF2 >> 2] | 0) $184 = HEAP32[$stat_CF2 >> 2] | 0; else $184 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $184;
   $185 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $185 | 0;
  }
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(12696, 12712, 82, 1);
 HEAP32[$0 >> 2] = 1;
 $185 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $185 | 0;
}
function _lngamma_sgn_sing($N, $eps, $lng, $sgn) {
 $N = $N | 0;
 $eps = +$eps;
 $lng = $lng | 0;
 $sgn = $sgn | 0;
 var $0 = 0, $1 = 0, $175 = 0.0, $180 = 0.0, $186 = 0.0, $198 = 0, $2 = 0, $3 = 0, $4 = 0, $58 = 0.0, $62 = 0.0, $67 = 0.0, $aeps = 0, $c09 = 0, $c12 = 0, $c23 = 0, $c34 = 0, $c45 = 0, $c56 = 0, $c67 = 0, $c78 = 0, $e2 = 0, $g = 0, $g1 = 0, $g5 = 0, $gam_e = 0, $lng_ser = 0, $psi_0 = 0, $psi_1 = 0, $psi_2 = 0, $psi_3 = 0, $psi_4 = 0, $psi_5 = 0, $psi_6 = 0, $sin_ser = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $0 = sp + 388 | 0;
 $1 = sp + 384 | 0;
 $2 = sp + 368 | 0;
 $3 = sp + 380 | 0;
 $4 = sp + 376 | 0;
 $g5 = sp + 280 | 0;
 $g = sp + 272 | 0;
 $gam_e = sp + 264 | 0;
 $g1 = sp + 256 | 0;
 $e2 = sp + 208 | 0;
 $sin_ser = sp + 200 | 0;
 $aeps = sp + 192 | 0;
 $c12 = sp + 184 | 0;
 $c23 = sp + 176 | 0;
 $c34 = sp + 168 | 0;
 $c45 = sp + 160 | 0;
 $c56 = sp + 152 | 0;
 $c67 = sp + 144 | 0;
 $c78 = sp + 136 | 0;
 $lng_ser = sp + 128 | 0;
 $c09 = sp + 112 | 0;
 $psi_0 = sp + 96 | 0;
 $psi_1 = sp + 80 | 0;
 $psi_2 = sp + 64 | 0;
 $psi_3 = sp + 48 | 0;
 $psi_4 = sp + 32 | 0;
 $psi_5 = sp + 16 | 0;
 $psi_6 = sp;
 HEAP32[$1 >> 2] = $N;
 HEAPF64[$2 >> 3] = $eps;
 HEAP32[$3 >> 2] = $lng;
 HEAP32[$4 >> 2] = $sgn;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  _gsl_error(38408, 38400, 769, 1);
  HEAP32[$0 >> 2] = 1;
  $198 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAPF64[sp + 360 >> 3] = .07721566490153287;
  HEAPF64[sp + 352 >> 3] = .0881596695735603;
  HEAPF64[sp + 344 >> 3] = -.0043612543455534055;
  HEAPF64[sp + 336 >> 3] = .013910658820046407;
  HEAPF64[sp + 328 >> 3] = -.004094272276808391;
  HEAPF64[sp + 320 >> 3] = .002756613101915416;
  HEAPF64[sp + 312 >> 3] = -.0012416264556530502;
  HEAPF64[sp + 304 >> 3] = .0006526797612180278;
  HEAPF64[sp + 296 >> 3] = -.0003220526168271044;
  HEAPF64[sp + 288 >> 3] = .00016229131039545457;
  HEAPF64[$g5 >> 3] = +HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] * .00016229131039545457 + -.0003220526168271044) + .0006526797612180278) + -.0012416264556530502) + .002756613101915416;
  HEAPF64[$g >> 3] = +HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] * +HEAPF64[$g5 >> 3] + -.004094272276808391) + .013910658820046407) + -.0043612543455534055) + .0881596695735603) + .07721566490153287);
  HEAPF64[$gam_e >> 3] = +HEAPF64[$g >> 3] - 1.0 - +HEAPF64[$2 >> 3] * .5 * (+HEAPF64[$2 >> 3] * 3.0 + 1.0) / (1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
  $58 = +Math_abs(+(+HEAPF64[$gam_e >> 3]));
  $62 = +Math_log(+($58 / +Math_abs(+(+HEAPF64[$2 >> 3]))));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $62;
  $67 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $67;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$2 >> 3] > 0.0 ? -1.0 : 1.0;
  HEAP32[$0 >> 2] = 0;
  $198 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 HEAPF64[sp + 248 >> 3] = -1.6449340668482264;
 HEAPF64[sp + 240 >> 3] = .8117424252833536;
 HEAPF64[sp + 232 >> 3] = -.19075182412208422;
 HEAPF64[sp + 224 >> 3] = .0261478478176548;
 HEAPF64[sp + 216 >> 3] = -.0023460810354558235;
 HEAPF64[$e2 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
 HEAPF64[$sin_ser >> 3] = +HEAPF64[$e2 >> 3] * (+HEAPF64[$e2 >> 3] * (+HEAPF64[$e2 >> 3] * (+HEAPF64[$e2 >> 3] * (+HEAPF64[$e2 >> 3] * -.0023460810354558235 + .0261478478176548) + -.19075182412208422) + .8117424252833536) + -1.6449340668482264) + 1.0;
 HEAPF64[$aeps >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$psi_2 >> 3] = 0.0;
 HEAPF64[$psi_3 >> 3] = 0.0;
 HEAPF64[$psi_4 >> 3] = 0.0;
 HEAPF64[$psi_5 >> 3] = 0.0;
 HEAPF64[$psi_6 >> 3] = 0.0;
 _gsl_sf_lnfact_e(HEAP32[$1 >> 2] | 0, $c09) | 0;
 _gsl_sf_psi_int_e((HEAP32[$1 >> 2] | 0) + 1 | 0, $psi_0) | 0;
 _gsl_sf_psi_1_int_e((HEAP32[$1 >> 2] | 0) + 1 | 0, $psi_1) | 0;
 if (+HEAPF64[$aeps >> 3] > 1.0e-5) _gsl_sf_psi_n_e(2, +(HEAP32[$1 >> 2] | 0) + 1.0, $psi_2) | 0;
 if (+HEAPF64[$aeps >> 3] > 2.0e-4) _gsl_sf_psi_n_e(3, +(HEAP32[$1 >> 2] | 0) + 1.0, $psi_3) | 0;
 if (+HEAPF64[$aeps >> 3] > .001) _gsl_sf_psi_n_e(4, +(HEAP32[$1 >> 2] | 0) + 1.0, $psi_4) | 0;
 if (+HEAPF64[$aeps >> 3] > .005) _gsl_sf_psi_n_e(5, +(HEAP32[$1 >> 2] | 0) + 1.0, $psi_5) | 0;
 if (+HEAPF64[$aeps >> 3] > .01) _gsl_sf_psi_n_e(6, +(HEAP32[$1 >> 2] | 0) + 1.0, $psi_6) | 0;
 HEAPF64[$c12 >> 3] = +HEAPF64[$psi_0 >> 3];
 HEAPF64[$c23 >> 3] = +HEAPF64[$psi_1 >> 3] / 2.0;
 HEAPF64[$c34 >> 3] = +HEAPF64[$psi_2 >> 3] / 6.0;
 HEAPF64[$c45 >> 3] = +HEAPF64[$psi_3 >> 3] / 24.0;
 HEAPF64[$c56 >> 3] = +HEAPF64[$psi_4 >> 3] / 120.0;
 HEAPF64[$c67 >> 3] = +HEAPF64[$psi_5 >> 3] / 720.0;
 HEAPF64[$c78 >> 3] = +HEAPF64[$psi_6 >> 3] / 5040.0;
 HEAPF64[$lng_ser >> 3] = +HEAPF64[$c09 >> 3] - +HEAPF64[$2 >> 3] * (+HEAPF64[$c12 >> 3] - +HEAPF64[$2 >> 3] * (+HEAPF64[$c23 >> 3] - +HEAPF64[$2 >> 3] * (+HEAPF64[$c34 >> 3] - +HEAPF64[$2 >> 3] * (+HEAPF64[$c45 >> 3] - +HEAPF64[$2 >> 3] * (+HEAPF64[$c56 >> 3] - +HEAPF64[$2 >> 3] * (+HEAPF64[$c67 >> 3] - +HEAPF64[$2 >> 3] * +HEAPF64[$c78 >> 3]))))));
 HEAPF64[$g1 >> 3] = -+HEAPF64[$lng_ser >> 3] - +Math_log(+(+HEAPF64[$sin_ser >> 3]));
 $175 = +HEAPF64[$g1 >> 3] - +Math_log(+(+Math_abs(+(+HEAPF64[$2 >> 3]))));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = $175;
 $180 = +Math_abs(+(+HEAPF64[$g1 >> 3]));
 $186 = +HEAPF64[$c09 + 8 >> 3] + ($180 + +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]))) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $186;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = ((HEAP32[$1 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0) * (+HEAPF64[$2 >> 3] > 0.0 ? 1.0 : -1.0);
 HEAP32[$0 >> 2] = 0;
 $198 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $198 | 0;
}
function _gamma_xgthalf($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $116 = 0.0, $129 = 0, $169 = 0, $2 = 0, $34 = 0, $35 = 0.0, $65 = 0, $66 = 0.0, $96 = 0.0, $98 = 0.0, $c = 0, $c1 = 0, $c12 = 0, $c2 = 0, $c23 = 0, $c3 = 0, $c34 = 0, $c4 = 0, $c45 = 0, $c5 = 0, $c56 = 0, $c6 = 0, $c67 = 0, $c7 = 0, $c78 = 0, $c8 = 0, $e = 0, $eps = 0, $eps1 = 0, $gamma_8 = 0, $gstar = 0, $lg = 0, $n = 0, $p = 0, $pre = 0, $q = 0, $stat_gs = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $0 = sp + 252 | 0;
 $1 = sp + 232 | 0;
 $2 = sp + 248 | 0;
 $n = sp + 244 | 0;
 $eps = sp + 224 | 0;
 $c1 = sp + 216 | 0;
 $c2 = sp + 208 | 0;
 $c3 = sp + 200 | 0;
 $c4 = sp + 192 | 0;
 $c5 = sp + 184 | 0;
 $c6 = sp + 176 | 0;
 $c7 = sp + 168 | 0;
 $eps1 = sp + 160 | 0;
 $c12 = sp + 152 | 0;
 $c23 = sp + 144 | 0;
 $c34 = sp + 136 | 0;
 $c45 = sp + 128 | 0;
 $c56 = sp + 120 | 0;
 $c67 = sp + 112 | 0;
 $c78 = sp + 104 | 0;
 $c8 = sp + 96 | 0;
 $lg = sp + 80 | 0;
 $gamma_8 = sp + 72 | 0;
 $t = sp + 64 | 0;
 $c = sp + 48 | 0;
 $p = sp + 40 | 0;
 $e = sp + 32 | 0;
 $q = sp + 24 | 0;
 $pre = sp + 16 | 0;
 $gstar = sp;
 $stat_gs = sp + 240 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == .5) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.772453850905516;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $169 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $169 | 0;
 }
 if (+HEAPF64[$1 >> 3] <= 171.0) if (+HEAPF64[$1 >> 3] == +Math_floor(+(+HEAPF64[$1 >> 3]))) {
  HEAP32[$n >> 2] = ~~+Math_floor(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[46024 + (((HEAP32[$n >> 2] | 0) - 1 | 0) * 24 | 0) >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $169 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $169 | 0;
 }
 $34 = +Math_abs(+(+HEAPF64[$1 >> 3] - 1.0)) < .01;
 $35 = +HEAPF64[$1 >> 3];
 if ($34) {
  HEAPF64[$eps >> 3] = $35 - 1.0;
  HEAPF64[$c1 >> 3] = .42278433509846713;
  HEAPF64[$c2 >> 3] = -.010944004672027444;
  HEAPF64[$c3 >> 3] = .0925209239191137;
  HEAPF64[$c4 >> 3] = -.018271913165599812;
  HEAPF64[$c5 >> 3] = .018004931096854797;
  HEAPF64[$c6 >> 3] = -.006850885378723807;
  HEAPF64[$c7 >> 3] = .003998239557568466;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 / +HEAPF64[$1 >> 3] + +HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * (+HEAPF64[$eps >> 3] * .003998239557568466 + -.006850885378723807) + .018004931096854797) + -.018271913165599812) + .0925209239191137) + -.010944004672027444) + .42278433509846713);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $169 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $169 | 0;
 }
 $65 = +Math_abs(+($35 - 2.0)) < .01;
 $66 = +HEAPF64[$1 >> 3];
 if ($65) {
  HEAPF64[$eps1 >> 3] = $66 - 2.0;
  HEAPF64[$c12 >> 3] = .42278433509846713;
  HEAPF64[$c23 >> 3] = .4118403304264397;
  HEAPF64[$c34 >> 3] = .08157691924708627;
  HEAPF64[$c45 >> 3] = .0742490107535139;
  HEAPF64[$c56 >> 3] = -.00026698206874501475;
  HEAPF64[$c67 >> 3] = .011154045718130992;
  HEAPF64[$c78 >> 3] = -.0028526458211553408;
  HEAPF64[$c8 >> 3] = .002103933340697388;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$eps1 >> 3] * (+HEAPF64[$eps1 >> 3] * (+HEAPF64[$eps1 >> 3] * (+HEAPF64[$eps1 >> 3] * (+HEAPF64[$eps1 >> 3] * (+HEAPF64[$eps1 >> 3] * (+HEAPF64[$eps1 >> 3] * (+HEAPF64[$eps1 >> 3] * .002103933340697388 + -.0028526458211553408) + .011154045718130992) + -.00026698206874501475) + .0742490107535139) + .08157691924708627) + .4118403304264397) + .42278433509846713) + 1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $169 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $169 | 0;
 }
 $96 = +HEAPF64[$1 >> 3];
 if ($66 < 5.0) {
  _lngamma_lanczos($96, $lg) | 0;
  $98 = +Math_exp(+(+HEAPF64[$lg >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $98;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * (+HEAPF64[$lg + 8 >> 3] + 4.440892098500626e-16);
  HEAP32[$0 >> 2] = 0;
  $169 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $169 | 0;
 }
 if ($96 < 10.0) {
  HEAPF64[$gamma_8 >> 3] = 5040.0;
  HEAPF64[$t >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - 15.0) / 5.0;
  _cheb_eval_e375(50928, +HEAPF64[$t >> 3], $c) | 0;
  $116 = +Math_exp(+(+HEAPF64[$c >> 3])) * 5040.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $116;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * +HEAPF64[$c + 8 >> 3];
  $129 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$129 >> 3] = +HEAPF64[$129 >> 3] + +HEAPF64[HEAP32[$2 >> 2] >> 3] * 4.440892098500626e-16;
  HEAP32[$0 >> 2] = 0;
  $169 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $169 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 171.0) {
  HEAPF64[$p >> 3] = +Math_pow(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[$1 >> 3] * .5));
  HEAPF64[$e >> 3] = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$q >> 3] = +HEAPF64[$p >> 3] * +HEAPF64[$e >> 3] * +HEAPF64[$p >> 3];
  HEAPF64[$pre >> 3] = +HEAPF64[$q >> 3] * 2.5066282746310007 / +Math_sqrt(+(+HEAPF64[$1 >> 3]));
  HEAP32[$stat_gs >> 2] = _gammastar_ser(+HEAPF64[$1 >> 3], $gstar) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$gstar >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$1 >> 3] + 2.5) * 2.220446049250313e-16 * +HEAPF64[HEAP32[$2 >> 2] >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_gs >> 2];
  $169 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $169 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(38472, 38400, 1106, 16);
  HEAP32[$0 >> 2] = 16;
  $169 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $169 | 0;
 }
 return 0;
}
function _gsl_sf_airy_Bi_deriv_scaled_e($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $142 = 0.0, $144 = 0, $149 = 0.0, $173 = 0.0, $175 = 0, $2 = 0, $20 = 0.0, $201 = 0.0, $203 = 0, $206 = 0, $26 = 0.0, $3 = 0, $32 = 0.0, $34 = 0, $39 = 0.0, $6 = 0.0, $71 = 0.0, $73 = 0, $86 = 0, $91 = 0, $95 = 0.0, $a = 0, $p = 0, $result_c0 = 0, $result_c010 = 0, $result_c06 = 0, $result_c1 = 0, $result_c13 = 0, $result_c2 = 0, $s = 0, $s1 = 0, $s2 = 0, $s5 = 0, $s9 = 0, $sqrtx = 0, $sqrtx7 = 0, $status_ap = 0, $x2 = 0, $x3 = 0, $z = 0, $z4 = 0, $z8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $0 = sp + 260 | 0;
 $1 = sp + 240 | 0;
 $2 = sp + 256 | 0;
 $3 = sp + 252 | 0;
 $a = sp + 208 | 0;
 $p = sp + 192 | 0;
 $status_ap = sp + 248 | 0;
 $s = sp + 184 | 0;
 $x3 = sp + 176 | 0;
 $x2 = sp + 168 | 0;
 $result_c1 = sp + 152 | 0;
 $result_c2 = sp + 136 | 0;
 $s1 = sp + 128 | 0;
 $z = sp + 120 | 0;
 $s2 = sp + 112 | 0;
 $result_c0 = sp + 96 | 0;
 $result_c13 = sp + 80 | 0;
 $sqrtx = sp + 72 | 0;
 $z4 = sp + 64 | 0;
 $s5 = sp + 56 | 0;
 $result_c06 = sp + 40 | 0;
 $sqrtx7 = sp + 32 | 0;
 $z8 = sp + 24 | 0;
 $s9 = sp + 16 | 0;
 $result_c010 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[sp + 232 >> 3] = 8.750690570848434;
 HEAPF64[sp + 224 >> 3] = -2.0938363213560542;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAP32[$status_ap >> 2] = _airy_deriv_mod_phase($6, HEAP32[$2 >> 2] | 0, $a, $p) | 0;
  HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$p >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$a >> 3] * +HEAPF64[$s >> 3];
  $20 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3] * +HEAPF64[$p + 8 >> 3]));
  $26 = $20 + +Math_abs(+(+HEAPF64[$s >> 3] * +HEAPF64[$a + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $26;
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $34 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] + $32;
  HEAP32[$0 >> 2] = HEAP32[$status_ap >> 2];
  $206 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $206 | 0;
 }
 $39 = +HEAPF64[$1 >> 3];
 if ($6 < 1.0) {
  HEAPF64[$x3 >> 3] = $39 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  _cheb_eval_mode_e66(5416, +HEAPF64[$x3 >> 3], HEAP32[$2 >> 2] | 0, $result_c1) | 0;
  _cheb_eval_mode_e66(5320, +HEAPF64[$x3 >> 3], HEAP32[$2 >> 2] | 0, $result_c2) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$x2 >> 3] * (+HEAPF64[$result_c1 >> 3] + .25) + +HEAPF64[$result_c2 >> 3] + .5;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$result_c1 + 8 >> 3] + +HEAPF64[$result_c2 + 8 >> 3];
  $71 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $73 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$73 >> 3] = +HEAPF64[$73 >> 3] + $71;
  if (+HEAPF64[$1 >> 3] > 3.666852862501036e-11) {
   HEAPF64[$s1 >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3] * -2.0 * +Math_sqrt(+(+HEAPF64[$1 >> 3])) / 3.0));
   $86 = HEAP32[$3 >> 2] | 0;
   HEAPF64[$86 >> 3] = +HEAPF64[$86 >> 3] * +HEAPF64[$s1 >> 3];
   $91 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$91 >> 3] = +HEAPF64[$91 >> 3] * +HEAPF64[$s1 >> 3];
  }
  HEAP32[$0 >> 2] = 0;
  $206 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $206 | 0;
 }
 $95 = +HEAPF64[$1 >> 3];
 if ($39 < 2.0) {
  HEAPF64[$z >> 3] = (2.0 * $95 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] - 9.0) / 7.0;
  HEAPF64[$s2 >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3] * -2.0 * +Math_sqrt(+(+HEAPF64[$1 >> 3])) / 3.0));
  _cheb_eval_mode_e66(5216, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c0) | 0;
  _cheb_eval_mode_e66(5104, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c13) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$s2 >> 3] * (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c0 >> 3] + .25) + .5 + +HEAPF64[$result_c13 >> 3]);
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$s2 >> 3] * (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$result_c0 + 8 >> 3] + +HEAPF64[$result_c13 + 8 >> 3]);
  $142 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $144 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$144 >> 3] = +HEAPF64[$144 >> 3] + $142;
  HEAP32[$0 >> 2] = 0;
  $206 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $206 | 0;
 }
 $149 = +Math_sqrt(+(+HEAPF64[$1 >> 3]));
 if ($95 < 4.0) {
  HEAPF64[$sqrtx >> 3] = $149;
  HEAPF64[$z4 >> 3] = 8.750690570848434 / (+HEAPF64[$1 >> 3] * +HEAPF64[$sqrtx >> 3]) + -2.0938363213560542;
  HEAPF64[$s5 >> 3] = +Math_sqrt(+(+HEAPF64[$sqrtx >> 3]));
  _cheb_eval_mode_e66(4992, +HEAPF64[$z4 >> 3], HEAP32[$2 >> 2] | 0, $result_c06) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$s5 >> 3] * (+HEAPF64[$result_c06 >> 3] + .625);
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$s5 >> 3] * +HEAPF64[$result_c06 + 8 >> 3];
  $173 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $175 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$175 >> 3] = +HEAPF64[$175 >> 3] + $173;
  HEAP32[$0 >> 2] = 0;
  $206 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $206 | 0;
 } else {
  HEAPF64[$sqrtx7 >> 3] = $149;
  HEAPF64[$z8 >> 3] = 16.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$sqrtx7 >> 3]) - 1.0;
  HEAPF64[$s9 >> 3] = +Math_sqrt(+(+HEAPF64[$sqrtx7 >> 3]));
  _cheb_eval_mode_e66(4768, +HEAPF64[$z8 >> 3], HEAP32[$2 >> 2] | 0, $result_c010) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$s9 >> 3] * (+HEAPF64[$result_c010 >> 3] + .625);
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$s9 >> 3] * +HEAPF64[$result_c010 + 8 >> 3];
  $201 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $203 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$203 >> 3] = +HEAPF64[$203 >> 3] + $201;
  HEAP32[$0 >> 2] = 0;
  $206 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $206 | 0;
 }
 return 0;
}
function _gsl_sf_legendre_Pl_e($l, $x, $result) {
 $l = $l | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $116 = 0.0, $183 = 0.0, $194 = 0.0, $196 = 0, $2 = 0, $206 = 0, $207 = 0, $26 = 0.0, $3 = 0, $39 = 0.0, $48 = 0, $85 = 0.0, $B00 = 0, $J0 = 0, $Jm1 = 0, $c1 = 0, $cot_th = 0, $e_ell = 0, $e_ellm1 = 0, $e_ellm2 = 0, $ell = 0, $p_ell = 0, $p_ellm1 = 0, $p_ellm2 = 0, $pre = 0, $sin_th = 0, $stat_J0 = 0, $stat_Jm1 = 0, $th = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 164 | 0;
 $1 = sp + 160 | 0;
 $2 = sp + 136 | 0;
 $3 = sp + 156 | 0;
 $p_ellm2 = sp + 128 | 0;
 $p_ellm1 = sp + 120 | 0;
 $p_ell = sp + 112 | 0;
 $e_ellm2 = sp + 104 | 0;
 $e_ellm1 = sp + 96 | 0;
 $e_ell = sp + 88 | 0;
 $ell = sp + 152 | 0;
 $u = sp + 80 | 0;
 $th = sp + 72 | 0;
 $J0 = sp + 56 | 0;
 $Jm1 = sp + 40 | 0;
 $stat_J0 = sp + 148 | 0;
 $stat_Jm1 = sp + 144 | 0;
 $pre = sp + 32 | 0;
 $B00 = sp + 24 | 0;
 $c1 = sp + 16 | 0;
 $sin_th = sp + 8 | 0;
 $cot_th = sp;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] < -1.0 | +HEAPF64[$2 >> 3] > 1.0)) {
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $207 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $207 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$2 >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $207 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $207 | 0;
  }
  $26 = +HEAPF64[$2 >> 3];
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = (3.0 * $26 * +HEAPF64[$2 >> 3] - 1.0) * .5;
   $39 = (+Math_abs(+(+HEAPF64[$2 >> 3] * 3.0 * +HEAPF64[$2 >> 3])) + 1.0) * 2.220446049250313e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $39;
   HEAP32[$0 >> 2] = 0;
   $207 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $207 | 0;
  }
  if ($26 == 1.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $207 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $207 | 0;
  }
  $48 = HEAP32[$1 >> 2] | 0;
  if (+HEAPF64[$2 >> 3] == -1.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = ($48 & 1 | 0) != 0 ? -1.0 : 1.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $207 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $207 | 0;
  }
  if (($48 | 0) < 1e5) {
   HEAPF64[$p_ellm2 >> 3] = 1.0;
   HEAPF64[$p_ellm1 >> 3] = +HEAPF64[$2 >> 3];
   HEAPF64[$p_ell >> 3] = +HEAPF64[$p_ellm1 >> 3];
   HEAPF64[$e_ellm2 >> 3] = 2.220446049250313e-16;
   HEAPF64[$e_ellm1 >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3])) * 2.220446049250313e-16;
   HEAPF64[$e_ell >> 3] = +HEAPF64[$e_ellm1 >> 3];
   HEAP32[$ell >> 2] = 2;
   while (1) {
    if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[$p_ell >> 3] = (+HEAPF64[$2 >> 3] * +((HEAP32[$ell >> 2] << 1) - 1 | 0) * +HEAPF64[$p_ellm1 >> 3] - +((HEAP32[$ell >> 2] | 0) - 1 | 0) * +HEAPF64[$p_ellm2 >> 3]) / +(HEAP32[$ell >> 2] | 0);
    HEAPF64[$p_ellm2 >> 3] = +HEAPF64[$p_ellm1 >> 3];
    HEAPF64[$p_ellm1 >> 3] = +HEAPF64[$p_ell >> 3];
    $85 = +Math_abs(+(+HEAPF64[$2 >> 3]));
    HEAPF64[$e_ell >> 3] = ($85 * (+(HEAP32[$ell >> 2] << 1 | 0) - 1.0) * +HEAPF64[$e_ellm1 >> 3] + (+(HEAP32[$ell >> 2] | 0) - 1.0) * +HEAPF64[$e_ellm2 >> 3]) * .5 / +(HEAP32[$ell >> 2] | 0);
    HEAPF64[$e_ellm2 >> 3] = +HEAPF64[$e_ellm1 >> 3];
    HEAPF64[$e_ellm1 >> 3] = +HEAPF64[$e_ell >> 3];
    HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
   }
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$p_ell >> 3];
   $116 = +HEAPF64[$e_ell >> 3] + +(HEAP32[$1 >> 2] | 0) * +Math_abs(+(+HEAPF64[$p_ell >> 3])) * 2.220446049250313e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $116;
   HEAP32[$0 >> 2] = 0;
   $207 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $207 | 0;
  }
  HEAPF64[$u >> 3] = +(HEAP32[$1 >> 2] | 0) + .5;
  HEAPF64[$th >> 3] = +Math_acos(+(+HEAPF64[$2 >> 3]));
  HEAP32[$stat_J0 >> 2] = _gsl_sf_bessel_J0_e(+HEAPF64[$u >> 3] * +HEAPF64[$th >> 3], $J0) | 0;
  HEAP32[$stat_Jm1 >> 2] = _gsl_sf_bessel_Jn_e(-1, +HEAPF64[$u >> 3] * +HEAPF64[$th >> 3], $Jm1) | 0;
  if (+HEAPF64[$th >> 3] < .0001220703125) {
   HEAPF64[$B00 >> 3] = (+HEAPF64[$th >> 3] * +HEAPF64[$th >> 3] / 15.0 + 1.0) / 24.0;
   HEAPF64[$pre >> 3] = +HEAPF64[$th >> 3] * +HEAPF64[$th >> 3] / 12.0 + 1.0;
  } else {
   HEAPF64[$sin_th >> 3] = +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]));
   HEAPF64[$cot_th >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$sin_th >> 3];
   HEAPF64[$B00 >> 3] = (1.0 - +HEAPF64[$th >> 3] * +HEAPF64[$cot_th >> 3]) * .125 / (+HEAPF64[$th >> 3] * +HEAPF64[$th >> 3]);
   HEAPF64[$pre >> 3] = +Math_sqrt(+(+HEAPF64[$th >> 3] / +HEAPF64[$sin_th >> 3]));
  }
  HEAPF64[$c1 >> 3] = +HEAPF64[$th >> 3] / +HEAPF64[$u >> 3] * +HEAPF64[$B00 >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre >> 3] * (+HEAPF64[$J0 >> 3] + +HEAPF64[$c1 >> 3] * +HEAPF64[$Jm1 >> 3]);
  $183 = +Math_abs(+(+HEAPF64[$c1 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre >> 3] * (+HEAPF64[$J0 + 8 >> 3] + $183 * +HEAPF64[$Jm1 + 8 >> 3]);
  $194 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 1.4901161193847656e-8;
  $196 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$196 >> 3] = +HEAPF64[$196 >> 3] + $194;
  if (HEAP32[$stat_J0 >> 2] | 0) $206 = HEAP32[$stat_J0 >> 2] | 0; else $206 = (HEAP32[$stat_Jm1 >> 2] | 0) != 0 ? HEAP32[$stat_Jm1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $206;
  $207 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $207 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(53496, 53512, 108, 1);
 HEAP32[$0 >> 2] = 1;
 $207 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $207 | 0;
}
function _olver_A2($z, $abs_zeta) {
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 var $0 = 0, $1 = 0, $103 = 0.0, $2 = 0, $234 = 0.0, $5 = 0.0, $a = 0, $rz = 0, $rz6 = 0, $t = 0, $t1 = 0, $t2 = 0, $t22 = 0, $t4 = 0, $t43 = 0, $t6 = 0, $t64 = 0, $t8 = 0, $t85 = 0, $term1 = 0, $term110 = 0, $term2 = 0, $term211 = 0, $term3 = 0, $term312 = 0, $term4 = 0, $term413 = 0, $term5 = 0, $term514 = 0, $z3 = 0, $z32 = 0, $z328 = 0, $z37 = 0, $z92 = 0, $z929 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $0 = sp + 336 | 0;
 $1 = sp + 328 | 0;
 $2 = sp + 320 | 0;
 $t = sp + 312 | 0;
 $t2 = sp + 304 | 0;
 $t4 = sp + 296 | 0;
 $t6 = sp + 288 | 0;
 $t8 = sp + 280 | 0;
 $rz = sp + 272 | 0;
 $z3 = sp + 264 | 0;
 $z32 = sp + 256 | 0;
 $z92 = sp + 248 | 0;
 $term1 = sp + 240 | 0;
 $term2 = sp + 232 | 0;
 $term3 = sp + 224 | 0;
 $term4 = sp + 216 | 0;
 $term5 = sp + 208 | 0;
 $a = sp + 200 | 0;
 $t1 = sp + 104 | 0;
 $t22 = sp + 96 | 0;
 $t43 = sp + 88 | 0;
 $t64 = sp + 80 | 0;
 $t85 = sp + 72 | 0;
 $rz6 = sp + 64 | 0;
 $z37 = sp + 56 | 0;
 $z328 = sp + 48 | 0;
 $z929 = sp + 40 | 0;
 $term110 = sp + 32 | 0;
 $term211 = sp + 24 | 0;
 $term312 = sp + 16 | 0;
 $term413 = sp + 8 | 0;
 $term514 = sp;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[$2 >> 3] = $abs_zeta;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .88) {
  HEAPF64[$t >> 3] = 1.0 / +Math_sqrt(+(1.0 - $5 * +HEAPF64[$1 >> 3]));
  HEAPF64[$t2 >> 3] = +HEAPF64[$t >> 3] * +HEAPF64[$t >> 3];
  HEAPF64[$t4 >> 3] = +HEAPF64[$t2 >> 3] * +HEAPF64[$t2 >> 3];
  HEAPF64[$t6 >> 3] = +HEAPF64[$t4 >> 3] * +HEAPF64[$t2 >> 3];
  HEAPF64[$t8 >> 3] = +HEAPF64[$t4 >> 3] * +HEAPF64[$t4 >> 3];
  HEAPF64[$rz >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$z3 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
  HEAPF64[$z32 >> 3] = +HEAPF64[$rz >> 3] * +HEAPF64[$rz >> 3] * +HEAPF64[$rz >> 3];
  HEAPF64[$z92 >> 3] = +HEAPF64[$z3 >> 3] * +HEAPF64[$z32 >> 3];
  HEAPF64[$term1 >> 3] = +HEAPF64[$t4 >> 3] * (4465125.0 - +HEAPF64[$t2 >> 3] * 94121676.0 + +HEAPF64[$t4 >> 3] * 349922430.0 - +HEAPF64[$t6 >> 3] * 446185740.0 + +HEAPF64[$t8 >> 3] * 185910725.0) / 39813120.0;
  HEAPF64[$term2 >> 3] = -40415375.0 / (+HEAPF64[$z3 >> 3] * 127401984.0 * +HEAPF64[$z3 >> 3]);
  HEAPF64[$term3 >> 3] = +HEAPF64[$t >> 3] * -.005971335579828961 * (3.0 - +HEAPF64[$t2 >> 3] * 5.0) / +HEAPF64[$z92 >> 3];
  HEAPF64[$term4 >> 3] = +HEAPF64[$t2 >> 3] * -857129509066358.0e-19 * (81.0 - +HEAPF64[$t2 >> 3] * 462.0 + +HEAPF64[$t4 >> 3] * 385.0) / +HEAPF64[$z3 >> 3];
  HEAPF64[$term5 >> 3] = +HEAPF64[$t >> 3] * -3.516428755144033e-7 * +HEAPF64[$t2 >> 3] * (30375.0 - +HEAPF64[$t2 >> 3] * 369603.0 + +HEAPF64[$t4 >> 3] * 765765.0 - +HEAPF64[$t6 >> 3] * 425425.0) / +HEAPF64[$z32 >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$term1 >> 3] + +HEAPF64[$term2 >> 3] + +HEAPF64[$term3 >> 3] + +HEAPF64[$term4 >> 3] + +HEAPF64[$term5 >> 3];
  $234 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$234;
 }
 $103 = +HEAPF64[$1 >> 3];
 if ($5 < 1.12) {
  HEAPF64[$a >> 3] = 1.0 - $103;
  HEAPF64[sp + 192 >> 3] = .000693735541354589;
  HEAPF64[sp + 184 >> 3] = .0004644834903658433;
  HEAPF64[sp + 176 >> 3] = -.0002890362546055981;
  HEAPF64[sp + 168 >> 3] = -.0008747649439537126;
  HEAPF64[sp + 160 >> 3] = -.0010297163761398655;
  HEAPF64[sp + 152 >> 3] = -.0008368573297138106;
  HEAPF64[sp + 144 >> 3] = -.000488910893527219;
  HEAPF64[sp + 136 >> 3] = -.00014423674794081722;
  HEAPF64[sp + 128 >> 3] = .00011436380098616348;
  HEAPF64[sp + 120 >> 3] = .00026680688149277755;
  HEAPF64[sp + 112 >> 3] = -.01197551757615107;
  HEAPF64[$0 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * -.01197551757615107 + .00026680688149277755) + .00011436380098616348) + -.00014423674794081722) + -.000488910893527219) + -.0008368573297138106) + -.0010297163761398655) + -.0008747649439537126) + -.0002890362546055981) + .0004644834903658433) + .000693735541354589;
  $234 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$234;
 } else {
  HEAPF64[$t1 >> 3] = 1.0 / ($103 * +Math_sqrt(+(1.0 - 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]))));
  HEAPF64[$t22 >> 3] = +HEAPF64[$t1 >> 3] * +HEAPF64[$t1 >> 3];
  HEAPF64[$t43 >> 3] = +HEAPF64[$t22 >> 3] * +HEAPF64[$t22 >> 3];
  HEAPF64[$t64 >> 3] = +HEAPF64[$t43 >> 3] * +HEAPF64[$t22 >> 3];
  HEAPF64[$t85 >> 3] = +HEAPF64[$t43 >> 3] * +HEAPF64[$t43 >> 3];
  HEAPF64[$rz6 >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$z37 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
  HEAPF64[$z328 >> 3] = +HEAPF64[$rz6 >> 3] * +HEAPF64[$rz6 >> 3] * +HEAPF64[$rz6 >> 3];
  HEAPF64[$z929 >> 3] = +HEAPF64[$z37 >> 3] * +HEAPF64[$z328 >> 3];
  HEAPF64[$term110 >> 3] = +HEAPF64[$t43 >> 3] * (+HEAPF64[$t22 >> 3] * 94121676.0 + 4465125.0 + +HEAPF64[$t43 >> 3] * 349922430.0 + +HEAPF64[$t64 >> 3] * 446185740.0 + +HEAPF64[$t85 >> 3] * 185910725.0) / 39813120.0;
  HEAPF64[$term211 >> 3] = -40415375.0 / (+HEAPF64[$z37 >> 3] * 127401984.0 * +HEAPF64[$z37 >> 3]);
  HEAPF64[$term312 >> 3] = +HEAPF64[$t1 >> 3] * .005971335579828961 * (+HEAPF64[$t22 >> 3] * 5.0 + 3.0) / +HEAPF64[$z929 >> 3];
  HEAPF64[$term413 >> 3] = +HEAPF64[$t22 >> 3] * -857129509066358.0e-19 * (+HEAPF64[$t22 >> 3] * 462.0 + 81.0 + +HEAPF64[$t43 >> 3] * 385.0) / +HEAPF64[$z37 >> 3];
  HEAPF64[$term514 >> 3] = +HEAPF64[$t1 >> 3] * 3.516428755144033e-7 * +HEAPF64[$t22 >> 3] * (+HEAPF64[$t22 >> 3] * 369603.0 + 30375.0 + +HEAPF64[$t43 >> 3] * 765765.0 + +HEAPF64[$t64 >> 3] * 425425.0) / +HEAPF64[$z328 >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$term110 >> 3] + +HEAPF64[$term211 >> 3] + +HEAPF64[$term312 >> 3] + +HEAPF64[$term413 >> 3] + +HEAPF64[$term514 >> 3];
  $234 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$234;
 }
 return 0.0;
}
function _gsl_sf_ellint_RF_e($x, $y, $z, $mode, $result) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $12 = 0, $141 = 0.0, $147 = 0.0, $153 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $71 = 0.0, $73 = 0.0, $c1 = 0, $c2 = 0, $c3 = 0, $e2 = 0, $e3 = 0, $epslon = 0, $errtol = 0, $goal = 0, $lamda = 0, $mu = 0, $n = 0, $prec = 0, $s = 0, $xn = 0, $xndev = 0, $xnroot = 0, $yn = 0, $yndev = 0, $ynroot = 0, $zn = 0, $zndev = 0, $znroot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 220 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 184 | 0;
 $3 = sp + 176 | 0;
 $4 = sp + 216 | 0;
 $5 = sp + 212 | 0;
 $goal = sp + 208 | 0;
 $errtol = sp + 152 | 0;
 $prec = sp + 144 | 0;
 $c1 = sp + 136 | 0;
 $c2 = sp + 128 | 0;
 $c3 = sp + 120 | 0;
 $xn = sp + 112 | 0;
 $yn = sp + 104 | 0;
 $zn = sp + 96 | 0;
 $mu = sp + 88 | 0;
 $xndev = sp + 80 | 0;
 $yndev = sp + 72 | 0;
 $zndev = sp + 64 | 0;
 $e2 = sp + 56 | 0;
 $e3 = sp + 48 | 0;
 $s = sp + 40 | 0;
 $n = sp + 200 | 0;
 $epslon = sp + 32 | 0;
 $lamda = sp + 24 | 0;
 $xnroot = sp + 16 | 0;
 $ynroot = sp + 8 | 0;
 $znroot = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAPF64[$3 >> 3] = $z;
 HEAP32[$4 >> 2] = $mode;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[sp + 168 >> 3] = 1.1125369292536007e-307;
 HEAPF64[sp + 160 >> 3] = 3.5953862697246315e+307;
 HEAP32[$goal >> 2] = _GSL_MODE_PREC(HEAP32[$4 >> 2] | 0) | 0;
 HEAPF64[$errtol >> 3] = (HEAP32[$goal >> 2] | 0) == 0 ? .001 : .03;
 $12 = _gsl_prec_eps + (HEAP32[$goal >> 2] << 3) | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[$12 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[$12 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[$12 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[$12 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[$12 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[$12 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[$12 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[$12 + 7 >> 0];
 HEAPF64[$prec >> 3] = +HEAPF64[tempDoublePtr >> 3];
 HEAP32[sp + 204 >> 2] = 1e4;
 if (!(+HEAPF64[$1 >> 3] < 0.0)) if (!(+HEAPF64[$2 >> 3] < 0.0)) if (!(+HEAPF64[$3 >> 3] < 0.0)) {
  if (!(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] < 1.1125369292536007e-307)) if (!(+HEAPF64[$1 >> 3] + +HEAPF64[$3 >> 3] < 1.1125369292536007e-307)) if (!(+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3] < 1.1125369292536007e-307)) {
   if (!(+_locMAX3(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3]) < 3.5953862697246315e+307)) {
    HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
    _gsl_error(29376, 29392, 236, 1);
    HEAP32[$0 >> 2] = 1;
    $153 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $153 | 0;
   }
   HEAPF64[$c1 >> 3] = .041666666666666664;
   HEAPF64[$c2 >> 3] = .06818181818181818;
   HEAPF64[$c3 >> 3] = .07142857142857142;
   HEAPF64[$xn >> 3] = +HEAPF64[$1 >> 3];
   HEAPF64[$yn >> 3] = +HEAPF64[$2 >> 3];
   HEAPF64[$zn >> 3] = +HEAPF64[$3 >> 3];
   HEAP32[$n >> 2] = 0;
   while (1) {
    HEAPF64[$mu >> 3] = (+HEAPF64[$xn >> 3] + +HEAPF64[$yn >> 3] + +HEAPF64[$zn >> 3]) / 3.0;
    HEAPF64[$xndev >> 3] = 2.0 - (+HEAPF64[$mu >> 3] + +HEAPF64[$xn >> 3]) / +HEAPF64[$mu >> 3];
    HEAPF64[$yndev >> 3] = 2.0 - (+HEAPF64[$mu >> 3] + +HEAPF64[$yn >> 3]) / +HEAPF64[$mu >> 3];
    HEAPF64[$zndev >> 3] = 2.0 - (+HEAPF64[$mu >> 3] + +HEAPF64[$zn >> 3]) / +HEAPF64[$mu >> 3];
    $71 = +Math_abs(+(+HEAPF64[$xndev >> 3]));
    $73 = +Math_abs(+(+HEAPF64[$yndev >> 3]));
    HEAPF64[$epslon >> 3] = +_locMAX3($71, $73, +Math_abs(+(+HEAPF64[$zndev >> 3])));
    if (+HEAPF64[$epslon >> 3] < +HEAPF64[$errtol >> 3]) {
     label = 14;
     break;
    }
    HEAPF64[$xnroot >> 3] = +Math_sqrt(+(+HEAPF64[$xn >> 3]));
    HEAPF64[$ynroot >> 3] = +Math_sqrt(+(+HEAPF64[$yn >> 3]));
    HEAPF64[$znroot >> 3] = +Math_sqrt(+(+HEAPF64[$zn >> 3]));
    HEAPF64[$lamda >> 3] = +HEAPF64[$xnroot >> 3] * (+HEAPF64[$ynroot >> 3] + +HEAPF64[$znroot >> 3]) + +HEAPF64[$ynroot >> 3] * +HEAPF64[$znroot >> 3];
    HEAPF64[$xn >> 3] = (+HEAPF64[$xn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAPF64[$yn >> 3] = (+HEAPF64[$yn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAPF64[$zn >> 3] = (+HEAPF64[$zn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    if ((HEAP32[$n >> 2] | 0) == 1e4) {
     label = 13;
     break;
    }
   }
   if ((label | 0) == 13) {
    HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
    _gsl_error(29408, 29392, 225, 11);
    HEAP32[$0 >> 2] = 11;
    $153 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $153 | 0;
   } else if ((label | 0) == 14) {
    HEAPF64[$e2 >> 3] = +HEAPF64[$xndev >> 3] * +HEAPF64[$yndev >> 3] - +HEAPF64[$zndev >> 3] * +HEAPF64[$zndev >> 3];
    HEAPF64[$e3 >> 3] = +HEAPF64[$xndev >> 3] * +HEAPF64[$yndev >> 3] * +HEAPF64[$zndev >> 3];
    HEAPF64[$s >> 3] = (+HEAPF64[$e2 >> 3] * .041666666666666664 - .1 - +HEAPF64[$e3 >> 3] * .06818181818181818) * +HEAPF64[$e2 >> 3] + 1.0 + +HEAPF64[$e3 >> 3] * .07142857142857142;
    $141 = +HEAPF64[$s >> 3] / +Math_sqrt(+(+HEAPF64[$mu >> 3]));
    HEAPF64[HEAP32[$5 >> 2] >> 3] = $141;
    $147 = +HEAPF64[$prec >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3]));
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $147;
    HEAP32[$0 >> 2] = 0;
    $153 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $153 | 0;
   }
  }
  HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(29376, 29392, 196, 1);
  HEAP32[$0 >> 2] = 1;
  $153 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $153 | 0;
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(29376, 29392, 193, 1);
 HEAP32[$0 >> 2] = 1;
 $153 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $153 | 0;
}
function _gsl_sf_bessel_IJ_taylor_e($nu, $x, $sign, $kmax, $threshold, $result) {
 $nu = +$nu;
 $x = +$x;
 $sign = $sign | 0;
 $kmax = $kmax | 0;
 $threshold = +$threshold;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $113 = 0, $141 = 0.0, $17 = 0, $174 = 0, $175 = 0, $18 = 0, $2 = 0, $26 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $60 = 0.0, $66 = 0, $71 = 0.0, $72 = 0, $82 = 0, $95 = 0.0, $99 = 0.0, $N = 0, $f = 0, $k = 0, $lg = 0, $ln_pre = 0, $ln_pre_err = 0, $p = 0, $poch_factor = 0, $prefactor = 0, $stat_ex = 0, $stat_lg = 0, $stat_mul = 0, $stat_poch = 0, $stat_pre = 0, $stat_sum = 0, $stat_tc = 0, $sum = 0, $sumk = 0, $tc_factor = 0, $term = 0, $term1 = 0, $term2 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 224 | 0;
 $1 = sp + 168 | 0;
 $2 = sp + 160 | 0;
 $3 = sp + 220 | 0;
 $4 = sp + 216 | 0;
 $5 = sp + 152 | 0;
 $6 = sp + 212 | 0;
 $prefactor = sp + 136 | 0;
 $sum = sp + 120 | 0;
 $stat_pre = sp + 208 | 0;
 $stat_sum = sp + 204 | 0;
 $stat_mul = sp + 200 | 0;
 $N = sp + 196 | 0;
 $f = sp + 112 | 0;
 $poch_factor = sp + 96 | 0;
 $tc_factor = sp + 80 | 0;
 $stat_poch = sp + 192 | 0;
 $stat_tc = sp + 188 | 0;
 $p = sp + 72 | 0;
 $lg = sp + 56 | 0;
 $stat_lg = sp + 184 | 0;
 $term1 = sp + 48 | 0;
 $term2 = sp + 40 | 0;
 $ln_pre = sp + 32 | 0;
 $ln_pre_err = sp + 24 | 0;
 $stat_ex = sp + 180 | 0;
 $y = sp + 16 | 0;
 $sumk = sp + 8 | 0;
 $term = sp;
 $k = sp + 176 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $sign;
 HEAP32[$4 >> 2] = $kmax;
 HEAPF64[$5 >> 3] = $threshold;
 HEAP32[$6 >> 2] = $result;
 if (!(+HEAPF64[$1 >> 3] < 0.0)) if (!(+HEAPF64[$2 >> 3] < 0.0)) {
  $17 = +HEAPF64[$1 >> 3] == 0.0;
  if (+HEAPF64[$2 >> 3] == 0.0) {
   $18 = HEAP32[$6 >> 2] | 0;
   if ($17) {
    HEAPF64[$18 >> 3] = 1.0;
    HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = 0.0;
   } else {
    HEAPF64[$18 >> 3] = 0.0;
    HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = 0.0;
   }
   HEAP32[$0 >> 2] = 0;
   $175 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $175 | 0;
  }
  do if ($17) {
   HEAPF64[$prefactor >> 3] = 1.0;
   HEAPF64[$prefactor + 8 >> 3] = 0.0;
   HEAP32[$stat_pre >> 2] = 0;
  } else {
   $26 = +HEAPF64[$1 >> 3];
   if (+HEAPF64[$1 >> 3] < 2147483646.0) {
    HEAP32[$N >> 2] = ~~+Math_floor(+($26 + .5));
    HEAPF64[$f >> 3] = +HEAPF64[$1 >> 3] - +(HEAP32[$N >> 2] | 0);
    HEAP32[$stat_poch >> 2] = _gsl_sf_poch_e(+(HEAP32[$N >> 2] | 0) + 1.0, +HEAPF64[$f >> 3], $poch_factor) | 0;
    HEAP32[$stat_tc >> 2] = _gsl_sf_taylorcoeff_e(HEAP32[$N >> 2] | 0, +HEAPF64[$2 >> 3] * .5, $tc_factor) | 0;
    HEAPF64[$p >> 3] = +Math_pow(+(+HEAPF64[$2 >> 3] * .5), +(+HEAPF64[$f >> 3]));
    HEAPF64[$prefactor >> 3] = +HEAPF64[$tc_factor >> 3] * +HEAPF64[$p >> 3] / +HEAPF64[$poch_factor >> 3];
    HEAPF64[$prefactor + 8 >> 3] = +HEAPF64[$tc_factor + 8 >> 3] * +HEAPF64[$p >> 3] / +HEAPF64[$poch_factor >> 3];
    $60 = +Math_abs(+(+HEAPF64[$prefactor >> 3]));
    $66 = $prefactor + 8 | 0;
    HEAPF64[$66 >> 3] = +HEAPF64[$66 >> 3] + $60 / +HEAPF64[$poch_factor >> 3] * +HEAPF64[$poch_factor + 8 >> 3];
    $71 = +Math_abs(+(+HEAPF64[$prefactor >> 3])) * 4.440892098500626e-16;
    $72 = $prefactor + 8 | 0;
    HEAPF64[$72 >> 3] = +HEAPF64[$72 >> 3] + $71;
    if (HEAP32[$stat_tc >> 2] | 0) $82 = HEAP32[$stat_tc >> 2] | 0; else $82 = (HEAP32[$stat_poch >> 2] | 0) != 0 ? HEAP32[$stat_poch >> 2] | 0 : 0;
    HEAP32[$stat_pre >> 2] = $82;
    break;
   } else {
    HEAP32[$stat_lg >> 2] = _gsl_sf_lngamma_e($26 + 1.0, $lg) | 0;
    HEAPF64[$term1 >> 3] = +HEAPF64[$1 >> 3] * +Math_log(+(+HEAPF64[$2 >> 3] * .5));
    HEAPF64[$term2 >> 3] = +HEAPF64[$lg >> 3];
    HEAPF64[$ln_pre >> 3] = +HEAPF64[$term1 >> 3] - +HEAPF64[$term2 >> 3];
    $95 = +Math_abs(+(+HEAPF64[$term1 >> 3]));
    $99 = ($95 + +Math_abs(+(+HEAPF64[$term2 >> 3]))) * 2.220446049250313e-16;
    HEAPF64[$ln_pre_err >> 3] = $99 + +HEAPF64[$lg + 8 >> 3];
    HEAP32[$stat_ex >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$ln_pre >> 3], +HEAPF64[$ln_pre_err >> 3], $prefactor) | 0;
    if (HEAP32[$stat_ex >> 2] | 0) $113 = HEAP32[$stat_ex >> 2] | 0; else $113 = (HEAP32[$stat_lg >> 2] | 0) != 0 ? HEAP32[$stat_lg >> 2] | 0 : 0;
    HEAP32[$stat_pre >> 2] = $113;
    break;
   }
  } while (0);
  HEAPF64[$y >> 3] = +(HEAP32[$3 >> 2] | 0) * .25 * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
  HEAPF64[$sumk >> 3] = 1.0;
  HEAPF64[$term >> 3] = 1.0;
  HEAP32[$k >> 2] = 1;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) > (HEAP32[$4 >> 2] | 0)) break;
   HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * (+HEAPF64[$y >> 3] / ((+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] | 0)) * +(HEAP32[$k >> 2] | 0)));
   HEAPF64[$sumk >> 3] = +HEAPF64[$sumk >> 3] + +HEAPF64[$term >> 3];
   $141 = +Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sumk >> 3]));
   if ($141 < +HEAPF64[$5 >> 3]) break;
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAPF64[$sum >> 3] = +HEAPF64[$sumk >> 3];
  HEAPF64[$sum + 8 >> 3] = +HEAPF64[$5 >> 3] * +Math_abs(+(+HEAPF64[$sumk >> 3]));
  HEAP32[$stat_sum >> 2] = (HEAP32[$k >> 2] | 0) >= (HEAP32[$4 >> 2] | 0) ? 11 : 0;
  HEAP32[$stat_mul >> 2] = _gsl_sf_multiply_err_e(+HEAPF64[$prefactor >> 3], +HEAPF64[$prefactor + 8 >> 3], +HEAPF64[$sum >> 3], +HEAPF64[$sum + 8 >> 3], HEAP32[$6 >> 2] | 0) | 0;
  do if (HEAP32[$stat_mul >> 2] | 0) $174 = HEAP32[$stat_mul >> 2] | 0; else if (HEAP32[$stat_pre >> 2] | 0) {
   $174 = HEAP32[$stat_pre >> 2] | 0;
   break;
  } else {
   $174 = (HEAP32[$stat_sum >> 2] | 0) != 0 ? HEAP32[$stat_sum >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$0 >> 2] = $174;
  $175 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $175 | 0;
 }
 HEAPF64[HEAP32[$6 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$6 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(10664, 10680, 102, 1);
 HEAP32[$0 >> 2] = 1;
 $175 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $175 | 0;
}
function _gsl_sf_mathieu_Mc($kind, $order, $qq, $zz, $result) {
 $kind = $kind | 0;
 $order = $order | 0;
 $qq = +$qq;
 $zz = +$zz;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $112 = 0.0, $116 = 0.0, $13 = 0.0, $130 = 0, $131 = 0.0, $149 = 0.0, $169 = 0.0, $184 = 0, $187 = 0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $40 = 0, $5 = 0, $54 = 0.0, $58 = 0.0, $68 = 0, $69 = 0.0, $78 = 0.0, $94 = 0.0, $aa = 0, $amax = 0, $coeff = 0, $even_odd = 0, $factor = 0, $fc = 0, $fn = 0, $j1c = 0, $j1pc = 0, $kk = 0, $maxerr = 0, $pi = 0, $status = 0, $u1 = 0, $u2 = 0, $z2c = 0, $z2pc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 960 | 0;
 $0 = sp + 956 | 0;
 $1 = sp + 952 | 0;
 $2 = sp + 948 | 0;
 $3 = sp + 920 | 0;
 $4 = sp + 912 | 0;
 $5 = sp + 944 | 0;
 $even_odd = sp + 940 | 0;
 $kk = sp + 936 | 0;
 $status = sp + 928 | 0;
 $maxerr = sp + 904 | 0;
 $amax = sp + 896 | 0;
 $pi = sp + 888 | 0;
 $fn = sp + 880 | 0;
 $factor = sp + 872 | 0;
 $coeff = sp + 72 | 0;
 $fc = sp + 64 | 0;
 $j1c = sp + 56 | 0;
 $z2c = sp + 48 | 0;
 $j1pc = sp + 40 | 0;
 $z2pc = sp + 32 | 0;
 $u1 = sp + 24 | 0;
 $u2 = sp + 16 | 0;
 $aa = sp;
 HEAP32[$1 >> 2] = $kind;
 HEAP32[$2 >> 2] = $order;
 HEAPF64[$3 >> 3] = $qq;
 HEAPF64[$4 >> 3] = $zz;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$maxerr >> 3] = 1.0e-14;
 HEAPF64[$pi >> 3] = 3.141592653589793;
 if (+HEAPF64[$3 >> 3] <= 0.0) {
  _gsl_error(54728, 54760, 44, 4);
  HEAP32[$0 >> 2] = 4;
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < 1 | (HEAP32[$1 >> 2] | 0) > 2) {
  _gsl_error(54784, 54760, 48, 4);
  HEAP32[$0 >> 2] = 4;
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 HEAP32[sp + 932 >> 2] = 0;
 HEAPF64[$amax >> 3] = 0.0;
 HEAPF64[$fn >> 3] = 0.0;
 $13 = +Math_sqrt(+(+HEAPF64[$3 >> 3]));
 HEAPF64[$u1 >> 3] = $13 * +Math_exp(+(+HEAPF64[$4 >> 3] * -1.0));
 $19 = +Math_sqrt(+(+HEAPF64[$3 >> 3]));
 HEAPF64[$u2 >> 3] = $19 * +Math_exp(+(+HEAPF64[$4 >> 3]));
 HEAP32[$even_odd >> 2] = 0;
 HEAP32[$even_odd >> 2] = ((HEAP32[$2 >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
 HEAP32[$status >> 2] = _gsl_sf_mathieu_a(HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], $aa) | 0;
 if (HEAP32[$status >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 HEAP32[$status >> 2] = _gsl_sf_mathieu_a_coeff(HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], +HEAPF64[$aa >> 3], $coeff) | 0;
 if (HEAP32[$status >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 $40 = (HEAP32[$even_odd >> 2] | 0) == 0;
 HEAP32[$kk >> 2] = 0;
 if ($40) {
  while (1) {
   if ((HEAP32[$kk >> 2] | 0) >= 100) break;
   if (+HEAPF64[$amax >> 3] > +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]))) $54 = +HEAPF64[$amax >> 3]; else $54 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
   HEAPF64[$amax >> 3] = $54;
   $58 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
   if ($58 / +HEAPF64[$amax >> 3] < +HEAPF64[$maxerr >> 3]) break;
   HEAPF64[$j1c >> 3] = +_gsl_sf_bessel_Jn(HEAP32[$kk >> 2] | 0, +HEAPF64[$u1 >> 3]);
   $68 = HEAP32[$kk >> 2] | 0;
   $69 = +HEAPF64[$u2 >> 3];
   if ((HEAP32[$1 >> 2] | 0) == 1) HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Jn($68, $69); else HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Yn($68, $69);
   $78 = +Math_pow(-1.0, +(+(HEAP32[$2 >> 2] | 0) * .5 + +(HEAP32[$kk >> 2] | 0)));
   HEAPF64[$fc >> 3] = $78 * +HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3];
   HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + +HEAPF64[$fc >> 3] * +HEAPF64[$j1c >> 3] * +HEAPF64[$z2c >> 3];
   HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
  }
  $94 = +Math_sqrt(+(+HEAPF64[$pi >> 3] / 2.0));
  HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] * ($94 / +HEAPF64[$coeff >> 3]);
 } else {
  while (1) {
   if ((HEAP32[$kk >> 2] | 0) >= 100) break;
   if (+HEAPF64[$amax >> 3] > +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]))) $112 = +HEAPF64[$amax >> 3]; else $112 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
   HEAPF64[$amax >> 3] = $112;
   $116 = +Math_abs(+(+HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3]));
   if ($116 / +HEAPF64[$amax >> 3] < +HEAPF64[$maxerr >> 3]) break;
   HEAPF64[$j1c >> 3] = +_gsl_sf_bessel_Jn(HEAP32[$kk >> 2] | 0, +HEAPF64[$u1 >> 3]);
   HEAPF64[$j1pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u1 >> 3]);
   $130 = HEAP32[$kk >> 2] | 0;
   $131 = +HEAPF64[$u2 >> 3];
   if ((HEAP32[$1 >> 2] | 0) == 1) {
    HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Jn($130, $131);
    HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Jn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u2 >> 3]);
   } else {
    HEAPF64[$z2c >> 3] = +_gsl_sf_bessel_Yn($130, $131);
    HEAPF64[$z2pc >> 3] = +_gsl_sf_bessel_Yn((HEAP32[$kk >> 2] | 0) + 1 | 0, +HEAPF64[$u2 >> 3]);
   }
   $149 = +Math_pow(-1.0, +(+((HEAP32[$2 >> 2] | 0) - 1 | 0) * .5 + +(HEAP32[$kk >> 2] | 0)));
   HEAPF64[$fc >> 3] = $149 * +HEAPF64[$coeff + (HEAP32[$kk >> 2] << 3) >> 3];
   HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + +HEAPF64[$fc >> 3] * (+HEAPF64[$j1c >> 3] * +HEAPF64[$z2pc >> 3] + +HEAPF64[$j1pc >> 3] * +HEAPF64[$z2c >> 3]);
   HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
  }
  $169 = +Math_sqrt(+(+HEAPF64[$pi >> 3] / 2.0));
  HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] * ($169 / +HEAPF64[$coeff >> 3]);
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$fn >> 3];
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16;
 HEAPF64[$factor >> 3] = +Math_abs(+(+HEAPF64[$fn >> 3]));
 if (+HEAPF64[$factor >> 3] > 1.0) {
  $184 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$184 >> 3] = +HEAPF64[$184 >> 3] * +HEAPF64[$factor >> 3];
 }
 HEAP32[$0 >> 2] = 0;
 $187 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $187 | 0;
}
function _fd_UMseries_int($j, $x, $result) {
 $j = $j | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $123 = 0, $134 = 0.0, $174 = 0.0, $176 = 0, $189 = 0, $2 = 0, $34 = 0.0, $65 = 0, $76 = 0.0, $M = 0, $M4 = 0, $U = 0, $U3 = 0, $del_err = 0, $del_err2 = 0, $del_val = 0, $del_val1 = 0, $g = 0, $lg = 0, $lnpre_err = 0, $lnpre_val = 0, $lnx = 0, $n = 0, $p = 0, $pre = 0, $stat_e = 0, $stat_h = 0, $stat_h_F = 0, $stat_h_F6 = 0, $stat_h_U = 0, $stat_h_U5 = 0, $stat_sum = 0, $sum_even_err = 0, $sum_even_val = 0, $sum_odd_err = 0, $sum_odd_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $0 = sp + 248 | 0;
 $1 = sp + 200 | 0;
 $2 = sp + 244 | 0;
 $pre = sp + 192 | 0;
 $lnpre_val = sp + 184 | 0;
 $lnpre_err = sp + 176 | 0;
 $sum_even_val = sp + 168 | 0;
 $sum_even_err = sp + 160 | 0;
 $sum_odd_val = sp + 152 | 0;
 $sum_odd_err = sp + 144 | 0;
 $stat_sum = sp + 236 | 0;
 $stat_e = sp + 232 | 0;
 $stat_h = sp + 228 | 0;
 $n = sp + 224 | 0;
 $p = sp + 136 | 0;
 $g = sp + 120 | 0;
 $lnx = sp + 112 | 0;
 $lg = sp + 96 | 0;
 $del_val = sp + 88 | 0;
 $del_err = sp + 80 | 0;
 $U = sp + 64 | 0;
 $M = sp + 48 | 0;
 $stat_h_U = sp + 220 | 0;
 $stat_h_F = sp + 216 | 0;
 $del_val1 = sp + 40 | 0;
 $del_err2 = sp + 32 | 0;
 $U3 = sp + 16 | 0;
 $M4 = sp;
 $stat_h_U5 = sp + 212 | 0;
 $stat_h_F6 = sp + 208 | 0;
 HEAP32[$0 >> 2] = $j;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[sp + 240 >> 2] = 2e3;
 HEAPF64[$sum_even_val >> 3] = 1.0;
 HEAPF64[$sum_even_err >> 3] = 0.0;
 HEAPF64[$sum_odd_val >> 3] = 0.0;
 HEAPF64[$sum_odd_err >> 3] = 0.0;
 HEAP32[$stat_h >> 2] = 0;
 if (+HEAPF64[$1 >> 3] < 500.0) if ((HEAP32[$0 >> 2] | 0) < 80) {
  HEAPF64[$p >> 3] = +_gsl_sf_pow_int(+HEAPF64[$1 >> 3], (HEAP32[$0 >> 2] | 0) + 1 | 0);
  _gsl_sf_fact_e((HEAP32[$0 >> 2] | 0) + 1 | 0, $g) | 0;
  HEAPF64[$lnpre_val >> 3] = 0.0;
  HEAPF64[$lnpre_err >> 3] = 0.0;
  HEAPF64[$pre >> 3] = +HEAPF64[$p >> 3] / +HEAPF64[$g >> 3];
 } else label = 4; else label = 4;
 if ((label | 0) == 4) {
  HEAPF64[$lnx >> 3] = +Math_log(+(+HEAPF64[$1 >> 3]));
  _gsl_sf_lngamma_e(+(HEAP32[$0 >> 2] | 0) + 2.0, $lg) | 0;
  HEAPF64[$lnpre_val >> 3] = (+(HEAP32[$0 >> 2] | 0) + 1.0) * +HEAPF64[$lnx >> 3] - +HEAPF64[$lg >> 3];
  $34 = +Math_abs(+((+(HEAP32[$0 >> 2] | 0) + 1.0) * +HEAPF64[$lnx >> 3])) * 4.440892098500626e-16;
  HEAPF64[$lnpre_err >> 3] = $34 + +HEAPF64[$lg + 8 >> 3];
  HEAPF64[$pre >> 3] = 1.0;
 }
 HEAP32[$n >> 2] = 1;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= 2e3) break;
  HEAP32[$stat_h_U >> 2] = _gsl_sf_hyperg_U_int_e(1, (HEAP32[$0 >> 2] | 0) + 2 | 0, +(HEAP32[$n >> 2] | 0) * +HEAPF64[$1 >> 3], $U) | 0;
  HEAP32[$stat_h_F >> 2] = _gsl_sf_hyperg_1F1_int_e(1, (HEAP32[$0 >> 2] | 0) + 2 | 0, +(0 - (HEAP32[$n >> 2] | 0) | 0) * +HEAPF64[$1 >> 3], $M) | 0;
  do if (HEAP32[$stat_h >> 2] | 0) $65 = HEAP32[$stat_h >> 2] | 0; else if (HEAP32[$stat_h_U >> 2] | 0) {
   $65 = HEAP32[$stat_h_U >> 2] | 0;
   break;
  } else {
   $65 = (HEAP32[$stat_h_F >> 2] | 0) != 0 ? HEAP32[$stat_h_F >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$stat_h >> 2] = $65;
  HEAPF64[$del_val >> 3] = (+(HEAP32[$0 >> 2] | 0) + 1.0) * +HEAPF64[$U >> 3] - +HEAPF64[$M >> 3];
  $76 = +Math_abs(+(+(HEAP32[$0 >> 2] | 0) + 1.0));
  HEAPF64[$del_err >> 3] = $76 * +HEAPF64[$U + 8 >> 3] + +HEAPF64[$M + 8 >> 3];
  HEAPF64[$sum_odd_val >> 3] = +HEAPF64[$sum_odd_val >> 3] + +HEAPF64[$del_val >> 3];
  HEAPF64[$sum_odd_err >> 3] = +HEAPF64[$sum_odd_err >> 3] + +HEAPF64[$del_err >> 3];
  if (+Math_abs(+(+HEAPF64[$del_val >> 3] / +HEAPF64[$sum_odd_val >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 2;
 }
 HEAP32[$n >> 2] = 2;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= 2e3) break;
  HEAP32[$stat_h_U5 >> 2] = _gsl_sf_hyperg_U_int_e(1, (HEAP32[$0 >> 2] | 0) + 2 | 0, +(HEAP32[$n >> 2] | 0) * +HEAPF64[$1 >> 3], $U3) | 0;
  HEAP32[$stat_h_F6 >> 2] = _gsl_sf_hyperg_1F1_int_e(1, (HEAP32[$0 >> 2] | 0) + 2 | 0, +(0 - (HEAP32[$n >> 2] | 0) | 0) * +HEAPF64[$1 >> 3], $M4) | 0;
  do if (HEAP32[$stat_h >> 2] | 0) $123 = HEAP32[$stat_h >> 2] | 0; else if (HEAP32[$stat_h_U5 >> 2] | 0) {
   $123 = HEAP32[$stat_h_U5 >> 2] | 0;
   break;
  } else {
   $123 = (HEAP32[$stat_h_F6 >> 2] | 0) != 0 ? HEAP32[$stat_h_F6 >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$stat_h >> 2] = $123;
  HEAPF64[$del_val1 >> 3] = (+(HEAP32[$0 >> 2] | 0) + 1.0) * +HEAPF64[$U3 >> 3] - +HEAPF64[$M4 >> 3];
  $134 = +Math_abs(+(+(HEAP32[$0 >> 2] | 0) + 1.0));
  HEAPF64[$del_err2 >> 3] = $134 * +HEAPF64[$U3 + 8 >> 3] + +HEAPF64[$M4 + 8 >> 3];
  HEAPF64[$sum_even_val >> 3] = +HEAPF64[$sum_even_val >> 3] - +HEAPF64[$del_val1 >> 3];
  HEAPF64[$sum_even_err >> 3] = +HEAPF64[$sum_even_err >> 3] + +HEAPF64[$del_err2 >> 3];
  if (+Math_abs(+(+HEAPF64[$del_val1 >> 3] / +HEAPF64[$sum_even_val >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 2;
 }
 HEAP32[$stat_sum >> 2] = (HEAP32[$n >> 2] | 0) >= 2e3 ? 11 : 0;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], +HEAPF64[$pre >> 3] * (+HEAPF64[$sum_even_val >> 3] + +HEAPF64[$sum_odd_val >> 3]), +HEAPF64[$pre >> 3] * (+HEAPF64[$sum_even_err >> 3] + +HEAPF64[$sum_odd_err >> 3]), HEAP32[$2 >> 2] | 0) | 0;
 $174 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $176 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$176 >> 3] = +HEAPF64[$176 >> 3] + $174;
 if (HEAP32[$stat_e >> 2] | 0) {
  $189 = HEAP32[$stat_e >> 2] | 0;
  STACKTOP = sp;
  return $189 | 0;
 }
 if (HEAP32[$stat_h >> 2] | 0) {
  $189 = HEAP32[$stat_h >> 2] | 0;
  STACKTOP = sp;
  return $189 | 0;
 } else {
  $189 = (HEAP32[$stat_sum >> 2] | 0) != 0 ? HEAP32[$stat_sum >> 2] | 0 : 0;
  STACKTOP = sp;
  return $189 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_Ynu_asymp_Olver_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $111 = 0.0, $159 = 0.0, $165 = 0.0, $171 = 0, $179 = 0.0, $185 = 0, $191 = 0.0, $193 = 0, $2 = 0, $203 = 0, $204 = 0, $3 = 0, $33 = 0, $34 = 0.0, $70 = 0.0, $71 = 0.0, $79 = 0.0, $a = 0, $abs_zeta = 0, $ac = 0, $arg = 0, $asum = 0, $asum_err = 0, $bi = 0, $bip = 0, $bsum = 0, $c0 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $c6 = 0, $c7 = 0, $crnu = 0, $nu11 = 0, $nu3 = 0, $pre = 0, $rt = 0, $rt1 = 0, $stat_b = 0, $stat_d = 0, $z = 0, $zeta = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $0 = sp + 244 | 0;
 $1 = sp + 224 | 0;
 $2 = sp + 216 | 0;
 $3 = sp + 240 | 0;
 $zeta = sp + 208 | 0;
 $abs_zeta = sp + 200 | 0;
 $arg = sp + 192 | 0;
 $pre = sp + 184 | 0;
 $asum = sp + 176 | 0;
 $bsum = sp + 168 | 0;
 $asum_err = sp + 160 | 0;
 $bi = sp + 144 | 0;
 $bip = sp + 128 | 0;
 $z = sp + 120 | 0;
 $crnu = sp + 112 | 0;
 $nu3 = sp + 104 | 0;
 $nu11 = sp + 96 | 0;
 $stat_b = sp + 236 | 0;
 $stat_d = sp + 232 | 0;
 $a = sp + 88 | 0;
 $c0 = sp + 80 | 0;
 $c1 = sp + 72 | 0;
 $c2 = sp + 64 | 0;
 $c3 = sp + 56 | 0;
 $c4 = sp + 48 | 0;
 $c5 = sp + 40 | 0;
 $c6 = sp + 32 | 0;
 $c7 = sp + 24 | 0;
 $rt = sp + 16 | 0;
 $rt1 = sp + 8 | 0;
 $ac = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] <= 0.0)) if (!(+HEAPF64[$1 >> 3] <= 0.0)) {
  HEAPF64[$z >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$1 >> 3];
  HEAPF64[$crnu >> 3] = +Math_pow(+(+HEAPF64[$1 >> 3]), .3333333333333333);
  HEAPF64[$nu3 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$nu11 >> 3] = +HEAPF64[$nu3 >> 3] * +HEAPF64[$nu3 >> 3] * +HEAPF64[$nu3 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  $33 = +Math_abs(+(1.0 - +HEAPF64[$z >> 3])) < .02;
  $34 = +HEAPF64[$z >> 3];
  do if ($33) {
   HEAPF64[$a >> 3] = 1.0 - $34;
   HEAPF64[$c0 >> 3] = 1.2599210498948732;
   HEAPF64[$c1 >> 3] = .37797631496846196;
   HEAPF64[$c2 >> 3] = .23038556340934824;
   HEAPF64[$c3 >> 3] = .16590960364964868;
   HEAPF64[$c4 >> 3] = .1293138708645101;
   HEAPF64[$c5 >> 3] = .10568046188858134;
   HEAPF64[$c6 >> 3] = .08916997952268187;
   HEAPF64[$c7 >> 3] = .07700014900618803;
   HEAPF64[$pre >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * .07700014900618803 + .08916997952268187) + .10568046188858134) + .1293138708645101) + .16590960364964868) + .23038556340934824) + .37797631496846196) + 1.2599210498948732;
   HEAPF64[$zeta >> 3] = +HEAPF64[$a >> 3] * +HEAPF64[$pre >> 3];
   HEAPF64[$pre >> 3] = +Math_sqrt(+(+Math_sqrt(+(+HEAPF64[$pre >> 3] / (+HEAPF64[$z >> 3] + 1.0))) * 2.0));
   HEAPF64[$abs_zeta >> 3] = +Math_abs(+(+HEAPF64[$zeta >> 3]));
  } else {
   $70 = +HEAPF64[$z >> 3];
   $71 = +HEAPF64[$z >> 3];
   if ($34 < 1.0) {
    HEAPF64[$rt >> 3] = +Math_sqrt(+(1.0 - $70 * $71));
    $79 = +Math_log(+((+HEAPF64[$rt >> 3] + 1.0) / +HEAPF64[$z >> 3]));
    HEAPF64[$abs_zeta >> 3] = +Math_pow(+(($79 - +HEAPF64[$rt >> 3]) * 1.5), .6666666666666666);
    HEAPF64[$zeta >> 3] = +HEAPF64[$abs_zeta >> 3];
    HEAPF64[$pre >> 3] = +Math_sqrt(+(+Math_sqrt(+(+HEAPF64[$abs_zeta >> 3] / (+HEAPF64[$rt >> 3] * +HEAPF64[$rt >> 3]))) * 2.0));
    break;
   } else {
    HEAPF64[$rt1 >> 3] = $70 * +Math_sqrt(+(1.0 - 1.0 / ($71 * +HEAPF64[$z >> 3])));
    HEAPF64[$ac >> 3] = +Math_acos(+(1.0 / +HEAPF64[$z >> 3]));
    HEAPF64[$abs_zeta >> 3] = +Math_pow(+((+HEAPF64[$rt1 >> 3] - +HEAPF64[$ac >> 3]) * 1.5), .6666666666666666);
    HEAPF64[$zeta >> 3] = -+HEAPF64[$abs_zeta >> 3];
    $111 = +Math_sqrt(+(+HEAPF64[$abs_zeta >> 3])) * 2.0;
    HEAPF64[$pre >> 3] = +Math_sqrt(+($111 / +HEAPF64[$rt1 >> 3]));
    break;
   }
  } while (0);
  HEAPF64[$asum >> 3] = +_olver_Asum(+HEAPF64[$1 >> 3], +HEAPF64[$z >> 3], +HEAPF64[$abs_zeta >> 3], $asum_err);
  HEAPF64[$bsum >> 3] = +_olver_Bsum(+HEAPF64[$1 >> 3], +HEAPF64[$z >> 3], +HEAPF64[$abs_zeta >> 3]);
  HEAPF64[$arg >> 3] = +HEAPF64[$crnu >> 3] * +HEAPF64[$crnu >> 3] * +HEAPF64[$zeta >> 3];
  HEAP32[$stat_b >> 2] = _gsl_sf_airy_Bi_e(+HEAPF64[$arg >> 3], 0, $bi) | 0;
  HEAP32[$stat_d >> 2] = _gsl_sf_airy_Bi_deriv_e(+HEAPF64[$arg >> 3], 0, $bip) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[$pre >> 3] * (+HEAPF64[$bi >> 3] * +HEAPF64[$asum >> 3] / +HEAPF64[$crnu >> 3] + +HEAPF64[$bip >> 3] * +HEAPF64[$bsum >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$crnu >> 3] * +HEAPF64[$crnu >> 3]));
  $159 = +HEAPF64[$pre >> 3] * +HEAPF64[$bi + 8 >> 3] * +Math_abs(+(+HEAPF64[$asum >> 3] / +HEAPF64[$crnu >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $159;
  $165 = +HEAPF64[$pre >> 3] * +Math_abs(+(+HEAPF64[$bi >> 3]));
  $171 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$171 >> 3] = +HEAPF64[$171 >> 3] + $165 * +HEAPF64[$asum_err >> 3] / +HEAPF64[$crnu >> 3];
  $179 = +HEAPF64[$pre >> 3] * +Math_abs(+(+HEAPF64[$bi >> 3] * +HEAPF64[$asum >> 3]));
  $185 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$185 >> 3] = +HEAPF64[$185 >> 3] + $179 / (+HEAPF64[$crnu >> 3] * +HEAPF64[$nu11 >> 3]);
  $191 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 1.7763568394002505e-15;
  $193 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$193 >> 3] = +HEAPF64[$193 >> 3] + $191;
  if (HEAP32[$stat_b >> 2] | 0) $203 = HEAP32[$stat_b >> 2] | 0; else $203 = (HEAP32[$stat_d >> 2] | 0) != 0 ? HEAP32[$stat_d >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $203;
  $204 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $204 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(16264, 16280, 922, 1);
 HEAP32[$0 >> 2] = 1;
 $204 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $204 | 0;
}
function _hyperg_1F1_ab_neg($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $106 = 0, $111 = 0.0, $118 = 0.0, $132 = 0.0, $137 = 0.0, $171 = 0, $176 = 0, $186 = 0, $2 = 0, $3 = 0, $4 = 0, $42 = 0.0, $77 = 0.0, $81 = 0.0, $93 = 0.0, $K_factor = 0, $Kummer_1F1 = 0, $abs_a = 0, $abs_b = 0, $abs_x = 0, $bma = 0, $bma_integer = 0, $size_a = 0, $size_b = 0, $stat_K = 0, $stat_e = 0, $status = 0, $status1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 72 | 0;
 $4 = sp + 116 | 0;
 $bma = sp + 64 | 0;
 $abs_x = sp + 56 | 0;
 $abs_a = sp + 48 | 0;
 $abs_b = sp + 40 | 0;
 $size_a = sp + 32 | 0;
 $size_b = sp + 24 | 0;
 $bma_integer = sp + 112 | 0;
 $Kummer_1F1 = sp + 8 | 0;
 $stat_K = sp + 108 | 0;
 $stat_e = sp + 104 | 0;
 $status = sp + 100 | 0;
 $K_factor = sp;
 $status1 = sp + 96 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$bma >> 3] = +HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3];
 HEAPF64[$abs_x >> 3] = +Math_abs(+(+HEAPF64[$3 >> 3]));
 HEAPF64[$abs_a >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$abs_b >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$size_a >> 3] = +HEAPF64[$abs_a >> 3] > 1.0 ? +HEAPF64[$abs_a >> 3] : 1.0;
 HEAPF64[$size_b >> 3] = +HEAPF64[$abs_b >> 3] > 1.0 ? +HEAPF64[$abs_b >> 3] : 1.0;
 HEAP32[$bma_integer >> 2] = +HEAPF64[$bma >> 3] - +Math_floor(+(+HEAPF64[$bma >> 3] + .5)) < 2.220446049250313e-14 & 1;
 if (+HEAPF64[$abs_a >> 3] < 10.0) if (+HEAPF64[$abs_b >> 3] < 10.0) {
  if (!(+HEAPF64[$abs_x >> 3] < 5.0)) label = 4;
 } else label = 4; else label = 4;
 if ((label | 0) == 4) {
  if (+Math_abs(+(+HEAPF64[$1 >> 3])) > 1.0) $42 = +Math_abs(+(+HEAPF64[$1 >> 3])); else $42 = 1.0;
  if (!(+HEAPF64[$2 >> 3] > .8 * $42 * +Math_abs(+(+HEAPF64[$3 >> 3])))) {
   if (+HEAPF64[$3 >> 3] > 0.0) if (+HEAPF64[$size_b >> 3] > +HEAPF64[$size_a >> 3]) if (+HEAPF64[$size_a >> 3] * +Math_log(+(+HEAPF64[$3 >> 3] * 2.718281828459045 / +HEAPF64[$size_b >> 3])) < -29.043653389117154) {
    HEAP32[$0 >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
    $186 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $186 | 0;
   }
   if (+HEAPF64[$abs_x >> 3] < 5.0) if (+Math_abs(+(+HEAPF64[$bma >> 3])) < 10.0) {
    if (!(+HEAPF64[$abs_b >> 3] < 10.0)) label = 15;
   } else label = 15; else label = 15;
   if ((label | 0) == 15) {
    $77 = +HEAPF64[$2 >> 3];
    $81 = +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$bma >> 3]))), 1.0) * .8;
    if (!($77 > $81 * +HEAPF64[$abs_x >> 3])) {
     if (+HEAPF64[$3 >> 3] < -30.0) {
      $111 = +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$1 >> 3]))), 1.0);
      $118 = $111 * +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3]))), 1.0);
      if ($118 < +Math_abs(+(+HEAPF64[$3 >> 3])) * .99) {
       HEAP32[$0 >> 2] = _hyperg_1F1_asymp_negx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
       $186 = HEAP32[$0 >> 2] | 0;
       STACKTOP = sp;
       return $186 | 0;
      }
     }
     if (+HEAPF64[$3 >> 3] > 100.0) {
      $132 = +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$bma >> 3]))), 1.0);
      $137 = $132 * +_GSL_MAX_DBL(+(+Math_abs(+(1.0 - +HEAPF64[$1 >> 3]))), 1.0);
      if ($137 < +Math_abs(+(+HEAPF64[$3 >> 3])) * .99) {
       HEAP32[$0 >> 2] = _hyperg_1F1_asymp_posx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
       $186 = HEAP32[$0 >> 2] | 0;
       STACKTOP = sp;
       return $186 | 0;
      }
     }
     do if (+HEAPF64[$3 >> 3] > 0.0) {
      if (HEAP32[$bma_integer >> 2] | 0) if (+HEAPF64[$bma >> 3] > 0.0) break;
      HEAP32[$0 >> 2] = _hyperg_1F1_U(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
      $186 = HEAP32[$0 >> 2] | 0;
      STACKTOP = sp;
      return $186 | 0;
     } while (0);
     if (+HEAPF64[$3 >> 3] < 0.0) {
      HEAP32[$status >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], -+HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
      HEAPF64[$K_factor >> 3] = +Math_exp(+(+HEAPF64[$3 >> 3]));
      $171 = HEAP32[$4 >> 2] | 0;
      HEAPF64[$171 >> 3] = +HEAPF64[$171 >> 3] * +HEAPF64[$K_factor >> 3];
      $176 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
      HEAPF64[$176 >> 3] = +HEAPF64[$176 >> 3] * +HEAPF64[$K_factor >> 3];
      HEAP32[$0 >> 2] = HEAP32[$status >> 2];
      $186 = HEAP32[$0 >> 2] | 0;
      STACKTOP = sp;
      return $186 | 0;
     } else {
      HEAP32[$status1 >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
      HEAP32[$0 >> 2] = HEAP32[$status1 >> 2];
      $186 = HEAP32[$0 >> 2] | 0;
      STACKTOP = sp;
      return $186 | 0;
     }
    }
   }
   HEAP32[$stat_K >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$bma >> 3], +HEAPF64[$2 >> 3], -+HEAPF64[$3 >> 3], $Kummer_1F1) | 0;
   $93 = +Math_abs(+(+HEAPF64[$3 >> 3])) * 2.220446049250313e-16;
   HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$3 >> 3], $93, +HEAPF64[$Kummer_1F1 >> 3], +HEAPF64[$Kummer_1F1 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   if (HEAP32[$stat_e >> 2] | 0) $106 = HEAP32[$stat_e >> 2] | 0; else $106 = (HEAP32[$stat_K >> 2] | 0) != 0 ? HEAP32[$stat_K >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $106;
   $186 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $186 | 0;
  }
 }
 HEAP32[$0 >> 2] = _gsl_sf_hyperg_1F1_series_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 $186 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $186 | 0;
}
function _gsl_sf_lnbeta_sgn_e($x, $y, $result, $sgn) {
 $x = +$x;
 $y = +$y;
 $result = $result | 0;
 $sgn = $sgn | 0;
 var $0 = 0, $1 = 0, $103 = 0.0, $121 = 0.0, $123 = 0, $159 = 0.0, $162 = 0.0, $166 = 0.0, $168 = 0, $174 = 0.0, $176 = 0, $189 = 0, $190 = 0, $2 = 0, $3 = 0, $4 = 0, $91 = 0.0, $94 = 0.0, $gsx = 0, $gsxy = 0, $gsy = 0, $lgx = 0, $lgxy = 0, $lgy = 0, $lnopr = 0, $lnpow_err = 0, $lnpow_val = 0, $lnpre_err = 0, $lnpre_val = 0, $max = 0, $min = 0, $rat = 0, $sgx = 0, $sgxy = 0, $sgy = 0, $stat_gx = 0, $stat_gxy = 0, $stat_gy = 0, $t1 = 0, $t2 = 0, $t3 = 0, $xy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $0 = sp + 260 | 0;
 $1 = sp + 232 | 0;
 $2 = sp + 224 | 0;
 $3 = sp + 256 | 0;
 $4 = sp + 252 | 0;
 $max = sp + 216 | 0;
 $min = sp + 208 | 0;
 $rat = sp + 200 | 0;
 $lnpre_val = sp + 192 | 0;
 $lnpre_err = sp + 184 | 0;
 $lnpow_val = sp + 176 | 0;
 $lnpow_err = sp + 168 | 0;
 $t1 = sp + 160 | 0;
 $t2 = sp + 152 | 0;
 $t3 = sp + 144 | 0;
 $lnopr = sp + 128 | 0;
 $gsx = sp + 112 | 0;
 $gsy = sp + 96 | 0;
 $gsxy = sp + 80 | 0;
 $lgx = sp + 64 | 0;
 $lgy = sp + 48 | 0;
 $lgxy = sp + 32 | 0;
 $sgx = sp + 24 | 0;
 $sgy = sp + 16 | 0;
 $sgxy = sp + 8 | 0;
 $xy = sp;
 $stat_gx = sp + 248 | 0;
 $stat_gy = sp + 244 | 0;
 $stat_gxy = sp + 240 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$4 >> 2] = $sgn;
 if (!(+HEAPF64[$1 >> 3] == 0.0)) if (!(+HEAPF64[$2 >> 3] == 0.0)) {
  if (!(+_isnegint(+HEAPF64[$1 >> 3]) != 0.0)) if (!(+_isnegint(+HEAPF64[$2 >> 3]) != 0.0)) {
   if (+HEAPF64[$1 >> 3] > 0.0) if (+HEAPF64[$2 >> 3] > 0.0) {
    HEAPF64[$max >> 3] = +HEAPF64[$1 >> 3] > +HEAPF64[$2 >> 3] ? +HEAPF64[$1 >> 3] : +HEAPF64[$2 >> 3];
    HEAPF64[$min >> 3] = +HEAPF64[$1 >> 3] < +HEAPF64[$2 >> 3] ? +HEAPF64[$1 >> 3] : +HEAPF64[$2 >> 3];
    HEAPF64[$rat >> 3] = +HEAPF64[$min >> 3] / +HEAPF64[$max >> 3];
    if (+HEAPF64[$rat >> 3] < .2) {
     _gsl_sf_gammastar_e(+HEAPF64[$1 >> 3], $gsx) | 0;
     _gsl_sf_gammastar_e(+HEAPF64[$2 >> 3], $gsy) | 0;
     _gsl_sf_gammastar_e(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3], $gsxy) | 0;
     _gsl_sf_log_1plusx_e(+HEAPF64[$rat >> 3], $lnopr) | 0;
     HEAPF64[$lnpre_val >> 3] = +Math_log(+(+HEAPF64[$gsx >> 3] * +HEAPF64[$gsy >> 3] / +HEAPF64[$gsxy >> 3] * 1.4142135623730951 * 1.772453850905516));
     HEAPF64[$lnpre_err >> 3] = +HEAPF64[$gsx + 8 >> 3] / +HEAPF64[$gsx >> 3] + +HEAPF64[$gsy + 8 >> 3] / +HEAPF64[$gsy >> 3] + +HEAPF64[$gsxy + 8 >> 3] / +HEAPF64[$gsxy >> 3];
     HEAPF64[$t1 >> 3] = +HEAPF64[$min >> 3] * +Math_log(+(+HEAPF64[$rat >> 3]));
     HEAPF64[$t2 >> 3] = +Math_log(+(+HEAPF64[$min >> 3])) * .5;
     HEAPF64[$t3 >> 3] = (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] - .5) * +HEAPF64[$lnopr >> 3];
     HEAPF64[$lnpow_val >> 3] = +HEAPF64[$t1 >> 3] - +HEAPF64[$t2 >> 3] - +HEAPF64[$t3 >> 3];
     $91 = +Math_abs(+(+HEAPF64[$t1 >> 3]));
     $94 = $91 + +Math_abs(+(+HEAPF64[$t2 >> 3]));
     HEAPF64[$lnpow_err >> 3] = ($94 + +Math_abs(+(+HEAPF64[$t3 >> 3]))) * 2.220446049250313e-16;
     $103 = +Math_abs(+(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] - .5));
     HEAPF64[$lnpow_err >> 3] = +HEAPF64[$lnpow_err >> 3] + $103 * +HEAPF64[$lnopr + 8 >> 3];
     HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$lnpre_val >> 3] + +HEAPF64[$lnpow_val >> 3];
     HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$lnpre_err >> 3] + +HEAPF64[$lnpow_err >> 3];
     $121 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
     $123 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
     HEAPF64[$123 >> 3] = +HEAPF64[$123 >> 3] + $121;
     HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
     HEAP32[$0 >> 2] = 0;
     $190 = HEAP32[$0 >> 2] | 0;
     STACKTOP = sp;
     return $190 | 0;
    }
   }
   HEAPF64[$xy >> 3] = +HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3];
   HEAP32[$stat_gx >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3], $lgx, $sgx) | 0;
   HEAP32[$stat_gy >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3], $lgy, $sgy) | 0;
   HEAP32[$stat_gxy >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$xy >> 3], $lgxy, $sgxy) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sgx >> 3] * +HEAPF64[$sgy >> 3] * +HEAPF64[$sgxy >> 3];
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$lgx >> 3] + +HEAPF64[$lgy >> 3] - +HEAPF64[$lgxy >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$lgx + 8 >> 3] + +HEAPF64[$lgy + 8 >> 3] + +HEAPF64[$lgxy + 8 >> 3];
   $159 = +Math_abs(+(+HEAPF64[$lgx >> 3]));
   $162 = $159 + +Math_abs(+(+HEAPF64[$lgy >> 3]));
   $166 = ($162 + +Math_abs(+(+HEAPF64[$lgxy >> 3]))) * 4.440892098500626e-16;
   $168 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$168 >> 3] = +HEAPF64[$168 >> 3] + $166;
   $174 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $176 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$176 >> 3] = +HEAPF64[$176 >> 3] + $174;
   do if (HEAP32[$stat_gx >> 2] | 0) $189 = HEAP32[$stat_gx >> 2] | 0; else if (HEAP32[$stat_gy >> 2] | 0) {
    $189 = HEAP32[$stat_gy >> 2] | 0;
    break;
   } else {
    $189 = (HEAP32[$stat_gxy >> 2] | 0) != 0 ? HEAP32[$stat_gxy >> 2] | 0 : 0;
    break;
   } while (0);
   HEAP32[$0 >> 2] = $189;
   $190 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $190 | 0;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(25840, 25856, 59, 1);
  HEAP32[$0 >> 2] = 1;
  $190 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $190 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(25840, 25856, 56, 1);
 HEAP32[$0 >> 2] = 1;
 $190 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $190 | 0;
}
function _gsl_sf_bessel_Jnu_asymp_Olver_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $159 = 0.0, $165 = 0.0, $171 = 0, $179 = 0.0, $185 = 0, $191 = 0.0, $193 = 0, $2 = 0, $203 = 0, $204 = 0, $3 = 0, $33 = 0, $34 = 0.0, $70 = 0.0, $71 = 0.0, $79 = 0.0, $a = 0, $abs_zeta = 0, $ai = 0, $aip = 0, $arg = 0, $asum = 0, $asum_err = 0, $bsum = 0, $c0 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $c6 = 0, $c7 = 0, $crnu = 0, $nu11 = 0, $nu3 = 0, $pre = 0, $rt = 0, $rt1 = 0, $stat_a = 0, $stat_ap = 0, $z = 0, $zeta = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 236 | 0;
 $1 = sp + 216 | 0;
 $2 = sp + 208 | 0;
 $3 = sp + 232 | 0;
 $zeta = sp + 200 | 0;
 $abs_zeta = sp + 192 | 0;
 $arg = sp + 184 | 0;
 $pre = sp + 176 | 0;
 $asum = sp + 168 | 0;
 $bsum = sp + 160 | 0;
 $asum_err = sp + 152 | 0;
 $ai = sp + 136 | 0;
 $aip = sp + 120 | 0;
 $z = sp + 112 | 0;
 $crnu = sp + 104 | 0;
 $nu3 = sp + 96 | 0;
 $nu11 = sp + 88 | 0;
 $stat_a = sp + 228 | 0;
 $stat_ap = sp + 224 | 0;
 $a = sp + 80 | 0;
 $c0 = sp + 72 | 0;
 $c1 = sp + 64 | 0;
 $c2 = sp + 56 | 0;
 $c3 = sp + 48 | 0;
 $c4 = sp + 40 | 0;
 $c5 = sp + 32 | 0;
 $c6 = sp + 24 | 0;
 $c7 = sp + 16 | 0;
 $rt = sp + 8 | 0;
 $rt1 = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] <= 0.0)) if (!(+HEAPF64[$1 >> 3] <= 0.0)) {
  HEAPF64[$z >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$1 >> 3];
  HEAPF64[$crnu >> 3] = +Math_pow(+(+HEAPF64[$1 >> 3]), .3333333333333333);
  HEAPF64[$nu3 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$nu11 >> 3] = +HEAPF64[$nu3 >> 3] * +HEAPF64[$nu3 >> 3] * +HEAPF64[$nu3 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  $33 = +Math_abs(+(1.0 - +HEAPF64[$z >> 3])) < .02;
  $34 = +HEAPF64[$z >> 3];
  do if ($33) {
   HEAPF64[$a >> 3] = 1.0 - $34;
   HEAPF64[$c0 >> 3] = 1.2599210498948732;
   HEAPF64[$c1 >> 3] = .37797631496846196;
   HEAPF64[$c2 >> 3] = .23038556340934824;
   HEAPF64[$c3 >> 3] = .16590960364964868;
   HEAPF64[$c4 >> 3] = .1293138708645101;
   HEAPF64[$c5 >> 3] = .10568046188858134;
   HEAPF64[$c6 >> 3] = .08916997952268187;
   HEAPF64[$c7 >> 3] = .07700014900618803;
   HEAPF64[$pre >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * .07700014900618803 + .08916997952268187) + .10568046188858134) + .1293138708645101) + .16590960364964868) + .23038556340934824) + .37797631496846196) + 1.2599210498948732;
   HEAPF64[$zeta >> 3] = +HEAPF64[$a >> 3] * +HEAPF64[$pre >> 3];
   HEAPF64[$pre >> 3] = +Math_sqrt(+(+Math_sqrt(+(+HEAPF64[$pre >> 3] / (+HEAPF64[$z >> 3] + 1.0))) * 2.0));
   HEAPF64[$abs_zeta >> 3] = +Math_abs(+(+HEAPF64[$zeta >> 3]));
  } else {
   $70 = +HEAPF64[$z >> 3];
   $71 = +HEAPF64[$z >> 3];
   if ($34 < 1.0) {
    HEAPF64[$rt >> 3] = +Math_sqrt(+(1.0 - $70 * $71));
    $79 = +Math_log(+((+HEAPF64[$rt >> 3] + 1.0) / +HEAPF64[$z >> 3]));
    HEAPF64[$abs_zeta >> 3] = +Math_pow(+(($79 - +HEAPF64[$rt >> 3]) * 1.5), .6666666666666666);
    HEAPF64[$zeta >> 3] = +HEAPF64[$abs_zeta >> 3];
    HEAPF64[$pre >> 3] = +Math_sqrt(+(+Math_sqrt(+(+HEAPF64[$abs_zeta >> 3] / (+HEAPF64[$rt >> 3] * +HEAPF64[$rt >> 3]))) * 2.0));
    break;
   } else {
    HEAPF64[$rt1 >> 3] = $70 * +Math_sqrt(+(1.0 - 1.0 / ($71 * +HEAPF64[$z >> 3])));
    HEAPF64[$abs_zeta >> 3] = +Math_pow(+((+HEAPF64[$rt1 >> 3] - +Math_acos(+(1.0 / +HEAPF64[$z >> 3]))) * 1.5), .6666666666666666);
    HEAPF64[$zeta >> 3] = -+HEAPF64[$abs_zeta >> 3];
    HEAPF64[$pre >> 3] = +Math_sqrt(+(+Math_sqrt(+(+HEAPF64[$abs_zeta >> 3] / (+HEAPF64[$rt1 >> 3] * +HEAPF64[$rt1 >> 3]))) * 2.0));
    break;
   }
  } while (0);
  HEAPF64[$asum >> 3] = +_olver_Asum(+HEAPF64[$1 >> 3], +HEAPF64[$z >> 3], +HEAPF64[$abs_zeta >> 3], $asum_err);
  HEAPF64[$bsum >> 3] = +_olver_Bsum(+HEAPF64[$1 >> 3], +HEAPF64[$z >> 3], +HEAPF64[$abs_zeta >> 3]);
  HEAPF64[$arg >> 3] = +HEAPF64[$crnu >> 3] * +HEAPF64[$crnu >> 3] * +HEAPF64[$zeta >> 3];
  HEAP32[$stat_a >> 2] = _gsl_sf_airy_Ai_e(+HEAPF64[$arg >> 3], 0, $ai) | 0;
  HEAP32[$stat_ap >> 2] = _gsl_sf_airy_Ai_deriv_e(+HEAPF64[$arg >> 3], 0, $aip) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre >> 3] * (+HEAPF64[$ai >> 3] * +HEAPF64[$asum >> 3] / +HEAPF64[$crnu >> 3] + +HEAPF64[$aip >> 3] * +HEAPF64[$bsum >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$crnu >> 3] * +HEAPF64[$crnu >> 3]));
  $159 = +HEAPF64[$pre >> 3] * +HEAPF64[$ai + 8 >> 3] * +Math_abs(+(+HEAPF64[$asum >> 3] / +HEAPF64[$crnu >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $159;
  $165 = +HEAPF64[$pre >> 3] * +Math_abs(+(+HEAPF64[$ai >> 3]));
  $171 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$171 >> 3] = +HEAPF64[$171 >> 3] + $165 * +HEAPF64[$asum_err >> 3] / +HEAPF64[$crnu >> 3];
  $179 = +HEAPF64[$pre >> 3] * +Math_abs(+(+HEAPF64[$ai >> 3] * +HEAPF64[$asum >> 3]));
  $185 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$185 >> 3] = +HEAPF64[$185 >> 3] + $179 / (+HEAPF64[$crnu >> 3] * +HEAPF64[$nu11 >> 3]);
  $191 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 1.7763568394002505e-15;
  $193 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$193 >> 3] = +HEAPF64[$193 >> 3] + $191;
  if (HEAP32[$stat_a >> 2] | 0) $203 = HEAP32[$stat_a >> 2] | 0; else $203 = (HEAP32[$stat_ap >> 2] | 0) != 0 ? HEAP32[$stat_ap >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $203;
  $204 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $204 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(16264, 16280, 847, 1);
 HEAP32[$0 >> 2] = 1;
 $204 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $204 | 0;
}
function _gsl_sf_mathieu_b($order, $qq, $result) {
 $order = $order | 0;
 $qq = +$qq;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $107 = 0.0, $11 = 0, $117 = 0.0, $118 = 0.0, $120 = 0.0, $124 = 0, $14 = 0.0, $146 = 0, $2 = 0, $25 = 0, $27 = 0.0, $28 = 0, $3 = 0, $34 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $93 = 0.0, $a1 = 0, $a2 = 0, $aa = 0, $aa_approx = 0, $aa_orig = 0, $counter = 0, $da = 0, $dela = 0, $dir = 0, $even_odd = 0, $fa = 0, $fa1 = 0, $ii = 0, $maxcount = 0, $nterms = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 108 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 104 | 0;
 $even_odd = sp + 100 | 0;
 $nterms = sp + 96 | 0;
 $ii = sp + 92 | 0;
 $counter = sp + 88 | 0;
 $maxcount = sp + 84 | 0;
 $dir = sp + 80 | 0;
 $a1 = sp + 64 | 0;
 $a2 = sp + 56 | 0;
 $fa = sp + 48 | 0;
 $fa1 = sp + 40 | 0;
 $dela = sp + 32 | 0;
 $aa_orig = sp + 24 | 0;
 $da = sp + 16 | 0;
 $aa = sp + 8 | 0;
 $aa_approx = sp;
 HEAP32[$1 >> 2] = $order;
 HEAPF64[$2 >> 3] = $qq;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$nterms >> 2] = 50;
 HEAP32[$counter >> 2] = 0;
 HEAP32[$maxcount >> 2] = 1e3;
 HEAP32[$dir >> 2] = 0;
 HEAPF64[$da >> 3] = .025;
 HEAP32[$even_odd >> 2] = 0;
 HEAP32[$even_odd >> 2] = ((HEAP32[$1 >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  _gsl_error(54552, 54536, 511, 5);
  HEAP32[$0 >> 2] = 5;
  $146 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $146 | 0;
 }
 $11 = HEAP32[$1 >> 2] | 0;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  $14 = +(Math_imul($11, HEAP32[$1 >> 2] | 0) | 0);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $14;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $146 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $146 | 0;
 }
 if (($11 | 0) < 0) HEAP32[$1 >> 2] = Math_imul(HEAP32[$1 >> 2] | 0, -1) | 0;
 if (+HEAPF64[$2 >> 3] < 0.0) {
  $25 = HEAP32[$1 >> 2] | 0;
  $27 = -+HEAPF64[$2 >> 3];
  $28 = HEAP32[$3 >> 2] | 0;
  if (!(HEAP32[$even_odd >> 2] | 0)) {
   HEAP32[$0 >> 2] = _gsl_sf_mathieu_b($25, $27, $28) | 0;
   $146 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $146 | 0;
  } else {
   HEAP32[$0 >> 2] = _gsl_sf_mathieu_a($25, $27, $28) | 0;
   $146 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $146 | 0;
  }
 }
 HEAPF64[$aa_approx >> 3] = +_approx_s(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3]);
 $34 = +HEAPF64[$aa_approx >> 3];
 HEAPF64[$aa >> 3] = $34;
 HEAPF64[$aa_orig >> 3] = $34;
 while (1) {
  if ((HEAP32[$counter >> 2] | 0) >= (HEAP32[$maxcount >> 2] | 0)) break;
  HEAPF64[$a1 >> 3] = +HEAPF64[$aa >> 3] + .001;
  HEAP32[$ii >> 2] = 0;
  $42 = HEAP32[$1 >> 2] | 0;
  $43 = +HEAPF64[$2 >> 3];
  $44 = +HEAPF64[$a1 >> 3];
  $45 = HEAP32[$nterms >> 2] | 0;
  if (!(HEAP32[$even_odd >> 2] | 0)) HEAPF64[$fa1 >> 3] = +_seer($42, $43, $44, $45); else HEAPF64[$fa1 >> 3] = +_seor($42, $43, $44, $45);
  while (1) {
   $50 = HEAP32[$1 >> 2] | 0;
   $51 = +HEAPF64[$2 >> 3];
   $52 = +HEAPF64[$aa >> 3];
   $53 = HEAP32[$nterms >> 2] | 0;
   if (!(HEAP32[$even_odd >> 2] | 0)) HEAPF64[$fa >> 3] = +_seer($50, $51, $52, $53); else HEAPF64[$fa >> 3] = +_seor($50, $51, $52, $53);
   HEAPF64[$a2 >> 3] = +HEAPF64[$a1 >> 3];
   HEAPF64[$a1 >> 3] = +HEAPF64[$aa >> 3];
   if (+HEAPF64[$fa >> 3] == +HEAPF64[$fa1 >> 3]) {
    label = 20;
    break;
   }
   HEAPF64[$aa >> 3] = +HEAPF64[$aa >> 3] - (+HEAPF64[$aa >> 3] - +HEAPF64[$a2 >> 3]) / (+HEAPF64[$fa >> 3] - +HEAPF64[$fa1 >> 3]) * +HEAPF64[$fa >> 3];
   HEAPF64[$dela >> 3] = +Math_abs(+(+HEAPF64[$aa >> 3] - +HEAPF64[$a2 >> 3]));
   if (+HEAPF64[$dela >> 3] < 1.0e-18) {
    label = 22;
    break;
   }
   if ((HEAP32[$ii >> 2] | 0) > 40) {
    label = 24;
    break;
   }
   HEAPF64[$fa1 >> 3] = +HEAPF64[$fa >> 3];
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  if ((label | 0) == 20) {
   label = 0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  } else if ((label | 0) == 22) {
   label = 0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  } else if ((label | 0) == 24) {
   label = 0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$dela >> 3];
  }
  $93 = +Math_abs(+(+HEAPF64[$aa >> 3] - +HEAPF64[$aa_orig >> 3]));
  if (!($93 > +(HEAP32[$1 >> 2] | 0) * .01 * +Math_abs(+(+HEAPF64[$aa_orig >> 3])) + 3.0)) {
   if ((HEAP32[$1 >> 2] | 0) <= 10) break;
   $107 = +Math_abs(+(+HEAPF64[$aa >> 3] - +HEAPF64[$aa_orig >> 3]));
   if (!($107 > +(HEAP32[$1 >> 2] | 0) * 1.5)) break;
  }
  HEAP32[$counter >> 2] = (HEAP32[$counter >> 2] | 0) + 1;
  $117 = +HEAPF64[$aa >> 3];
  $118 = +HEAPF64[$aa_orig >> 3];
  if ((HEAP32[$counter >> 2] | 0) == (HEAP32[$maxcount >> 2] | 0)) {
   label = 30;
   break;
  }
  $124 = HEAP32[$dir >> 2] | 0;
  if ($117 > $118) {
   if (($124 | 0) == 1) HEAPF64[$da >> 3] = +HEAPF64[$da >> 3] / 2.0;
   HEAP32[$dir >> 2] = -1;
  } else {
   if (($124 | 0) == -1) HEAPF64[$da >> 3] = +HEAPF64[$da >> 3] / 2.0;
   HEAP32[$dir >> 2] = 1;
  }
  HEAPF64[$aa_approx >> 3] = +HEAPF64[$aa_approx >> 3] + +(HEAP32[$dir >> 2] | 0) * +HEAPF64[$da >> 3] * +(HEAP32[$counter >> 2] | 0);
  HEAPF64[$aa >> 3] = +HEAPF64[$aa_approx >> 3];
 }
 if ((label | 0) == 30) {
  $120 = +Math_abs(+($117 - $118));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $120;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$aa >> 3];
 if ((HEAP32[$counter >> 2] | 0) == (HEAP32[$maxcount >> 2] | 0)) {
  _gsl_error(54496, 54536, 621, 5);
  HEAP32[$0 >> 2] = 5;
  $146 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $146 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $146 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $146 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_jl_steed_array($lmax, $x, $jl_x) {
 $lmax = $lmax | 0;
 $x = +$x;
 $jl_x = $jl_x | 0;
 var $0 = 0, $1 = 0, $112 = 0.0, $169 = 0.0, $186 = 0, $191 = 0, $2 = 0, $3 = 0, $50 = 0, $B = 0, $D = 0, $F = 0, $FP = 0, $L = 0, $L2 = 0, $LP = 0, $PL = 0, $W = 0, $XP2 = 0, $del = 0, $end = 0, $inv_fact = 0, $j = 0, $j1 = 0, $l = 0, $x_inv = 0, $x_l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 136 | 0;
 $1 = sp + 132 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 128 | 0;
 $j = sp + 124 | 0;
 $j1 = sp + 120 | 0;
 $inv_fact = sp + 88 | 0;
 $x_l = sp + 80 | 0;
 $l = sp + 116 | 0;
 $x_inv = sp + 72 | 0;
 $W = sp + 64 | 0;
 $F = sp + 56 | 0;
 $FP = sp + 48 | 0;
 $B = sp + 40 | 0;
 $end = sp + 32 | 0;
 $D = sp + 24 | 0;
 $del = sp + 16 | 0;
 $XP2 = sp + 8 | 0;
 $PL = sp;
 $L = sp + 112 | 0;
 $LP = sp + 108 | 0;
 $L2 = sp + 104 | 0;
 HEAP32[$1 >> 2] = $lmax;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $jl_x;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] < 0.0)) {
  if (+HEAPF64[$2 >> 3] == 0.0) {
   HEAP32[$j1 >> 2] = 1;
   while (1) {
    if ((HEAP32[$j1 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$j1 >> 2] << 3) >> 3] = 0.0;
    HEAP32[$j1 >> 2] = (HEAP32[$j1 >> 2] | 0) + 1;
   }
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
   HEAP32[$0 >> 2] = 0;
   $191 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $191 | 0;
  }
  if (+HEAPF64[$2 >> 3] < .000244140625) {
   HEAPF64[$inv_fact >> 3] = 1.0;
   HEAPF64[$x_l >> 3] = 1.0;
   HEAP32[$l >> 2] = 0;
   while (1) {
    if ((HEAP32[$l >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$l >> 2] << 3) >> 3] = +HEAPF64[$x_l >> 3] * +HEAPF64[$inv_fact >> 3];
    $50 = (HEAP32[$3 >> 2] | 0) + (HEAP32[$l >> 2] << 3) | 0;
    HEAPF64[$50 >> 3] = +HEAPF64[$50 >> 3] * (1.0 - +HEAPF64[$2 >> 3] * .5 * +HEAPF64[$2 >> 3] / (+(HEAP32[$l >> 2] | 0) * 2.0 + 3.0));
    HEAPF64[$inv_fact >> 3] = +HEAPF64[$inv_fact >> 3] / (+(HEAP32[$l >> 2] | 0) * 2.0 + 3.0);
    HEAPF64[$x_l >> 3] = +HEAPF64[$x_l >> 3] * +HEAPF64[$2 >> 3];
    HEAP32[$l >> 2] = (HEAP32[$l >> 2] | 0) + 1;
   }
   HEAP32[$0 >> 2] = 0;
   $191 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $191 | 0;
  }
  HEAPF64[$x_inv >> 3] = 1.0 / +HEAPF64[$2 >> 3];
  HEAPF64[$W >> 3] = +HEAPF64[$x_inv >> 3] * 2.0;
  HEAPF64[$F >> 3] = 1.0;
  HEAPF64[$FP >> 3] = (+(HEAP32[$1 >> 2] | 0) + 1.0) * +HEAPF64[$x_inv >> 3];
  HEAPF64[$B >> 3] = +HEAPF64[$FP >> 3] * 2.0 + +HEAPF64[$x_inv >> 3];
  HEAPF64[$end >> 3] = +HEAPF64[$B >> 3] + +HEAPF64[$W >> 3] * 2.0e4;
  HEAPF64[$D >> 3] = 1.0 / +HEAPF64[$B >> 3];
  HEAPF64[$del >> 3] = -+HEAPF64[$D >> 3];
  HEAPF64[$FP >> 3] = +HEAPF64[$FP >> 3] + +HEAPF64[$del >> 3];
  do {
   HEAPF64[$B >> 3] = +HEAPF64[$B >> 3] + +HEAPF64[$W >> 3];
   HEAPF64[$D >> 3] = 1.0 / (+HEAPF64[$B >> 3] - +HEAPF64[$D >> 3]);
   HEAPF64[$del >> 3] = +HEAPF64[$del >> 3] * (+HEAPF64[$B >> 3] * +HEAPF64[$D >> 3] - 1.0);
   HEAPF64[$FP >> 3] = +HEAPF64[$FP >> 3] + +HEAPF64[$del >> 3];
   if (+HEAPF64[$D >> 3] < 0.0) HEAPF64[$F >> 3] = -+HEAPF64[$F >> 3];
   if (+HEAPF64[$B >> 3] > +HEAPF64[$end >> 3]) {
    label = 21;
    break;
   }
   $112 = +Math_abs(+(+HEAPF64[$del >> 3]));
  } while ($112 >= +Math_abs(+(+HEAPF64[$FP >> 3])) * 2.220446049250313e-16);
  if ((label | 0) == 21) {
   _gsl_error(15888, 15856, 334, 11);
   HEAP32[$0 >> 2] = 11;
   $191 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $191 | 0;
  }
  HEAPF64[$FP >> 3] = +HEAPF64[$FP >> 3] * +HEAPF64[$F >> 3];
  if ((HEAP32[$1 >> 2] | 0) > 0) {
   HEAPF64[$XP2 >> 3] = +HEAPF64[$FP >> 3];
   HEAPF64[$PL >> 3] = +(HEAP32[$1 >> 2] | 0) * +HEAPF64[$x_inv >> 3];
   HEAP32[$L >> 2] = HEAP32[$1 >> 2];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3] = +HEAPF64[$F >> 3];
   HEAP32[$LP >> 2] = 1;
   while (1) {
    if ((HEAP32[$LP >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$L >> 2] | 0) - 1 << 3) >> 3] = +HEAPF64[$PL >> 3] * +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$L >> 2] << 3) >> 3] + +HEAPF64[$XP2 >> 3];
    HEAPF64[$FP >> 3] = +HEAPF64[$PL >> 3] * +HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$L >> 2] | 0) - 1 << 3) >> 3] - +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$L >> 2] << 3) >> 3];
    HEAPF64[$XP2 >> 3] = +HEAPF64[$FP >> 3];
    HEAPF64[$PL >> 3] = +HEAPF64[$PL >> 3] - +HEAPF64[$x_inv >> 3];
    HEAP32[$L >> 2] = (HEAP32[$L >> 2] | 0) + -1;
    HEAP32[$LP >> 2] = (HEAP32[$LP >> 2] | 0) + 1;
   }
   HEAPF64[$F >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3];
  }
  $169 = +HEAPF64[$x_inv >> 3];
  HEAPF64[$W >> 3] = $169 / +_hypot(+(+HEAPF64[$FP >> 3]), +(+HEAPF64[$F >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$W >> 3] * +HEAPF64[$F >> 3];
  L37 : do if ((HEAP32[$1 >> 2] | 0) > 0) {
   HEAP32[$L2 >> 2] = 1;
   while (1) {
    if ((HEAP32[$L2 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break L37;
    $186 = (HEAP32[$3 >> 2] | 0) + (HEAP32[$L2 >> 2] << 3) | 0;
    HEAPF64[$186 >> 3] = +HEAPF64[$186 >> 3] * +HEAPF64[$W >> 3];
    HEAP32[$L2 >> 2] = (HEAP32[$L2 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$0 >> 2] = 0;
  $191 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $191 | 0;
 }
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3] = 0.0;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 _gsl_error(15888, 15856, 292, 1);
 HEAP32[$0 >> 2] = 1;
 $191 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $191 | 0;
}
function _gsl_sf_hyperg_2F1_renorm_e($a, $b, $c, $x, $result) {
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $153 = 0, $182 = 0, $183 = 0, $2 = 0, $23 = 0, $3 = 0, $32 = 0, $4 = 0, $41 = 0, $5 = 0, $63 = 0, $70 = 0, $74 = 0, $78 = 0, $84 = 0, $F = 0, $F1 = 0, $a_neg_integer = 0, $b_neg_integer = 0, $c_neg_integer = 0, $g1 = 0, $g2 = 0, $g3 = 0, $g4 = 0, $g5 = 0, $ln_pre_err = 0, $ln_pre_val = 0, $lng = 0, $rinta = 0, $rintb = 0, $rintc = 0, $s1 = 0, $s2 = 0, $s3 = 0, $s4 = 0, $s5 = 0, $sg = 0, $sgn = 0, $stat = 0, $stat_F = 0, $stat_F2 = 0, $stat_e = 0, $stat_e3 = 0, $stat_g = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $0 = sp + 296 | 0;
 $1 = sp + 248 | 0;
 $2 = sp + 240 | 0;
 $3 = sp + 232 | 0;
 $4 = sp + 224 | 0;
 $5 = sp + 292 | 0;
 $rinta = sp + 216 | 0;
 $rintb = sp + 208 | 0;
 $rintc = sp + 200 | 0;
 $a_neg_integer = sp + 288 | 0;
 $b_neg_integer = sp + 284 | 0;
 $c_neg_integer = sp + 280 | 0;
 $g1 = sp + 184 | 0;
 $g2 = sp + 168 | 0;
 $g3 = sp + 152 | 0;
 $g4 = sp + 136 | 0;
 $g5 = sp + 120 | 0;
 $s1 = sp + 112 | 0;
 $s2 = sp + 104 | 0;
 $s3 = sp + 96 | 0;
 $s4 = sp + 88 | 0;
 $s5 = sp + 80 | 0;
 $stat = sp + 276 | 0;
 $F = sp + 64 | 0;
 $stat_F = sp + 272 | 0;
 $ln_pre_val = sp + 56 | 0;
 $ln_pre_err = sp + 48 | 0;
 $sg = sp + 40 | 0;
 $stat_e = sp + 268 | 0;
 $F1 = sp + 24 | 0;
 $lng = sp + 8 | 0;
 $sgn = sp;
 $stat_g = sp + 264 | 0;
 $stat_F2 = sp + 260 | 0;
 $stat_e3 = sp + 256 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$rinta >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] + .5));
 HEAPF64[$rintb >> 3] = +Math_floor(+(+HEAPF64[$2 >> 3] + .5));
 HEAPF64[$rintc >> 3] = +Math_floor(+(+HEAPF64[$3 >> 3] + .5));
 if (+HEAPF64[$1 >> 3] < 0.0) $23 = +Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$rinta >> 3])) < 2.220446049250313e-13; else $23 = 0;
 HEAP32[$a_neg_integer >> 2] = $23 & 1;
 if (+HEAPF64[$2 >> 3] < 0.0) $32 = +Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$rintb >> 3])) < 2.220446049250313e-13; else $32 = 0;
 HEAP32[$b_neg_integer >> 2] = $32 & 1;
 if (+HEAPF64[$3 >> 3] < 0.0) $41 = +Math_abs(+(+HEAPF64[$3 >> 3] - +HEAPF64[$rintc >> 3])) < 2.220446049250313e-13; else $41 = 0;
 HEAP32[$c_neg_integer >> 2] = $41 & 1;
 if (!(HEAP32[$c_neg_integer >> 2] | 0)) {
  HEAP32[$stat_g >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$3 >> 3], $lng, $sgn) | 0;
  HEAP32[$stat_F2 >> 2] = _gsl_sf_hyperg_2F1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], $F1) | 0;
  HEAP32[$stat_e3 >> 2] = _gsl_sf_exp_mult_err_e(-+HEAPF64[$lng >> 3], +HEAPF64[$lng + 8 >> 3], +HEAPF64[$sgn >> 3] * +HEAPF64[$F1 >> 3], +HEAPF64[$F1 + 8 >> 3], HEAP32[$5 >> 2] | 0) | 0;
  do if (HEAP32[$stat_e3 >> 2] | 0) $182 = HEAP32[$stat_e3 >> 2] | 0; else if (HEAP32[$stat_F2 >> 2] | 0) {
   $182 = HEAP32[$stat_F2 >> 2] | 0;
   break;
  } else {
   $182 = (HEAP32[$stat_g >> 2] | 0) != 0 ? HEAP32[$stat_g >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$0 >> 2] = $182;
  $183 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $183 | 0;
 }
 if (HEAP32[$a_neg_integer >> 2] | 0) {
  if (!(+HEAPF64[$1 >> 3] > +HEAPF64[$3 >> 3] + .1)) label = 10;
 } else label = 10;
 do if ((label | 0) == 10) {
  if (HEAP32[$b_neg_integer >> 2] | 0) if (+HEAPF64[$2 >> 3] > +HEAPF64[$3 >> 3] + .1) break;
  HEAP32[$stat >> 2] = 0;
  $63 = _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3] - +HEAPF64[$3 >> 3] + 1.0, $g1, $s1) | 0;
  HEAP32[$stat >> 2] = (HEAP32[$stat >> 2] | 0) + $63;
  $70 = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3] + 1.0, $g2, $s2) | 0;
  HEAP32[$stat >> 2] = (HEAP32[$stat >> 2] | 0) + $70;
  $74 = _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3], $g3, $s3) | 0;
  HEAP32[$stat >> 2] = (HEAP32[$stat >> 2] | 0) + $74;
  $78 = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3], $g4, $s4) | 0;
  HEAP32[$stat >> 2] = (HEAP32[$stat >> 2] | 0) + $78;
  $84 = _gsl_sf_lngamma_sgn_e(-+HEAPF64[$3 >> 3] + 2.0, $g5, $s5) | 0;
  HEAP32[$stat >> 2] = (HEAP32[$stat >> 2] | 0) + $84;
  if (HEAP32[$stat >> 2] | 0) {
   HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
   _gsl_error(51880, 51896, 836, 1);
   HEAP32[$0 >> 2] = 1;
   $183 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $183 | 0;
  }
  HEAP32[$stat_F >> 2] = _gsl_sf_hyperg_2F1_e(+HEAPF64[$1 >> 3] - +HEAPF64[$3 >> 3] + 1.0, +HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3] + 1.0, -+HEAPF64[$3 >> 3] + 2.0, +HEAPF64[$4 >> 3], $F) | 0;
  HEAPF64[$ln_pre_val >> 3] = +HEAPF64[$g1 >> 3] + +HEAPF64[$g2 >> 3] - +HEAPF64[$g3 >> 3] - +HEAPF64[$g4 >> 3] - +HEAPF64[$g5 >> 3];
  HEAPF64[$ln_pre_err >> 3] = +HEAPF64[$g1 + 8 >> 3] + +HEAPF64[$g2 + 8 >> 3] + +HEAPF64[$g3 + 8 >> 3] + +HEAPF64[$g4 + 8 >> 3] + +HEAPF64[$g5 + 8 >> 3];
  HEAPF64[$sg >> 3] = +HEAPF64[$s1 >> 3] * +HEAPF64[$s2 >> 3] * +HEAPF64[$s3 >> 3] * +HEAPF64[$s4 >> 3] * +HEAPF64[$s5 >> 3];
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_pre_val >> 3], +HEAPF64[$ln_pre_err >> 3], +HEAPF64[$sg >> 3] * +HEAPF64[$F >> 3], +HEAPF64[$F + 8 >> 3], HEAP32[$5 >> 2] | 0) | 0;
  if (HEAP32[$stat_e >> 2] | 0) $153 = HEAP32[$stat_e >> 2] | 0; else $153 = (HEAP32[$stat_F >> 2] | 0) != 0 ? HEAP32[$stat_F >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $153;
  $183 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $183 | 0;
 } while (0);
 HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAP32[$0 >> 2] = 0;
 $183 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $183 | 0;
}
function _gsl_sf_legendre_sphPlm_deriv_array($lmax, $m, $x, $result_array, $result_deriv_array) {
 $lmax = $lmax | 0;
 $m = $m | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 $result_deriv_array = $result_deriv_array | 0;
 var $0 = 0, $1 = 0, $130 = 0.0, $2 = 0, $205 = 0, $3 = 0, $34 = 0, $4 = 0, $40 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $74 = 0, $81 = 0, $c1 = 0, $diff_a = 0, $diff_b = 0, $ell = 0, $ell2 = 0, $ell5 = 0, $prefactor = 0, $prefactor3 = 0, $stat_array = 0, $stat_array1 = 0, $stat_array4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 88 | 0;
 $1 = sp + 84 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 76 | 0;
 $5 = sp + 72 | 0;
 $stat_array = sp + 68 | 0;
 $ell = sp + 64 | 0;
 $prefactor = sp + 32 | 0;
 $stat_array1 = sp + 60 | 0;
 $ell2 = sp + 56 | 0;
 $prefactor3 = sp + 24 | 0;
 $stat_array4 = sp + 52 | 0;
 $ell5 = sp + 48 | 0;
 $diff_a = sp + 16 | 0;
 $diff_b = sp + 8 | 0;
 $c1 = sp;
 HEAP32[$1 >> 2] = $lmax;
 HEAP32[$2 >> 2] = $m;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 HEAP32[$5 >> 2] = $result_deriv_array;
 if ((HEAP32[$2 >> 2] | 0) >= 0) if ((HEAP32[$1 >> 2] | 0) >= (HEAP32[$2 >> 2] | 0)) if (!(+HEAPF64[$3 >> 3] < -1.0 | +HEAPF64[$3 >> 3] > 1.0)) {
  if (!(HEAP32[$2 >> 2] | 0)) {
   HEAP32[$stat_array >> 2] = _gsl_sf_legendre_Pl_deriv_array(HEAP32[$1 >> 2] | 0, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
   HEAP32[$ell >> 2] = 0;
   while (1) {
    if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[$prefactor >> 3] = +Math_sqrt(+((+(HEAP32[$ell >> 2] | 0) * 2.0 + 1.0) / 12.566370614359172));
    $34 = (HEAP32[$4 >> 2] | 0) + (HEAP32[$ell >> 2] << 3) | 0;
    HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] * +HEAPF64[$prefactor >> 3];
    $40 = (HEAP32[$5 >> 2] | 0) + (HEAP32[$ell >> 2] << 3) | 0;
    HEAPF64[$40 >> 3] = +HEAPF64[$40 >> 3] * +HEAPF64[$prefactor >> 3];
    HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
   }
   HEAP32[$0 >> 2] = HEAP32[$stat_array >> 2];
   $205 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $205 | 0;
  }
  $48 = HEAP32[$1 >> 2] | 0;
  $49 = HEAP32[$2 >> 2] | 0;
  $50 = +HEAPF64[$3 >> 3];
  $51 = HEAP32[$4 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == 1) {
   HEAP32[$stat_array1 >> 2] = _gsl_sf_legendre_Plm_deriv_array($48, $49, $50, $51, HEAP32[$5 >> 2] | 0) | 0;
   HEAP32[$ell2 >> 2] = 1;
   while (1) {
    if ((HEAP32[$ell2 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[$prefactor3 >> 3] = +Math_sqrt(+((+(HEAP32[$ell2 >> 2] | 0) * 2.0 + 1.0) / (+(HEAP32[$ell2 >> 2] | 0) + 1.0) / (+(HEAP32[$ell2 >> 2] | 0) * 12.566370614359172)));
    $74 = (HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell2 >> 2] | 0) - 1 << 3) | 0;
    HEAPF64[$74 >> 3] = +HEAPF64[$74 >> 3] * +HEAPF64[$prefactor3 >> 3];
    $81 = (HEAP32[$5 >> 2] | 0) + ((HEAP32[$ell2 >> 2] | 0) - 1 << 3) | 0;
    HEAPF64[$81 >> 3] = +HEAPF64[$81 >> 3] * +HEAPF64[$prefactor3 >> 3];
    HEAP32[$ell2 >> 2] = (HEAP32[$ell2 >> 2] | 0) + 1;
   }
   HEAP32[$0 >> 2] = HEAP32[$stat_array1 >> 2];
   $205 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $205 | 0;
  }
  HEAP32[$stat_array4 >> 2] = _gsl_sf_legendre_sphPlm_array($48, $49, $50, $51) | 0;
  if (HEAP32[$stat_array4 >> 2] | 0) {
   HEAP32[$0 >> 2] = HEAP32[$stat_array4 >> 2];
   $205 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $205 | 0;
  }
  if (1.0 - +Math_abs(+(+HEAPF64[$3 >> 3])) < 2.220446049250313e-16) {
   HEAP32[$ell5 >> 2] = HEAP32[$2 >> 2];
   while (1) {
    if ((HEAP32[$ell5 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$ell5 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = 0.0;
    HEAP32[$ell5 >> 2] = (HEAP32[$ell5 >> 2] | 0) + 1;
   }
   HEAP32[$0 >> 2] = 0;
   $205 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $205 | 0;
  }
  HEAPF64[$diff_a >> 3] = +HEAPF64[$3 >> 3] + 1.0;
  HEAPF64[$diff_b >> 3] = 1.0 - +HEAPF64[$3 >> 3];
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +(0 - (HEAP32[$2 >> 2] | 0) | 0) * +HEAPF64[$3 >> 3] / (+HEAPF64[$diff_a >> 3] * +HEAPF64[$diff_b >> 3]) * +HEAPF64[HEAP32[$4 >> 2] >> 3];
  if (((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) >= 1) {
   $130 = +Math_sqrt(+(+(HEAP32[$2 >> 2] | 0) * 2.0 + 3.0));
   HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $130 * (+HEAPF64[$3 >> 3] * +HEAPF64[HEAP32[$5 >> 2] >> 3] + +HEAPF64[HEAP32[$4 >> 2] >> 3]);
  }
  HEAP32[$ell5 >> 2] = (HEAP32[$2 >> 2] | 0) + 2;
  while (1) {
   if ((HEAP32[$ell5 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$c1 >> 3] = +Math_sqrt(+((+(HEAP32[$ell5 >> 2] | 0) * 2.0 + 1.0) / (+(HEAP32[$ell5 >> 2] | 0) * 2.0 - 1.0) * (+((HEAP32[$ell5 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / +((HEAP32[$ell5 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0))));
   HEAPF64[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$ell5 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = -(+(HEAP32[$ell5 >> 2] | 0) * +HEAPF64[$3 >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell5 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] - +HEAPF64[$c1 >> 3] * +((HEAP32[$ell5 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0) * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell5 >> 2] | 0) - 1 - (HEAP32[$2 >> 2] | 0) << 3) >> 3]) / (+HEAPF64[$diff_a >> 3] * +HEAPF64[$diff_b >> 3]);
   HEAP32[$ell5 >> 2] = (HEAP32[$ell5 >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = 0;
  $205 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $205 | 0;
 }
 _gsl_error(53616, 53512, 673, 1);
 HEAP32[$0 >> 2] = 1;
 $205 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $205 | 0;
}
function _gsl_sf_mathieu_a($order, $qq, $result) {
 $order = $order | 0;
 $qq = +$qq;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $105 = 0.0, $115 = 0.0, $116 = 0.0, $118 = 0.0, $12 = 0.0, $122 = 0, $144 = 0, $2 = 0, $23 = 0, $25 = 0.0, $26 = 0, $3 = 0, $32 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0, $9 = 0, $91 = 0.0, $a1 = 0, $a2 = 0, $aa = 0, $aa_approx = 0, $aa_orig = 0, $counter = 0, $da = 0, $dela = 0, $dir = 0, $even_odd = 0, $fa = 0, $fa1 = 0, $ii = 0, $maxcount = 0, $nterms = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 108 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 104 | 0;
 $even_odd = sp + 100 | 0;
 $nterms = sp + 96 | 0;
 $ii = sp + 92 | 0;
 $counter = sp + 88 | 0;
 $maxcount = sp + 84 | 0;
 $dir = sp + 80 | 0;
 $a1 = sp + 64 | 0;
 $a2 = sp + 56 | 0;
 $fa = sp + 48 | 0;
 $fa1 = sp + 40 | 0;
 $dela = sp + 32 | 0;
 $aa_orig = sp + 24 | 0;
 $da = sp + 16 | 0;
 $aa = sp + 8 | 0;
 $aa_approx = sp;
 HEAP32[$1 >> 2] = $order;
 HEAPF64[$2 >> 3] = $qq;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$nterms >> 2] = 50;
 HEAP32[$counter >> 2] = 0;
 HEAP32[$maxcount >> 2] = 1e3;
 HEAP32[$dir >> 2] = 0;
 HEAPF64[$da >> 3] = .025;
 HEAP32[$even_odd >> 2] = 0;
 HEAP32[$even_odd >> 2] = ((HEAP32[$1 >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
 $9 = HEAP32[$1 >> 2] | 0;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  $12 = +(Math_imul($9, HEAP32[$1 >> 2] | 0) | 0);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $12;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $144 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $144 | 0;
 }
 if (($9 | 0) < 0) HEAP32[$1 >> 2] = Math_imul(HEAP32[$1 >> 2] | 0, -1) | 0;
 if (+HEAPF64[$2 >> 3] < 0.0) {
  $23 = HEAP32[$1 >> 2] | 0;
  $25 = -+HEAPF64[$2 >> 3];
  $26 = HEAP32[$3 >> 2] | 0;
  if (!(HEAP32[$even_odd >> 2] | 0)) {
   HEAP32[$0 >> 2] = _gsl_sf_mathieu_a($23, $25, $26) | 0;
   $144 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $144 | 0;
  } else {
   HEAP32[$0 >> 2] = _gsl_sf_mathieu_b($23, $25, $26) | 0;
   $144 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $144 | 0;
  }
 }
 HEAPF64[$aa_approx >> 3] = +_approx_c(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3]);
 $32 = +HEAPF64[$aa_approx >> 3];
 HEAPF64[$aa >> 3] = $32;
 HEAPF64[$aa_orig >> 3] = $32;
 while (1) {
  if ((HEAP32[$counter >> 2] | 0) >= (HEAP32[$maxcount >> 2] | 0)) break;
  HEAPF64[$a1 >> 3] = +HEAPF64[$aa >> 3] + .001;
  HEAP32[$ii >> 2] = 0;
  $40 = HEAP32[$1 >> 2] | 0;
  $41 = +HEAPF64[$2 >> 3];
  $42 = +HEAPF64[$a1 >> 3];
  $43 = HEAP32[$nterms >> 2] | 0;
  if (!(HEAP32[$even_odd >> 2] | 0)) HEAPF64[$fa1 >> 3] = +_ceer($40, $41, $42, $43); else HEAPF64[$fa1 >> 3] = +_ceor($40, $41, $42, $43);
  while (1) {
   $48 = HEAP32[$1 >> 2] | 0;
   $49 = +HEAPF64[$2 >> 3];
   $50 = +HEAPF64[$aa >> 3];
   $51 = HEAP32[$nterms >> 2] | 0;
   if (!(HEAP32[$even_odd >> 2] | 0)) HEAPF64[$fa >> 3] = +_ceer($48, $49, $50, $51); else HEAPF64[$fa >> 3] = +_ceor($48, $49, $50, $51);
   HEAPF64[$a2 >> 3] = +HEAPF64[$a1 >> 3];
   HEAPF64[$a1 >> 3] = +HEAPF64[$aa >> 3];
   if (+HEAPF64[$fa >> 3] == +HEAPF64[$fa1 >> 3]) {
    label = 18;
    break;
   }
   HEAPF64[$aa >> 3] = +HEAPF64[$aa >> 3] - (+HEAPF64[$aa >> 3] - +HEAPF64[$a2 >> 3]) / (+HEAPF64[$fa >> 3] - +HEAPF64[$fa1 >> 3]) * +HEAPF64[$fa >> 3];
   HEAPF64[$dela >> 3] = +Math_abs(+(+HEAPF64[$aa >> 3] - +HEAPF64[$a2 >> 3]));
   if (+HEAPF64[$dela >> 3] < 2.220446049250313e-16) {
    label = 20;
    break;
   }
   if ((HEAP32[$ii >> 2] | 0) > 40) {
    label = 22;
    break;
   }
   HEAPF64[$fa1 >> 3] = +HEAPF64[$fa >> 3];
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  if ((label | 0) == 18) {
   label = 0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  } else if ((label | 0) == 20) {
   label = 0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  } else if ((label | 0) == 22) {
   label = 0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$dela >> 3];
  }
  $91 = +Math_abs(+(+HEAPF64[$aa >> 3] - +HEAPF64[$aa_orig >> 3]));
  if (!($91 > +(HEAP32[$1 >> 2] | 0) * .01 * +Math_abs(+(+HEAPF64[$aa_orig >> 3])) + 3.0)) {
   if ((HEAP32[$1 >> 2] | 0) <= 10) break;
   $105 = +Math_abs(+(+HEAPF64[$aa >> 3] - +HEAPF64[$aa_orig >> 3]));
   if (!($105 > +(HEAP32[$1 >> 2] | 0) * 1.5)) break;
  }
  HEAP32[$counter >> 2] = (HEAP32[$counter >> 2] | 0) + 1;
  $115 = +HEAPF64[$aa >> 3];
  $116 = +HEAPF64[$aa_orig >> 3];
  if ((HEAP32[$counter >> 2] | 0) == (HEAP32[$maxcount >> 2] | 0)) {
   label = 28;
   break;
  }
  $122 = HEAP32[$dir >> 2] | 0;
  if ($115 > $116) {
   if (($122 | 0) == 1) HEAPF64[$da >> 3] = +HEAPF64[$da >> 3] / 2.0;
   HEAP32[$dir >> 2] = -1;
  } else {
   if (($122 | 0) == -1) HEAPF64[$da >> 3] = +HEAPF64[$da >> 3] / 2.0;
   HEAP32[$dir >> 2] = 1;
  }
  HEAPF64[$aa_approx >> 3] = +HEAPF64[$aa_approx >> 3] + +(HEAP32[$dir >> 2] | 0) * +HEAPF64[$da >> 3] * +(HEAP32[$counter >> 2] | 0);
  HEAPF64[$aa >> 3] = +HEAPF64[$aa_approx >> 3];
 }
 if ((label | 0) == 28) {
  $118 = +Math_abs(+($115 - $116));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $118;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$aa >> 3];
 if ((HEAP32[$counter >> 2] | 0) == (HEAP32[$maxcount >> 2] | 0)) {
  _gsl_error(54496, 54536, 489, 5);
  HEAP32[$0 >> 2] = 5;
  $144 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $144 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $144 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $144 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_Y_temme($nu, $x, $Ynu, $Ynup1) {
 $nu = +$nu;
 $x = +$x;
 $Ynu = $Ynu | 0;
 $Ynup1 = $Ynup1 | 0;
 var $0 = 0, $1 = 0, $149 = 0.0, $167 = 0.0, $184 = 0.0, $197 = 0, $2 = 0, $27 = 0.0, $3 = 0, $32 = 0.0, $35 = 0.0, $40 = 0.0, $43 = 0.0, $55 = 0.0, $57 = 0.0, $97 = 0.0, $alpha = 0, $ck = 0, $del0 = 0, $del1 = 0, $fk = 0, $g1 = 0, $g2 = 0, $g_1mnu = 0, $g_1pnu = 0, $gk = 0, $half_x = 0, $half_x_nu = 0, $hk = 0, $k = 0, $ln_half_x = 0, $pi_nu = 0, $pk = 0, $qk = 0, $sigma = 0, $sin_sqr = 0, $sinhalf = 0, $sinhrat = 0, $sinrat = 0, $stat_g = 0, $stat_iter = 0, $sum0 = 0, $sum1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 200 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 228 | 0;
 $3 = sp + 224 | 0;
 $half_x = sp + 184 | 0;
 $ln_half_x = sp + 176 | 0;
 $half_x_nu = sp + 168 | 0;
 $pi_nu = sp + 160 | 0;
 $alpha = sp + 152 | 0;
 $sigma = sp + 144 | 0;
 $sinrat = sp + 136 | 0;
 $sinhrat = sp + 128 | 0;
 $sinhalf = sp + 120 | 0;
 $sin_sqr = sp + 112 | 0;
 $sum0 = sp + 104 | 0;
 $sum1 = sp + 96 | 0;
 $fk = sp + 88 | 0;
 $pk = sp + 80 | 0;
 $qk = sp + 72 | 0;
 $hk = sp + 64 | 0;
 $ck = sp + 56 | 0;
 $k = sp + 216 | 0;
 $stat_iter = sp + 212 | 0;
 $g_1pnu = sp + 48 | 0;
 $g_1mnu = sp + 40 | 0;
 $g1 = sp + 32 | 0;
 $g2 = sp + 24 | 0;
 $stat_g = sp + 208 | 0;
 $del0 = sp + 16 | 0;
 $del1 = sp + 8 | 0;
 $gk = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $Ynu;
 HEAP32[$3 >> 2] = $Ynup1;
 HEAP32[sp + 220 >> 2] = 15e3;
 HEAPF64[$half_x >> 3] = +HEAPF64[$1 >> 3] * .5;
 HEAPF64[$ln_half_x >> 3] = +Math_log(+(+HEAPF64[$half_x >> 3]));
 HEAPF64[$half_x_nu >> 3] = +Math_exp(+(+HEAPF64[$0 >> 3] * +HEAPF64[$ln_half_x >> 3]));
 HEAPF64[$pi_nu >> 3] = +HEAPF64[$0 >> 3] * 3.141592653589793;
 HEAPF64[$alpha >> 3] = +HEAPF64[$pi_nu >> 3] / 2.0;
 HEAPF64[$sigma >> 3] = -+HEAPF64[$0 >> 3] * +HEAPF64[$ln_half_x >> 3];
 if (+Math_abs(+(+HEAPF64[$pi_nu >> 3])) < 2.220446049250313e-16) $27 = 1.0; else $27 = +HEAPF64[$pi_nu >> 3] / +Math_sin(+(+HEAPF64[$pi_nu >> 3]));
 HEAPF64[$sinrat >> 3] = $27;
 if (+Math_abs(+(+HEAPF64[$sigma >> 3])) < 2.220446049250313e-16) $35 = 1.0; else {
  $32 = +_sinh(+(+HEAPF64[$sigma >> 3]));
  $35 = $32 / +HEAPF64[$sigma >> 3];
 }
 HEAPF64[$sinhrat >> 3] = $35;
 if (+Math_abs(+(+HEAPF64[$alpha >> 3])) < 2.220446049250313e-16) $43 = 1.0; else {
  $40 = +Math_sin(+(+HEAPF64[$alpha >> 3]));
  $43 = $40 / +HEAPF64[$alpha >> 3];
 }
 HEAPF64[$sinhalf >> 3] = $43;
 HEAPF64[$sin_sqr >> 3] = +HEAPF64[$0 >> 3] * 3.141592653589793 * 3.141592653589793 * .5 * +HEAPF64[$sinhalf >> 3] * +HEAPF64[$sinhalf >> 3];
 HEAP32[$k >> 2] = 0;
 HEAP32[$stat_g >> 2] = _gsl_sf_temme_gamma(+HEAPF64[$0 >> 3], $g_1pnu, $g_1mnu, $g1, $g2) | 0;
 $55 = +HEAPF64[$sinrat >> 3] * .6366197723675814;
 $57 = +_cosh(+(+HEAPF64[$sigma >> 3]));
 HEAPF64[$fk >> 3] = $55 * ($57 * +HEAPF64[$g1 >> 3] - +HEAPF64[$sinhrat >> 3] * +HEAPF64[$ln_half_x >> 3] * +HEAPF64[$g2 >> 3]);
 HEAPF64[$pk >> 3] = .3183098861837907 / +HEAPF64[$half_x_nu >> 3] * +HEAPF64[$g_1pnu >> 3];
 HEAPF64[$qk >> 3] = +HEAPF64[$half_x_nu >> 3] * .3183098861837907 * +HEAPF64[$g_1mnu >> 3];
 HEAPF64[$hk >> 3] = +HEAPF64[$pk >> 3];
 HEAPF64[$ck >> 3] = 1.0;
 HEAPF64[$sum0 >> 3] = +HEAPF64[$fk >> 3] + +HEAPF64[$sin_sqr >> 3] * +HEAPF64[$qk >> 3];
 HEAPF64[$sum1 >> 3] = +HEAPF64[$pk >> 3];
 do {
  if ((HEAP32[$k >> 2] | 0) >= 15e3) break;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  $97 = +(Math_imul(HEAP32[$k >> 2] | 0, HEAP32[$k >> 2] | 0) | 0);
  HEAPF64[$fk >> 3] = (+(HEAP32[$k >> 2] | 0) * +HEAPF64[$fk >> 3] + +HEAPF64[$pk >> 3] + +HEAPF64[$qk >> 3]) / ($97 - +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]);
  HEAPF64[$ck >> 3] = +HEAPF64[$ck >> 3] * (-+HEAPF64[$half_x >> 3] * +HEAPF64[$half_x >> 3] / +(HEAP32[$k >> 2] | 0));
  HEAPF64[$pk >> 3] = +HEAPF64[$pk >> 3] / (+(HEAP32[$k >> 2] | 0) - +HEAPF64[$0 >> 3]);
  HEAPF64[$qk >> 3] = +HEAPF64[$qk >> 3] / (+(HEAP32[$k >> 2] | 0) + +HEAPF64[$0 >> 3]);
  HEAPF64[$gk >> 3] = +HEAPF64[$fk >> 3] + +HEAPF64[$sin_sqr >> 3] * +HEAPF64[$qk >> 3];
  HEAPF64[$hk >> 3] = +(0 - (HEAP32[$k >> 2] | 0) | 0) * +HEAPF64[$gk >> 3] + +HEAPF64[$pk >> 3];
  HEAPF64[$del0 >> 3] = +HEAPF64[$ck >> 3] * +HEAPF64[$gk >> 3];
  HEAPF64[$del1 >> 3] = +HEAPF64[$ck >> 3] * +HEAPF64[$hk >> 3];
  HEAPF64[$sum0 >> 3] = +HEAPF64[$sum0 >> 3] + +HEAPF64[$del0 >> 3];
  HEAPF64[$sum1 >> 3] = +HEAPF64[$sum1 >> 3] + +HEAPF64[$del1 >> 3];
  $149 = +Math_abs(+(+HEAPF64[$del0 >> 3]));
 } while (!($149 < (+Math_abs(+(+HEAPF64[$sum0 >> 3])) + 1.0) * .5 * 2.220446049250313e-16));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$sum0 >> 3];
 $167 = (+(HEAP32[$k >> 2] | 0) * .5 + 2.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $167;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[$sum1 >> 3] * 2.0 / +HEAPF64[$1 >> 3];
 $184 = (+(HEAP32[$k >> 2] | 0) * .5 + 2.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $184;
 HEAP32[$stat_iter >> 2] = (HEAP32[$k >> 2] | 0) >= 15e3 ? 11 : 0;
 if (HEAP32[$stat_iter >> 2] | 0) {
  $197 = HEAP32[$stat_iter >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 } else {
  $197 = (HEAP32[$stat_g >> 2] | 0) != 0 ? HEAP32[$stat_g >> 2] | 0 : 0;
  STACKTOP = sp;
  return $197 | 0;
 }
 return 0;
}
function _legendre_Ql_asymp_unif($ell, $x, $result) {
 $ell = +$ell;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $104 = 0, $170 = 0.0, $175 = 0.0, $181 = 0.0, $183 = 0, $196 = 0, $197 = 0, $2 = 0, $3 = 0, $68 = 0.0, $7 = 0.0, $76 = 0.0, $83 = 0, $89 = 0.0, $91 = 0, $B00 = 0, $B003 = 0, $K0_scaled = 0, $K1_scaled = 0, $Y0 = 0, $Y1 = 0, $cot_th = 0, $coth_xi = 0, $pre = 0, $pre2 = 0, $sin_th = 0, $sinh_xi = 0, $stat_K0 = 0, $stat_K1 = 0, $stat_Y0 = 0, $stat_Y1 = 0, $stat_e = 0, $stat_m = 0, $sum = 0, $sum4 = 0, $th = 0, $u = 0, $u1 = 0, $xi = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 220 | 0;
 $1 = sp + 184 | 0;
 $2 = sp + 176 | 0;
 $3 = sp + 216 | 0;
 $u = sp + 168 | 0;
 $th = sp + 160 | 0;
 $Y0 = sp + 144 | 0;
 $Y1 = sp + 128 | 0;
 $stat_Y0 = sp + 212 | 0;
 $stat_Y1 = sp + 208 | 0;
 $stat_m = sp + 204 | 0;
 $pre = sp + 120 | 0;
 $B00 = sp + 112 | 0;
 $sum = sp + 104 | 0;
 $sin_th = sp + 96 | 0;
 $cot_th = sp + 88 | 0;
 $u1 = sp + 80 | 0;
 $xi = sp + 72 | 0;
 $K0_scaled = sp + 56 | 0;
 $K1_scaled = sp + 40 | 0;
 $stat_K0 = sp + 200 | 0;
 $stat_K1 = sp + 196 | 0;
 $stat_e = sp + 192 | 0;
 $pre2 = sp + 32 | 0;
 $B003 = sp + 24 | 0;
 $sum4 = sp + 16 | 0;
 $sinh_xi = sp + 8 | 0;
 $coth_xi = sp;
 HEAPF64[$1 >> 3] = $ell;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 $7 = +HEAPF64[$1 >> 3] + .5;
 if (+HEAPF64[$2 >> 3] < 1.0) {
  HEAPF64[$u >> 3] = $7;
  HEAPF64[$th >> 3] = +Math_acos(+(+HEAPF64[$2 >> 3]));
  if (+HEAPF64[$th >> 3] < .0001220703125) {
   HEAPF64[$B00 >> 3] = (+HEAPF64[$th >> 3] * +HEAPF64[$th >> 3] / 15.0 + 1.0) / 24.0;
   HEAPF64[$pre >> 3] = +HEAPF64[$th >> 3] * +HEAPF64[$th >> 3] / 12.0 + 1.0;
  } else {
   HEAPF64[$sin_th >> 3] = +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]));
   HEAPF64[$cot_th >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$sin_th >> 3];
   HEAPF64[$B00 >> 3] = (1.0 - +HEAPF64[$th >> 3] * +HEAPF64[$cot_th >> 3]) * .125 / (+HEAPF64[$th >> 3] * +HEAPF64[$th >> 3]);
   HEAPF64[$pre >> 3] = +Math_sqrt(+(+HEAPF64[$th >> 3] / +HEAPF64[$sin_th >> 3]));
  }
  HEAP32[$stat_Y0 >> 2] = _gsl_sf_bessel_Y0_e(+HEAPF64[$u >> 3] * +HEAPF64[$th >> 3], $Y0) | 0;
  HEAP32[$stat_Y1 >> 2] = _gsl_sf_bessel_Y1_e(+HEAPF64[$u >> 3] * +HEAPF64[$th >> 3], $Y1) | 0;
  HEAPF64[$sum >> 3] = (+HEAPF64[$Y0 >> 3] + +HEAPF64[$th >> 3] / +HEAPF64[$u >> 3] * +HEAPF64[$Y1 >> 3] * +HEAPF64[$B00 >> 3]) * -1.5707963267948966;
  HEAP32[$stat_m >> 2] = _gsl_sf_multiply_e(+HEAPF64[$pre >> 3], +HEAPF64[$sum >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $68 = +Math_abs(+(+HEAPF64[$pre >> 3])) * 1.5707963267948966;
  $76 = +Math_abs(+(+HEAPF64[$th >> 3] / +HEAPF64[$u >> 3] * +HEAPF64[$B00 >> 3]));
  $83 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$83 >> 3] = +HEAPF64[$83 >> 3] + $68 * (+HEAPF64[$Y0 + 8 >> 3] + $76 * +HEAPF64[$Y1 + 8 >> 3]);
  $89 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $91 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$91 >> 3] = +HEAPF64[$91 >> 3] + $89;
  do if (HEAP32[$stat_m >> 2] | 0) $104 = HEAP32[$stat_m >> 2] | 0; else if (HEAP32[$stat_Y0 >> 2] | 0) {
   $104 = HEAP32[$stat_Y0 >> 2] | 0;
   break;
  } else {
   $104 = (HEAP32[$stat_Y1 >> 2] | 0) != 0 ? HEAP32[$stat_Y1 >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$0 >> 2] = $104;
  $197 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 } else {
  HEAPF64[$u1 >> 3] = $7;
  HEAPF64[$xi >> 3] = +_acosh(+(+HEAPF64[$2 >> 3]));
  if (+HEAPF64[$xi >> 3] < .0001220703125) {
   HEAPF64[$B003 >> 3] = (1.0 - +HEAPF64[$xi >> 3] * +HEAPF64[$xi >> 3] / 15.0) / 24.0;
   HEAPF64[$pre2 >> 3] = 1.0 - +HEAPF64[$xi >> 3] * +HEAPF64[$xi >> 3] / 12.0;
  } else {
   HEAPF64[$sinh_xi >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] - 1.0));
   HEAPF64[$coth_xi >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$sinh_xi >> 3];
   HEAPF64[$B003 >> 3] = (1.0 - +HEAPF64[$xi >> 3] * +HEAPF64[$coth_xi >> 3]) * -.125 / (+HEAPF64[$xi >> 3] * +HEAPF64[$xi >> 3]);
   HEAPF64[$pre2 >> 3] = +Math_sqrt(+(+HEAPF64[$xi >> 3] / +HEAPF64[$sinh_xi >> 3]));
  }
  HEAP32[$stat_K0 >> 2] = _gsl_sf_bessel_K0_scaled_e(+HEAPF64[$u1 >> 3] * +HEAPF64[$xi >> 3], $K0_scaled) | 0;
  HEAP32[$stat_K1 >> 2] = _gsl_sf_bessel_K1_scaled_e(+HEAPF64[$u1 >> 3] * +HEAPF64[$xi >> 3], $K1_scaled) | 0;
  HEAPF64[$sum4 >> 3] = +HEAPF64[$K0_scaled >> 3] - +HEAPF64[$xi >> 3] / +HEAPF64[$u1 >> 3] * +HEAPF64[$K1_scaled >> 3] * +HEAPF64[$B003 >> 3];
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_e(-+HEAPF64[$u1 >> 3] * +HEAPF64[$xi >> 3], +HEAPF64[$pre2 >> 3] * +HEAPF64[$sum4 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $170 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $175 = $170 * +Math_abs(+(+HEAPF64[$u1 >> 3] * +HEAPF64[$xi >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $175;
  $181 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $183 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$183 >> 3] = +HEAPF64[$183 >> 3] + $181;
  do if (HEAP32[$stat_e >> 2] | 0) $196 = HEAP32[$stat_e >> 2] | 0; else if (HEAP32[$stat_K0 >> 2] | 0) {
   $196 = HEAP32[$stat_K0 >> 2] | 0;
   break;
  } else {
   $196 = (HEAP32[$stat_K1 >> 2] | 0) != 0 ? HEAP32[$stat_K1 >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$0 >> 2] = $196;
  $197 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 }
 return 0;
}
function _gsl_sf_transport_5_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $107 = 0.0, $125 = 0.0, $134 = 0.0, $149 = 0.0, $15 = 0.0, $156 = 0, $2 = 0, $34 = 0.0, $59 = 0.0, $61 = 0, $65 = 0.0, $72 = 0.0, $77 = 0.0, $95 = 0.0, $et = 0, $et5 = 0, $et7 = 0, $numexp = 0, $numexp2 = 0, $result_c = 0, $sumexp = 0, $sumexp3 = 0, $t = 0, $t1 = 0, $t4 = 0, $t6 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 120 | 0;
 $x2 = sp + 88 | 0;
 $t = sp + 80 | 0;
 $result_c = sp + 64 | 0;
 $numexp = sp + 116 | 0;
 $sumexp = sp + 56 | 0;
 $t1 = sp + 48 | 0;
 $et = sp + 40 | 0;
 $numexp2 = sp + 112 | 0;
 $sumexp3 = sp + 32 | 0;
 $t4 = sp + 24 | 0;
 $et5 = sp + 16 | 0;
 $t6 = sp + 8 | 0;
 $et7 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 96 >> 3] = 124.4313306172044;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(60608, 60624, 402, 1);
  HEAP32[$0 >> 2] = 1;
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.470348358154297e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $15 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 4.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 8.881784197001252e-16;
  if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(60640, 60624, 412, 15);
   HEAP32[$0 >> 2] = 15;
   $156 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $156 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $156 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $156 | 0;
  }
 }
 $34 = +HEAPF64[$1 >> 3];
 if ($15 <= 4.0) {
  HEAPF64[$x2 >> 3] = $34 * +HEAPF64[$1 >> 3];
  HEAPF64[$t >> 3] = +HEAPF64[$x2 >> 3] / 8.0 - .5 - .5;
  _cheb_eval_e626(60960, +HEAPF64[$t >> 3], $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$x2 >> 3] * +HEAPF64[$result_c >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$x2 >> 3] * +HEAPF64[$result_c + 8 >> 3];
  $59 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $61 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$61 >> 3] = +HEAPF64[$61 >> 3] + $59;
  HEAP32[$0 >> 2] = 0;
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 }
 $65 = +HEAPF64[$1 >> 3];
 if ($34 < 36.04365338911715) {
  HEAP32[$numexp >> 2] = ~~(36.04365338911715 / $65) + 1;
  $72 = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$sumexp >> 3] = +_transport_sumexp(HEAP32[$numexp >> 2] | 0, 5, $72, +HEAPF64[$1 >> 3]);
  $77 = +Math_log(+(+HEAPF64[$1 >> 3])) * 5.0;
  HEAPF64[$t1 >> 3] = $77 - +HEAPF64[$1 >> 3] + +Math_log(+(+HEAPF64[$sumexp >> 3]));
  if (+HEAPF64[$t1 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 124.4313306172044;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 5.5258611294386204e-14;
  } else {
   HEAPF64[$et >> 3] = +Math_exp(+(+HEAPF64[$t1 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 124.4313306172044 - +HEAPF64[$et >> 3];
   $95 = +Math_abs(+(+HEAPF64[$t1 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($95 * +HEAPF64[$et >> 3] + 124.4313306172044) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 }
 if ($65 < 13510798882111488.0) {
  HEAP32[$numexp2 >> 2] = 1;
  HEAPF64[$sumexp3 >> 3] = +_transport_sumexp(1, 5, 1.0, +HEAPF64[$1 >> 3]);
  $107 = +Math_log(+(+HEAPF64[$1 >> 3])) * 5.0;
  HEAPF64[$t4 >> 3] = $107 - +HEAPF64[$1 >> 3] + +Math_log(+(+HEAPF64[$sumexp3 >> 3]));
  if (+HEAPF64[$t4 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 124.4313306172044;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 5.5258611294386204e-14;
  } else {
   HEAPF64[$et5 >> 3] = +Math_exp(+(+HEAPF64[$t4 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 124.4313306172044 - +HEAPF64[$et5 >> 3];
   $125 = +Math_abs(+(+HEAPF64[$t4 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($125 * +HEAPF64[$et5 >> 3] + 124.4313306172044) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 } else {
  $134 = +Math_log(+(+HEAPF64[$1 >> 3])) * 5.0;
  HEAPF64[$t6 >> 3] = $134 - +HEAPF64[$1 >> 3];
  if (+HEAPF64[$t6 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 124.4313306172044;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 5.5258611294386204e-14;
  } else {
   HEAPF64[$et7 >> 3] = +Math_exp(+(+HEAPF64[$t6 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 124.4313306172044 - +HEAPF64[$et7 >> 3];
   $149 = +Math_abs(+(+HEAPF64[$t6 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($149 * +HEAPF64[$et7 >> 3] + 124.4313306172044) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 }
 return 0;
}
function _gsl_sf_transport_4_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $105 = 0.0, $123 = 0.0, $132 = 0.0, $147 = 0.0, $15 = 0.0, $154 = 0, $2 = 0, $32 = 0.0, $57 = 0.0, $59 = 0, $63 = 0.0, $70 = 0.0, $75 = 0.0, $93 = 0.0, $et = 0, $et5 = 0, $et7 = 0, $numexp = 0, $numexp2 = 0, $result_c = 0, $sumexp = 0, $sumexp3 = 0, $t = 0, $t1 = 0, $t4 = 0, $t6 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 120 | 0;
 $x2 = sp + 88 | 0;
 $t = sp + 80 | 0;
 $result_c = sp + 64 | 0;
 $numexp = sp + 116 | 0;
 $sumexp = sp + 56 | 0;
 $t1 = sp + 48 | 0;
 $et = sp + 40 | 0;
 $numexp2 = sp + 112 | 0;
 $sumexp3 = sp + 32 | 0;
 $t4 = sp + 24 | 0;
 $et5 = sp + 16 | 0;
 $t6 = sp + 8 | 0;
 $et7 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 96 >> 3] = 25.975757609067315;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(60608, 60624, 325, 1);
  HEAP32[$0 >> 2] = 1;
  $154 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $154 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $154 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $154 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.470348358154297e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $15 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 3.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 6.661338147750939e-16;
  if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(60640, 60624, 335, 15);
   HEAP32[$0 >> 2] = 15;
   $154 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $154 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $154 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $154 | 0;
  }
 }
 $32 = +HEAPF64[$1 >> 3];
 if ($15 <= 4.0) {
  HEAPF64[$x2 >> 3] = $32 * +HEAPF64[$1 >> 3];
  HEAPF64[$t >> 3] = +HEAPF64[$x2 >> 3] / 8.0 - .5 - .5;
  _cheb_eval_e626(61136, +HEAPF64[$t >> 3], $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$result_c >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$result_c + 8 >> 3];
  $57 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $59 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$59 >> 3] = +HEAPF64[$59 >> 3] + $57;
  HEAP32[$0 >> 2] = 0;
  $154 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $154 | 0;
 }
 $63 = +HEAPF64[$1 >> 3];
 if ($32 < 36.04365338911715) {
  HEAP32[$numexp >> 2] = ~~(36.04365338911715 / $63) + 1;
  $70 = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$sumexp >> 3] = +_transport_sumexp(HEAP32[$numexp >> 2] | 0, 4, $70, +HEAPF64[$1 >> 3]);
  $75 = +Math_log(+(+HEAPF64[$1 >> 3])) * 4.0;
  HEAPF64[$t1 >> 3] = $75 - +HEAPF64[$1 >> 3] + +Math_log(+(+HEAPF64[$sumexp >> 3]));
  if (+HEAPF64[$t1 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 25.975757609067315;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 1.1535553671867456e-14;
  } else {
   HEAPF64[$et >> 3] = +Math_exp(+(+HEAPF64[$t1 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 25.975757609067315 - +HEAPF64[$et >> 3];
   $93 = +Math_abs(+(+HEAPF64[$t1 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($93 * +HEAPF64[$et >> 3] + 25.975757609067315) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $154 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $154 | 0;
 }
 if ($63 < 13510798882111488.0) {
  HEAP32[$numexp2 >> 2] = 1;
  HEAPF64[$sumexp3 >> 3] = +_transport_sumexp(1, 4, 1.0, +HEAPF64[$1 >> 3]);
  $105 = +Math_log(+(+HEAPF64[$1 >> 3])) * 4.0;
  HEAPF64[$t4 >> 3] = $105 - +HEAPF64[$1 >> 3] + +Math_log(+(+HEAPF64[$sumexp3 >> 3]));
  if (+HEAPF64[$t4 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 25.975757609067315;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 1.1535553671867456e-14;
  } else {
   HEAPF64[$et5 >> 3] = +Math_exp(+(+HEAPF64[$t4 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 25.975757609067315 - +HEAPF64[$et5 >> 3];
   $123 = +Math_abs(+(+HEAPF64[$t4 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($123 * +HEAPF64[$et5 >> 3] + 25.975757609067315) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $154 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $154 | 0;
 } else {
  $132 = +Math_log(+(+HEAPF64[$1 >> 3])) * 4.0;
  HEAPF64[$t6 >> 3] = $132 - +HEAPF64[$1 >> 3];
  if (+HEAPF64[$t6 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 25.975757609067315;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 1.1535553671867456e-14;
  } else {
   HEAPF64[$et7 >> 3] = +Math_exp(+(+HEAPF64[$t6 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 25.975757609067315 - +HEAPF64[$et7 >> 3];
   $147 = +Math_abs(+(+HEAPF64[$t6 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($147 * +HEAPF64[$et7 >> 3] + 25.975757609067315) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $154 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $154 | 0;
 }
 return 0;
}
function _gsl_sf_conicalP_large_x_e($mu, $tau, $x, $result, $ln_multiplier) {
 $mu = +$mu;
 $tau = +$tau;
 $x = +$x;
 $result = $result | 0;
 $ln_multiplier = $ln_multiplier | 0;
 var $0 = 0, $1 = 0, $103 = 0.0, $12 = 0.0, $148 = 0.0, $150 = 0, $156 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $55 = 0.0, $59 = 0.0, $61 = 0.0, $88 = 0, $angle = 0, $cos_result = 0, $imF = 0, $lgr_den = 0, $lgr_num = 0, $lgth_den = 0, $lgth_num = 0, $lnFf_err = 0, $lnFf_val = 0, $lnnoc_err = 0, $lnnoc_val = 0, $lnpre_comm = 0, $lnpre_const = 0, $lnpre_err = 0, $lnx = 0, $lnxm1 = 0, $lnxp1 = 0, $reF = 0, $stat_F = 0, $stat_cos = 0, $stat_e = 0, $stat_gd = 0, $stat_gn = 0, $status = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $0 = sp + 248 | 0;
 $1 = sp + 208 | 0;
 $2 = sp + 200 | 0;
 $3 = sp + 192 | 0;
 $4 = sp + 244 | 0;
 $5 = sp + 240 | 0;
 $y = sp + 184 | 0;
 $reF = sp + 176 | 0;
 $imF = sp + 168 | 0;
 $stat_F = sp + 236 | 0;
 $lgr_num = sp + 152 | 0;
 $lgth_num = sp + 136 | 0;
 $lgr_den = sp + 120 | 0;
 $lgth_den = sp + 104 | 0;
 $stat_gn = sp + 232 | 0;
 $stat_gd = sp + 228 | 0;
 $angle = sp + 96 | 0;
 $lnx = sp + 88 | 0;
 $lnxp1 = sp + 80 | 0;
 $lnxm1 = sp + 72 | 0;
 $lnpre_const = sp + 64 | 0;
 $lnpre_comm = sp + 56 | 0;
 $lnpre_err = sp + 48 | 0;
 $cos_result = sp + 32 | 0;
 $stat_cos = sp + 224 | 0;
 $status = sp + 220 | 0;
 $lnFf_val = sp + 24 | 0;
 $lnFf_err = sp + 16 | 0;
 $lnnoc_val = sp + 8 | 0;
 $lnnoc_err = sp;
 $stat_e = sp + 216 | 0;
 HEAPF64[$1 >> 3] = $mu;
 HEAPF64[$2 >> 3] = $tau;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$5 >> 2] = $ln_multiplier;
 if (+HEAPF64[$3 >> 3] < 6.703903964971298e+153) $12 = 1.0 / (+HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3]); else $12 = 0.0;
 HEAPF64[$y >> 3] = $12;
 HEAP32[$stat_F >> 2] = _conicalP_hyperg_large_x(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$y >> 3], $reF, $imF) | 0;
 HEAP32[$stat_gn >> 2] = _gsl_sf_lngamma_complex_e(0.0, +HEAPF64[$2 >> 3], $lgr_num, $lgth_num) | 0;
 HEAP32[$stat_gd >> 2] = _gsl_sf_lngamma_complex_e(.5 - +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $lgr_den, $lgth_den) | 0;
 HEAPF64[$angle >> 3] = +HEAPF64[$lgth_num >> 3] - +HEAPF64[$lgth_den >> 3] + +Math_atan2(+(+HEAPF64[$imF >> 3]), +(+HEAPF64[$reF >> 3]));
 HEAPF64[$lnx >> 3] = +Math_log(+(+HEAPF64[$3 >> 3]));
 HEAPF64[$lnxp1 >> 3] = +Math_log(+(+HEAPF64[$3 >> 3] + 1.0));
 HEAPF64[$lnxm1 >> 3] = +Math_log(+(+HEAPF64[$3 >> 3] - 1.0));
 HEAPF64[$lnpre_const >> 3] = -.22579135264472744;
 HEAPF64[$lnpre_comm >> 3] = (+HEAPF64[$1 >> 3] - .5) * +HEAPF64[$lnx >> 3] - +HEAPF64[$1 >> 3] * .5 * (+HEAPF64[$lnxp1 >> 3] + +HEAPF64[$lnxm1 >> 3]);
 $55 = +Math_abs(+((+HEAPF64[$1 >> 3] - .5) * +HEAPF64[$lnx >> 3])) * 2.220446049250313e-16 + 2.040453435558193e-16;
 $59 = +Math_abs(+(+HEAPF64[$1 >> 3] * .5)) * 2.220446049250313e-16;
 $61 = +Math_abs(+(+HEAPF64[$lnxp1 >> 3]));
 HEAPF64[$lnpre_err >> 3] = $55 + $59 * ($61 + +Math_abs(+(+HEAPF64[$lnxm1 >> 3])));
 HEAP32[$stat_cos >> 2] = _gsl_sf_cos_e(+HEAPF64[$angle >> 3] + +HEAPF64[$2 >> 3] * (+Math_log(+(+HEAPF64[$3 >> 3])) + .6931471805599453), $cos_result) | 0;
 do if (HEAP32[$stat_cos >> 2] | 0) $88 = HEAP32[$stat_cos >> 2] | 0; else {
  if (HEAP32[$stat_gd >> 2] | 0) {
   $88 = HEAP32[$stat_gd >> 2] | 0;
   break;
  }
  if (HEAP32[$stat_gn >> 2] | 0) {
   $88 = HEAP32[$stat_gn >> 2] | 0;
   break;
  } else {
   $88 = (HEAP32[$stat_F >> 2] | 0) != 0 ? HEAP32[$stat_F >> 2] | 0 : 0;
   break;
  }
 } while (0);
 HEAP32[$status >> 2] = $88;
 if (+HEAPF64[$cos_result >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 }
 $103 = +Math_log(+(+HEAPF64[$reF >> 3] * +HEAPF64[$reF >> 3] + +HEAPF64[$imF >> 3] * +HEAPF64[$imF >> 3])) * .5;
 HEAPF64[$lnFf_val >> 3] = $103 + +HEAPF64[$lgr_num >> 3] - +HEAPF64[$lgr_den >> 3];
 HEAPF64[$lnFf_err >> 3] = +HEAPF64[$lgr_num + 8 >> 3] + +HEAPF64[$lgr_den + 8 >> 3] + +Math_abs(+(+HEAPF64[$lnFf_val >> 3])) * 2.220446049250313e-16;
 HEAPF64[$lnnoc_val >> 3] = +HEAPF64[$lnpre_const >> 3] + +HEAPF64[$lnpre_comm >> 3] + +HEAPF64[$lnFf_val >> 3];
 HEAPF64[$lnnoc_err >> 3] = +HEAPF64[$lnpre_err >> 3] + +HEAPF64[$lnFf_err >> 3] + +Math_abs(+(+HEAPF64[$lnnoc_val >> 3])) * 2.220446049250313e-16;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnnoc_val >> 3], +HEAPF64[$lnnoc_err >> 3], +HEAPF64[$cos_result >> 3], +HEAPF64[$cos_result + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 if (!(HEAP32[$stat_e >> 2] | 0)) HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0; else {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$cos_result >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$cos_result + 8 >> 3];
  $148 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $150 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$150 >> 3] = +HEAPF64[$150 >> 3] + $148;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$lnnoc_val >> 3];
 }
 HEAP32[$0 >> 2] = HEAP32[$status >> 2];
 $156 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $156 | 0;
}
function _gsl_sf_transport_3_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $116 = 0.0, $125 = 0.0, $140 = 0.0, $147 = 0, $15 = 0.0, $2 = 0, $30 = 0.0, $51 = 0.0, $53 = 0, $57 = 0.0, $64 = 0.0, $69 = 0.0, $86 = 0.0, $98 = 0.0, $et = 0, $et5 = 0, $et7 = 0, $numexp = 0, $numexp2 = 0, $result_c = 0, $sumexp = 0, $sumexp3 = 0, $t = 0, $t1 = 0, $t4 = 0, $t6 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 120 | 0;
 $x2 = sp + 88 | 0;
 $t = sp + 80 | 0;
 $result_c = sp + 64 | 0;
 $numexp = sp + 116 | 0;
 $sumexp = sp + 56 | 0;
 $t1 = sp + 48 | 0;
 $et = sp + 40 | 0;
 $numexp2 = sp + 112 | 0;
 $sumexp3 = sp + 32 | 0;
 $t4 = sp + 24 | 0;
 $et5 = sp + 16 | 0;
 $t6 = sp + 8 | 0;
 $et7 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 96 >> 3] = 7.212341418957566;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(60608, 60624, 248, 1);
  HEAP32[$0 >> 2] = 1;
  $147 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $147 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $147 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $147 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.470348358154297e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = .5 * $15 * +HEAPF64[$1 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 4.440892098500626e-16;
  if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(60640, 60624, 258, 15);
   HEAP32[$0 >> 2] = 15;
   $147 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $147 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $147 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $147 | 0;
  }
 }
 $30 = +HEAPF64[$1 >> 3];
 if ($15 <= 4.0) {
  HEAPF64[$x2 >> 3] = $30 * +HEAPF64[$1 >> 3];
  HEAPF64[$t >> 3] = +HEAPF64[$x2 >> 3] / 8.0 - .5 - .5;
  _cheb_eval_e626(61312, +HEAPF64[$t >> 3], $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$result_c >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$result_c + 8 >> 3];
  $51 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  $53 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$53 >> 3] = +HEAPF64[$53 >> 3] + $51;
  HEAP32[$0 >> 2] = 0;
  $147 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $147 | 0;
 }
 $57 = +HEAPF64[$1 >> 3];
 if ($30 < 36.04365338911715) {
  HEAP32[$numexp >> 2] = ~~(36.04365338911715 / $57) + 1;
  $64 = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$sumexp >> 3] = +_transport_sumexp(HEAP32[$numexp >> 2] | 0, 3, $64, +HEAPF64[$1 >> 3]);
  $69 = +Math_log(+(+HEAPF64[$1 >> 3])) * 3.0;
  HEAPF64[$t1 >> 3] = $69 - +HEAPF64[$1 >> 3] + +Math_log(+(+HEAPF64[$sumexp >> 3]));
  if (+HEAPF64[$t1 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 7.212341418957566;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 3.202923001913745e-15;
  } else {
   HEAPF64[$et >> 3] = +Math_exp(+(+HEAPF64[$t1 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 7.212341418957566 - +HEAPF64[$et >> 3];
   $86 = +Math_abs(+(+HEAPF64[$t1 >> 3]));
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($86 * +HEAPF64[$et >> 3] + 7.212341418957566) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $147 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $147 | 0;
 }
 if ($57 < 13510798882111488.0) {
  HEAP32[$numexp2 >> 2] = 1;
  HEAPF64[$sumexp3 >> 3] = +_transport_sumexp(1, 3, 1.0, +HEAPF64[$1 >> 3]);
  $98 = +Math_log(+(+HEAPF64[$1 >> 3])) * 3.0;
  HEAPF64[$t4 >> 3] = $98 - +HEAPF64[$1 >> 3] + +Math_log(+(+HEAPF64[$sumexp3 >> 3]));
  if (+HEAPF64[$t4 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 7.212341418957566;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 3.202923001913745e-15;
  } else {
   HEAPF64[$et5 >> 3] = +Math_exp(+(+HEAPF64[$t4 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 7.212341418957566 - +HEAPF64[$et5 >> 3];
   $116 = +Math_abs(+(+HEAPF64[$t4 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($116 * +HEAPF64[$et5 >> 3] + 7.212341418957566) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $147 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $147 | 0;
 } else {
  $125 = +Math_log(+(+HEAPF64[$1 >> 3])) * 3.0;
  HEAPF64[$t6 >> 3] = $125 - +HEAPF64[$1 >> 3];
  if (+HEAPF64[$t6 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 7.212341418957566;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 3.202923001913745e-15;
  } else {
   HEAPF64[$et7 >> 3] = +Math_exp(+(+HEAPF64[$t6 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 7.212341418957566 - +HEAPF64[$et7 >> 3];
   $140 = +Math_abs(+(+HEAPF64[$t6 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($140 * +HEAPF64[$et7 >> 3] + 7.212341418957566) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $147 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $147 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_kl_scaled_e($l, $x, $result) {
 $l = $l | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $104 = 0, $134 = 0.0, $139 = 0.0, $146 = 0.0, $152 = 0.0, $154 = 0, $164 = 0, $165 = 0, $2 = 0, $23 = 0.0, $3 = 0, $35 = 0, $41 = 0, $51 = 0, $56 = 0, $64 = 0.0, $69 = 0.0, $80 = 0.0, $88 = 0.0, $99 = 0, $bk = 0, $bkm = 0, $bkp = 0, $j = 0, $pre = 0, $pre2 = 0, $r_bk = 0, $r_bkm = 0, $stat_0 = 0, $stat_1 = 0, $status = 0, $status1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 100 | 0;
 $status = sp + 96 | 0;
 $pre = sp + 64 | 0;
 $status1 = sp + 92 | 0;
 $pre2 = sp + 56 | 0;
 $r_bk = sp + 40 | 0;
 $r_bkm = sp + 24 | 0;
 $stat_1 = sp + 88 | 0;
 $stat_0 = sp + 84 | 0;
 $bkp = sp + 16 | 0;
 $bk = sp + 8 | 0;
 $bkm = sp;
 $j = sp + 80 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] <= 0.0)) {
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_k0_scaled_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $165 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $165 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_k1_scaled_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $165 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $165 | 0;
  }
  $23 = +HEAPF64[$2 >> 3];
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_k2_scaled_e($23, HEAP32[$3 >> 2] | 0) | 0;
   $165 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $165 | 0;
  }
  if ($23 < 3.0) {
   HEAP32[$0 >> 2] = _bessel_kl_scaled_small_x(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $165 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $165 | 0;
  }
  $35 = Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
  $41 = HEAP32[$1 >> 2] | 0;
  if (+HEAPF64[$2 >> 3] * 6055454452393343.0e-21 > +($35 + (HEAP32[$1 >> 2] | 0) + 1 | 0)) {
   HEAP32[$status >> 2] = _gsl_sf_bessel_Knu_scaled_asympx_e(+($41 | 0) + .5, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   HEAPF64[$pre >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
   $51 = HEAP32[$3 >> 2] | 0;
   HEAPF64[$51 >> 3] = +HEAPF64[$51 >> 3] * +HEAPF64[$pre >> 3];
   $56 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$56 >> 3] = +HEAPF64[$56 >> 3] * +HEAPF64[$pre >> 3];
   HEAP32[$0 >> 2] = HEAP32[$status >> 2];
   $165 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $165 | 0;
  }
  $64 = .29 / (+(Math_imul($41, HEAP32[$1 >> 2] | 0) | 0) + 1.0);
  $69 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) + 1.0;
  $80 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) + 1.0;
  if ($64 < .5 / ($69 + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3])) $88 = .29 / $80; else $88 = .5 / ($80 + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
  if ($88 < 6055454452393343.0e-21) {
   HEAP32[$status1 >> 2] = _gsl_sf_bessel_Knu_scaled_asymp_unif_e(+(HEAP32[$1 >> 2] | 0) + .5, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   HEAPF64[$pre2 >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
   $99 = HEAP32[$3 >> 2] | 0;
   HEAPF64[$99 >> 3] = +HEAPF64[$99 >> 3] * +HEAPF64[$pre2 >> 3];
   $104 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$104 >> 3] = +HEAPF64[$104 >> 3] * +HEAPF64[$pre2 >> 3];
   HEAP32[$0 >> 2] = HEAP32[$status1 >> 2];
   $165 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $165 | 0;
  }
  HEAP32[$stat_1 >> 2] = _gsl_sf_bessel_k1_scaled_e(+HEAPF64[$2 >> 3], $r_bk) | 0;
  HEAP32[$stat_0 >> 2] = _gsl_sf_bessel_k0_scaled_e(+HEAPF64[$2 >> 3], $r_bkm) | 0;
  HEAPF64[$bk >> 3] = +HEAPF64[$r_bk >> 3];
  HEAPF64[$bkm >> 3] = +HEAPF64[$r_bkm >> 3];
  HEAP32[$j >> 2] = 1;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$bkp >> 3] = +((HEAP32[$j >> 2] << 1) + 1 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$bk >> 3] + +HEAPF64[$bkm >> 3];
   HEAPF64[$bkm >> 3] = +HEAPF64[$bk >> 3];
   HEAPF64[$bk >> 3] = +HEAPF64[$bkp >> 3];
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$bk >> 3];
  $134 = +Math_abs(+(+HEAPF64[$bk >> 3]));
  $139 = +Math_abs(+(+HEAPF64[$r_bk + 8 >> 3] / +HEAPF64[$r_bk >> 3]));
  $146 = $134 * ($139 + +Math_abs(+(+HEAPF64[$r_bkm + 8 >> 3] / +HEAPF64[$r_bkm >> 3])));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $146;
  $152 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $154 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$154 >> 3] = +HEAPF64[$154 >> 3] + $152;
  if (HEAP32[$stat_1 >> 2] | 0) $164 = HEAP32[$stat_1 >> 2] | 0; else $164 = (HEAP32[$stat_0 >> 2] | 0) != 0 ? HEAP32[$stat_0 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $164;
  $165 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $165 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(16032, 16048, 141, 1);
 HEAP32[$0 >> 2] = 1;
 $165 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $165 | 0;
}
function _gsl_sf_psi_1piy_e($y, $result) {
 $y = +$y;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $104 = 0.0, $106 = 0, $112 = 0.0, $114 = 0, $118 = 0, $140 = 0.0, $162 = 0.0, $168 = 0.0, $170 = 0, $173 = 0, $2 = 0, $28 = 0.0, $32 = 0.0, $36 = 0.0, $64 = 0.0, $68 = 0.0, $7 = 0.0, $ay = 0, $lny = 0, $lny2 = 0, $n = 0, $p = 0, $result_c = 0, $sum = 0, $sum3 = 0, $sum5 = 0, $v = 0, $v6 = 0, $x = 0, $y2 = 0, $y24 = 0, $yi2 = 0, $yi21 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 180 | 0;
 $1 = sp + 160 | 0;
 $2 = sp + 176 | 0;
 $ay = sp + 152 | 0;
 $yi2 = sp + 144 | 0;
 $lny = sp + 136 | 0;
 $sum = sp + 128 | 0;
 $yi21 = sp + 120 | 0;
 $lny2 = sp + 112 | 0;
 $sum3 = sp + 104 | 0;
 $y2 = sp + 96 | 0;
 $x = sp + 88 | 0;
 $v = sp + 80 | 0;
 $result_c = sp + 64 | 0;
 $y24 = sp + 56 | 0;
 $p = sp + 16 | 0;
 $sum5 = sp + 8 | 0;
 $v6 = sp;
 $n = sp + 168 | 0;
 HEAPF64[$1 >> 3] = $y;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ay >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 $7 = +HEAPF64[$ay >> 3];
 if (+HEAPF64[$ay >> 3] > 1.0e3) {
  HEAPF64[$yi2 >> 3] = 1.0 / ($7 * +HEAPF64[$ay >> 3]);
  HEAPF64[$lny >> 3] = +Math_log(+(+HEAPF64[$ay >> 3]));
  HEAPF64[$sum >> 3] = +HEAPF64[$yi2 >> 3] * (+HEAPF64[$yi2 >> 3] * .008333333333333333 + .08333333333333333 + +HEAPF64[$yi2 >> 3] * .003968253968253968 * +HEAPF64[$yi2 >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$lny >> 3] + +HEAPF64[$sum >> 3];
  $28 = +Math_abs(+(+HEAPF64[$lny >> 3]));
  $32 = ($28 + +Math_abs(+(+HEAPF64[$sum >> 3]))) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $32;
  HEAP32[$0 >> 2] = 0;
  $173 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $173 | 0;
 }
 $36 = +HEAPF64[$ay >> 3];
 if ($7 > 10.0) {
  HEAPF64[$yi21 >> 3] = 1.0 / ($36 * +HEAPF64[$ay >> 3]);
  HEAPF64[$lny2 >> 3] = +Math_log(+(+HEAPF64[$ay >> 3]));
  HEAPF64[$sum3 >> 3] = +HEAPF64[$yi21 >> 3] * (+HEAPF64[$yi21 >> 3] * (+HEAPF64[$yi21 >> 3] * (+HEAPF64[$yi21 >> 3] * (+HEAPF64[$yi21 >> 3] * (+HEAPF64[$yi21 >> 3] * .021092796092796094 + .007575757575757576) + .004166666666666667) + .003968253968253968) + .008333333333333333) + .08333333333333333);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$lny2 >> 3] + +HEAPF64[$sum3 >> 3];
  $64 = +Math_abs(+(+HEAPF64[$lny2 >> 3]));
  $68 = ($64 + +Math_abs(+(+HEAPF64[$sum3 >> 3]))) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $68;
  HEAP32[$0 >> 2] = 0;
  $173 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $173 | 0;
 }
 if ($36 > 1.0) {
  HEAPF64[$y2 >> 3] = +HEAPF64[$ay >> 3] * +HEAPF64[$ay >> 3];
  HEAPF64[$x >> 3] = (+HEAPF64[$ay >> 3] * 2.0 - 11.0) / 9.0;
  HEAPF64[$v >> 3] = +HEAPF64[$y2 >> 3] * (1.0 / (+HEAPF64[$y2 >> 3] + 1.0) + .5 / (+HEAPF64[$y2 >> 3] + 4.0));
  _cheb_eval_e592(57640, +HEAPF64[$x >> 3], $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$result_c >> 3] - .5772156649015329 + +HEAPF64[$v >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_c + 8 >> 3];
  $100 = +Math_abs(+(+HEAPF64[$v >> 3])) + .5772156649015329;
  $104 = ($100 + +Math_abs(+(+HEAPF64[$result_c >> 3]))) * 4.440892098500626e-16;
  $106 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$106 >> 3] = +HEAPF64[$106 >> 3] + $104;
  $112 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $114 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$114 >> 3] = +HEAPF64[$114 >> 3] + $112;
  $118 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$118 >> 3] = +HEAPF64[$118 >> 3] * 5.0;
  HEAP32[$0 >> 2] = 0;
  $173 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $173 | 0;
 }
 HEAP32[sp + 172 >> 2] = 50;
 HEAPF64[$y24 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 HEAPF64[sp + 48 >> 3] = .00019603999466879846;
 HEAPF64[sp + 40 >> 3] = 3.842665920511438e-8;
 HEAPF64[sp + 32 >> 3] = 1.0041592839497643e-11;
 HEAPF64[sp + 24 >> 3] = 2.951674376350019e-15;
 HEAPF64[$p >> 3] = +HEAPF64[$y24 >> 3] * (+HEAPF64[$y24 >> 3] * (1.0041592839497643e-11 - +HEAPF64[$y24 >> 3] * 2.951674376350019e-15) + -3.842665920511438e-8) + .00019603999466879846;
 HEAPF64[$sum5 >> 3] = 0.0;
 HEAP32[$n >> 2] = 1;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) > 50) break;
  $140 = +(Math_imul(HEAP32[$n >> 2] | 0, HEAP32[$n >> 2] | 0) | 0);
  HEAPF64[$sum5 >> 3] = +HEAPF64[$sum5 >> 3] + 1.0 / (+(HEAP32[$n >> 2] | 0) * ($140 + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]));
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 HEAPF64[$v6 >> 3] = +HEAPF64[$y24 >> 3] * (+HEAPF64[$sum5 >> 3] + +HEAPF64[$p >> 3]);
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$v6 >> 3] + -.5772156649015329;
 $162 = (+Math_abs(+(+HEAPF64[$v6 >> 3])) + .5772156649015329) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $162;
 $168 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $170 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$170 >> 3] = +HEAPF64[$170 >> 3] + $168;
 HEAP32[$0 >> 2] = 0;
 $173 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $173 | 0;
}
function _gsl_sf_legendre_Ql_e($l, $x, $result) {
 $l = $l | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $111 = 0.0, $114 = 0, $115 = 0.0, $128 = 0.0, $143 = 0.0, $153 = 0, $154 = 0, $2 = 0, $3 = 0, $70 = 0.0, $80 = 0, $Q0 = 0, $Q05 = 0, $Q1 = 0, $Q16 = 0, $Qell = 0, $Qell2 = 0, $Qellm1 = 0, $Qellm13 = 0, $Qellp1 = 0, $Qellp11 = 0, $ell = 0, $ell4 = 0, $rat = 0, $stat_CF1 = 0, $stat_Q = 0, $stat_Q0 = 0, $stat_Q1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 160 | 0;
 $1 = sp + 156 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 152 | 0;
 $Q0 = sp + 104 | 0;
 $Q1 = sp + 88 | 0;
 $stat_Q0 = sp + 148 | 0;
 $stat_Q1 = sp + 144 | 0;
 $Qellm1 = sp + 80 | 0;
 $Qell = sp + 72 | 0;
 $Qellp1 = sp + 64 | 0;
 $ell = sp + 140 | 0;
 $rat = sp + 56 | 0;
 $stat_CF1 = sp + 136 | 0;
 $stat_Q = sp + 132 | 0;
 $Qellp11 = sp + 48 | 0;
 $Qell2 = sp + 40 | 0;
 $Qellm13 = sp + 32 | 0;
 $ell4 = sp + 128 | 0;
 $Q05 = sp + 16 | 0;
 $Q16 = sp;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] <= -1.0 | +HEAPF64[$2 >> 3] == 1.0)) if ((HEAP32[$1 >> 2] | 0) >= 0) {
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$0 >> 2] = _gsl_sf_legendre_Q0_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $154 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $154 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAP32[$0 >> 2] = _gsl_sf_legendre_Q1_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $154 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $154 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) > 1e5) {
   HEAP32[$0 >> 2] = _legendre_Ql_asymp_unif(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $154 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $154 | 0;
  }
  if (+HEAPF64[$2 >> 3] < 1.0) {
   HEAP32[$stat_Q0 >> 2] = _gsl_sf_legendre_Q0_e(+HEAPF64[$2 >> 3], $Q0) | 0;
   HEAP32[$stat_Q1 >> 2] = _gsl_sf_legendre_Q1_e(+HEAPF64[$2 >> 3], $Q1) | 0;
   HEAPF64[$Qellm1 >> 3] = +HEAPF64[$Q0 >> 3];
   HEAPF64[$Qell >> 3] = +HEAPF64[$Q1 >> 3];
   HEAP32[$ell >> 2] = 1;
   while (1) {
    if ((HEAP32[$ell >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[$Qellp1 >> 3] = (+HEAPF64[$2 >> 3] * (+(HEAP32[$ell >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$Qell >> 3] - +(HEAP32[$ell >> 2] | 0) * +HEAPF64[$Qellm1 >> 3]) / (+(HEAP32[$ell >> 2] | 0) + 1.0);
    HEAPF64[$Qellm1 >> 3] = +HEAPF64[$Qell >> 3];
    HEAPF64[$Qell >> 3] = +HEAPF64[$Qellp1 >> 3];
    HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
   }
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$Qell >> 3];
   $70 = +(HEAP32[$1 >> 2] | 0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $70;
   if (HEAP32[$stat_Q0 >> 2] | 0) $80 = HEAP32[$stat_Q0 >> 2] | 0; else $80 = (HEAP32[$stat_Q1 >> 2] | 0) != 0 ? HEAP32[$stat_Q1 >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $80;
   $154 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $154 | 0;
  }
  HEAP32[$stat_CF1 >> 2] = _legendreQ_CF1_xgt1(HEAP32[$1 >> 2] | 0, 0.0, 0.0, +HEAPF64[$2 >> 3], $rat) | 0;
  HEAPF64[$Qellp11 >> 3] = +HEAPF64[$rat >> 3] * 1.4916681462400413e-154;
  HEAPF64[$Qell2 >> 3] = 1.4916681462400413e-154;
  HEAP32[$ell4 >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$ell4 >> 2] | 0) <= 0) break;
   HEAPF64[$Qellm13 >> 3] = (+HEAPF64[$2 >> 3] * (+(HEAP32[$ell4 >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$Qell2 >> 3] - (+(HEAP32[$ell4 >> 2] | 0) + 1.0) * +HEAPF64[$Qellp11 >> 3]) / +(HEAP32[$ell4 >> 2] | 0);
   HEAPF64[$Qellp11 >> 3] = +HEAPF64[$Qell2 >> 3];
   HEAPF64[$Qell2 >> 3] = +HEAPF64[$Qellm13 >> 3];
   HEAP32[$ell4 >> 2] = (HEAP32[$ell4 >> 2] | 0) + -1;
  }
  $111 = +Math_abs(+(+HEAPF64[$Qell2 >> 3]));
  $114 = $111 > +Math_abs(+(+HEAPF64[$Qellp11 >> 3]));
  $115 = +HEAPF64[$2 >> 3];
  if ($114) {
   HEAP32[$stat_Q >> 2] = _gsl_sf_legendre_Q0_e($115, $Q05) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$Q05 >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Qell2 >> 3];
   $128 = +(HEAP32[$1 >> 2] | 0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $128;
  } else {
   HEAP32[$stat_Q >> 2] = _gsl_sf_legendre_Q1_e($115, $Q16) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$Q16 >> 3] * 1.4916681462400413e-154 / +HEAPF64[$Qellp11 >> 3];
   $143 = +(HEAP32[$1 >> 2] | 0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $143;
  }
  if (HEAP32[$stat_Q >> 2] | 0) $153 = HEAP32[$stat_Q >> 2] | 0; else $153 = (HEAP32[$stat_CF1 >> 2] | 0) != 0 ? HEAP32[$stat_CF1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $153;
  $154 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $154 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(52992, 53008, 285, 1);
 HEAP32[$0 >> 2] = 1;
 $154 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $154 | 0;
}
function _gsl_cdf_beta_Pinv($P, $a, $b) {
 $P = +$P;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $106 = 0.0, $126 = 0.0, $137 = 0.0, $152 = 0.0, $157 = 0.0, $162 = 0.0, $167 = 0.0, $2 = 0, $3 = 0, $39 = 0.0, $48 = 0.0, $62 = 0.0, $76 = 0.0, $88 = 0, $96 = 0.0, $dP = 0, $lambda = 0, $lg_a = 0, $lg_ab = 0, $lg_b = 0, $lx = 0, $mean = 0, $n = 0, $phi = 0, $step = 0, $step0 = 0, $step1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $x = sp + 88 | 0;
 $mean = sp + 80 | 0;
 $lg_ab = sp + 72 | 0;
 $lg_a = sp + 64 | 0;
 $lg_b = sp + 56 | 0;
 $lx = sp + 48 | 0;
 $lambda = sp + 40 | 0;
 $dP = sp + 32 | 0;
 $phi = sp + 24 | 0;
 $n = sp + 128 | 0;
 $step0 = sp + 16 | 0;
 $step1 = sp + 8 | 0;
 $step = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] < 0.0 | +HEAPF64[$1 >> 3] > 1.0) {
  _gsl_error(8, 40, 77, 1);
  HEAPF64[$0 >> 3] = nan;
  $167 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$167;
 }
 if (+HEAPF64[$2 >> 3] < 0.0) {
  _gsl_error(56, 40, 82, 1);
  HEAPF64[$0 >> 3] = nan;
  $167 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$167;
 }
 if (+HEAPF64[$3 >> 3] < 0.0) {
  _gsl_error(64, 40, 87, 1);
  HEAPF64[$0 >> 3] = nan;
  $167 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$167;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $167 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$167;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = 1.0;
  $167 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$167;
 }
 if (+HEAPF64[$1 >> 3] > .5) {
  HEAPF64[$0 >> 3] = +_gsl_cdf_beta_Qinv(1.0 - +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3]);
  $167 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$167;
 }
 HEAPF64[$mean >> 3] = +HEAPF64[$2 >> 3] / (+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]);
 if (+HEAPF64[$1 >> 3] < .1) {
  HEAPF64[$lg_ab >> 3] = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]);
  HEAPF64[$lg_a >> 3] = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3]);
  HEAPF64[$lg_b >> 3] = +_gsl_sf_lngamma(+HEAPF64[$3 >> 3]);
  $39 = +Math_log(+(+HEAPF64[$2 >> 3]));
  $48 = $39 + +HEAPF64[$lg_a >> 3] + +HEAPF64[$lg_b >> 3] - +HEAPF64[$lg_ab >> 3] + +Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$lx >> 3] = $48 / +HEAPF64[$2 >> 3];
  if (+HEAPF64[$lx >> 3] <= 0.0) {
   HEAPF64[$x >> 3] = +Math_exp(+(+HEAPF64[$lx >> 3]));
   $62 = +Math_pow(+(1.0 - +HEAPF64[$x >> 3]), +(-(+HEAPF64[$3 >> 3] - 1.0) / +HEAPF64[$2 >> 3]));
   HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] * $62;
  } else HEAPF64[$x >> 3] = +HEAPF64[$mean >> 3];
  if (+HEAPF64[$x >> 3] > +HEAPF64[$mean >> 3]) HEAPF64[$x >> 3] = +HEAPF64[$mean >> 3];
 } else HEAPF64[$x >> 3] = +HEAPF64[$mean >> 3];
 HEAPF64[$x >> 3] = +_bisect(+HEAPF64[$x >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], .01, .01);
 HEAP32[$n >> 2] = 0;
 do {
  $76 = +HEAPF64[$1 >> 3];
  HEAPF64[$dP >> 3] = $76 - +_gsl_cdf_beta_P(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3]);
  HEAPF64[$phi >> 3] = +_gsl_ran_beta_pdf(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3]);
  if (+HEAPF64[$dP >> 3] == 0.0) break;
  $88 = HEAP32[$n >> 2] | 0;
  HEAP32[$n >> 2] = $88 + 1;
  if ($88 >>> 0 > 64) break;
  $96 = +Math_abs(+(+HEAPF64[$dP >> 3] / +HEAPF64[$x >> 3])) * 2.0;
  if ($96 > +HEAPF64[$phi >> 3]) $106 = +Math_abs(+(+HEAPF64[$dP >> 3] / +HEAPF64[$x >> 3])) * 2.0; else $106 = +HEAPF64[$phi >> 3];
  HEAPF64[$lambda >> 3] = +HEAPF64[$dP >> 3] / $106;
  HEAPF64[$step0 >> 3] = +HEAPF64[$lambda >> 3];
  HEAPF64[$step1 >> 3] = -((+HEAPF64[$2 >> 3] - 1.0) / +HEAPF64[$x >> 3] - (+HEAPF64[$3 >> 3] - 1.0) / (1.0 - +HEAPF64[$x >> 3])) * +HEAPF64[$lambda >> 3] * +HEAPF64[$lambda >> 3] / 2.0;
  HEAPF64[$step >> 3] = +HEAPF64[$step0 >> 3];
  $126 = +Math_abs(+(+HEAPF64[$step1 >> 3]));
  if ($126 < +Math_abs(+(+HEAPF64[$step0 >> 3]))) HEAPF64[$step >> 3] = +HEAPF64[$step >> 3] + +HEAPF64[$step1 >> 3]; else {
   $137 = +Math_abs(+(+HEAPF64[$step0 >> 3] / +HEAPF64[$step1 >> 3])) * 2.0;
   HEAPF64[$step >> 3] = +HEAPF64[$step >> 3] * $137;
  }
  if (+HEAPF64[$x >> 3] + +HEAPF64[$step >> 3] > 0.0) if (+HEAPF64[$x >> 3] + +HEAPF64[$step >> 3] < 1.0) HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] + +HEAPF64[$step >> 3]; else label = 32; else label = 32;
  if ((label | 0) == 32) {
   label = 0;
   $152 = +Math_sqrt(+(+HEAPF64[$x >> 3]));
   HEAPF64[$x >> 3] = $152 * +Math_sqrt(+(+HEAPF64[$mean >> 3]));
  }
  $157 = +Math_abs(+(+HEAPF64[$step0 >> 3]));
 } while ($157 > +HEAPF64[$x >> 3] * 1.0e-10);
 $162 = +Math_abs(+(+HEAPF64[$dP >> 3]));
 if ($162 > +HEAPF64[$1 >> 3] * 1.4901161193847656e-8) {
  _gsl_error(72, 40, 181, 5);
  HEAPF64[$0 >> 3] = nan;
  $167 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$167;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $167 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$167;
 }
 return 0.0;
}
function _gsl_sf_laguerre_n_e($n, $a, $x, $result) {
 $n = $n | 0;
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $167 = 0.0, $173 = 0.0, $182 = 0, $2 = 0, $24 = 0.0, $28 = 0.0, $3 = 0, $4 = 0, $59 = 0.0, $Lk = 0, $Lkm1 = 0, $Lkp1 = 0, $k = 0, $k1 = 0, $lg2 = 0, $product = 0, $stat_lg2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 76 | 0;
 $product = sp + 40 | 0;
 $k = sp + 72 | 0;
 $lg2 = sp + 24 | 0;
 $stat_lg2 = sp + 68 | 0;
 $Lkm1 = sp + 16 | 0;
 $Lk = sp + 8 | 0;
 $Lkp1 = sp;
 $k1 = sp + 64 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(52416, 52432, 244, 1);
  HEAP32[$0 >> 2] = 1;
  $182 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $182 | 0;
 }
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $182 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $182 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$2 >> 3] + 1.0 - +HEAPF64[$3 >> 3];
  $24 = +Math_abs(+(+HEAPF64[$2 >> 3])) + 1.0;
  $28 = ($24 + +Math_abs(+(+HEAPF64[$3 >> 3]))) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $28;
  HEAP32[$0 >> 2] = 0;
  $182 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $182 | 0;
 }
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAPF64[$product >> 3] = +HEAPF64[$2 >> 3] + 1.0;
  HEAP32[$k >> 2] = 2;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$product >> 3] = +HEAPF64[$product >> 3] * ((+HEAPF64[$2 >> 3] + +(HEAP32[$k >> 2] | 0)) / +(HEAP32[$k >> 2] | 0));
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$product >> 3];
  $59 = (+(HEAP32[$1 >> 2] | 0) + 1.0) * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$product >> 3])) + 2.220446049250313e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $59;
  HEAP32[$0 >> 2] = 0;
  $182 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $182 | 0;
 }
 if (+HEAPF64[$3 >> 3] < 0.0) if (+HEAPF64[$2 >> 3] > -1.0) {
  HEAP32[$0 >> 2] = _laguerre_n_cp(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $182 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $182 | 0;
 }
 do if ((HEAP32[$1 >> 2] | 0) >= 5) {
  if (+HEAPF64[$3 >> 3] > 0.0) if (+HEAPF64[$2 >> 3] < +(0 - (HEAP32[$1 >> 2] | 0) - 1 | 0)) break;
  if (+(HEAP32[$1 >> 2] | 0) > 1.0e7) if (+HEAPF64[$3 >> 3] > 0.0) if (+HEAPF64[$2 >> 3] > -1.0) if (+HEAPF64[$3 >> 3] < (+HEAPF64[$2 >> 3] + 1.0) * 2.0 + +(HEAP32[$1 >> 2] | 0) * 4.0) {
   HEAP32[$0 >> 2] = _laguerre_large_n(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $182 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $182 | 0;
  }
  do if (!(+HEAPF64[$2 >> 3] >= 0.0)) {
   if (+HEAPF64[$3 >> 3] > 0.0) if (+HEAPF64[$2 >> 3] < +(0 - (HEAP32[$1 >> 2] | 0) - 1 | 0)) break;
   HEAP32[$0 >> 2] = _laguerre_n_poly_safe(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $182 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $182 | 0;
  } while (0);
  HEAP32[$stat_lg2 >> 2] = _gsl_sf_laguerre_2_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $lg2) | 0;
  HEAPF64[$Lkm1 >> 3] = +HEAPF64[$2 >> 3] + 1.0 - +HEAPF64[$3 >> 3];
  HEAPF64[$Lk >> 3] = +HEAPF64[$lg2 >> 3];
  HEAP32[$k1 >> 2] = 2;
  while (1) {
   if ((HEAP32[$k1 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$Lkp1 >> 3] = (-(+(HEAP32[$k1 >> 2] | 0) + +HEAPF64[$2 >> 3]) * +HEAPF64[$Lkm1 >> 3] + (+(HEAP32[$k1 >> 2] | 0) * 2.0 + +HEAPF64[$2 >> 3] + 1.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$Lk >> 3]) / (+(HEAP32[$k1 >> 2] | 0) + 1.0);
   HEAPF64[$Lkm1 >> 3] = +HEAPF64[$Lk >> 3];
   HEAPF64[$Lk >> 3] = +HEAPF64[$Lkp1 >> 3];
   HEAP32[$k1 >> 2] = (HEAP32[$k1 >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Lk >> 3];
  $167 = +Math_abs(+(+HEAPF64[$lg2 + 8 >> 3] / +HEAPF64[$lg2 >> 3])) + 2.220446049250313e-16;
  $173 = $167 * +(HEAP32[$1 >> 2] | 0) * +Math_abs(+(+HEAPF64[$Lk >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $173;
  HEAP32[$0 >> 2] = HEAP32[$stat_lg2 >> 2];
  $182 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $182 | 0;
 } while (0);
 if (!(_laguerre_n_cp(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0)) {
  HEAP32[$0 >> 2] = 0;
  $182 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $182 | 0;
 } else {
  HEAP32[$0 >> 2] = _laguerre_n_poly_safe(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $182 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $182 | 0;
 }
 return 0;
}
function _conicalP_0_V($t, $f, $tau, $sgn, $V0, $V1) {
 $t = +$t;
 $f = +$f;
 $tau = +$tau;
 $sgn = +$sgn;
 $V0 = $V0 | 0;
 $V1 = $V1 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $C = 0, $H = 0, $T = 0, $V = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $0 = sp + 312 | 0;
 $1 = sp + 304 | 0;
 $2 = sp + 296 | 0;
 $3 = sp + 288 | 0;
 $4 = sp + 328 | 0;
 $5 = sp + 324 | 0;
 $C = sp + 224 | 0;
 $T = sp + 160 | 0;
 $H = sp + 96 | 0;
 $V = sp;
 $i = sp + 320 | 0;
 HEAPF64[$0 >> 3] = $t;
 HEAPF64[$1 >> 3] = $f;
 HEAPF64[$2 >> 3] = $tau;
 HEAPF64[$3 >> 3] = $sgn;
 HEAP32[$4 >> 2] = $V0;
 HEAP32[$5 >> 2] = $V1;
 HEAPF64[$T >> 3] = 1.0;
 HEAPF64[$H >> 3] = 1.0;
 HEAPF64[$V >> 3] = 1.0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > 7) break;
  HEAPF64[$T + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$T + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3] * +HEAPF64[$0 >> 3];
  HEAPF64[$H + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$H + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3] * +HEAPF64[$0 >> 3] * +HEAPF64[$1 >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > 11) break;
  HEAPF64[$V + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$V + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3] * +HEAPF64[$2 >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$C >> 3] = 1.0;
 HEAPF64[$C + 8 >> 3] = (+HEAPF64[$H + 8 >> 3] - 1.0) / (+HEAPF64[$T + 8 >> 3] * 8.0);
 HEAPF64[$C + 16 >> 3] = (+HEAPF64[$H + 16 >> 3] * 9.0 + +HEAPF64[$H + 8 >> 3] * 6.0 - 15.0 - +HEAPF64[$3 >> 3] * 8.0 * +HEAPF64[$T + 16 >> 3]) / (+HEAPF64[$T + 16 >> 3] * 128.0);
 HEAPF64[$C + 24 >> 3] = (+HEAPF64[$H + 24 >> 3] * 15.0 + +HEAPF64[$H + 16 >> 3] * 27.0 + +HEAPF64[$H + 8 >> 3] * 21.0 - 63.0 - +HEAPF64[$3 >> 3] * +HEAPF64[$T + 16 >> 3] * (+HEAPF64[$H + 8 >> 3] * 16.0 + 24.0)) * 5.0 / (+HEAPF64[$T + 24 >> 3] * 1024.0);
 HEAPF64[$C + 32 >> 3] = (+HEAPF64[$H + 32 >> 3] * 525.0 + +HEAPF64[$H + 24 >> 3] * 1500.0 + +HEAPF64[$H + 16 >> 3] * 2430.0 + +HEAPF64[$H + 8 >> 3] * 1980.0 - 6435.0 + +HEAPF64[$T + 32 >> 3] * 192.0 - +HEAPF64[$3 >> 3] * +HEAPF64[$T + 16 >> 3] * (+HEAPF64[$H + 16 >> 3] * 720.0 + +HEAPF64[$H + 8 >> 3] * 1600.0 + 2160.0)) * 7.0 / (+HEAPF64[$T + 32 >> 3] * 32768.0);
 HEAPF64[$C + 40 >> 3] = (+HEAPF64[$H + 40 >> 3] * 2835.0 + +HEAPF64[$H + 32 >> 3] * 11025.0 + +HEAPF64[$H + 24 >> 3] * 24750.0 + +HEAPF64[$H + 16 >> 3] * 38610.0 + +HEAPF64[$H + 8 >> 3] * 32175.0 - 109395.0 + +HEAPF64[$T + 32 >> 3] * (+HEAPF64[$H + 8 >> 3] * 1984.0 + 4032.0) - +HEAPF64[$3 >> 3] * +HEAPF64[$T + 16 >> 3] * (+HEAPF64[$H + 24 >> 3] * 4800.0 + +HEAPF64[$H + 16 >> 3] * 15120.0 + +HEAPF64[$H + 8 >> 3] * 26400.0 + 34320.0)) * 21.0 / (+HEAPF64[$T + 40 >> 3] * 262144.0);
 HEAPF64[$C + 48 >> 3] = (+HEAPF64[$H + 48 >> 3] * 218295.0 + +HEAPF64[$H + 40 >> 3] * 1071630.0 + +HEAPF64[$H + 32 >> 3] * 3009825.0 + +HEAPF64[$H + 24 >> 3] * 6142500.0 + +HEAPF64[$H + 16 >> 3] * 9398025.0 + +HEAPF64[$H + 8 >> 3] * 7936110.0 - 27776385.0 + +HEAPF64[$T + 32 >> 3] * (+HEAPF64[$H + 16 >> 3] * 254016.0 + +HEAPF64[$H + 8 >> 3] * 749952.0 + 1100736.0) - +HEAPF64[$3 >> 3] * +HEAPF64[$T + 16 >> 3] * (+HEAPF64[$H + 32 >> 3] * 441.0e3 + +HEAPF64[$H + 24 >> 3] * 1814400.0 + +HEAPF64[$H + 16 >> 3] * 4127760.0 + +HEAPF64[$H + 8 >> 3] * 6552.0e3 + 8353800.0 + +HEAPF64[$T + 32 >> 3] * 31232.0)) * 11.0 / (+HEAPF64[$T + 48 >> 3] * 4194304.0);
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$C >> 3] + (+HEAPF64[$C + 24 >> 3] * -4.0 / +HEAPF64[$T + 8 >> 3] + +HEAPF64[$C + 32 >> 3]) / +HEAPF64[$V + 32 >> 3] + (+HEAPF64[$C + 40 >> 3] * -192.0 / +HEAPF64[$T + 24 >> 3] + +HEAPF64[$C + 48 >> 3] * 144.0 / +HEAPF64[$T + 16 >> 3]) / +HEAPF64[$V + 64 >> 3] + +HEAPF64[$3 >> 3] * (-+HEAPF64[$C + 16 >> 3] / +HEAPF64[$V + 16 >> 3] + (+HEAPF64[$C + 32 >> 3] * -24.0 / +HEAPF64[$T + 16 >> 3] + +HEAPF64[$C + 40 >> 3] * 12.0 / +HEAPF64[$T + 8 >> 3] - +HEAPF64[$C + 48 >> 3]) / +HEAPF64[$V + 48 >> 3] + +HEAPF64[$C + 48 >> 3] * -1920.0 / +HEAPF64[$T + 32 >> 3] / +HEAPF64[$V + 80 >> 3]);
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$C + 8 >> 3] / +HEAPF64[$V + 8 >> 3] + ((+HEAPF64[$C + 24 >> 3] / +HEAPF64[$T + 16 >> 3] - +HEAPF64[$C + 32 >> 3] / +HEAPF64[$T + 8 >> 3]) * 8.0 + +HEAPF64[$C + 40 >> 3]) / +HEAPF64[$V + 40 >> 3] + (+HEAPF64[$C + 40 >> 3] * 384.0 / +HEAPF64[$T + 32 >> 3] - +HEAPF64[$C + 48 >> 3] * 768.0 / +HEAPF64[$T + 24 >> 3]) / +HEAPF64[$V + 72 >> 3] + +HEAPF64[$3 >> 3] * ((+HEAPF64[$C + 16 >> 3] * 2.0 / +HEAPF64[$T + 8 >> 3] - +HEAPF64[$C + 24 >> 3]) / +HEAPF64[$V + 24 >> 3] + (+HEAPF64[$C + 32 >> 3] * 48.0 / +HEAPF64[$T + 24 >> 3] - +HEAPF64[$C + 40 >> 3] * 72.0 / +HEAPF64[$T + 16 >> 3] + +HEAPF64[$C + 48 >> 3] * 18.0 / +HEAPF64[$T + 8 >> 3]) / +HEAPF64[$V + 56 >> 3] + +HEAPF64[$C + 48 >> 3] * 3840.0 / +HEAPF64[$T + 40 >> 3] / +HEAPF64[$V + 88 >> 3]);
 STACKTOP = sp;
 return 0;
}
function _hyperg_1F1_1($b, $x, $result) {
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $101 = 0.0, $106 = 0.0, $109 = 0.0, $121 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $143 = 0.0, $155 = 0, $2 = 0, $23 = 0.0, $3 = 0, $52 = 0.0, $86 = 0.0, $92 = 0.0, $95 = 0.0, $97 = 0, $M = 0, $ax = 0, $bp = 0, $err_rat = 0, $ib = 0, $off = 0, $stat_s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 76 | 0;
 $ax = sp + 48 | 0;
 $ib = sp + 40 | 0;
 $off = sp + 32 | 0;
 $bp = sp + 24 | 0;
 $M = sp + 8 | 0;
 $stat_s = sp + 72 | 0;
 $err_rat = sp;
 HEAPF64[$1 >> 3] = $b;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$ib >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] + .1));
 if (+HEAPF64[$1 >> 3] < 1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51664, 51680, 352, 1);
  HEAP32[$0 >> 2] = 1;
  $155 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAP32[$0 >> 2] = _gsl_sf_exp_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $155 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 $23 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] >= +HEAPF64[$ax >> 3] * 1.4) {
  HEAP32[$0 >> 2] = _hyperg_1F1_1_series($23, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $155 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 if (+Math_abs(+($23 - +HEAPF64[$ib >> 3])) < 2.220446049250313e-14) if (+HEAPF64[$ib >> 3] < 2147483647.0) {
  HEAP32[$0 >> 2] = _hyperg_1F1_1_int(~~+HEAPF64[$ib >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $155 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 if (!(+HEAPF64[$2 >> 3] > 0.0)) {
  if (+HEAPF64[$ax >> 3] < 10.0) if (+HEAPF64[$1 >> 3] < 10.0) {
   HEAP32[$0 >> 2] = _hyperg_1F1_1_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $155 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $155 | 0;
  }
  if (+HEAPF64[$ax >> 3] >= 100.0) {
   $143 = +_GSL_MAX_DBL(+(+Math_abs(+(2.0 - +HEAPF64[$1 >> 3]))), 1.0);
   if ($143 < +HEAPF64[$ax >> 3] * .99) {
    HEAP32[$0 >> 2] = _hyperg_1F1_asymp_negx(1.0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
    $155 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $155 | 0;
   }
  }
  HEAP32[$0 >> 2] = _hyperg_1F1_luke(1.0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $155 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 if (+HEAPF64[$2 >> 3] > 100.0) if (+HEAPF64[$1 >> 3] < +HEAPF64[$2 >> 3] * .75) {
  HEAP32[$0 >> 2] = _hyperg_1F1_asymp_posx(1.0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $155 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 $52 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$1 >> 3] < 1.0e5) {
  HEAPF64[$off >> 3] = +Math_ceil(+(1.4 * $52 - +HEAPF64[$1 >> 3])) + 1.0;
  HEAPF64[$bp >> 3] = +HEAPF64[$1 >> 3] + +HEAPF64[$off >> 3];
  HEAP32[$stat_s >> 2] = _hyperg_1F1_1_series(+HEAPF64[$bp >> 3], +HEAPF64[$2 >> 3], $M) | 0;
  HEAPF64[$err_rat >> 3] = +HEAPF64[$M + 8 >> 3] / +Math_abs(+(+HEAPF64[$M >> 3]));
  while (1) {
   if (!(+HEAPF64[$bp >> 3] > +HEAPF64[$1 >> 3] + .1)) break;
   HEAPF64[$bp >> 3] = +HEAPF64[$bp >> 3] - 1.0;
   HEAPF64[$M >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$bp >> 3] * +HEAPF64[$M >> 3] + 1.0;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$M >> 3];
  $86 = +HEAPF64[$err_rat >> 3] * +Math_abs(+(+HEAPF64[$M >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $86;
  $92 = (+Math_abs(+(+HEAPF64[$off >> 3])) + 1.0) * 4.440892098500626e-16;
  $95 = $92 * +Math_abs(+(+HEAPF64[$M >> 3]));
  $97 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$97 >> 3] = +HEAPF64[$97 >> 3] + $95;
  HEAP32[$0 >> 2] = HEAP32[$stat_s >> 2];
  $155 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 $101 = +Math_abs(+$52);
 if ($101 < +Math_abs(+(+HEAPF64[$1 >> 3]))) {
  $106 = +Math_abs(+(+HEAPF64[$2 >> 3]));
  $109 = +Math_sqrt(+(+Math_abs(+(+HEAPF64[$1 >> 3]))));
  if ($106 < $109 * +Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3]))) {
   HEAP32[$0 >> 2] = _hyperg_1F1_largebx(1.0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $155 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $155 | 0;
  }
 }
 $121 = +Math_abs(+(+HEAPF64[$2 >> 3]));
 $124 = $121 > +Math_abs(+(+HEAPF64[$1 >> 3]));
 $125 = +HEAPF64[$1 >> 3];
 $126 = +HEAPF64[$2 >> 3];
 $127 = HEAP32[$3 >> 2] | 0;
 if ($124) {
  HEAP32[$0 >> 2] = _hyperg_1F1_1_series($125, $126, $127) | 0;
  $155 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 } else {
  HEAP32[$0 >> 2] = _hyperg_1F1_large2bm4a(1.0, $125, $126, $127) | 0;
  $155 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 return 0;
}
function _gsl_sf_legendre_Plm_deriv_array($lmax, $m, $x, $result_array, $result_deriv_array) {
 $lmax = $lmax | 0;
 $m = $m | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 $result_deriv_array = $result_deriv_array | 0;
 var $0 = 0, $1 = 0, $13 = 0, $198 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $diff_a = 0, $diff_b = 0, $ell = 0, $sgn = 0, $stat_array = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $stat_array = sp + 36 | 0;
 $ell = sp + 32 | 0;
 $sgn = sp + 16 | 0;
 $diff_a = sp + 8 | 0;
 $diff_b = sp;
 HEAP32[$1 >> 2] = $lmax;
 HEAP32[$2 >> 2] = $m;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 HEAP32[$5 >> 2] = $result_deriv_array;
 if ((HEAP32[$2 >> 2] | 0) >= 0) if ((HEAP32[$2 >> 2] | 0) <= (HEAP32[$1 >> 2] | 0)) {
  $13 = HEAP32[$1 >> 2] | 0;
  if (!(HEAP32[$2 >> 2] | 0)) {
   HEAP32[$0 >> 2] = _gsl_sf_legendre_Pl_deriv_array($13, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
   $198 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $198 | 0;
  }
  HEAP32[$stat_array >> 2] = _gsl_sf_legendre_Plm_array($13, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_array >> 2] | 0) {
   HEAP32[$0 >> 2] = HEAP32[$stat_array >> 2];
   $198 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $198 | 0;
  }
  if ((HEAP32[$2 >> 2] | 0) == 1) if (1.0 - +Math_abs(+(+HEAPF64[$3 >> 3])) < 2.220446049250313e-16) {
   _gsl_error(53568, 53512, 453, 16);
   HEAP32[$0 >> 2] = 16;
   $198 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $198 | 0;
  }
  if ((HEAP32[$2 >> 2] | 0) == 2) if (1.0 - +Math_abs(+(+HEAPF64[$3 >> 3])) < 2.220446049250313e-16) {
   L20 : do if (+Math_abs(+(+HEAPF64[$3 >> 3] - 1.0)) < 2.220446049250313e-16) {
    HEAP32[$ell >> 2] = HEAP32[$2 >> 2];
    while (1) {
     if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break L20;
     HEAPF64[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = +HEAPF64[$3 >> 3] * -.25 * (+(HEAP32[$ell >> 2] | 0) - 1.0) * +(HEAP32[$ell >> 2] | 0) * (+(HEAP32[$ell >> 2] | 0) + 1.0) * (+(HEAP32[$ell >> 2] | 0) + 2.0);
     HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
    }
   } else if (+Math_abs(+(+HEAPF64[$3 >> 3] + 1.0)) < 2.220446049250313e-16) {
    HEAP32[$ell >> 2] = HEAP32[$2 >> 2];
    while (1) {
     if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break L20;
     HEAPF64[$sgn >> 3] = (HEAP32[$ell >> 2] & 1 | 0) != 0 ? 1.0 : -1.0;
     HEAPF64[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = +HEAPF64[$sgn >> 3] * -.25 * +HEAPF64[$3 >> 3] * (+(HEAP32[$ell >> 2] | 0) - 1.0) * +(HEAP32[$ell >> 2] | 0) * (+(HEAP32[$ell >> 2] | 0) + 1.0) * (+(HEAP32[$ell >> 2] | 0) + 2.0);
     HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[$0 >> 2] = 0;
   $198 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $198 | 0;
  }
  if (1.0 - +Math_abs(+(+HEAPF64[$3 >> 3])) < 2.220446049250313e-16) {
   HEAP32[$ell >> 2] = HEAP32[$2 >> 2];
   while (1) {
    if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = 0.0;
    HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
   }
   HEAP32[$0 >> 2] = 0;
   $198 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $198 | 0;
  }
  HEAPF64[$diff_a >> 3] = +HEAPF64[$3 >> 3] + 1.0;
  HEAPF64[$diff_b >> 3] = 1.0 - +HEAPF64[$3 >> 3];
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +(0 - (HEAP32[$2 >> 2] | 0) | 0) * +HEAPF64[$3 >> 3] / (+HEAPF64[$diff_a >> 3] * +HEAPF64[$diff_b >> 3]) * +HEAPF64[HEAP32[$4 >> 2] >> 3];
  if (((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) >= 1) HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = (+(HEAP32[$2 >> 2] | 0) * 2.0 + 1.0) * (+HEAPF64[$3 >> 3] * +HEAPF64[HEAP32[$5 >> 2] >> 3] + +HEAPF64[HEAP32[$4 >> 2] >> 3]);
  HEAP32[$ell >> 2] = (HEAP32[$2 >> 2] | 0) + 2;
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = -(+(HEAP32[$ell >> 2] | 0) * +HEAPF64[$3 >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] - +((HEAP32[$ell >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0) * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - 1 - (HEAP32[$2 >> 2] | 0) << 3) >> 3]) / (+HEAPF64[$diff_a >> 3] * +HEAPF64[$diff_b >> 3]);
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = 0;
  $198 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 _gsl_error(53544, 53512, 431, 1);
 HEAP32[$0 >> 2] = 1;
 $198 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $198 | 0;
}
function _hyperg_U_negx($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $103 = 0, $119 = 0.0, $125 = 0.0, $139 = 0, $150 = 0.0, $160 = 0.0, $170 = 0, $2 = 0, $3 = 0, $4 = 0, $50 = 0, $56 = 0.0, $62 = 0.0, $Mr1 = 0, $Mr2 = 0, $T1 = 0, $T1_err = 0, $T2 = 0, $T2_err = 0, $a_int = 0, $b_int = 0, $r1 = 0, $r2 = 0, $stat_1 = 0, $stat_2 = 0, $stat_Mr1 = 0, $stat_Mr2 = 0, $status = 0, $x1mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 160 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 112 | 0;
 $3 = sp + 104 | 0;
 $4 = sp + 156 | 0;
 $r1 = sp + 88 | 0;
 $r2 = sp + 72 | 0;
 $stat_1 = sp + 152 | 0;
 $stat_2 = sp + 148 | 0;
 $status = sp + 144 | 0;
 $a_int = sp + 140 | 0;
 $b_int = sp + 136 | 0;
 $T1 = sp + 64 | 0;
 $T1_err = sp + 56 | 0;
 $T2 = sp + 48 | 0;
 $T2_err = sp + 40 | 0;
 $Mr1 = sp + 24 | 0;
 $stat_Mr1 = sp + 132 | 0;
 $Mr2 = sp + 8 | 0;
 $stat_Mr2 = sp + 128 | 0;
 $x1mb = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$a_int >> 2] = +HEAPF64[$1 >> 3] == +Math_floor(+(+HEAPF64[$1 >> 3])) & 1;
 HEAP32[$b_int >> 2] = +HEAPF64[$2 >> 3] == +Math_floor(+(+HEAPF64[$2 >> 3])) & 1;
 HEAPF64[$T1 >> 3] = 0.0;
 HEAPF64[$T1_err >> 3] = 0.0;
 HEAPF64[$T2 >> 3] = 0.0;
 HEAPF64[$T2_err >> 3] = 0.0;
 do if (HEAP32[$b_int >> 2] | 0) if (+HEAPF64[$2 >> 3] <= 0.0) {
  if (HEAP32[$a_int >> 2] | 0) if (+HEAPF64[$1 >> 3] <= 0.0) if (+HEAPF64[$1 >> 3] >= +HEAPF64[$2 >> 3]) break;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(52320, 52168, 1538, 24);
  HEAP32[$0 >> 2] = 24;
  $170 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $170 | 0;
 } while (0);
 HEAP32[$stat_1 >> 2] = _gsl_sf_poch_e(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3], -+HEAPF64[$1 >> 3], $r1) | 0;
 HEAP32[$status >> 2] = HEAP32[$stat_1 >> 2];
 if (+HEAPF64[$r1 >> 3] != 0.0) {
  HEAP32[$stat_Mr1 >> 2] = _gsl_sf_hyperg_1F1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $Mr1) | 0;
  if (HEAP32[$status >> 2] | 0) $50 = HEAP32[$status >> 2] | 0; else $50 = (HEAP32[$stat_Mr1 >> 2] | 0) != 0 ? HEAP32[$stat_Mr1 >> 2] | 0 : 0;
  HEAP32[$status >> 2] = $50;
  HEAPF64[$T1 >> 3] = +HEAPF64[$Mr1 >> 3] * +HEAPF64[$r1 >> 3];
  $56 = +Math_abs(+(+HEAPF64[$T1 >> 3])) * 4.440892098500626e-16;
  $62 = $56 + +Math_abs(+(+HEAPF64[$Mr1 + 8 >> 3] * +HEAPF64[$r1 >> 3]));
  HEAPF64[$T1_err >> 3] = $62 + +Math_abs(+(+HEAPF64[$Mr1 >> 3] * +HEAPF64[$r1 + 8 >> 3]));
 }
 do if (HEAP32[$b_int >> 2] | 0) if (+HEAPF64[$2 >> 3] >= 2.0) {
  if (HEAP32[$a_int >> 2] | 0) if (+HEAPF64[$1 >> 3] <= +HEAPF64[$2 >> 3] - 2.0) break;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(52360, 52168, 1571, 24);
  HEAP32[$0 >> 2] = 24;
  $170 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $170 | 0;
 } while (0);
 if (HEAP32[$a_int >> 2] | 0) if (+HEAPF64[$1 >> 3] <= 0.0) if (+HEAPF64[$2 >> 3] >= 1.0) {
  HEAPF64[$r2 >> 3] = 0.0;
  HEAPF64[$r2 + 8 >> 3] = 0.0;
 } else label = 21; else label = 21; else label = 21;
 if ((label | 0) == 21) {
  HEAP32[$stat_2 >> 2] = _gsl_sf_poch_e(+HEAPF64[$1 >> 3], -(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3]), $r2) | 0;
  if (HEAP32[$status >> 2] | 0) $103 = HEAP32[$status >> 2] | 0; else $103 = (HEAP32[$stat_2 >> 2] | 0) != 0 ? HEAP32[$stat_2 >> 2] | 0 : 0;
  HEAP32[$status >> 2] = $103;
 }
 if (+HEAPF64[$r2 >> 3] != 0.0) {
  HEAP32[$stat_Mr2 >> 2] = _gsl_sf_hyperg_1F1_e(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3], 2.0 - +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $Mr2) | 0;
  HEAPF64[$T2 >> 3] = +HEAPF64[$Mr2 >> 3] * +HEAPF64[$r2 >> 3];
  $119 = +Math_abs(+(+HEAPF64[$T2 >> 3])) * 4.440892098500626e-16;
  $125 = $119 + +Math_abs(+(+HEAPF64[$Mr2 + 8 >> 3] * +HEAPF64[$r2 >> 3]));
  HEAPF64[$T2_err >> 3] = $125 + +Math_abs(+(+HEAPF64[$Mr2 >> 3] * +HEAPF64[$r2 + 8 >> 3]));
  if (HEAP32[$status >> 2] | 0) $139 = HEAP32[$status >> 2] | 0; else $139 = (HEAP32[$stat_Mr2 >> 2] | 0) != 0 ? HEAP32[$stat_Mr2 >> 2] | 0 : 0;
  HEAP32[$status >> 2] = $139;
  if (+HEAPF64[$T2 >> 3] != 0.0) {
   HEAPF64[$x1mb >> 3] = +Math_pow(+(+HEAPF64[$3 >> 3]), +(1.0 - +HEAPF64[$2 >> 3]));
   HEAPF64[$T2 >> 3] = +HEAPF64[$x1mb >> 3] * +HEAPF64[$T2 >> 3];
   $150 = +Math_abs(+(+HEAPF64[$x1mb >> 3]));
   HEAPF64[$T2_err >> 3] = $150 * +HEAPF64[$T2_err >> 3];
  }
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$T1 >> 3] + +HEAPF64[$T2 >> 3];
 $160 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $160 + (+HEAPF64[$T1_err >> 3] + +HEAPF64[$T2_err >> 3]);
 HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$status >> 2];
 $170 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $170 | 0;
}
function _gsl_sf_airy_Bi_e($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $110 = 0.0, $116 = 0.0, $118 = 0, $149 = 0.0, $155 = 0.0, $157 = 0, $161 = 0, $2 = 0, $21 = 0.0, $27 = 0.0, $3 = 0, $33 = 0.0, $35 = 0, $45 = 0, $47 = 0.0, $6 = 0.0, $71 = 0.0, $77 = 0.0, $79 = 0, $84 = 0.0, $85 = 0.0, $mod = 0, $result_bie = 0, $result_c0 = 0, $result_c02 = 0, $result_c1 = 0, $result_c13 = 0, $s = 0, $sin_result = 0, $stat_bie = 0, $stat_mp = 0, $stat_sin = 0, $theta = 0, $y = 0, $z = 0, $z1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 188 | 0;
 $1 = sp + 160 | 0;
 $2 = sp + 184 | 0;
 $3 = sp + 180 | 0;
 $mod = sp + 144 | 0;
 $theta = sp + 128 | 0;
 $sin_result = sp + 112 | 0;
 $stat_mp = sp + 176 | 0;
 $stat_sin = sp + 172 | 0;
 $z = sp + 104 | 0;
 $result_c0 = sp + 88 | 0;
 $result_c1 = sp + 72 | 0;
 $z1 = sp + 64 | 0;
 $result_c02 = sp + 48 | 0;
 $result_c13 = sp + 32 | 0;
 $y = sp + 24 | 0;
 $s = sp + 16 | 0;
 $result_bie = sp;
 $stat_bie = sp + 168 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAP32[$stat_mp >> 2] = _airy_mod_phase($6, HEAP32[$2 >> 2] | 0, $mod, $theta) | 0;
  HEAP32[$stat_sin >> 2] = _gsl_sf_sin_err_e(+HEAPF64[$theta >> 3], +HEAPF64[$theta + 8 >> 3], $sin_result) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$mod >> 3] * +HEAPF64[$sin_result >> 3];
  $21 = +Math_abs(+(+HEAPF64[$mod >> 3] * +HEAPF64[$sin_result + 8 >> 3]));
  $27 = $21 + +Math_abs(+(+HEAPF64[$sin_result >> 3] * +HEAPF64[$mod + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $27;
  $33 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $35 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$35 >> 3] = +HEAPF64[$35 >> 3] + $33;
  if (HEAP32[$stat_mp >> 2] | 0) $45 = HEAP32[$stat_mp >> 2] | 0; else $45 = (HEAP32[$stat_sin >> 2] | 0) != 0 ? HEAP32[$stat_sin >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $45;
  $161 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $161 | 0;
 }
 $47 = +HEAPF64[$1 >> 3];
 if ($6 < 1.0) {
  HEAPF64[$z >> 3] = $47 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  _cheb_eval_mode_e(2488, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c0) | 0;
  _cheb_eval_mode_e(2384, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c1) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$result_c0 >> 3] + .625 + +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c1 >> 3] + .4375);
  $71 = +HEAPF64[$result_c0 + 8 >> 3] + +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$result_c1 + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $71;
  $77 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $79 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$79 >> 3] = +HEAPF64[$79 >> 3] + $77;
  HEAP32[$0 >> 2] = 0;
  $161 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $161 | 0;
 }
 $84 = +HEAPF64[$1 >> 3] * 2.0;
 $85 = +HEAPF64[$1 >> 3];
 if ($47 <= 2.0) {
  HEAPF64[$z1 >> 3] = ($84 * $85 * +HEAPF64[$1 >> 3] - 9.0) / 7.0;
  _cheb_eval_mode_e(2288, +HEAPF64[$z1 >> 3], HEAP32[$2 >> 2] | 0, $result_c02) | 0;
  _cheb_eval_mode_e(2176, +HEAPF64[$z1 >> 3], HEAP32[$2 >> 2] | 0, $result_c13) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$result_c02 >> 3] + 1.125 + +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c13 >> 3] + .625);
  $110 = +HEAPF64[$result_c02 + 8 >> 3] + +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$result_c13 + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $110;
  $116 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $118 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$118 >> 3] = +HEAPF64[$118 >> 3] + $116;
  HEAP32[$0 >> 2] = 0;
  $161 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $161 | 0;
 }
 HEAPF64[$y >> 3] = $84 * +Math_sqrt(+$85) / 3.0;
 HEAPF64[$s >> 3] = +Math_exp(+(+HEAPF64[$y >> 3]));
 if (+HEAPF64[$y >> 3] > 708.782712893384) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(1416, 1408, 780, 16);
  HEAP32[$0 >> 2] = 16;
  $161 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $161 | 0;
 } else {
  HEAP32[$stat_bie >> 2] = _airy_bie(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result_bie) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$result_bie >> 3] * +HEAPF64[$s >> 3];
  $149 = +HEAPF64[$result_bie + 8 >> 3] * +HEAPF64[$s >> 3] + +Math_abs(+(+HEAPF64[$y >> 3] * 1.5 * +HEAPF64[HEAP32[$3 >> 2] >> 3] * 2.220446049250313e-16));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $149;
  $155 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $157 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$157 >> 3] = +HEAPF64[$157 >> 3] + $155;
  HEAP32[$0 >> 2] = HEAP32[$stat_bie >> 2];
  $161 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $161 | 0;
 }
 return 0;
}
function _conicalP_1_V($t, $f, $tau, $sgn, $V0, $V1) {
 $t = +$t;
 $f = +$f;
 $tau = +$tau;
 $sgn = +$sgn;
 $V0 = $V0 | 0;
 $V1 = $V1 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $C = 0, $Cm1 = 0, $H = 0, $T = 0, $V = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $0 = sp + 320 | 0;
 $1 = sp + 312 | 0;
 $2 = sp + 304 | 0;
 $3 = sp + 296 | 0;
 $4 = sp + 336 | 0;
 $5 = sp + 332 | 0;
 $Cm1 = sp + 288 | 0;
 $C = sp + 224 | 0;
 $T = sp + 160 | 0;
 $H = sp + 96 | 0;
 $V = sp;
 $i = sp + 328 | 0;
 HEAPF64[$0 >> 3] = $t;
 HEAPF64[$1 >> 3] = $f;
 HEAPF64[$2 >> 3] = $tau;
 HEAPF64[$3 >> 3] = $sgn;
 HEAP32[$4 >> 2] = $V0;
 HEAP32[$5 >> 2] = $V1;
 HEAPF64[$T >> 3] = 1.0;
 HEAPF64[$H >> 3] = 1.0;
 HEAPF64[$V >> 3] = 1.0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > 7) break;
  HEAPF64[$T + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$T + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3] * +HEAPF64[$0 >> 3];
  HEAPF64[$H + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$H + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3] * +HEAPF64[$0 >> 3] * +HEAPF64[$1 >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > 11) break;
  HEAPF64[$V + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$V + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3] * +HEAPF64[$2 >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$Cm1 >> 3] = -1.0;
 HEAPF64[$C >> 3] = (1.0 - +HEAPF64[$H + 8 >> 3]) * 3.0 / (+HEAPF64[$T + 8 >> 3] * 8.0);
 HEAPF64[$C + 8 >> 3] = (+HEAPF64[$H + 16 >> 3] * -15.0 + +HEAPF64[$H + 8 >> 3] * 6.0 + 9.0 + +HEAPF64[$3 >> 3] * 8.0 * +HEAPF64[$T + 16 >> 3]) / (+HEAPF64[$T + 16 >> 3] * 128.0);
 HEAPF64[$C + 16 >> 3] = (+HEAPF64[$H + 24 >> 3] * -35.0 - +HEAPF64[$H + 16 >> 3] * 15.0 + +HEAPF64[$H + 8 >> 3] * 15.0 + 35.0 + +HEAPF64[$3 >> 3] * +HEAPF64[$T + 16 >> 3] * (+HEAPF64[$H + 8 >> 3] * 32.0 + 8.0)) * 3.0 / (+HEAPF64[$T + 24 >> 3] * 1024.0);
 HEAPF64[$C + 24 >> 3] = (+HEAPF64[$H + 32 >> 3] * -4725.0 - +HEAPF64[$H + 24 >> 3] * 6300.0 - +HEAPF64[$H + 16 >> 3] * 3150.0 + +HEAPF64[$H + 8 >> 3] * 3780.0 + 10395.0 - +HEAPF64[$T + 32 >> 3] * 1216.0 + +HEAPF64[$3 >> 3] * +HEAPF64[$T + 16 >> 3] * (+HEAPF64[$H + 16 >> 3] * 6.0e3 + +HEAPF64[$H + 8 >> 3] * 5760.0 + 1680.0)) / (+HEAPF64[$T + 32 >> 3] * 32768.0);
 HEAPF64[$C + 32 >> 3] = (+HEAPF64[$H + 40 >> 3] * -10395.0 - +HEAPF64[$H + 32 >> 3] * 23625.0 - +HEAPF64[$H + 24 >> 3] * 28350.0 - +HEAPF64[$H + 16 >> 3] * 14850.0 + +HEAPF64[$H + 8 >> 3] * 19305.0 + 57915.0 - +HEAPF64[$T + 32 >> 3] * (+HEAPF64[$H + 8 >> 3] * 6336.0 + 6080.0) + +HEAPF64[$3 >> 3] * +HEAPF64[$T + 16 >> 3] * (+HEAPF64[$H + 24 >> 3] * 16800.0 + +HEAPF64[$H + 16 >> 3] * 3.0e4 + +HEAPF64[$H + 8 >> 3] * 25920.0 + 7920.0)) * 7.0 / (+HEAPF64[$T + 40 >> 3] * 262144.0);
 HEAPF64[$C + 40 >> 3] = (+HEAPF64[$H + 48 >> 3] * -2837835.0 - +HEAPF64[$H + 40 >> 3] * 9168390.0 - +HEAPF64[$H + 32 >> 3] * 16372125.0 - +HEAPF64[$H + 24 >> 3] * 18918900.0 - +HEAPF64[$H + 16 >> 3] * 10135125.0 + +HEAPF64[$H + 8 >> 3] * 13783770.0 + 43648605.0 - +HEAPF64[$T + 32 >> 3] * (+HEAPF64[$H + 16 >> 3] * 3044160.0 + +HEAPF64[$H + 8 >> 3] * 5588352.0 + 4213440.0) + +HEAPF64[$3 >> 3] * +HEAPF64[$T + 16 >> 3] * (+HEAPF64[$H + 32 >> 3] * 5556600.0 + +HEAPF64[$H + 24 >> 3] * 14817600.0 + +HEAPF64[$H + 16 >> 3] * 2079.0e4 + +HEAPF64[$H + 8 >> 3] * 17297280.0 + 5405400.0 + +HEAPF64[$T + 32 >> 3] * 323072.0)) / (+HEAPF64[$T + 48 >> 3] * 4194304.0);
 HEAPF64[$C + 48 >> 3] = 0.0;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$C >> 3] + (+HEAPF64[$C + 24 >> 3] * -4.0 / +HEAPF64[$T + 8 >> 3] + +HEAPF64[$C + 32 >> 3]) / +HEAPF64[$V + 32 >> 3] + (+HEAPF64[$C + 40 >> 3] * -192.0 / +HEAPF64[$T + 24 >> 3] + +HEAPF64[$C + 48 >> 3] * 144.0 / +HEAPF64[$T + 16 >> 3]) / +HEAPF64[$V + 64 >> 3] + +HEAPF64[$3 >> 3] * (-+HEAPF64[$C + 16 >> 3] / +HEAPF64[$V + 16 >> 3] + (+HEAPF64[$C + 32 >> 3] * -24.0 / +HEAPF64[$T + 16 >> 3] + +HEAPF64[$C + 40 >> 3] * 12.0 / +HEAPF64[$T + 8 >> 3] - +HEAPF64[$C + 48 >> 3]) / +HEAPF64[$V + 48 >> 3]);
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$C + 8 >> 3] / +HEAPF64[$V + 8 >> 3] + ((+HEAPF64[$C + 24 >> 3] / +HEAPF64[$T + 16 >> 3] - +HEAPF64[$C + 32 >> 3] / +HEAPF64[$T + 8 >> 3]) * 8.0 + +HEAPF64[$C + 40 >> 3]) / +HEAPF64[$V + 40 >> 3] + (+HEAPF64[$C + 40 >> 3] * 384.0 / +HEAPF64[$T + 32 >> 3] - +HEAPF64[$C + 48 >> 3] * 768.0 / +HEAPF64[$T + 24 >> 3]) / +HEAPF64[$V + 72 >> 3] + +HEAPF64[$3 >> 3] * (+HEAPF64[$Cm1 >> 3] * +HEAPF64[$V + 8 >> 3] + (+HEAPF64[$C + 16 >> 3] * 2.0 / +HEAPF64[$T + 8 >> 3] - +HEAPF64[$C + 24 >> 3]) / +HEAPF64[$V + 24 >> 3] + (+HEAPF64[$C + 32 >> 3] * 48.0 / +HEAPF64[$T + 24 >> 3] - +HEAPF64[$C + 40 >> 3] * 72.0 / +HEAPF64[$T + 16 >> 3] + +HEAPF64[$C + 48 >> 3] * 18.0 / +HEAPF64[$T + 8 >> 3]) / +HEAPF64[$V + 56 >> 3]);
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_bessel_sequence_Jnu_e($nu, $mode, $size, $v) {
 $nu = +$nu;
 $mode = $mode | 0;
 $size = $size | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $138 = 0, $2 = 0, $27 = 0.0, $3 = 0, $4 = 0, $J = 0, $J0 = 0, $J1 = 0, $Jp = 0, $Nd = 0, $cnu = 0, $dv = 0, $dx = 0, $dx_nominal = 0, $goal = 0, $i = 0, $j = 0, $nu13 = 0, $x = 0, $x_small = 0, $xj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 144 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 140 | 0;
 $3 = sp + 136 | 0;
 $4 = sp + 132 | 0;
 $goal = sp + 128 | 0;
 $dx_nominal = sp + 96 | 0;
 $cnu = sp + 124 | 0;
 $nu13 = sp + 88 | 0;
 $x_small = sp + 80 | 0;
 $J0 = sp + 64 | 0;
 $J1 = sp + 48 | 0;
 $Jp = sp + 40 | 0;
 $J = sp + 32 | 0;
 $x = sp + 24 | 0;
 $i = sp + 120 | 0;
 $dv = sp + 16 | 0;
 $Nd = sp + 116 | 0;
 $dx = sp + 8 | 0;
 $xj = sp;
 $j = sp + 112 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $size;
 HEAP32[$4 >> 2] = $v;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  _gsl_error(19384, 19400, 62, 1);
  HEAP32[$0 >> 2] = 1;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 if (!(HEAP32[$3 >> 2] | 0)) {
  _gsl_error(19424, 19400, 65, 4);
  HEAP32[$0 >> 2] = 4;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAP32[$goal >> 2] = _GSL_MODE_PREC(HEAP32[$2 >> 2] | 0) | 0;
 HEAPF64[$dx_nominal >> 3] = +HEAPF64[19432 + (HEAP32[$goal >> 2] << 3) >> 3];
 HEAP32[$cnu >> 2] = ~~+Math_ceil(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$nu13 >> 3] = +Math_pow(+(+HEAPF64[$1 >> 3]), .3333333333333333);
 if (+HEAPF64[$1 >> 3] >= 10.0) $27 = +HEAPF64[$1 >> 3] - +HEAPF64[$nu13 >> 3]; else $27 = +HEAPF64[19456 + (HEAP32[$cnu >> 2] << 3) >> 3];
 HEAPF64[$x_small >> 3] = $27;
 HEAP32[$i >> 2] = 0;
 HEAPF64[$x >> 3] = +HEAPF64[HEAP32[$4 >> 2] >> 3];
 _gsl_sf_bessel_Jnu_e(+HEAPF64[$1 >> 3], +HEAPF64[$x >> 3], $J0) | 0;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$J0 >> 3];
 HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 do if (+HEAPF64[$x >> 3] == 0.0) {
  if (!(+HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] <= +HEAPF64[$x >> 3])) {
   HEAPF64[$x >> 3] = +HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3];
   _gsl_sf_bessel_Jnu_e(+HEAPF64[$1 >> 3], +HEAPF64[$x >> 3], $J0) | 0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$J0 >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   break;
  }
  _gsl_error(19424, 19400, 94, 5);
  HEAP32[$0 >> 2] = 5;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 } while (0);
 while (1) {
  if (!(+HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] < +HEAPF64[$x_small >> 3])) break;
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) break;
  if (+HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] <= +HEAPF64[$x >> 3]) {
   label = 15;
   break;
  }
  HEAPF64[$x >> 3] = +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3];
  _gsl_sf_bessel_Jnu_e(+HEAPF64[$1 >> 3], +HEAPF64[$x >> 3], $J0) | 0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$J0 >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 15) {
  _gsl_error(19424, 19400, 109, 5);
  HEAP32[$0 >> 2] = 5;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 _gsl_sf_bessel_Jnu_e(+HEAPF64[$1 >> 3] + 1.0, +HEAPF64[$x >> 3], $J1) | 0;
 HEAPF64[$J >> 3] = +HEAPF64[$J0 >> 3];
 HEAPF64[$Jp >> 3] = -+HEAPF64[$J1 >> 3] + +HEAPF64[$1 >> 3] / +HEAPF64[$x >> 3] * +HEAPF64[$J0 >> 3];
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) {
   label = 25;
   break;
  }
  HEAPF64[$dv >> 3] = +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] - +HEAPF64[$x >> 3];
  HEAP32[$Nd >> 2] = ~~+Math_ceil(+(+HEAPF64[$dv >> 3] / +HEAPF64[$dx_nominal >> 3]));
  HEAPF64[$dx >> 3] = +HEAPF64[$dv >> 3] / +(HEAP32[$Nd >> 2] | 0);
  if (+HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] <= +HEAPF64[$x >> 3]) {
   label = 20;
   break;
  }
  HEAP32[$j >> 2] = 0;
  HEAPF64[$xj >> 3] = +HEAPF64[$x >> 3];
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$Nd >> 2] | 0)) break;
   _rk_step(+HEAPF64[$1 >> 3], +HEAPF64[$xj >> 3], +HEAPF64[$dx >> 3], $Jp, $J) | 0;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   HEAPF64[$xj >> 3] = +HEAPF64[$xj >> 3] + +HEAPF64[$dx >> 3];
  }
  HEAPF64[$x >> 3] = +HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$J >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 20) {
  _gsl_error(19424, 19400, 137, 5);
  HEAP32[$0 >> 2] = 5;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 } else if ((label | 0) == 25) {
  HEAP32[$0 >> 2] = 0;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_Y1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $112 = 0.0, $119 = 0.0, $129 = 0.0, $131 = 0, $144 = 0, $148 = 0, $15 = 0.0, $2 = 0, $31 = 0.0, $34 = 0.0, $48 = 0.0, $69 = 0.0, $72 = 0.0, $J1 = 0, $J13 = 0, $ampl = 0, $c = 0, $c4 = 0, $ca = 0, $cp = 0, $ct = 0, $lnterm = 0, $lnterm1 = 0, $sqrtx = 0, $stat_ca = 0, $stat_cp = 0, $stat_ct = 0, $status = 0, $status2 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 216 | 0;
 $1 = sp + 184 | 0;
 $2 = sp + 212 | 0;
 $lnterm = sp + 144 | 0;
 $J1 = sp + 128 | 0;
 $c = sp + 112 | 0;
 $status = sp + 208 | 0;
 $lnterm1 = sp + 104 | 0;
 $status2 = sp + 204 | 0;
 $J13 = sp + 88 | 0;
 $c4 = sp + 72 | 0;
 $z = sp + 64 | 0;
 $ca = sp + 48 | 0;
 $ct = sp + 32 | 0;
 $cp = sp + 16 | 0;
 $stat_ca = sp + 200 | 0;
 $stat_ct = sp + 196 | 0;
 $stat_cp = sp + 192 | 0;
 $sqrtx = sp + 8 | 0;
 $ampl = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 176 >> 3] = .6366197723675814;
 HEAPF64[sp + 168 >> 3] = 3.4955910317148133e-308;
 HEAPF64[sp + 160 >> 3] = 2.9802322387695312e-8;
 HEAPF64[sp + 152 >> 3] = 4503599627370496.0;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(14376, 14392, 83, 1);
  HEAP32[$0 >> 2] = 1;
  $148 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 3.4955910317148133e-308) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(14408, 14392, 86, 16);
  HEAP32[$0 >> 2] = 16;
  $148 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 2.9802322387695312e-8) {
  HEAPF64[$lnterm >> 3] = +Math_log(+(.5 * $15));
  HEAP32[$status >> 2] = _gsl_sf_bessel_J1_e(+HEAPF64[$1 >> 3], $J1) | 0;
  _cheb_eval_e145(14584, -1.0, $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$lnterm >> 3] * .6366197723675814 * +HEAPF64[$J1 >> 3] + (+HEAPF64[$c >> 3] + .5) / +HEAPF64[$1 >> 3];
  $31 = +Math_abs(+(+HEAPF64[$lnterm >> 3]));
  $34 = +Math_abs(+(+HEAPF64[$J1 >> 3] * 2.220446049250313e-16));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $31 * ($34 + +HEAPF64[$J1 + 8 >> 3]) + +HEAPF64[$c + 8 >> 3] / +HEAPF64[$1 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $148 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 $48 = +HEAPF64[$1 >> 3];
 if ($15 < 4.0) {
  HEAPF64[$lnterm1 >> 3] = +Math_log(+(.5 * $48));
  _cheb_eval_e145(14584, +HEAPF64[$1 >> 3] * .125 * +HEAPF64[$1 >> 3] - 1.0, $c4) | 0;
  HEAP32[$status2 >> 2] = _gsl_sf_bessel_J1_e(+HEAPF64[$1 >> 3], $J13) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$lnterm1 >> 3] * .6366197723675814 * +HEAPF64[$J13 >> 3] + (+HEAPF64[$c4 >> 3] + .5) / +HEAPF64[$1 >> 3];
  $69 = +Math_abs(+(+HEAPF64[$lnterm1 >> 3]));
  $72 = +Math_abs(+(+HEAPF64[$J13 >> 3] * 2.220446049250313e-16));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $69 * ($72 + +HEAPF64[$J13 + 8 >> 3]) + +HEAPF64[$c4 + 8 >> 3] / +HEAPF64[$1 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$status2 >> 2];
  $148 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 if (!($48 < 4503599627370496.0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(14424, 14392, 125, 15);
  HEAP32[$0 >> 2] = 15;
  $148 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 HEAPF64[$z >> 3] = 32.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - 1.0;
 HEAP32[$stat_ca >> 2] = _cheb_eval_e145(15360, +HEAPF64[$z >> 3], $ca) | 0;
 HEAP32[$stat_ct >> 2] = _cheb_eval_e145(15584, +HEAPF64[$z >> 3], $ct) | 0;
 HEAP32[$stat_cp >> 2] = _gsl_sf_bessel_cos_pi4_e(+HEAPF64[$1 >> 3], +HEAPF64[$ct >> 3] / +HEAPF64[$1 >> 3], $cp) | 0;
 HEAPF64[$sqrtx >> 3] = +Math_sqrt(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$ampl >> 3] = (+HEAPF64[$ca >> 3] + .75) / +HEAPF64[$sqrtx >> 3];
 HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$ampl >> 3] * +HEAPF64[$cp >> 3];
 $112 = +Math_abs(+(+HEAPF64[$cp >> 3]));
 $119 = +Math_abs(+(+HEAPF64[$ampl >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $112 * +HEAPF64[$ca + 8 >> 3] / +HEAPF64[$sqrtx >> 3] + $119 * +HEAPF64[$cp + 8 >> 3];
 $129 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
 $131 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$131 >> 3] = +HEAPF64[$131 >> 3] + $129;
 do if (HEAP32[$stat_ca >> 2] | 0) $144 = HEAP32[$stat_ca >> 2] | 0; else if (HEAP32[$stat_ct >> 2] | 0) {
  $144 = HEAP32[$stat_ct >> 2] | 0;
  break;
 } else {
  $144 = (HEAP32[$stat_cp >> 2] | 0) != 0 ? HEAP32[$stat_cp >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $144;
 $148 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $148 | 0;
}
function _coulomb_CF2($lambda, $eta, $x, $result_P, $result_Q, $count) {
 $lambda = +$lambda;
 $eta = +$eta;
 $x = +$x;
 $result_P = $result_P | 0;
 $result_Q = $result_Q | 0;
 $count = $count | 0;
 var $0 = 0, $1 = 0, $149 = 0, $153 = 0.0, $156 = 0.0, $158 = 0.0, $169 = 0.0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $A = 0, $B = 0, $C = 0, $D = 0, $P = 0, $Q = 0, $ai = 0, $ar = 0, $bi = 0, $br = 0, $di = 0, $dp = 0, $dq = 0, $dr = 0, $e2mm1 = 0, $pk = 0, $status = 0, $wi = 0, $x_inv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $0 = sp + 176 | 0;
 $1 = sp + 168 | 0;
 $2 = sp + 160 | 0;
 $3 = sp + 196 | 0;
 $4 = sp + 192 | 0;
 $5 = sp + 188 | 0;
 $status = sp + 184 | 0;
 $wi = sp + 136 | 0;
 $x_inv = sp + 128 | 0;
 $e2mm1 = sp + 120 | 0;
 $ar = sp + 112 | 0;
 $ai = sp + 104 | 0;
 $br = sp + 96 | 0;
 $bi = sp + 88 | 0;
 $dr = sp + 80 | 0;
 $di = sp + 72 | 0;
 $dp = sp + 64 | 0;
 $dq = sp + 56 | 0;
 $A = sp + 48 | 0;
 $B = sp + 40 | 0;
 $C = sp + 32 | 0;
 $D = sp + 24 | 0;
 $pk = sp + 16 | 0;
 $P = sp + 8 | 0;
 $Q = sp;
 HEAPF64[$0 >> 3] = $lambda;
 HEAPF64[$1 >> 3] = $eta;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result_P;
 HEAP32[$4 >> 2] = $result_Q;
 HEAP32[$5 >> 2] = $count;
 HEAP32[$status >> 2] = 0;
 HEAPF64[sp + 152 >> 3] = 8.881784197001252e-16;
 HEAPF64[sp + 144 >> 3] = 2.0e5;
 HEAPF64[$wi >> 3] = +HEAPF64[$1 >> 3] * 2.0;
 HEAPF64[$x_inv >> 3] = 1.0 / +HEAPF64[$2 >> 3];
 HEAPF64[$e2mm1 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] + +HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] + 1.0);
 HEAPF64[$ar >> 3] = -+HEAPF64[$e2mm1 >> 3];
 HEAPF64[$ai >> 3] = +HEAPF64[$1 >> 3];
 HEAPF64[$br >> 3] = (+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]) * 2.0;
 HEAPF64[$bi >> 3] = 2.0;
 HEAPF64[$dr >> 3] = +HEAPF64[$br >> 3] / (+HEAPF64[$br >> 3] * +HEAPF64[$br >> 3] + +HEAPF64[$bi >> 3] * +HEAPF64[$bi >> 3]);
 HEAPF64[$di >> 3] = -+HEAPF64[$bi >> 3] / (+HEAPF64[$br >> 3] * +HEAPF64[$br >> 3] + +HEAPF64[$bi >> 3] * +HEAPF64[$bi >> 3]);
 HEAPF64[$dp >> 3] = -+HEAPF64[$x_inv >> 3] * (+HEAPF64[$ar >> 3] * +HEAPF64[$di >> 3] + +HEAPF64[$ai >> 3] * +HEAPF64[$dr >> 3]);
 HEAPF64[$dq >> 3] = +HEAPF64[$x_inv >> 3] * (+HEAPF64[$ar >> 3] * +HEAPF64[$dr >> 3] - +HEAPF64[$ai >> 3] * +HEAPF64[$di >> 3]);
 HEAPF64[$pk >> 3] = 0.0;
 HEAPF64[$P >> 3] = 0.0;
 HEAPF64[$Q >> 3] = 1.0 - +HEAPF64[$1 >> 3] * +HEAPF64[$x_inv >> 3];
 HEAP32[HEAP32[$5 >> 2] >> 2] = 0;
 do {
  HEAPF64[$P >> 3] = +HEAPF64[$P >> 3] + +HEAPF64[$dp >> 3];
  HEAPF64[$Q >> 3] = +HEAPF64[$Q >> 3] + +HEAPF64[$dq >> 3];
  HEAPF64[$pk >> 3] = +HEAPF64[$pk >> 3] + 2.0;
  HEAPF64[$ar >> 3] = +HEAPF64[$ar >> 3] + +HEAPF64[$pk >> 3];
  HEAPF64[$ai >> 3] = +HEAPF64[$ai >> 3] + +HEAPF64[$wi >> 3];
  HEAPF64[$bi >> 3] = +HEAPF64[$bi >> 3] + 2.0;
  HEAPF64[$D >> 3] = +HEAPF64[$ar >> 3] * +HEAPF64[$dr >> 3] - +HEAPF64[$ai >> 3] * +HEAPF64[$di >> 3] + +HEAPF64[$br >> 3];
  HEAPF64[$di >> 3] = +HEAPF64[$ai >> 3] * +HEAPF64[$dr >> 3] + +HEAPF64[$ar >> 3] * +HEAPF64[$di >> 3] + +HEAPF64[$bi >> 3];
  HEAPF64[$C >> 3] = 1.0 / (+HEAPF64[$D >> 3] * +HEAPF64[$D >> 3] + +HEAPF64[$di >> 3] * +HEAPF64[$di >> 3]);
  HEAPF64[$dr >> 3] = +HEAPF64[$C >> 3] * +HEAPF64[$D >> 3];
  HEAPF64[$di >> 3] = -+HEAPF64[$C >> 3] * +HEAPF64[$di >> 3];
  HEAPF64[$A >> 3] = +HEAPF64[$br >> 3] * +HEAPF64[$dr >> 3] - +HEAPF64[$bi >> 3] * +HEAPF64[$di >> 3] - 1.0;
  HEAPF64[$B >> 3] = +HEAPF64[$bi >> 3] * +HEAPF64[$dr >> 3] + +HEAPF64[$br >> 3] * +HEAPF64[$di >> 3];
  HEAPF64[$C >> 3] = +HEAPF64[$dp >> 3] * +HEAPF64[$A >> 3] - +HEAPF64[$dq >> 3] * +HEAPF64[$B >> 3];
  HEAPF64[$dq >> 3] = +HEAPF64[$dp >> 3] * +HEAPF64[$B >> 3] + +HEAPF64[$dq >> 3] * +HEAPF64[$A >> 3];
  HEAPF64[$dp >> 3] = +HEAPF64[$C >> 3];
  if (+HEAPF64[$pk >> 3] > 2.0e5) {
   label = 3;
   break;
  }
  $149 = HEAP32[$5 >> 2] | 0;
  HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
  $153 = +Math_abs(+(+HEAPF64[$dp >> 3]));
  $156 = $153 + +Math_abs(+(+HEAPF64[$dq >> 3]));
  $158 = +Math_abs(+(+HEAPF64[$P >> 3]));
 } while ($156 > ($158 + +Math_abs(+(+HEAPF64[$Q >> 3]))) * 8.881784197001252e-16);
 if ((label | 0) == 3) HEAP32[$status >> 2] = 10;
 if (!(+HEAPF64[$Q >> 3] < +Math_abs(+(+HEAPF64[$P >> 3])) * 4.440892098500626e-11)) {
  $169 = +HEAPF64[$P >> 3];
  $170 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$170 >> 3] = $169;
  $171 = +HEAPF64[$Q >> 3];
  $172 = HEAP32[$4 >> 2] | 0;
  HEAPF64[$172 >> 3] = $171;
  $173 = HEAP32[$status >> 2] | 0;
  STACKTOP = sp;
  return $173 | 0;
 }
 HEAP32[$status >> 2] = 17;
 $169 = +HEAPF64[$P >> 3];
 $170 = HEAP32[$3 >> 2] | 0;
 HEAPF64[$170 >> 3] = $169;
 $171 = +HEAPF64[$Q >> 3];
 $172 = HEAP32[$4 >> 2] | 0;
 HEAPF64[$172 >> 3] = $171;
 $173 = HEAP32[$status >> 2] | 0;
 STACKTOP = sp;
 return $173 | 0;
}
function _olver_B1($z, $abs_zeta) {
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 var $0 = 0, $1 = 0, $2 = 0, $200 = 0.0, $5 = 0.0, $87 = 0.0, $a = 0, $rz = 0, $rz3 = 0, $t = 0, $t1 = 0, $t2 = 0, $t22 = 0, $term1 = 0, $term16 = 0, $term2 = 0, $term27 = 0, $term3 = 0, $term38 = 0, $term4 = 0, $term49 = 0, $z32 = 0, $z324 = 0, $z92 = 0, $z925 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $0 = sp + 256 | 0;
 $1 = sp + 248 | 0;
 $2 = sp + 240 | 0;
 $t = sp + 232 | 0;
 $t2 = sp + 224 | 0;
 $rz = sp + 216 | 0;
 $z32 = sp + 208 | 0;
 $z92 = sp + 200 | 0;
 $term1 = sp + 192 | 0;
 $term2 = sp + 184 | 0;
 $term3 = sp + 176 | 0;
 $term4 = sp + 168 | 0;
 $a = sp + 160 | 0;
 $t1 = sp + 64 | 0;
 $t22 = sp + 56 | 0;
 $rz3 = sp + 48 | 0;
 $z324 = sp + 40 | 0;
 $z925 = sp + 32 | 0;
 $term16 = sp + 24 | 0;
 $term27 = sp + 16 | 0;
 $term38 = sp + 8 | 0;
 $term49 = sp;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[$2 >> 3] = $abs_zeta;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .88) {
  HEAPF64[$t >> 3] = 1.0 / +Math_sqrt(+(1.0 - $5 * +HEAPF64[$1 >> 3]));
  HEAPF64[$t2 >> 3] = +HEAPF64[$t >> 3] * +HEAPF64[$t >> 3];
  HEAPF64[$rz >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$z32 >> 3] = +HEAPF64[$rz >> 3] * +HEAPF64[$rz >> 3] * +HEAPF64[$rz >> 3];
  HEAPF64[$z92 >> 3] = +HEAPF64[$z32 >> 3] * +HEAPF64[$z32 >> 3] * +HEAPF64[$z32 >> 3];
  HEAPF64[$term1 >> 3] = +HEAPF64[$t >> 3] * +HEAPF64[$t >> 3] * +HEAPF64[$t >> 3] * (30375.0 - +HEAPF64[$t2 >> 3] * 369603.0 + +HEAPF64[$t2 >> 3] * 765765.0 * +HEAPF64[$t2 >> 3] - +HEAPF64[$t2 >> 3] * 425425.0 * +HEAPF64[$t2 >> 3] * +HEAPF64[$t2 >> 3]) / 414720.0;
  HEAPF64[$term2 >> 3] = 85085.0 / (+HEAPF64[$z92 >> 3] * 663552.0);
  HEAPF64[$term3 >> 3] = +HEAPF64[$t >> 3] * .0034812644675925927 * (3.0 - +HEAPF64[$t2 >> 3] * 5.0) / (+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
  HEAPF64[$term4 >> 3] = +HEAPF64[$t2 >> 3] * 904224537037037.0e-19 * (81.0 - +HEAPF64[$t2 >> 3] * 462.0 + +HEAPF64[$t2 >> 3] * 385.0 * +HEAPF64[$t2 >> 3]) / +HEAPF64[$z32 >> 3];
  HEAPF64[$0 >> 3] = -(+HEAPF64[$term1 >> 3] + +HEAPF64[$term2 >> 3] + +HEAPF64[$term3 >> 3] + +HEAPF64[$term4 >> 3]) / +HEAPF64[$rz >> 3];
  $200 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$200;
 }
 $87 = +HEAPF64[$1 >> 3];
 if ($5 < 1.12) {
  HEAPF64[$a >> 3] = 1.0 - $87;
  HEAPF64[sp + 152 >> 3] = -.0014928295321342917;
  HEAPF64[sp + 144 >> 3] = -.0017564094190927787;
  HEAPF64[sp + 136 >> 3] = -.0011334614887417492;
  HEAPF64[sp + 128 >> 3] = -.00034691090981382977;
  HEAPF64[sp + 120 >> 3] = .00022752516104839244;
  HEAPF64[sp + 112 >> 3] = .0005176414572424484;
  HEAPF64[sp + 104 >> 3] = .0005890617485819423;
  HEAPF64[sp + 96 >> 3] = .0005348551452188807;
  HEAPF64[sp + 88 >> 3] = .0004289179298622015;
  HEAPF64[sp + 80 >> 3] = .00031639765900613634;
  HEAPF64[sp + 72 >> 3] = .00021908147678699594;
  HEAPF64[$0 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * .00021908147678699594 + .00031639765900613634) + .0004289179298622015) + .0005348551452188807) + .0005890617485819423) + .0005176414572424484) + .00022752516104839244) + -.00034691090981382977) + -.0011334614887417492) + -.0017564094190927787) + -.0014928295321342917;
  $200 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$200;
 } else {
  HEAPF64[$t1 >> 3] = 1.0 / ($87 * +Math_sqrt(+(1.0 - 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]))));
  HEAPF64[$t22 >> 3] = +HEAPF64[$t1 >> 3] * +HEAPF64[$t1 >> 3];
  HEAPF64[$rz3 >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$z324 >> 3] = +HEAPF64[$rz3 >> 3] * +HEAPF64[$rz3 >> 3] * +HEAPF64[$rz3 >> 3];
  HEAPF64[$z925 >> 3] = +HEAPF64[$z324 >> 3] * +HEAPF64[$z324 >> 3] * +HEAPF64[$z324 >> 3];
  HEAPF64[$term16 >> 3] = -+HEAPF64[$t22 >> 3] * +HEAPF64[$t1 >> 3] * (+HEAPF64[$t22 >> 3] * 369603.0 + 30375.0 + +HEAPF64[$t22 >> 3] * 765765.0 * +HEAPF64[$t22 >> 3] + +HEAPF64[$t22 >> 3] * 425425.0 * +HEAPF64[$t22 >> 3] * +HEAPF64[$t22 >> 3]) / 414720.0;
  HEAPF64[$term27 >> 3] = 85085.0 / (+HEAPF64[$z925 >> 3] * 663552.0);
  HEAPF64[$term38 >> 3] = +HEAPF64[$t1 >> 3] * -.0034812644675925927 * (+HEAPF64[$t22 >> 3] * 5.0 + 3.0) / (+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
  HEAPF64[$term49 >> 3] = +HEAPF64[$t22 >> 3] * 904224537037037.0e-19 * (+HEAPF64[$t22 >> 3] * 462.0 + 81.0 + +HEAPF64[$t22 >> 3] * 385.0 * +HEAPF64[$t22 >> 3]) / +HEAPF64[$z324 >> 3];
  HEAPF64[$0 >> 3] = (+HEAPF64[$term16 >> 3] + +HEAPF64[$term27 >> 3] + +HEAPF64[$term38 >> 3] + +HEAPF64[$term49 >> 3]) / +HEAPF64[$rz3 >> 3];
  $200 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$200;
 }
 return 0.0;
}
function _gsl_sf_hzeta_e($s, $q, $result) {
 $s = +$s;
 $q = +$q;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $108 = 0.0, $159 = 0.0, $162 = 0, $2 = 0, $3 = 0, $37 = 0.0, $42 = 0.0, $79 = 0.0, $ans = 0, $delta = 0, $j = 0, $jmax = 0, $k = 0, $kmax = 0, $ln_term0 = 0, $max_bits = 0, $p1 = 0, $p2 = 0, $p3 = 0, $pcp = 0, $pmax = 0, $scp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 112 | 0;
 $max_bits = sp + 72 | 0;
 $ln_term0 = sp + 64 | 0;
 $p1 = sp + 56 | 0;
 $p2 = sp + 48 | 0;
 $p3 = sp + 40 | 0;
 $jmax = sp + 108 | 0;
 $kmax = sp + 104 | 0;
 $j = sp + 100 | 0;
 $k = sp + 96 | 0;
 $pmax = sp + 32 | 0;
 $scp = sp + 24 | 0;
 $pcp = sp + 16 | 0;
 $ans = sp + 8 | 0;
 $delta = sp;
 HEAPF64[$1 >> 3] = $s;
 HEAPF64[$2 >> 3] = $q;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$1 >> 3] <= 1.0)) if (!(+HEAPF64[$2 >> 3] <= 0.0)) {
  HEAPF64[$max_bits >> 3] = 54.0;
  HEAPF64[$ln_term0 >> 3] = -+HEAPF64[$1 >> 3] * +Math_log(+(+HEAPF64[$2 >> 3]));
  if (+HEAPF64[$ln_term0 >> 3] < -707.3964185322641) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
   _gsl_error(62280, 62272, 726, 15);
   HEAP32[$0 >> 2] = 15;
   $162 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $162 | 0;
  }
  if (+HEAPF64[$ln_term0 >> 3] > 708.782712893384) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
   _gsl_error(62296, 62272, 729, 16);
   HEAP32[$0 >> 2] = 16;
   $162 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $162 | 0;
  }
  if (+HEAPF64[$1 >> 3] > 54.0) {
   if (!(+HEAPF64[$2 >> 3] < 1.0)) label = 10;
  } else label = 10;
  do if ((label | 0) == 10) {
   if (+HEAPF64[$1 >> 3] > 27.0) if (+HEAPF64[$2 >> 3] < .25) break;
   if (+HEAPF64[$1 >> 3] > 27.0) if (+HEAPF64[$2 >> 3] < 1.0) {
    HEAPF64[$p1 >> 3] = +Math_pow(+(+HEAPF64[$2 >> 3]), +-+HEAPF64[$1 >> 3]);
    HEAPF64[$p2 >> 3] = +Math_pow(+(+HEAPF64[$2 >> 3] / (+HEAPF64[$2 >> 3] + 1.0)), +(+HEAPF64[$1 >> 3]));
    HEAPF64[$p3 >> 3] = +Math_pow(+(+HEAPF64[$2 >> 3] / (+HEAPF64[$2 >> 3] + 2.0)), +(+HEAPF64[$1 >> 3]));
    HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$p1 >> 3] * (+HEAPF64[$p2 >> 3] + 1.0 + +HEAPF64[$p3 >> 3]);
    $79 = (+HEAPF64[$1 >> 3] * .5 + 2.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $79;
    HEAP32[$0 >> 2] = 0;
    $162 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $162 | 0;
   }
   HEAP32[$jmax >> 2] = 12;
   HEAP32[$kmax >> 2] = 10;
   HEAPF64[$pmax >> 3] = +Math_pow(+(+HEAPF64[$2 >> 3] + 10.0), +-+HEAPF64[$1 >> 3]);
   HEAPF64[$scp >> 3] = +HEAPF64[$1 >> 3];
   HEAPF64[$pcp >> 3] = +HEAPF64[$pmax >> 3] / (+HEAPF64[$2 >> 3] + 10.0);
   HEAPF64[$ans >> 3] = +HEAPF64[$pmax >> 3] * ((+HEAPF64[$2 >> 3] + 10.0) / (+HEAPF64[$1 >> 3] - 1.0) + .5);
   HEAP32[$k >> 2] = 0;
   while (1) {
    if ((HEAP32[$k >> 2] | 0) >= 10) break;
    $108 = +Math_pow(+(+(HEAP32[$k >> 2] | 0) + +HEAPF64[$2 >> 3]), +-+HEAPF64[$1 >> 3]);
    HEAPF64[$ans >> 3] = +HEAPF64[$ans >> 3] + $108;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   HEAP32[$j >> 2] = 0;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) > 12) break;
    HEAPF64[$delta >> 3] = +HEAPF64[62312 + ((HEAP32[$j >> 2] | 0) + 1 << 3) >> 3] * +HEAPF64[$scp >> 3] * +HEAPF64[$pcp >> 3];
    HEAPF64[$ans >> 3] = +HEAPF64[$ans >> 3] + +HEAPF64[$delta >> 3];
    if (+Math_abs(+(+HEAPF64[$delta >> 3] / +HEAPF64[$ans >> 3])) < 1.1102230246251565e-16) break;
    HEAPF64[$scp >> 3] = +HEAPF64[$scp >> 3] * (+HEAPF64[$1 >> 3] + +(HEAP32[$j >> 2] << 1 | 0) + 1.0) * (+HEAPF64[$1 >> 3] + +(HEAP32[$j >> 2] << 1 | 0) + 2.0);
    HEAPF64[$pcp >> 3] = +HEAPF64[$pcp >> 3] / ((+HEAPF64[$2 >> 3] + 10.0) * (+HEAPF64[$2 >> 3] + 10.0));
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$ans >> 3];
   $159 = +Math_abs(+(+HEAPF64[$ans >> 3])) * 5.773159728050814e-15;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $159;
   HEAP32[$0 >> 2] = 0;
   $162 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $162 | 0;
  } while (0);
  $37 = +Math_pow(+(+HEAPF64[$2 >> 3]), +-+HEAPF64[$1 >> 3]);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $37;
  $42 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $42;
  HEAP32[$0 >> 2] = 0;
  $162 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $162 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(62256, 62272, 719, 1);
 HEAP32[$0 >> 2] = 1;
 $162 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $162 | 0;
}
function _hyperg_1F1_a_negint_lag($a, $b, $x, $result) {
 $a = $a | 0;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $112 = 0, $137 = 0, $138 = 0, $2 = 0, $3 = 0, $4 = 0, $67 = 0, $73 = 0, $75 = 0.0, $93 = 0, $99 = 0, $beta = 0, $lag = 0, $ln_n = 0, $ln_term_err = 0, $ln_term_err3 = 0, $ln_term_val = 0, $ln_term_val2 = 0, $lnbeta = 0, $lnfact = 0, $lng1 = 0, $lng2 = 0, $lnpre_err = 0, $lnpre_val = 0, $n = 0, $s1 = 0, $s2 = 0, $stat_b = 0, $stat_e = 0, $stat_e1 = 0, $stat_e4 = 0, $stat_f = 0, $stat_g1 = 0, $stat_g2 = 0, $stat_l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 228 | 0;
 $1 = sp + 224 | 0;
 $2 = sp + 176 | 0;
 $3 = sp + 168 | 0;
 $4 = sp + 220 | 0;
 $n = sp + 216 | 0;
 $lag = sp + 152 | 0;
 $stat_l = sp + 212 | 0;
 $lnfact = sp + 136 | 0;
 $lng1 = sp + 120 | 0;
 $lng2 = sp + 104 | 0;
 $s1 = sp + 96 | 0;
 $s2 = sp + 88 | 0;
 $stat_f = sp + 208 | 0;
 $stat_g1 = sp + 204 | 0;
 $stat_g2 = sp + 200 | 0;
 $lnpre_val = sp + 80 | 0;
 $lnpre_err = sp + 72 | 0;
 $stat_e = sp + 196 | 0;
 $lnbeta = sp + 56 | 0;
 $ln_term_val = sp + 48 | 0;
 $ln_term_err = sp + 40 | 0;
 $beta = sp + 24 | 0;
 $stat_b = sp + 192 | 0;
 $stat_e1 = sp + 188 | 0;
 $ln_n = sp + 16 | 0;
 $ln_term_val2 = sp + 8 | 0;
 $ln_term_err3 = sp;
 $stat_e4 = sp + 184 | 0;
 HEAP32[$1 >> 2] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$n >> 2] = 0 - (HEAP32[$1 >> 2] | 0);
 HEAP32[$stat_l >> 2] = _gsl_sf_laguerre_n_e(HEAP32[$n >> 2] | 0, +HEAPF64[$2 >> 3] - 1.0, +HEAPF64[$3 >> 3], $lag) | 0;
 if (+HEAPF64[$2 >> 3] < 0.0) {
  HEAP32[$stat_f >> 2] = _gsl_sf_lnfact_e(HEAP32[$n >> 2] | 0, $lnfact) | 0;
  HEAP32[$stat_g1 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3] + +(HEAP32[$n >> 2] | 0), $lng1, $s1) | 0;
  HEAP32[$stat_g2 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3], $lng2, $s2) | 0;
  HEAPF64[$lnpre_val >> 3] = +HEAPF64[$lnfact >> 3] - (+HEAPF64[$lng1 >> 3] - +HEAPF64[$lng2 >> 3]);
  HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lnfact + 8 >> 3] + +HEAPF64[$lng1 + 8 >> 3] + +HEAPF64[$lng2 + 8 >> 3] + +Math_abs(+(+HEAPF64[$lnpre_val >> 3])) * 4.440892098500626e-16;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], +HEAPF64[$s1 >> 3] * +HEAPF64[$s2 >> 3] * +HEAPF64[$lag >> 3], +HEAPF64[$lag + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  do if (HEAP32[$stat_e >> 2] | 0) $67 = HEAP32[$stat_e >> 2] | 0; else {
   if (HEAP32[$stat_l >> 2] | 0) {
    $67 = HEAP32[$stat_l >> 2] | 0;
    break;
   }
   if (HEAP32[$stat_g1 >> 2] | 0) {
    $67 = HEAP32[$stat_g1 >> 2] | 0;
    break;
   }
   if (HEAP32[$stat_g2 >> 2] | 0) {
    $67 = HEAP32[$stat_g2 >> 2] | 0;
    break;
   } else {
    $67 = (HEAP32[$stat_f >> 2] | 0) != 0 ? HEAP32[$stat_f >> 2] | 0 : 0;
    break;
   }
  } while (0);
  HEAP32[$0 >> 2] = $67;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 _gsl_sf_lnbeta_e(+HEAPF64[$2 >> 3], +(HEAP32[$n >> 2] | 0), $lnbeta) | 0;
 $73 = +Math_abs(+(+HEAPF64[$lnbeta >> 3])) < .1;
 $75 = +(HEAP32[$n >> 2] | 0);
 if (!$73) {
  HEAPF64[$ln_n >> 3] = +Math_log(+$75);
  HEAPF64[$ln_term_val2 >> 3] = +HEAPF64[$lnbeta >> 3] + +HEAPF64[$ln_n >> 3];
  HEAPF64[$ln_term_err3 >> 3] = +HEAPF64[$lnbeta + 8 >> 3] + +Math_abs(+(+HEAPF64[$ln_n >> 3])) * 4.440892098500626e-16;
  HEAP32[$stat_e4 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_term_val2 >> 3], +HEAPF64[$ln_term_err3 >> 3], +HEAPF64[$lag >> 3], +HEAPF64[$lag + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e4 >> 2] | 0) $137 = HEAP32[$stat_e4 >> 2] | 0; else $137 = (HEAP32[$stat_l >> 2] | 0) != 0 ? HEAP32[$stat_l >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $137;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAPF64[$ln_term_val >> 3] = +Math_log(+(1.25 * $75));
 HEAPF64[$ln_term_err >> 3] = +HEAPF64[$ln_term_val >> 3] * 4.440892098500626e-16;
 HEAP32[$stat_b >> 2] = _gsl_sf_beta_e(+HEAPF64[$2 >> 3], +(HEAP32[$n >> 2] | 0), $beta) | 0;
 HEAP32[$stat_e1 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_term_val >> 3], +HEAPF64[$ln_term_err >> 3], +HEAPF64[$lag >> 3], +HEAPF64[$lag + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 $93 = HEAP32[$4 >> 2] | 0;
 HEAPF64[$93 >> 3] = +HEAPF64[$93 >> 3] * (+HEAPF64[$beta >> 3] / 1.25);
 $99 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$99 >> 3] = +HEAPF64[$99 >> 3] * (+HEAPF64[$beta >> 3] / 1.25);
 do if (HEAP32[$stat_e1 >> 2] | 0) $112 = HEAP32[$stat_e1 >> 2] | 0; else if (HEAP32[$stat_l >> 2] | 0) {
  $112 = HEAP32[$stat_l >> 2] | 0;
  break;
 } else {
  $112 = (HEAP32[$stat_b >> 2] | 0) != 0 ? HEAP32[$stat_b >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $112;
 $138 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $138 | 0;
}
function _gsl_sf_bessel_Yn_e($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $110 = 0.0, $115 = 0.0, $122 = 0.0, $128 = 0.0, $130 = 0, $140 = 0, $141 = 0, $18 = 0, $2 = 0, $24 = 0.0, $29 = 0, $3 = 0, $45 = 0, $56 = 0, $57 = 0, $64 = 0, $76 = 0, $by = 0, $bym = 0, $byp = 0, $j = 0, $r_by = 0, $r_bym = 0, $sign = 0, $stat_0 = 0, $stat_1 = 0, $status = 0, $status1 = 0, $status2 = 0, $status3 = 0, $status4 = 0, $two_over_x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 108 | 0;
 $sign = sp + 104 | 0;
 $status = sp + 100 | 0;
 $status1 = sp + 96 | 0;
 $status2 = sp + 92 | 0;
 $status3 = sp + 88 | 0;
 $status4 = sp + 84 | 0;
 $two_over_x = sp + 56 | 0;
 $r_by = sp + 40 | 0;
 $r_bym = sp + 24 | 0;
 $stat_1 = sp + 80 | 0;
 $stat_0 = sp + 76 | 0;
 $bym = sp + 16 | 0;
 $by = sp + 8 | 0;
 $byp = sp;
 $j = sp + 72 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$sign >> 2] = 1;
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  HEAP32[$1 >> 2] = 0 - (HEAP32[$1 >> 2] | 0);
  if (HEAP32[$1 >> 2] & 1) HEAP32[$sign >> 2] = -1;
 }
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$status >> 2] = _gsl_sf_bessel_Y0_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $18 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$18 >> 3] = +HEAPF64[$18 >> 3] * +(HEAP32[$sign >> 2] | 0);
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $141 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $141 | 0;
 }
 $24 = +HEAPF64[$2 >> 3];
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$status1 >> 2] = _gsl_sf_bessel_Y1_e($24, HEAP32[$3 >> 2] | 0) | 0;
  $29 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$29 >> 3] = +HEAPF64[$29 >> 3] * +(HEAP32[$sign >> 2] | 0);
  HEAP32[$0 >> 2] = HEAP32[$status1 >> 2];
  $141 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $141 | 0;
 }
 if ($24 <= 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(14616, 14632, 125, 1);
  HEAP32[$0 >> 2] = 1;
  $141 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $141 | 0;
 }
 if (+HEAPF64[$2 >> 3] < 5.0) {
  HEAP32[$status2 >> 2] = _bessel_Yn_small_x(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $45 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$45 >> 3] = +HEAPF64[$45 >> 3] * +(HEAP32[$sign >> 2] | 0);
  HEAP32[$0 >> 2] = HEAP32[$status2 >> 2];
  $141 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $141 | 0;
 }
 $56 = +HEAPF64[$2 >> 3] * 6055454452393343.0e-21 > +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) + 1.0;
 $57 = HEAP32[$1 >> 2] | 0;
 if ($56) {
  HEAP32[$status3 >> 2] = _gsl_sf_bessel_Ynu_asympx_e(+($57 | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $64 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$64 >> 3] = +HEAPF64[$64 >> 3] * +(HEAP32[$sign >> 2] | 0);
  HEAP32[$0 >> 2] = HEAP32[$status3 >> 2];
  $141 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $141 | 0;
 }
 if (($57 | 0) > 50) {
  HEAP32[$status4 >> 2] = _gsl_sf_bessel_Ynu_asymp_Olver_e(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $76 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$76 >> 3] = +HEAPF64[$76 >> 3] * +(HEAP32[$sign >> 2] | 0);
  HEAP32[$0 >> 2] = HEAP32[$status4 >> 2];
  $141 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $141 | 0;
 }
 HEAPF64[$two_over_x >> 3] = 2.0 / +HEAPF64[$2 >> 3];
 HEAP32[$stat_1 >> 2] = _gsl_sf_bessel_Y1_e(+HEAPF64[$2 >> 3], $r_by) | 0;
 HEAP32[$stat_0 >> 2] = _gsl_sf_bessel_Y0_e(+HEAPF64[$2 >> 3], $r_bym) | 0;
 HEAPF64[$bym >> 3] = +HEAPF64[$r_bym >> 3];
 HEAPF64[$by >> 3] = +HEAPF64[$r_by >> 3];
 HEAP32[$j >> 2] = 1;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[$byp >> 3] = +(HEAP32[$j >> 2] | 0) * +HEAPF64[$two_over_x >> 3] * +HEAPF64[$by >> 3] - +HEAPF64[$bym >> 3];
  HEAPF64[$bym >> 3] = +HEAPF64[$by >> 3];
  HEAPF64[$by >> 3] = +HEAPF64[$byp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +(HEAP32[$sign >> 2] | 0) * +HEAPF64[$by >> 3];
 $110 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 $115 = +Math_abs(+(+HEAPF64[$r_by + 8 >> 3] / +HEAPF64[$r_by >> 3]));
 $122 = $110 * ($115 + +Math_abs(+(+HEAPF64[$r_bym + 8 >> 3] / +HEAPF64[$r_bym >> 3])));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $122;
 $128 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $130 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$130 >> 3] = +HEAPF64[$130 >> 3] + $128;
 if (HEAP32[$stat_1 >> 2] | 0) $140 = HEAP32[$stat_1 >> 2] | 0; else $140 = (HEAP32[$stat_0 >> 2] | 0) != 0 ? HEAP32[$stat_0 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $140;
 $141 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $141 | 0;
}
function _gsl_sf_debye_6_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $121 = 0.0, $157 = 0.0, $187 = 0, $2 = 0, $26 = 0.0, $47 = 0.0, $c = 0, $ex = 0, $i = 0, $nexp = 0, $rk = 0, $sum = 0, $sum1 = 0, $t = 0, $x2 = 0, $x4 = 0, $x6 = 0, $xk = 0, $xk_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 128 | 0;
 $t = sp + 88 | 0;
 $c = sp + 72 | 0;
 $nexp = sp + 124 | 0;
 $ex = sp + 64 | 0;
 $xk = sp + 56 | 0;
 $rk = sp + 48 | 0;
 $sum = sp + 40 | 0;
 $i = sp + 120 | 0;
 $xk_inv = sp + 32 | 0;
 $x2 = sp + 24 | 0;
 $x4 = sp + 16 | 0;
 $x6 = sp + 8 | 0;
 $sum1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 104 >> 3] = 4356.068878289907;
 HEAPF64[sp + 96 >> 3] = 708.3964185322641;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(28032, 28048, 483, 1);
  HEAP32[$0 >> 2] = 1;
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.2146848510894035e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - 3.0 * $10 / 7.0 + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 16.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 $26 = +HEAPF64[$1 >> 3];
 if ($10 <= 4.0) {
  HEAPF64[$t >> 3] = $26 * +HEAPF64[$1 >> 3] / 8.0 - 1.0;
  _cheb_eval_e269(28400, +HEAPF64[$t >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] - +HEAPF64[$1 >> 3] * 3.0 / 7.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c + 8 >> 3] + +HEAPF64[$1 >> 3] * 6.661338147750939e-16 / 7.0;
  HEAP32[$0 >> 2] = 0;
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 $47 = +HEAPF64[$1 >> 3];
 if ($26 < 35.350506208557206) {
  HEAP32[$nexp >> 2] = ~~+Math_floor(+(708.3964185322641 / $47));
  HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$xk >> 3] = +(HEAP32[$nexp >> 2] | 0) * +HEAPF64[$1 >> 3];
  HEAPF64[$rk >> 3] = +(HEAP32[$nexp >> 2] | 0);
  HEAPF64[$sum >> 3] = 0.0;
  HEAP32[$i >> 2] = HEAP32[$nexp >> 2];
  while (1) {
   if ((HEAP32[$i >> 2] | 0) < 1) break;
   HEAPF64[$xk_inv >> 3] = 1.0 / +HEAPF64[$xk >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] * +HEAPF64[$ex >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + ((((((+HEAPF64[$xk_inv >> 3] * 720.0 + 720.0) * +HEAPF64[$xk_inv >> 3] + 360.0) * +HEAPF64[$xk_inv >> 3] + 120.0) * +HEAPF64[$xk_inv >> 3] + 30.0) * +HEAPF64[$xk_inv >> 3] + 6.0) * +HEAPF64[$xk_inv >> 3] + 1.0) / +HEAPF64[$rk >> 3];
   HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] - 1.0;
   HEAPF64[$xk >> 3] = +HEAPF64[$xk >> 3] - +HEAPF64[$1 >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 4356.068878289907 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - +HEAPF64[$sum >> 3] * 6.0 * +HEAPF64[$ex >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 $121 = +HEAPF64[$1 >> 3];
 if ($47 < 708.3964185322641) {
  HEAPF64[$x2 >> 3] = $121 * +HEAPF64[$1 >> 3];
  HEAPF64[$x4 >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$x2 >> 3];
  HEAPF64[$x6 >> 3] = +HEAPF64[$x4 >> 3] * +HEAPF64[$x2 >> 3];
  HEAPF64[$sum1 >> 3] = +HEAPF64[$1 >> 3] * 720.0 + 720.0 + +HEAPF64[$x2 >> 3] * 360.0 + +HEAPF64[$x2 >> 3] * 120.0 * +HEAPF64[$1 >> 3] + +HEAPF64[$x4 >> 3] * 30.0 + +HEAPF64[$x4 >> 3] * 6.0 * +HEAPF64[$1 >> 3] + +HEAPF64[$x6 >> 3];
  $157 = 4356.068878289907 - +HEAPF64[$sum1 >> 3] * 6.0 * +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $157 / +HEAPF64[$x6 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = 4356.068878289907 / $121 / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
 if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(28056, 28048, 528, 15);
  HEAP32[$0 >> 2] = 15;
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $187 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $187 | 0;
 }
 return 0;
}
function _approx_c($order, $qq) {
 $order = $order | 0;
 $qq = +$qq;
 var $0 = 0, $1 = 0, $156 = 0.0, $174 = 0.0, $186 = 0.0, $190 = 0.0, $2 = 0, $5 = 0, $74 = 0, $80 = 0, $81 = 0, $approx = 0, $c0 = 0, $c1 = 0, $c2 = 0, $n2 = 0, $n22 = 0, $q2 = 0, $q4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 64 | 0;
 $approx = sp + 56 | 0;
 $c0 = sp + 48 | 0;
 $c1 = sp + 40 | 0;
 $c2 = sp + 32 | 0;
 $n2 = sp + 24 | 0;
 $n22 = sp + 16 | 0;
 $q2 = sp + 8 | 0;
 $q4 = sp;
 HEAP32[$1 >> 2] = $order;
 HEAPF64[$2 >> 3] = $qq;
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  _gsl_error(54688, 54536, 213, 4);
  HEAPF64[$0 >> 3] = 0.0;
  $190 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$190;
 }
 $5 = HEAP32[$1 >> 2] | 0;
 do if (!$5) if (+HEAPF64[$2 >> 3] <= 4.0) {
  HEAPF64[$0 >> 3] = 2.0 - +Math_sqrt(+(+HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$2 >> 3] + 4.0));
  $190 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$190;
 } else {
  HEAPF64[$0 >> 3] = +_asymptotic(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3]);
  $190 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$190;
 } else if (($5 | 0) == 1) if (+HEAPF64[$2 >> 3] <= 4.0) {
  HEAPF64[$0 >> 3] = (+HEAPF64[$2 >> 3] - +Math_sqrt(+(+HEAPF64[$2 >> 3] * 5.0 * +HEAPF64[$2 >> 3] - +HEAPF64[$2 >> 3] * 16.0 + 64.0))) * .5 + 5.0;
  $190 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$190;
 } else {
  HEAPF64[$0 >> 3] = +_asymptotic(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3]);
  $190 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$190;
 } else if (($5 | 0) == 2) {
  if (+HEAPF64[$2 >> 3] <= 3.0) {
   HEAPF64[$c2 >> 3] = -8.0;
   HEAPF64[$c1 >> 3] = -48.0 - +HEAPF64[$2 >> 3] * 3.0 * +HEAPF64[$2 >> 3];
   HEAPF64[$c0 >> 3] = +HEAPF64[$2 >> 3] * 20.0 * +HEAPF64[$2 >> 3];
   break;
  }
  HEAPF64[$0 >> 3] = +_asymptotic(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3]);
  $190 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$190;
 } else if (($5 | 0) == 3) {
  if (+HEAPF64[$2 >> 3] <= 6.25) {
   HEAPF64[$c2 >> 3] = -+HEAPF64[$2 >> 3] - 8.0;
   HEAPF64[$c1 >> 3] = +HEAPF64[$2 >> 3] * 16.0 - 128.0 - +HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$2 >> 3];
   HEAPF64[$c0 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] + 8.0);
   break;
  }
  HEAPF64[$0 >> 3] = +_asymptotic(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3]);
  $190 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$190;
 } else {
  $74 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$1 >> 2] | 0) >= 70) {
   HEAPF64[$0 >> 3] = +(Math_imul($74, HEAP32[$1 >> 2] | 0) | 0);
   $190 = +HEAPF64[$0 >> 3];
   STACKTOP = sp;
   return +$190;
  }
  $80 = +($74 | 0) * 1.7 > +Math_sqrt(+(+HEAPF64[$2 >> 3])) * 2.0;
  $81 = HEAP32[$1 >> 2] | 0;
  if ($80) {
   HEAPF64[$n2 >> 3] = +(Math_imul($81, HEAP32[$1 >> 2] | 0) | 0);
   HEAPF64[$n22 >> 3] = (+HEAPF64[$n2 >> 3] - 1.0) * (+HEAPF64[$n2 >> 3] - 1.0);
   HEAPF64[$q2 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
   HEAPF64[$q4 >> 3] = +HEAPF64[$q2 >> 3] * +HEAPF64[$q2 >> 3];
   HEAPF64[$approx >> 3] = +HEAPF64[$n2 >> 3] + +HEAPF64[$q2 >> 3] * .5 / (+HEAPF64[$n2 >> 3] - 1.0);
   HEAPF64[$approx >> 3] = +HEAPF64[$approx >> 3] + (+HEAPF64[$n2 >> 3] * 5.0 + 7.0) * +HEAPF64[$q4 >> 3] / (+HEAPF64[$n22 >> 3] * 32.0 * (+HEAPF64[$n2 >> 3] - 1.0) * (+HEAPF64[$n2 >> 3] - 4.0));
   HEAPF64[$approx >> 3] = +HEAPF64[$approx >> 3] + (+HEAPF64[$n2 >> 3] * 9.0 * +HEAPF64[$n2 >> 3] + +HEAPF64[$n2 >> 3] * 58.0 + 29.0) * +HEAPF64[$q4 >> 3] * +HEAPF64[$q2 >> 3] / (+HEAPF64[$n22 >> 3] * 64.0 * +HEAPF64[$n22 >> 3] * (+HEAPF64[$n2 >> 3] - 1.0) * (+HEAPF64[$n2 >> 3] - 4.0) * (+HEAPF64[$n2 >> 3] - 9.0));
   if (+(HEAP32[$1 >> 2] | 0) * 1.4 < +Math_sqrt(+(+HEAPF64[$2 >> 3])) * 2.0) {
    $156 = +_asymptotic(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3]);
    HEAPF64[$approx >> 3] = +HEAPF64[$approx >> 3] + $156;
    HEAPF64[$approx >> 3] = +HEAPF64[$approx >> 3] * .5;
   }
  } else HEAPF64[$approx >> 3] = +_asymptotic($81, +HEAPF64[$2 >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$approx >> 3];
  $190 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$190;
 } while (0);
 HEAPF64[$approx >> 3] = +_solve_cubic(+HEAPF64[$c2 >> 3], +HEAPF64[$c1 >> 3], +HEAPF64[$c0 >> 3]);
 if (+HEAPF64[$approx >> 3] < 0.0) {
  $174 = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
  if ($174 > +(HEAP32[$1 >> 2] | 0) * .1) {
   HEAPF64[$0 >> 3] = +_asymptotic((HEAP32[$1 >> 2] | 0) - 1 | 0, +HEAPF64[$2 >> 3]);
   $190 = +HEAPF64[$0 >> 3];
   STACKTOP = sp;
   return +$190;
  }
 }
 $186 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0);
 HEAPF64[$0 >> 3] = $186 + +Math_abs(+(+HEAPF64[$approx >> 3]));
 $190 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$190;
}
function _gsl_sf_airy_Ai_deriv_scaled_e($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $122 = 0.0, $124 = 0, $151 = 0.0, $153 = 0, $156 = 0, $2 = 0, $20 = 0.0, $26 = 0.0, $3 = 0, $32 = 0.0, $34 = 0, $39 = 0.0, $6 = 0.0, $62 = 0.0, $71 = 0.0, $73 = 0, $86 = 0, $91 = 0, $96 = 0.0, $a = 0, $c = 0, $p = 0, $result_c0 = 0, $result_c02 = 0, $result_c06 = 0, $result_c1 = 0, $s = 0, $s1 = 0, $s5 = 0, $sqrtx = 0, $sqrtx3 = 0, $status_ap = 0, $x2 = 0, $x3 = 0, $z = 0, $z4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $0 = sp + 196 | 0;
 $1 = sp + 176 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 188 | 0;
 $a = sp + 160 | 0;
 $p = sp + 144 | 0;
 $status_ap = sp + 184 | 0;
 $c = sp + 136 | 0;
 $x3 = sp + 128 | 0;
 $x2 = sp + 120 | 0;
 $result_c0 = sp + 104 | 0;
 $result_c1 = sp + 88 | 0;
 $s = sp + 80 | 0;
 $sqrtx = sp + 72 | 0;
 $z = sp + 64 | 0;
 $s1 = sp + 56 | 0;
 $result_c02 = sp + 40 | 0;
 $sqrtx3 = sp + 32 | 0;
 $z4 = sp + 24 | 0;
 $s5 = sp + 16 | 0;
 $result_c06 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAP32[$status_ap >> 2] = _airy_deriv_mod_phase($6, HEAP32[$2 >> 2] | 0, $a, $p) | 0;
  HEAPF64[$c >> 3] = +Math_cos(+(+HEAPF64[$p >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$a >> 3] * +HEAPF64[$c >> 3];
  $20 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3] * +HEAPF64[$p + 8 >> 3]));
  $26 = $20 + +Math_abs(+(+HEAPF64[$c >> 3] * +HEAPF64[$a + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $26;
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $34 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] + $32;
  HEAP32[$0 >> 2] = HEAP32[$status_ap >> 2];
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 }
 $39 = +HEAPF64[$1 >> 3];
 if ($6 <= 1.0) {
  HEAPF64[$x3 >> 3] = $39 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  _cheb_eval_mode_e66(6e3, +HEAPF64[$x3 >> 3], HEAP32[$2 >> 2] | 0, $result_c0) | 0;
  _cheb_eval_mode_e66(5904, +HEAPF64[$x3 >> 3], HEAP32[$2 >> 2] | 0, $result_c1) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$x2 >> 3] * (+HEAPF64[$result_c0 >> 3] + .125) - +HEAPF64[$result_c1 >> 3] - .25;
  $62 = +Math_abs(+(+HEAPF64[$x2 >> 3] * +HEAPF64[$result_c0 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $62 + +HEAPF64[$result_c1 + 8 >> 3];
  $71 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $73 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$73 >> 3] = +HEAPF64[$73 >> 3] + $71;
  if (+HEAPF64[$1 >> 3] > 3.666852862501036e-11) {
   HEAPF64[$s >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3] * 2.0 * +Math_sqrt(+(+HEAPF64[$1 >> 3])) / 3.0));
   $86 = HEAP32[$3 >> 2] | 0;
   HEAPF64[$86 >> 3] = +HEAPF64[$86 >> 3] * +HEAPF64[$s >> 3];
   $91 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$91 >> 3] = +HEAPF64[$91 >> 3] * +HEAPF64[$s >> 3];
  }
  HEAP32[$0 >> 2] = 0;
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 }
 $96 = +Math_sqrt(+(+HEAPF64[$1 >> 3]));
 if ($39 <= 4.0) {
  HEAPF64[$sqrtx >> 3] = $96;
  HEAPF64[$z >> 3] = (16.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$sqrtx >> 3]) - 9.0) / 7.0;
  HEAPF64[$s1 >> 3] = +Math_sqrt(+(+HEAPF64[$sqrtx >> 3]));
  _cheb_eval_mode_e66(5800, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c02) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -(+HEAPF64[$result_c02 >> 3] + .28125) * +HEAPF64[$s1 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_c02 + 8 >> 3] * +HEAPF64[$s1 >> 3];
  $122 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $124 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$124 >> 3] = +HEAPF64[$124 >> 3] + $122;
  HEAP32[$0 >> 2] = 0;
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 } else {
  HEAPF64[$sqrtx3 >> 3] = $96;
  HEAPF64[$z4 >> 3] = 16.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$sqrtx3 >> 3]) - 1.0;
  HEAPF64[$s5 >> 3] = +Math_sqrt(+(+HEAPF64[$sqrtx3 >> 3]));
  _cheb_eval_mode_e66(5568, +HEAPF64[$z4 >> 3], HEAP32[$2 >> 2] | 0, $result_c06) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -(+HEAPF64[$result_c06 >> 3] + .28125) * +HEAPF64[$s5 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_c06 + 8 >> 3] * +HEAPF64[$s5 >> 3];
  $151 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $153 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$153 >> 3] = +HEAPF64[$153 >> 3] + $151;
  HEAP32[$0 >> 2] = 0;
  $156 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $156 | 0;
 }
 return 0;
}
function _gsl_sf_transport_2_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $108 = 0.0, $117 = 0.0, $132 = 0.0, $139 = 0, $14 = 0.0, $2 = 0, $23 = 0.0, $43 = 0.0, $45 = 0, $49 = 0.0, $56 = 0.0, $61 = 0.0, $78 = 0.0, $90 = 0.0, $et = 0, $et5 = 0, $et7 = 0, $numexp = 0, $numexp2 = 0, $result_c = 0, $sumexp = 0, $sumexp3 = 0, $t = 0, $t1 = 0, $t4 = 0, $t6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 112 | 0;
 $t = sp + 80 | 0;
 $result_c = sp + 64 | 0;
 $numexp = sp + 108 | 0;
 $sumexp = sp + 56 | 0;
 $t1 = sp + 48 | 0;
 $et = sp + 40 | 0;
 $numexp2 = sp + 104 | 0;
 $sumexp3 = sp + 32 | 0;
 $t4 = sp + 24 | 0;
 $et5 = sp + 16 | 0;
 $t6 = sp + 8 | 0;
 $et7 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 88 >> 3] = 3.289868133696453;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(60608, 60624, 178, 1);
  HEAP32[$0 >> 2] = 1;
  $139 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $139 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.470348358154297e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $10;
  $14 = +Math_abs(+(+HEAPF64[$1 >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $14 + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 2.0;
  HEAP32[$0 >> 2] = 0;
  $139 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $139 | 0;
 }
 $23 = +HEAPF64[$1 >> 3];
 if ($10 <= 4.0) {
  HEAPF64[$t >> 3] = $23 * +HEAPF64[$1 >> 3] / 8.0 - .5 - .5;
  _cheb_eval_e626(61488, +HEAPF64[$t >> 3], $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$result_c >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$result_c + 8 >> 3];
  $43 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $45 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$45 >> 3] = +HEAPF64[$45 >> 3] + $43;
  HEAP32[$0 >> 2] = 0;
  $139 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $139 | 0;
 }
 $49 = +HEAPF64[$1 >> 3];
 if ($23 < 36.04365338911715) {
  HEAP32[$numexp >> 2] = ~~(36.04365338911715 / $49) + 1;
  $56 = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$sumexp >> 3] = +_transport_sumexp(HEAP32[$numexp >> 2] | 0, 2, $56, +HEAPF64[$1 >> 3]);
  $61 = +Math_log(+(+HEAPF64[$1 >> 3])) * 2.0;
  HEAPF64[$t1 >> 3] = $61 - +HEAPF64[$1 >> 3] + +Math_log(+(+HEAPF64[$sumexp >> 3]));
  if (+HEAPF64[$t1 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.289868133696453;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 1.4609949400041579e-15;
  } else {
   HEAPF64[$et >> 3] = +Math_exp(+(+HEAPF64[$t1 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.289868133696453 - +HEAPF64[$et >> 3];
   $78 = +Math_abs(+(+HEAPF64[$t1 >> 3]));
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($78 * +HEAPF64[$et >> 3] + 3.289868133696453) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $139 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $139 | 0;
 }
 if ($49 < 9007199254740992.0) {
  HEAP32[$numexp2 >> 2] = 1;
  HEAPF64[$sumexp3 >> 3] = +_transport_sumexp(1, 2, 1.0, +HEAPF64[$1 >> 3]);
  $90 = +Math_log(+(+HEAPF64[$1 >> 3])) * 2.0;
  HEAPF64[$t4 >> 3] = $90 - +HEAPF64[$1 >> 3] + +Math_log(+(+HEAPF64[$sumexp3 >> 3]));
  if (+HEAPF64[$t4 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.289868133696453;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 1.4609949400041579e-15;
  } else {
   HEAPF64[$et5 >> 3] = +Math_exp(+(+HEAPF64[$t4 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.289868133696453 - +HEAPF64[$et5 >> 3];
   $108 = +Math_abs(+(+HEAPF64[$t4 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($108 * +HEAPF64[$et5 >> 3] + 3.289868133696453) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $139 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $139 | 0;
 } else {
  $117 = +Math_log(+(+HEAPF64[$1 >> 3])) * 2.0;
  HEAPF64[$t6 >> 3] = $117 - +HEAPF64[$1 >> 3];
  if (+HEAPF64[$t6 >> 3] < -36.04365338911715) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.289868133696453;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 1.4609949400041579e-15;
  } else {
   HEAPF64[$et7 >> 3] = +Math_exp(+(+HEAPF64[$t6 >> 3]));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.289868133696453 - +HEAPF64[$et7 >> 3];
   $132 = +Math_abs(+(+HEAPF64[$t6 >> 3])) + 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = ($132 * +HEAPF64[$et7 >> 3] + 3.289868133696453) * 4.440892098500626e-16;
  }
  HEAP32[$0 >> 2] = 0;
  $139 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $139 | 0;
 }
 return 0;
}
function _hyperg_U_series($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0, $109 = 0, $110 = 0, $2 = 0, $22 = 0.0, $24 = 0, $3 = 0, $30 = 0.0, $35 = 0.0, $4 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $N = 0, $beps = 0, $bint = 0, $lnr = 0, $lnx = 0, $stat_e = 0, $stat_inf = 0, $stat_sum = 0, $sum = 0, $sum$byval_copy2 = 0, $xeps = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $sum$byval_copy2 = sp + 88 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 120 | 0;
 $lnr = sp + 48 | 0;
 $stat_e = sp + 116 | 0;
 $bint = sp + 40 | 0;
 $beps = sp + 32 | 0;
 $N = sp + 112 | 0;
 $lnx = sp + 24 | 0;
 $xeps = sp + 16 | 0;
 $sum = sp;
 $stat_sum = sp + 108 | 0;
 $stat_inf = sp + 104 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[sp + 56 >> 3] = 2.1073424255447017e-8;
 if (+Math_abs(+(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3])) < 2.1073424255447017e-8) {
  HEAPF64[$lnr >> 3] = -+HEAPF64[$1 >> 3] * +Math_log(+(+HEAPF64[$3 >> 3]));
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_e(+HEAPF64[$lnr >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $22 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.2146848510894035e-8;
  $24 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$24 >> 3] = +HEAPF64[$24 >> 3] + $22;
  HEAP32[$0 >> 2] = HEAP32[$stat_e >> 2];
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 }
 $30 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$2 >> 3] < 0.0) $35 = +Math_ceil(+($30 - .5)); else $35 = +Math_floor(+($30 + .5));
 HEAPF64[$bint >> 3] = $35;
 HEAPF64[$beps >> 3] = +HEAPF64[$2 >> 3] - +HEAPF64[$bint >> 3];
 HEAP32[$N >> 2] = ~~+HEAPF64[$bint >> 3];
 HEAPF64[$lnx >> 3] = +Math_log(+(+HEAPF64[$3 >> 3]));
 HEAPF64[$xeps >> 3] = +Math_exp(+(-+HEAPF64[$beps >> 3] * +HEAPF64[$lnx >> 3]));
 HEAP32[$stat_sum >> 2] = _hyperg_U_finite_sum(HEAP32[$N >> 2] | 0, +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$xeps >> 3], $sum) | 0;
 do if (+Math_abs(+(+HEAPF64[$xeps >> 3] - 1.0)) > .5) {
  $58 = HEAP32[$N >> 2] | 0;
  $59 = +HEAPF64[$1 >> 3];
  $60 = +HEAPF64[$bint >> 3];
  $61 = +HEAPF64[$2 >> 3];
  $62 = +HEAPF64[$beps >> 3];
  $63 = +HEAPF64[$3 >> 3];
  $64 = +HEAPF64[$xeps >> 3];
  $65 = HEAP32[$4 >> 2] | 0;
  HEAP32[$sum$byval_copy2 + 0 >> 2] = HEAP32[$sum + 0 >> 2];
  HEAP32[$sum$byval_copy2 + 4 >> 2] = HEAP32[$sum + 4 >> 2];
  HEAP32[$sum$byval_copy2 + 8 >> 2] = HEAP32[$sum + 8 >> 2];
  HEAP32[$sum$byval_copy2 + 12 >> 2] = HEAP32[$sum + 12 >> 2];
  HEAP32[$stat_inf >> 2] = _hyperg_U_infinite_sum_stable($58, $59, $60, $61, $62, $63, $64, $sum$byval_copy2, $65) | 0;
 } else {
  if (+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3] < 0.0) if (+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3] == +Math_floor(+(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3]))) if (+HEAPF64[$beps >> 3] != 0.0) {
   $84 = HEAP32[$N >> 2] | 0;
   $85 = +HEAPF64[$1 >> 3];
   $86 = +HEAPF64[$bint >> 3];
   $87 = +HEAPF64[$2 >> 3];
   $88 = +HEAPF64[$beps >> 3];
   $89 = +HEAPF64[$3 >> 3];
   $90 = +HEAPF64[$xeps >> 3];
   $91 = HEAP32[$4 >> 2] | 0;
   HEAP32[$sum$byval_copy2 + 0 >> 2] = HEAP32[$sum + 0 >> 2];
   HEAP32[$sum$byval_copy2 + 4 >> 2] = HEAP32[$sum + 4 >> 2];
   HEAP32[$sum$byval_copy2 + 8 >> 2] = HEAP32[$sum + 8 >> 2];
   HEAP32[$sum$byval_copy2 + 12 >> 2] = HEAP32[$sum + 12 >> 2];
   HEAP32[$stat_inf >> 2] = _hyperg_U_infinite_sum_simple($84, $85, $86, $87, $88, $89, $90, $sum$byval_copy2, $91) | 0;
   break;
  }
  $93 = HEAP32[$N >> 2] | 0;
  $94 = +HEAPF64[$1 >> 3];
  $95 = +HEAPF64[$bint >> 3];
  $96 = +HEAPF64[$2 >> 3];
  $97 = +HEAPF64[$beps >> 3];
  $98 = +HEAPF64[$3 >> 3];
  $99 = +HEAPF64[$xeps >> 3];
  $100 = HEAP32[$4 >> 2] | 0;
  HEAP32[$sum$byval_copy2 + 0 >> 2] = HEAP32[$sum + 0 >> 2];
  HEAP32[$sum$byval_copy2 + 4 >> 2] = HEAP32[$sum + 4 >> 2];
  HEAP32[$sum$byval_copy2 + 8 >> 2] = HEAP32[$sum + 8 >> 2];
  HEAP32[$sum$byval_copy2 + 12 >> 2] = HEAP32[$sum + 12 >> 2];
  HEAP32[$stat_inf >> 2] = _hyperg_U_infinite_sum_improved($93, $94, $95, $96, $97, $98, $99, $sum$byval_copy2, $100) | 0;
 } while (0);
 if (HEAP32[$stat_sum >> 2] | 0) $109 = HEAP32[$stat_sum >> 2] | 0; else $109 = (HEAP32[$stat_inf >> 2] | 0) != 0 ? HEAP32[$stat_inf >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $109;
 $110 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $110 | 0;
}
function _gsl_sf_bessel_K_scaled_temme($nu, $x, $K_nu, $K_nup1, $Kp_nu) {
 $nu = +$nu;
 $x = +$x;
 $K_nu = $K_nu | 0;
 $K_nup1 = $K_nup1 | 0;
 $Kp_nu = $Kp_nu | 0;
 var $0 = 0, $1 = 0, $123 = 0.0, $161 = 0, $2 = 0, $26 = 0.0, $3 = 0, $31 = 0.0, $34 = 0.0, $39 = 0.0, $4 = 0, $41 = 0.0, $77 = 0.0, $ck = 0, $del0 = 0, $del1 = 0, $ex = 0, $fk = 0, $g1 = 0, $g2 = 0, $g_1mnu = 0, $g_1pnu = 0, $half_x = 0, $half_x_nu = 0, $hk = 0, $k = 0, $ln_half_x = 0, $pi_nu = 0, $pk = 0, $qk = 0, $sigma = 0, $sinhrat = 0, $sinrat = 0, $stat_g = 0, $stat_iter = 0, $sum0 = 0, $sum1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 176 | 0;
 $1 = sp + 168 | 0;
 $2 = sp + 208 | 0;
 $3 = sp + 204 | 0;
 $4 = sp + 200 | 0;
 $half_x = sp + 160 | 0;
 $ln_half_x = sp + 152 | 0;
 $half_x_nu = sp + 144 | 0;
 $pi_nu = sp + 136 | 0;
 $sigma = sp + 128 | 0;
 $sinrat = sp + 120 | 0;
 $sinhrat = sp + 112 | 0;
 $ex = sp + 104 | 0;
 $sum0 = sp + 96 | 0;
 $sum1 = sp + 88 | 0;
 $fk = sp + 80 | 0;
 $pk = sp + 72 | 0;
 $qk = sp + 64 | 0;
 $hk = sp + 56 | 0;
 $ck = sp + 48 | 0;
 $k = sp + 192 | 0;
 $stat_iter = sp + 188 | 0;
 $g_1pnu = sp + 40 | 0;
 $g_1mnu = sp + 32 | 0;
 $g1 = sp + 24 | 0;
 $g2 = sp + 16 | 0;
 $stat_g = sp + 184 | 0;
 $del0 = sp + 8 | 0;
 $del1 = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $K_nu;
 HEAP32[$3 >> 2] = $K_nup1;
 HEAP32[$4 >> 2] = $Kp_nu;
 HEAP32[sp + 196 >> 2] = 15e3;
 HEAPF64[$half_x >> 3] = +HEAPF64[$1 >> 3] * .5;
 HEAPF64[$ln_half_x >> 3] = +Math_log(+(+HEAPF64[$half_x >> 3]));
 HEAPF64[$half_x_nu >> 3] = +Math_exp(+(+HEAPF64[$0 >> 3] * +HEAPF64[$ln_half_x >> 3]));
 HEAPF64[$pi_nu >> 3] = +HEAPF64[$0 >> 3] * 3.141592653589793;
 HEAPF64[$sigma >> 3] = -+HEAPF64[$0 >> 3] * +HEAPF64[$ln_half_x >> 3];
 if (+Math_abs(+(+HEAPF64[$pi_nu >> 3])) < 2.220446049250313e-16) $26 = 1.0; else $26 = +HEAPF64[$pi_nu >> 3] / +Math_sin(+(+HEAPF64[$pi_nu >> 3]));
 HEAPF64[$sinrat >> 3] = $26;
 if (+Math_abs(+(+HEAPF64[$sigma >> 3])) < 2.220446049250313e-16) $34 = 1.0; else {
  $31 = +_sinh(+(+HEAPF64[$sigma >> 3]));
  $34 = $31 / +HEAPF64[$sigma >> 3];
 }
 HEAPF64[$sinhrat >> 3] = $34;
 HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3]));
 HEAP32[$k >> 2] = 0;
 HEAP32[$stat_g >> 2] = _gsl_sf_temme_gamma(+HEAPF64[$0 >> 3], $g_1pnu, $g_1mnu, $g1, $g2) | 0;
 $39 = +HEAPF64[$sinrat >> 3];
 $41 = +_cosh(+(+HEAPF64[$sigma >> 3]));
 HEAPF64[$fk >> 3] = $39 * ($41 * +HEAPF64[$g1 >> 3] - +HEAPF64[$sinhrat >> 3] * +HEAPF64[$ln_half_x >> 3] * +HEAPF64[$g2 >> 3]);
 HEAPF64[$pk >> 3] = .5 / +HEAPF64[$half_x_nu >> 3] * +HEAPF64[$g_1pnu >> 3];
 HEAPF64[$qk >> 3] = +HEAPF64[$half_x_nu >> 3] * .5 * +HEAPF64[$g_1mnu >> 3];
 HEAPF64[$hk >> 3] = +HEAPF64[$pk >> 3];
 HEAPF64[$ck >> 3] = 1.0;
 HEAPF64[$sum0 >> 3] = +HEAPF64[$fk >> 3];
 HEAPF64[$sum1 >> 3] = +HEAPF64[$hk >> 3];
 do {
  if ((HEAP32[$k >> 2] | 0) >= 15e3) break;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  $77 = +(Math_imul(HEAP32[$k >> 2] | 0, HEAP32[$k >> 2] | 0) | 0);
  HEAPF64[$fk >> 3] = (+(HEAP32[$k >> 2] | 0) * +HEAPF64[$fk >> 3] + +HEAPF64[$pk >> 3] + +HEAPF64[$qk >> 3]) / ($77 - +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]);
  HEAPF64[$ck >> 3] = +HEAPF64[$ck >> 3] * (+HEAPF64[$half_x >> 3] * +HEAPF64[$half_x >> 3] / +(HEAP32[$k >> 2] | 0));
  HEAPF64[$pk >> 3] = +HEAPF64[$pk >> 3] / (+(HEAP32[$k >> 2] | 0) - +HEAPF64[$0 >> 3]);
  HEAPF64[$qk >> 3] = +HEAPF64[$qk >> 3] / (+(HEAP32[$k >> 2] | 0) + +HEAPF64[$0 >> 3]);
  HEAPF64[$hk >> 3] = +(0 - (HEAP32[$k >> 2] | 0) | 0) * +HEAPF64[$fk >> 3] + +HEAPF64[$pk >> 3];
  HEAPF64[$del0 >> 3] = +HEAPF64[$ck >> 3] * +HEAPF64[$fk >> 3];
  HEAPF64[$del1 >> 3] = +HEAPF64[$ck >> 3] * +HEAPF64[$hk >> 3];
  HEAPF64[$sum0 >> 3] = +HEAPF64[$sum0 >> 3] + +HEAPF64[$del0 >> 3];
  HEAPF64[$sum1 >> 3] = +HEAPF64[$sum1 >> 3] + +HEAPF64[$del1 >> 3];
  $123 = +Math_abs(+(+HEAPF64[$del0 >> 3]));
 } while (!($123 < +Math_abs(+(+HEAPF64[$sum0 >> 3])) * .5 * 2.220446049250313e-16));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sum0 >> 3] * +HEAPF64[$ex >> 3];
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$sum1 >> 3] * 2.0 / +HEAPF64[$1 >> 3] * +HEAPF64[$ex >> 3];
 HEAPF64[HEAP32[$4 >> 2] >> 3] = -+HEAPF64[HEAP32[$3 >> 2] >> 3] + +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3] * +HEAPF64[HEAP32[$2 >> 2] >> 3];
 HEAP32[$stat_iter >> 2] = (HEAP32[$k >> 2] | 0) == 15e3 ? 11 : 0;
 if (HEAP32[$stat_iter >> 2] | 0) {
  $161 = HEAP32[$stat_iter >> 2] | 0;
  STACKTOP = sp;
  return $161 | 0;
 } else {
  $161 = (HEAP32[$stat_g >> 2] | 0) != 0 ? HEAP32[$stat_g >> 2] | 0 : 0;
  STACKTOP = sp;
  return $161 | 0;
 }
 return 0;
}
function _gsl_sf_mathieu_ce_array($nmin, $nmax, $qq, $zz, $work, $result_array) {
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $qq = +$qq;
 $zz = +$zz;
 $work = $work | 0;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $111 = 0.0, $114 = 0, $133 = 0, $140 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $50 = 0.0, $6 = 0, $82 = 0.0, $85 = 0, $aa = 0, $coeff = 0, $even_odd = 0, $ii = 0, $jj = 0, $norm = 0, $order = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880 | 0;
 $0 = sp + 864 | 0;
 $1 = sp + 860 | 0;
 $2 = sp + 856 | 0;
 $3 = sp + 816 | 0;
 $4 = sp + 808 | 0;
 $5 = sp + 852 | 0;
 $6 = sp + 848 | 0;
 $even_odd = sp + 844 | 0;
 $order = sp + 840 | 0;
 $ii = sp + 836 | 0;
 $jj = sp + 832 | 0;
 $status = sp + 828 | 0;
 $coeff = sp + 8 | 0;
 $aa = sp + 824 | 0;
 $norm = sp;
 HEAP32[$1 >> 2] = $nmin;
 HEAP32[$2 >> 2] = $nmax;
 HEAPF64[$3 >> 3] = $qq;
 HEAPF64[$4 >> 3] = $zz;
 HEAP32[$5 >> 2] = $work;
 HEAP32[$6 >> 2] = $result_array;
 HEAP32[$aa >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2];
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= ((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + 1 | 0)) break;
  HEAPF64[(HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  _gsl_error(54424, 54456, 211, 4);
  HEAP32[$0 >> 2] = 4;
  $140 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $140 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) >= 0) if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) {
  _gsl_sf_mathieu_a_array(0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], HEAP32[$5 >> 2] | 0, HEAP32[$aa >> 2] | 0) | 0;
  HEAP32[$ii >> 2] = 0;
  HEAP32[$order >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$order >> 2] | 0) > (HEAP32[$2 >> 2] | 0)) {
    label = 26;
    break;
   }
   HEAPF64[$norm >> 3] = 0.0;
   HEAP32[$even_odd >> 2] = 0;
   HEAP32[$even_odd >> 2] = ((HEAP32[$order >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
   if (+HEAPF64[$3 >> 3] == 0.0) {
    HEAPF64[$norm >> 3] = 1.0;
    if (!(HEAP32[$order >> 2] | 0)) HEAPF64[$norm >> 3] = +Math_sqrt(2.0);
    $50 = +Math_cos(+(+(HEAP32[$order >> 2] | 0) * +HEAPF64[$4 >> 3]));
    HEAPF64[(HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = $50 / +HEAPF64[$norm >> 3];
   } else {
    HEAP32[$status >> 2] = _gsl_sf_mathieu_a_coeff(HEAP32[$order >> 2] | 0, +HEAPF64[$3 >> 3], +HEAPF64[(HEAP32[$aa >> 2] | 0) + (HEAP32[$order >> 2] << 3) >> 3], $coeff) | 0;
    if (HEAP32[$status >> 2] | 0) {
     label = 16;
     break;
    }
    L22 : do if (!(HEAP32[$even_odd >> 2] | 0)) {
     HEAPF64[$norm >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$coeff >> 3];
     HEAP32[$jj >> 2] = 0;
     while (1) {
      if ((HEAP32[$jj >> 2] | 0) >= 100) break L22;
      $82 = +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3] * +Math_cos(+(+(HEAP32[$jj >> 2] | 0) * 2.0 * +HEAPF64[$4 >> 3]));
      $85 = (HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) | 0;
      HEAPF64[$85 >> 3] = +HEAPF64[$85 >> 3] + $82;
      HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3] * +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3];
      HEAP32[$jj >> 2] = (HEAP32[$jj >> 2] | 0) + 1;
     }
    } else {
     HEAP32[$jj >> 2] = 0;
     while (1) {
      if ((HEAP32[$jj >> 2] | 0) >= 100) break L22;
      $111 = +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3] * +Math_cos(+((+(HEAP32[$jj >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$4 >> 3]));
      $114 = (HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) | 0;
      HEAPF64[$114 >> 3] = +HEAPF64[$114 >> 3] + $111;
      HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3] * +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3];
      HEAP32[$jj >> 2] = (HEAP32[$jj >> 2] | 0) + 1;
     }
    } while (0);
    HEAPF64[$norm >> 3] = +Math_sqrt(+(+HEAPF64[$norm >> 3]));
    $133 = (HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) | 0;
    HEAPF64[$133 >> 3] = +HEAPF64[$133 >> 3] / +HEAPF64[$norm >> 3];
   }
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
   HEAP32[$order >> 2] = (HEAP32[$order >> 2] | 0) + 1;
  }
  if ((label | 0) == 16) {
   HEAP32[$0 >> 2] = HEAP32[$status >> 2];
   $140 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $140 | 0;
  } else if ((label | 0) == 26) {
   HEAP32[$0 >> 2] = 0;
   $140 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $140 | 0;
  }
 }
 _gsl_error(54480, 54456, 216, 1);
 HEAP32[$0 >> 2] = 1;
 $140 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $140 | 0;
}
function _gsl_sf_debye_5_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $117 = 0.0, $148 = 0.0, $176 = 0, $2 = 0, $27 = 0.0, $48 = 0.0, $c = 0, $ex = 0, $i = 0, $nexp = 0, $rk = 0, $sum = 0, $sum1 = 0, $t = 0, $x2 = 0, $x4 = 0, $x5 = 0, $xk = 0, $xk_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 128 | 0;
 $t = sp + 88 | 0;
 $c = sp + 72 | 0;
 $nexp = sp + 124 | 0;
 $ex = sp + 64 | 0;
 $xk = sp + 56 | 0;
 $rk = sp + 48 | 0;
 $sum = sp + 40 | 0;
 $i = sp + 120 | 0;
 $xk_inv = sp + 32 | 0;
 $x2 = sp + 24 | 0;
 $x4 = sp + 16 | 0;
 $x5 = sp + 8 | 0;
 $sum1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 104 >> 3] = 610.4058371906694;
 HEAPF64[sp + 96 >> 3] = 708.3964185322641;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(28032, 28048, 425, 1);
  HEAP32[$0 >> 2] = 1;
  $176 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $176 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.2146848510894035e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - 5.0 * $10 / 12.0 + +HEAPF64[$1 >> 3] * 5.0 * +HEAPF64[$1 >> 3] / 84.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $176 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $176 | 0;
 }
 $27 = +HEAPF64[$1 >> 3];
 if ($10 <= 4.0) {
  HEAPF64[$t >> 3] = $27 * +HEAPF64[$1 >> 3] / 8.0 - 1.0;
  _cheb_eval_e269(28568, +HEAPF64[$t >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] - +HEAPF64[$1 >> 3] * 5.0 / 12.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c + 8 >> 3] + +HEAPF64[$1 >> 3] * 1.1102230246251565e-15 / 12.0;
  HEAP32[$0 >> 2] = 0;
  $176 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $176 | 0;
 }
 $48 = +HEAPF64[$1 >> 3];
 if ($27 < 35.350506208557206) {
  HEAP32[$nexp >> 2] = ~~+Math_floor(+(708.3964185322641 / $48));
  HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$xk >> 3] = +(HEAP32[$nexp >> 2] | 0) * +HEAPF64[$1 >> 3];
  HEAPF64[$rk >> 3] = +(HEAP32[$nexp >> 2] | 0);
  HEAPF64[$sum >> 3] = 0.0;
  HEAP32[$i >> 2] = HEAP32[$nexp >> 2];
  while (1) {
   if ((HEAP32[$i >> 2] | 0) < 1) break;
   HEAPF64[$xk_inv >> 3] = 1.0 / +HEAPF64[$xk >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] * +HEAPF64[$ex >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + (((((+HEAPF64[$xk_inv >> 3] * 120.0 + 120.0) * +HEAPF64[$xk_inv >> 3] + 60.0) * +HEAPF64[$xk_inv >> 3] + 20.0) * +HEAPF64[$xk_inv >> 3] + 5.0) * +HEAPF64[$xk_inv >> 3] + 1.0) / +HEAPF64[$rk >> 3];
   HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] - 1.0;
   HEAPF64[$xk >> 3] = +HEAPF64[$xk >> 3] - +HEAPF64[$1 >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 610.4058371906694 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - +HEAPF64[$sum >> 3] * 5.0 * +HEAPF64[$ex >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $176 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $176 | 0;
 }
 $117 = +HEAPF64[$1 >> 3];
 if ($48 < 708.3964185322641) {
  HEAPF64[$x2 >> 3] = $117 * +HEAPF64[$1 >> 3];
  HEAPF64[$x4 >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$x2 >> 3];
  HEAPF64[$x5 >> 3] = +HEAPF64[$x4 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$sum1 >> 3] = +HEAPF64[$1 >> 3] * 120.0 + 120.0 + +HEAPF64[$x2 >> 3] * 60.0 + +HEAPF64[$x2 >> 3] * 20.0 * +HEAPF64[$1 >> 3] + +HEAPF64[$x4 >> 3] * 5.0 + +HEAPF64[$x5 >> 3];
  $148 = 610.4058371906694 - +HEAPF64[$sum1 >> 3] * 5.0 * +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $148 / +HEAPF64[$x5 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $176 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $176 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = 610.4058371906694 / $117 / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
 if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(28056, 28048, 470, 15);
  HEAP32[$0 >> 2] = 15;
  $176 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $176 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $176 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $176 | 0;
 }
 return 0;
}
function _gsl_sf_mathieu_se_array($nmin, $nmax, $qq, $zz, $work, $result_array) {
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $qq = +$qq;
 $zz = +$zz;
 $work = $work | 0;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $109 = 0.0, $112 = 0, $131 = 0, $138 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $52 = 0.0, $6 = 0, $67 = 0, $80 = 0.0, $83 = 0, $bb = 0, $coeff = 0, $even_odd = 0, $ii = 0, $jj = 0, $norm = 0, $order = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880 | 0;
 $0 = sp + 864 | 0;
 $1 = sp + 860 | 0;
 $2 = sp + 856 | 0;
 $3 = sp + 816 | 0;
 $4 = sp + 808 | 0;
 $5 = sp + 852 | 0;
 $6 = sp + 848 | 0;
 $even_odd = sp + 844 | 0;
 $order = sp + 840 | 0;
 $ii = sp + 836 | 0;
 $jj = sp + 832 | 0;
 $status = sp + 828 | 0;
 $coeff = sp + 8 | 0;
 $bb = sp + 824 | 0;
 $norm = sp;
 HEAP32[$1 >> 2] = $nmin;
 HEAP32[$2 >> 2] = $nmax;
 HEAPF64[$3 >> 3] = $qq;
 HEAPF64[$4 >> 3] = $zz;
 HEAP32[$5 >> 2] = $work;
 HEAP32[$6 >> 2] = $result_array;
 HEAP32[$bb >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2];
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= ((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + 1 | 0)) break;
  HEAPF64[(HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  _gsl_error(54424, 54456, 287, 4);
  HEAP32[$0 >> 2] = 4;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) >= 0) if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) {
  _gsl_sf_mathieu_b_array(0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], HEAP32[$5 >> 2] | 0, HEAP32[$bb >> 2] | 0) | 0;
  HEAP32[$ii >> 2] = 0;
  HEAP32[$order >> 2] = HEAP32[$1 >> 2];
  L12 : while (1) {
   if ((HEAP32[$order >> 2] | 0) > (HEAP32[$2 >> 2] | 0)) {
    label = 24;
    break;
   }
   HEAPF64[$norm >> 3] = 0.0;
   HEAP32[$even_odd >> 2] = 0;
   HEAP32[$even_odd >> 2] = ((HEAP32[$order >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
   do if (!(HEAP32[$order >> 2] | 0)) {
    HEAPF64[$norm >> 3] = 1.0;
    HEAPF64[(HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = 0.0;
   } else {
    if (+HEAPF64[$3 >> 3] == 0.0) {
     HEAPF64[$norm >> 3] = 1.0;
     $52 = +Math_sin(+(+(HEAP32[$order >> 2] | 0) * +HEAPF64[$4 >> 3]));
     HEAPF64[(HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = $52;
     break;
    }
    HEAP32[$status >> 2] = _gsl_sf_mathieu_b_coeff(HEAP32[$order >> 2] | 0, +HEAPF64[$3 >> 3], +HEAPF64[(HEAP32[$bb >> 2] | 0) + (HEAP32[$order >> 2] << 3) >> 3], $coeff) | 0;
    if (HEAP32[$status >> 2] | 0) {
     label = 16;
     break L12;
    }
    $67 = (HEAP32[$even_odd >> 2] | 0) == 0;
    HEAP32[$jj >> 2] = 0;
    L22 : do if ($67) while (1) {
     if ((HEAP32[$jj >> 2] | 0) >= 100) break L22;
     $80 = +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3] * +Math_sin(+(+((HEAP32[$jj >> 2] | 0) + 1 | 0) * 2.0 * +HEAPF64[$4 >> 3]));
     $83 = (HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) | 0;
     HEAPF64[$83 >> 3] = +HEAPF64[$83 >> 3] + $80;
     HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3] * +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3];
     HEAP32[$jj >> 2] = (HEAP32[$jj >> 2] | 0) + 1;
    } else while (1) {
     if ((HEAP32[$jj >> 2] | 0) >= 100) break L22;
     $109 = +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3] * +Math_sin(+((+(HEAP32[$jj >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$4 >> 3]));
     $112 = (HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) | 0;
     HEAPF64[$112 >> 3] = +HEAPF64[$112 >> 3] + $109;
     HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3] * +HEAPF64[$coeff + (HEAP32[$jj >> 2] << 3) >> 3];
     HEAP32[$jj >> 2] = (HEAP32[$jj >> 2] | 0) + 1;
    } while (0);
    HEAPF64[$norm >> 3] = +Math_sqrt(+(+HEAPF64[$norm >> 3]));
    $131 = (HEAP32[$6 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) | 0;
    HEAPF64[$131 >> 3] = +HEAPF64[$131 >> 3] / +HEAPF64[$norm >> 3];
   } while (0);
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
   HEAP32[$order >> 2] = (HEAP32[$order >> 2] | 0) + 1;
  }
  if ((label | 0) == 16) {
   HEAP32[$0 >> 2] = HEAP32[$status >> 2];
   $138 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  } else if ((label | 0) == 24) {
   HEAP32[$0 >> 2] = 0;
   $138 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  }
 }
 _gsl_error(54480, 54456, 292, 1);
 HEAP32[$0 >> 2] = 1;
 $138 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $138 | 0;
}
function _gsl_sf_hyperg_1F1_series_e($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $105 = 0.0, $107 = 0, $110 = 0, $2 = 0, $28 = 0.0, $3 = 0, $30 = 0, $4 = 0, $58 = 0.0, $73 = 0.0, $98 = 0, $abs_del = 0, $abs_u = 0, $an = 0, $bn = 0, $del = 0, $max_abs_del = 0, $n = 0, $sum_err = 0, $sum_val = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 104 | 0;
 $an = sp + 72 | 0;
 $bn = sp + 64 | 0;
 $n = sp + 56 | 0;
 $del = sp + 48 | 0;
 $abs_del = sp + 40 | 0;
 $max_abs_del = sp + 32 | 0;
 $sum_val = sp + 24 | 0;
 $sum_err = sp + 16 | 0;
 $u = sp + 8 | 0;
 $abs_u = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$an >> 3] = +HEAPF64[$1 >> 3];
 HEAPF64[$bn >> 3] = +HEAPF64[$2 >> 3];
 HEAPF64[$n >> 3] = 1.0;
 HEAPF64[$del >> 3] = 1.0;
 HEAPF64[$abs_del >> 3] = 1.0;
 HEAPF64[$max_abs_del >> 3] = 1.0;
 HEAPF64[$sum_val >> 3] = 1.0;
 HEAPF64[$sum_err >> 3] = 0.0;
 while (1) {
  if (!(+HEAPF64[$abs_del >> 3] / +Math_abs(+(+HEAPF64[$sum_val >> 3])) > 5.551115123125783e-17)) {
   label = 15;
   break;
  }
  if (+HEAPF64[$bn >> 3] == 0.0) {
   label = 4;
   break;
  }
  if (+HEAPF64[$an >> 3] == 0.0) {
   label = 6;
   break;
  }
  if (+HEAPF64[$n >> 3] > 1.0e4) {
   label = 8;
   break;
  }
  HEAPF64[$u >> 3] = +HEAPF64[$3 >> 3] * (+HEAPF64[$an >> 3] / (+HEAPF64[$bn >> 3] * +HEAPF64[$n >> 3]));
  HEAPF64[$abs_u >> 3] = +Math_abs(+(+HEAPF64[$u >> 3]));
  if (+HEAPF64[$abs_u >> 3] > 1.0) if (+HEAPF64[$max_abs_del >> 3] > 1.7976931348623157e+308 / +HEAPF64[$abs_u >> 3]) {
   label = 11;
   break;
  }
  HEAPF64[$del >> 3] = +HEAPF64[$del >> 3] * +HEAPF64[$u >> 3];
  HEAPF64[$sum_val >> 3] = +HEAPF64[$sum_val >> 3] + +HEAPF64[$del >> 3];
  if (+Math_abs(+(+HEAPF64[$sum_val >> 3])) > 1.7976931348623158e+303) {
   label = 13;
   break;
  }
  HEAPF64[$abs_del >> 3] = +Math_abs(+(+HEAPF64[$del >> 3]));
  HEAPF64[$max_abs_del >> 3] = +_GSL_MAX_DBL(+(+HEAPF64[$abs_del >> 3]), +(+HEAPF64[$max_abs_del >> 3]));
  HEAPF64[$sum_err >> 3] = +HEAPF64[$sum_err >> 3] + +HEAPF64[$abs_del >> 3] * 4.440892098500626e-16;
  HEAPF64[$an >> 3] = +HEAPF64[$an >> 3] + 1.0;
  HEAPF64[$bn >> 3] = +HEAPF64[$bn >> 3] + 1.0;
  HEAPF64[$n >> 3] = +HEAPF64[$n >> 3] + 1.0;
 }
 if ((label | 0) == 4) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51472, 51488, 55, 1);
  HEAP32[$0 >> 2] = 1;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 } else if ((label | 0) == 6) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sum_val >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$sum_err >> 3];
  $28 = +HEAPF64[$n >> 3] * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$sum_val >> 3]));
  $30 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$30 >> 3] = +HEAPF64[$30 >> 3] + $28;
  HEAP32[$0 >> 2] = 0;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 } else if ((label | 0) == 8) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sum_val >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$sum_err >> 3];
  _gsl_error(51504, 51488, 68, 5);
  HEAP32[$0 >> 2] = 5;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 } else if ((label | 0) == 11) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sum_val >> 3];
  $58 = +Math_abs(+(+HEAPF64[$sum_val >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $58;
  _gsl_error(51552, 51488, 76, 16);
  HEAP32[$0 >> 2] = 16;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 } else if ((label | 0) == 13) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sum_val >> 3];
  $73 = +Math_abs(+(+HEAPF64[$sum_val >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $73;
  _gsl_error(51552, 51488, 83, 16);
  HEAP32[$0 >> 2] = 16;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 } else if ((label | 0) == 15) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sum_val >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$sum_err >> 3];
  $98 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$98 >> 3] = +HEAPF64[$98 >> 3] + +HEAPF64[$abs_del >> 3];
  $105 = +HEAPF64[$n >> 3] * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$sum_val >> 3]));
  $107 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$107 >> 3] = +HEAPF64[$107 >> 3] + $105;
  HEAP32[$0 >> 2] = 0;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 }
 return 0;
}
function _fd_asymp($j, $x, $result) {
 $j = +$j;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $116 = 0.0, $123 = 0.0, $125 = 0, $129 = 0.0, $134 = 0, $140 = 0.0, $142 = 0, $155 = 0, $2 = 0, $48 = 0.0, $62 = 0.0, $68 = 0.0, $86 = 0.0, $90 = 0.0, $add = 0, $add_previous = 0, $cos_term = 0, $eta = 0, $ex = 0, $ex_arg = 0, $ex_term_1 = 0, $ex_term_2 = 0, $fneg = 0, $j_integer = 0, $lg = 0, $ln_x = 0, $n = 0, $seqn_err = 0, $seqn_val = 0, $stat_e = 0, $stat_fneg = 0, $stat_lg = 0, $xgam = 0, $xm2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $0 = sp + 168 | 0;
 $1 = sp + 160 | 0;
 $2 = sp + 200 | 0;
 $j_integer = sp + 196 | 0;
 $lg = sp + 144 | 0;
 $stat_lg = sp + 188 | 0;
 $seqn_val = sp + 136 | 0;
 $seqn_err = sp + 128 | 0;
 $xm2 = sp + 120 | 0;
 $xgam = sp + 112 | 0;
 $add = sp + 104 | 0;
 $cos_term = sp + 96 | 0;
 $ln_x = sp + 88 | 0;
 $ex_term_1 = sp + 80 | 0;
 $ex_term_2 = sp + 72 | 0;
 $fneg = sp + 56 | 0;
 $ex_arg = sp + 40 | 0;
 $ex = sp + 24 | 0;
 $stat_fneg = sp + 184 | 0;
 $stat_e = sp + 180 | 0;
 $n = sp + 176 | 0;
 $add_previous = sp + 16 | 0;
 $eta = sp;
 HEAPF64[$0 >> 3] = $j;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$j_integer >> 2] = +Math_abs(+(+HEAPF64[$0 >> 3] - +Math_floor(+(+HEAPF64[$0 >> 3] + .5)))) < 2.220446049250313e-14 & 1;
 HEAP32[sp + 192 >> 2] = 200;
 HEAP32[$stat_lg >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$0 >> 3] + 2.0, $lg) | 0;
 HEAPF64[$seqn_val >> 3] = .5;
 HEAPF64[$seqn_err >> 3] = 0.0;
 HEAPF64[$xm2 >> 3] = 1.0 / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[$xgam >> 3] = 1.0;
 HEAPF64[$add >> 3] = 1.7976931348623157e+308;
 HEAP32[$n >> 2] = 1;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) > 200) break;
  HEAPF64[$add_previous >> 3] = +HEAPF64[$add >> 3];
  _gsl_sf_eta_int_e(HEAP32[$n >> 2] << 1, $eta) | 0;
  HEAPF64[$xgam >> 3] = +HEAPF64[$xgam >> 3] * +HEAPF64[$xm2 >> 3] * (+HEAPF64[$0 >> 3] + 1.0 - +((HEAP32[$n >> 2] << 1) - 2 | 0)) * (+HEAPF64[$0 >> 3] + 1.0 - +((HEAP32[$n >> 2] << 1) - 1 | 0));
  HEAPF64[$add >> 3] = +HEAPF64[$eta >> 3] * +HEAPF64[$xgam >> 3];
  if (!(HEAP32[$j_integer >> 2] | 0)) {
   $48 = +Math_abs(+(+HEAPF64[$add >> 3]));
   if ($48 > +Math_abs(+(+HEAPF64[$add_previous >> 3]))) break;
  }
  if (+Math_abs(+(+HEAPF64[$add >> 3] / +HEAPF64[$seqn_val >> 3])) < 2.220446049250313e-16) break;
  HEAPF64[$seqn_val >> 3] = +HEAPF64[$seqn_val >> 3] + +HEAPF64[$add >> 3];
  $62 = +Math_abs(+(+HEAPF64[$add >> 3])) * 4.440892098500626e-16;
  HEAPF64[$seqn_err >> 3] = +HEAPF64[$seqn_err >> 3] + $62;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 $68 = +Math_abs(+(+HEAPF64[$add >> 3]));
 HEAPF64[$seqn_err >> 3] = +HEAPF64[$seqn_err >> 3] + $68;
 HEAP32[$stat_fneg >> 2] = _fd_neg(+HEAPF64[$0 >> 3], -+HEAPF64[$1 >> 3], $fneg) | 0;
 HEAPF64[$ln_x >> 3] = +Math_log(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$ex_term_1 >> 3] = (+HEAPF64[$0 >> 3] + 1.0) * +HEAPF64[$ln_x >> 3];
 HEAPF64[$ex_term_2 >> 3] = +HEAPF64[$lg >> 3];
 HEAPF64[$ex_arg >> 3] = +HEAPF64[$ex_term_1 >> 3] - +HEAPF64[$ex_term_2 >> 3];
 $86 = +Math_abs(+(+HEAPF64[$ex_term_1 >> 3]));
 $90 = ($86 + +Math_abs(+(+HEAPF64[$ex_term_2 >> 3]))) * 2.220446049250313e-16;
 HEAPF64[$ex_arg + 8 >> 3] = $90 + +HEAPF64[$lg + 8 >> 3];
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$ex_arg >> 3], +HEAPF64[$ex_arg + 8 >> 3], $ex) | 0;
 HEAPF64[$cos_term >> 3] = +Math_cos(+(+HEAPF64[$0 >> 3] * 3.141592653589793));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$cos_term >> 3] * +HEAPF64[$fneg >> 3] + +HEAPF64[$seqn_val >> 3] * 2.0 * +HEAPF64[$ex >> 3];
 $116 = +Math_abs(+(+HEAPF64[$ex + 8 >> 3] * 2.0 * +HEAPF64[$seqn_val >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $116;
 $123 = +Math_abs(+(+HEAPF64[$ex >> 3] * 2.0 * +HEAPF64[$seqn_err >> 3]));
 $125 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$125 >> 3] = +HEAPF64[$125 >> 3] + $123;
 $129 = +Math_abs(+(+HEAPF64[$cos_term >> 3]));
 $134 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$134 >> 3] = +HEAPF64[$134 >> 3] + $129 * +HEAPF64[$fneg + 8 >> 3];
 $140 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 8.881784197001252e-16;
 $142 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$142 >> 3] = +HEAPF64[$142 >> 3] + $140;
 if (HEAP32[$stat_e >> 2] | 0) {
  $155 = HEAP32[$stat_e >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 if (HEAP32[$stat_fneg >> 2] | 0) {
  $155 = HEAP32[$stat_fneg >> 2] | 0;
  STACKTOP = sp;
  return $155 | 0;
 } else {
  $155 = (HEAP32[$stat_lg >> 2] | 0) != 0 ? HEAP32[$stat_lg >> 2] | 0 : 0;
  STACKTOP = sp;
  return $155 | 0;
 }
 return 0;
}
function _expint_E2_impl($x, $result, $scale) {
 $x = +$x;
 $result = $result | 0;
 $scale = $scale | 0;
 var $0 = 0, $1 = 0, $136 = 0, $2 = 0, $3 = 0, $30 = 0.0, $43 = 0.0, $53 = 0.0, $55 = 0, $69 = 0.0, $c1 = 0, $c10 = 0, $c11 = 0, $c12 = 0, $c13 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $c6 = 0, $c7 = 0, $c8 = 0, $c9 = 0, $ex = 0, $result_E1 = 0, $s = 0, $stat_E1 = 0, $sum = 0, $sum6 = 0, $xmax = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $0 = sp + 196 | 0;
 $1 = sp + 176 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 188 | 0;
 $xmax = sp + 160 | 0;
 $ex = sp + 152 | 0;
 $result_E1 = sp + 136 | 0;
 $stat_E1 = sp + 184 | 0;
 $s = sp + 128 | 0;
 $c1 = sp + 120 | 0;
 $c2 = sp + 112 | 0;
 $c3 = sp + 104 | 0;
 $c4 = sp + 96 | 0;
 $c5 = sp + 88 | 0;
 $c6 = sp + 80 | 0;
 $c7 = sp + 72 | 0;
 $c8 = sp + 64 | 0;
 $c9 = sp + 56 | 0;
 $c10 = sp + 48 | 0;
 $c11 = sp + 40 | 0;
 $c12 = sp + 32 | 0;
 $c13 = sp + 24 | 0;
 $y = sp + 16 | 0;
 $sum6 = sp + 8 | 0;
 $sum = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$3 >> 2] = $scale;
 HEAPF64[sp + 168 >> 3] = 708.3964185322641;
 HEAPF64[$xmax >> 3] = 708.3964185322641 - +Math_log(708.3964185322641);
 if (+HEAPF64[$1 >> 3] < -+HEAPF64[$xmax >> 3]) if (!(HEAP32[$3 >> 2] | 0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31464, 31312, 377, 16);
  HEAP32[$0 >> 2] = 16;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (HEAP32[$3 >> 2] | 0) != 0 ? 1.0 : 1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 100.0) {
  if (HEAP32[$3 >> 2] | 0) $30 = 1.0; else $30 = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$ex >> 3] = $30;
  HEAP32[$stat_E1 >> 2] = _expint_E1_impl(+HEAPF64[$1 >> 3], $result_E1, HEAP32[$3 >> 2] | 0) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ex >> 3] - +HEAPF64[$1 >> 3] * +HEAPF64[$result_E1 >> 3];
  $43 = +Math_abs(+(+HEAPF64[$1 >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ex >> 3] * 2.220446049250313e-16 + $43 * +HEAPF64[$result_E1 + 8 >> 3];
  $53 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $55 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$55 >> 3] = +HEAPF64[$55 >> 3] + $53;
  HEAP32[$0 >> 2] = HEAP32[$stat_E1 >> 2];
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 if (!(+HEAPF64[$1 >> 3] < +HEAPF64[$xmax >> 3])) if (!(HEAP32[$3 >> 2] | 0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(31448, 31312, 418, 15);
  HEAP32[$0 >> 2] = 15;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 if (HEAP32[$3 >> 2] | 0) $69 = 1.0; else $69 = +Math_exp(+-+HEAPF64[$1 >> 3]);
 HEAPF64[$s >> 3] = $69;
 HEAPF64[$c1 >> 3] = -2.0;
 HEAPF64[$c2 >> 3] = 6.0;
 HEAPF64[$c3 >> 3] = -24.0;
 HEAPF64[$c4 >> 3] = 120.0;
 HEAPF64[$c5 >> 3] = -720.0;
 HEAPF64[$c6 >> 3] = 5040.0;
 HEAPF64[$c7 >> 3] = -40320.0;
 HEAPF64[$c8 >> 3] = 362880.0;
 HEAPF64[$c9 >> 3] = -3628800.0;
 HEAPF64[$c10 >> 3] = 39916800.0;
 HEAPF64[$c11 >> 3] = -479001600.0;
 HEAPF64[$c12 >> 3] = 6227020800.0;
 HEAPF64[$c13 >> 3] = -87178291200.0;
 HEAPF64[$y >> 3] = 1.0 / +HEAPF64[$1 >> 3];
 HEAPF64[$sum6 >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * -87178291200.0 + 6227020800.0) + -479001600.0) + 39916800.0) + -3628800.0) + 362880.0) + -40320.0) + 5040.0;
 HEAPF64[$sum >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * +HEAPF64[$sum6 >> 3] + -720.0) + 120.0) + -24.0) + 6.0) + -2.0);
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$s >> 3] * (+HEAPF64[$sum >> 3] + 1.0) / +HEAPF64[$1 >> 3];
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$1 >> 3] + 1.0) * 2.0 * 2.220446049250313e-16 * +HEAPF64[HEAP32[$2 >> 2] >> 3];
 if (+HEAPF64[HEAP32[$2 >> 2] >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(31448, 31312, 413, 15);
  HEAP32[$0 >> 2] = 15;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 return 0;
}
function _gsl_sf_conicalP_mhalf_e($lambda, $x, $result) {
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $113 = 0.0, $130 = 0.0, $139 = 0.0, $141 = 0, $145 = 0, $15 = 0.0, $2 = 0, $3 = 0, $33 = 0, $34 = 0.0, $42 = 0.0, $47 = 0, $52 = 0.0, $55 = 0.0, $60 = 0.0, $64 = 0.0, $69 = 0, $75 = 0.0, $77 = 0, $86 = 0.0, $ac = 0, $arg = 0, $arg_err = 0, $arg_val = 0, $den = 0, $den1 = 0, $err_amp = 0, $ln_term = 0, $sin_result = 0, $sq_term = 0, $stat_sin = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 108 | 0;
 $ac = sp + 80 | 0;
 $den = sp + 72 | 0;
 $arg = sp + 64 | 0;
 $err_amp = sp + 56 | 0;
 $sq_term = sp + 48 | 0;
 $ln_term = sp + 40 | 0;
 $den1 = sp + 32 | 0;
 $arg_val = sp + 24 | 0;
 $arg_err = sp + 16 | 0;
 $sin_result = sp;
 $stat_sin = sp + 104 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] <= -1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(53168, 53184, 1060, 1);
  HEAP32[$0 >> 2] = 1;
  $145 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $145 | 0;
 }
 $11 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$2 >> 3] < 1.0) {
  HEAPF64[$ac >> 3] = +Math_acos(+$11);
  $15 = +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3]));
  HEAPF64[$den >> 3] = +Math_sqrt(+($15 * +Math_sqrt(+(+HEAPF64[$2 >> 3] + 1.0))));
  HEAPF64[$arg >> 3] = +HEAPF64[$ac >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$err_amp >> 3] = 1.0 / (+Math_abs(+(1.0 - +Math_abs(+(+HEAPF64[$2 >> 3])))) + 2.220446049250313e-16) + 1.0;
  $33 = +Math_abs(+(+HEAPF64[$arg >> 3])) < 1.4901161193847656e-8;
  $34 = +HEAPF64[$den >> 3];
  if ($33) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = .7978845608028654 / $34 * +HEAPF64[$ac >> 3];
   $42 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $42;
   $47 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$47 >> 3] = +HEAPF64[$47 >> 3] * +HEAPF64[$err_amp >> 3];
  } else {
   $52 = .7978845608028654 / ($34 * +HEAPF64[$1 >> 3]);
   $55 = $52 * +_sinh(+(+HEAPF64[$arg >> 3]));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = $55;
   $60 = (+Math_abs(+(+HEAPF64[$arg >> 3])) + 1.0) * 2.220446049250313e-16;
   $64 = $60 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $64;
   $69 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$69 >> 3] = +HEAPF64[$69 >> 3] * +HEAPF64[$err_amp >> 3];
   $75 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $77 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$77 >> 3] = +HEAPF64[$77 >> 3] + $75;
  }
  HEAP32[$0 >> 2] = 0;
  $145 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $145 | 0;
 }
 if ($11 == 1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $145 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $145 | 0;
 }
 $86 = +Math_sqrt(+(+HEAPF64[$2 >> 3] - 1.0));
 HEAPF64[$sq_term >> 3] = $86 * +Math_sqrt(+(+HEAPF64[$2 >> 3] + 1.0));
 HEAPF64[$ln_term >> 3] = +Math_log(+(+HEAPF64[$2 >> 3] + +HEAPF64[$sq_term >> 3]));
 HEAPF64[$den1 >> 3] = +Math_sqrt(+(+HEAPF64[$sq_term >> 3]));
 HEAPF64[$arg_val >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$ln_term >> 3];
 HEAPF64[$arg_err >> 3] = +Math_abs(+(+HEAPF64[$arg_val >> 3])) * 4.440892098500626e-16;
 if (+HEAPF64[$arg_val >> 3] < 1.4901161193847656e-8) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = .7978845608028654 / +HEAPF64[$den1 >> 3] * +HEAPF64[$ln_term >> 3];
  $113 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $113;
  HEAP32[$0 >> 2] = 0;
  $145 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $145 | 0;
 } else {
  HEAP32[$stat_sin >> 2] = _gsl_sf_sin_err_e(+HEAPF64[$arg_val >> 3], +HEAPF64[$arg_err >> 3], $sin_result) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = .7978845608028654 / (+HEAPF64[$den1 >> 3] * +HEAPF64[$1 >> 3]) * +HEAPF64[$sin_result >> 3];
  $130 = .7978845608028654 / +Math_abs(+(+HEAPF64[$den1 >> 3] * +HEAPF64[$1 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $130 * +HEAPF64[$sin_result + 8 >> 3];
  $139 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 6.661338147750939e-16;
  $141 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$141 >> 3] = +HEAPF64[$141 >> 3] + $139;
  HEAP32[$0 >> 2] = HEAP32[$stat_sin >> 2];
  $145 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $145 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_JY_steed_CF2($nu, $x, $P, $Q) {
 $nu = +$nu;
 $x = +$x;
 $P = $P | 0;
 $Q = $Q | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $125 = 0.0, $175 = 0.0, $188 = 0, $2 = 0, $3 = 0, $4 = 0, $a = 0, $bi = 0, $br = 0, $ci = 0, $cr = 0, $den = 0, $di = 0, $dli = 0, $dlr = 0, $dr = 0, $fact = 0, $i = 0, $p = 0, $q = 0, $temp = 0, $x_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 160 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 128 | 0;
 $3 = sp + 156 | 0;
 $4 = sp + 152 | 0;
 $i = sp + 144 | 0;
 $x_inv = sp + 112 | 0;
 $a = sp + 104 | 0;
 $p = sp + 96 | 0;
 $q = sp + 88 | 0;
 $br = sp + 80 | 0;
 $bi = sp + 72 | 0;
 $fact = sp + 64 | 0;
 $cr = sp + 56 | 0;
 $ci = sp + 48 | 0;
 $den = sp + 40 | 0;
 $dr = sp + 32 | 0;
 $di = sp + 24 | 0;
 $dlr = sp + 16 | 0;
 $dli = sp + 8 | 0;
 $temp = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $P;
 HEAP32[$4 >> 2] = $Q;
 HEAP32[sp + 148 >> 2] = 1e4;
 HEAPF64[sp + 120 >> 3] = 1.0e-100;
 HEAP32[$i >> 2] = 1;
 HEAPF64[$x_inv >> 3] = 1.0 / +HEAPF64[$2 >> 3];
 HEAPF64[$a >> 3] = .25 - +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 HEAPF64[$p >> 3] = +HEAPF64[$x_inv >> 3] * -.5;
 HEAPF64[$q >> 3] = 1.0;
 HEAPF64[$br >> 3] = +HEAPF64[$2 >> 3] * 2.0;
 HEAPF64[$bi >> 3] = 2.0;
 HEAPF64[$fact >> 3] = +HEAPF64[$a >> 3] * +HEAPF64[$x_inv >> 3] / (+HEAPF64[$p >> 3] * +HEAPF64[$p >> 3] + +HEAPF64[$q >> 3] * +HEAPF64[$q >> 3]);
 HEAPF64[$cr >> 3] = +HEAPF64[$br >> 3] + +HEAPF64[$q >> 3] * +HEAPF64[$fact >> 3];
 HEAPF64[$ci >> 3] = +HEAPF64[$bi >> 3] + +HEAPF64[$p >> 3] * +HEAPF64[$fact >> 3];
 HEAPF64[$den >> 3] = +HEAPF64[$br >> 3] * +HEAPF64[$br >> 3] + +HEAPF64[$bi >> 3] * +HEAPF64[$bi >> 3];
 HEAPF64[$dr >> 3] = +HEAPF64[$br >> 3] / +HEAPF64[$den >> 3];
 HEAPF64[$di >> 3] = -+HEAPF64[$bi >> 3] / +HEAPF64[$den >> 3];
 HEAPF64[$dlr >> 3] = +HEAPF64[$cr >> 3] * +HEAPF64[$dr >> 3] - +HEAPF64[$ci >> 3] * +HEAPF64[$di >> 3];
 HEAPF64[$dli >> 3] = +HEAPF64[$cr >> 3] * +HEAPF64[$di >> 3] + +HEAPF64[$ci >> 3] * +HEAPF64[$dr >> 3];
 HEAPF64[$temp >> 3] = +HEAPF64[$p >> 3] * +HEAPF64[$dlr >> 3] - +HEAPF64[$q >> 3] * +HEAPF64[$dli >> 3];
 HEAPF64[$q >> 3] = +HEAPF64[$p >> 3] * +HEAPF64[$dli >> 3] + +HEAPF64[$q >> 3] * +HEAPF64[$dlr >> 3];
 HEAPF64[$p >> 3] = +HEAPF64[$temp >> 3];
 HEAP32[$i >> 2] = 2;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > 1e4) break;
  HEAPF64[$a >> 3] = +HEAPF64[$a >> 3] + +((HEAP32[$i >> 2] | 0) - 1 << 1 | 0);
  HEAPF64[$bi >> 3] = +HEAPF64[$bi >> 3] + 2.0;
  HEAPF64[$dr >> 3] = +HEAPF64[$a >> 3] * +HEAPF64[$dr >> 3] + +HEAPF64[$br >> 3];
  HEAPF64[$di >> 3] = +HEAPF64[$a >> 3] * +HEAPF64[$di >> 3] + +HEAPF64[$bi >> 3];
  $100 = +Math_abs(+(+HEAPF64[$dr >> 3]));
  if ($100 + +Math_abs(+(+HEAPF64[$di >> 3])) < 1.0e-100) HEAPF64[$dr >> 3] = 1.0e-100;
  HEAPF64[$fact >> 3] = +HEAPF64[$a >> 3] / (+HEAPF64[$cr >> 3] * +HEAPF64[$cr >> 3] + +HEAPF64[$ci >> 3] * +HEAPF64[$ci >> 3]);
  HEAPF64[$cr >> 3] = +HEAPF64[$br >> 3] + +HEAPF64[$cr >> 3] * +HEAPF64[$fact >> 3];
  HEAPF64[$ci >> 3] = +HEAPF64[$bi >> 3] - +HEAPF64[$ci >> 3] * +HEAPF64[$fact >> 3];
  $125 = +Math_abs(+(+HEAPF64[$cr >> 3]));
  if ($125 + +Math_abs(+(+HEAPF64[$ci >> 3])) < 1.0e-100) HEAPF64[$cr >> 3] = 1.0e-100;
  HEAPF64[$den >> 3] = +HEAPF64[$dr >> 3] * +HEAPF64[$dr >> 3] + +HEAPF64[$di >> 3] * +HEAPF64[$di >> 3];
  HEAPF64[$dr >> 3] = +HEAPF64[$dr >> 3] / +HEAPF64[$den >> 3];
  HEAPF64[$di >> 3] = +HEAPF64[$di >> 3] / -+HEAPF64[$den >> 3];
  HEAPF64[$dlr >> 3] = +HEAPF64[$cr >> 3] * +HEAPF64[$dr >> 3] - +HEAPF64[$ci >> 3] * +HEAPF64[$di >> 3];
  HEAPF64[$dli >> 3] = +HEAPF64[$cr >> 3] * +HEAPF64[$di >> 3] + +HEAPF64[$ci >> 3] * +HEAPF64[$dr >> 3];
  HEAPF64[$temp >> 3] = +HEAPF64[$p >> 3] * +HEAPF64[$dlr >> 3] - +HEAPF64[$q >> 3] * +HEAPF64[$dli >> 3];
  HEAPF64[$q >> 3] = +HEAPF64[$p >> 3] * +HEAPF64[$dli >> 3] + +HEAPF64[$q >> 3] * +HEAPF64[$dlr >> 3];
  HEAPF64[$p >> 3] = +HEAPF64[$temp >> 3];
  $175 = +Math_abs(+(+HEAPF64[$dlr >> 3] - 1.0));
  if ($175 + +Math_abs(+(+HEAPF64[$dli >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$p >> 3];
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$q >> 3];
 if ((HEAP32[$i >> 2] | 0) == 1e4) {
  _gsl_error(10696, 10680, 713, 11);
  HEAP32[$0 >> 2] = 11;
  $188 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $188 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $188 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $188 | 0;
 }
 return 0;
}
function _gsl_sf_complex_dilog_xy_e($x, $y, $real_dl, $imag_dl) {
 $x = +$x;
 $y = +$y;
 $real_dl = $real_dl | 0;
 $imag_dl = $imag_dl | 0;
 var $0 = 0, $1 = 0, $120 = 0.0, $134 = 0.0, $138 = 0, $18 = 0.0, $2 = 0, $23 = 0.0, $3 = 0, $4 = 0, $lmz2_im = 0, $lmz2_re = 0, $ln_minusz_im = 0, $ln_minusz_re = 0, $r = 0, $r2 = 0, $result_im_tmp = 0, $result_re_tmp = 0, $stat_dilog = 0, $term1 = 0, $term2 = 0, $theta = 0, $theta1 = 0, $theta_abs = 0, $theta_sgn = 0, $x_tmp = 0, $y_tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 180 | 0;
 $1 = sp + 160 | 0;
 $2 = sp + 152 | 0;
 $3 = sp + 176 | 0;
 $4 = sp + 172 | 0;
 $r2 = sp + 136 | 0;
 $theta = sp + 128 | 0;
 $term1 = sp + 120 | 0;
 $term2 = sp + 112 | 0;
 $r = sp + 104 | 0;
 $x_tmp = sp + 96 | 0;
 $y_tmp = sp + 88 | 0;
 $result_re_tmp = sp + 72 | 0;
 $result_im_tmp = sp + 56 | 0;
 $stat_dilog = sp + 168 | 0;
 $theta1 = sp + 48 | 0;
 $theta_abs = sp + 40 | 0;
 $theta_sgn = sp + 32 | 0;
 $ln_minusz_re = sp + 24 | 0;
 $ln_minusz_im = sp + 16 | 0;
 $lmz2_re = sp + 8 | 0;
 $lmz2_im = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $real_dl;
 HEAP32[$4 >> 2] = $imag_dl;
 HEAPF64[sp + 144 >> 3] = 1.6449340668482264;
 HEAPF64[$r2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
 if (+HEAPF64[$2 >> 3] == 0.0) {
  if (+HEAPF64[$1 >> 3] >= 1.0) {
   $18 = +Math_log(+(+HEAPF64[$1 >> 3])) * -3.141592653589793;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = $18;
   $23 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $23;
  } else {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  }
  HEAP32[$0 >> 2] = _gsl_sf_dilog_e(+HEAPF64[$1 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 if (+Math_abs(+(+HEAPF64[$r2 >> 3] - 1.0)) < 2.220446049250313e-16) {
  HEAPF64[$theta >> 3] = +Math_atan2(+(+HEAPF64[$2 >> 3]), +(+HEAPF64[$1 >> 3]));
  HEAPF64[$term1 >> 3] = +HEAPF64[$theta >> 3] * +HEAPF64[$theta >> 3] / 4.0;
  HEAPF64[$term2 >> 3] = +Math_abs(+(+HEAPF64[$theta >> 3])) * 3.141592653589793 / 2.0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$term1 >> 3] + 1.6449340668482264 - +HEAPF64[$term2 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$term1 >> 3] + 1.6449340668482264 + +HEAPF64[$term2 >> 3]) * 4.440892098500626e-16;
  HEAP32[$0 >> 2] = _gsl_sf_clausen_e(+HEAPF64[$theta >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 if (+HEAPF64[$r2 >> 3] < 1.0) {
  HEAP32[$0 >> 2] = _dilogc_unitdisk(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 } else {
  HEAPF64[$r >> 3] = +Math_sqrt(+(+HEAPF64[$r2 >> 3]));
  HEAPF64[$x_tmp >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$r2 >> 3];
  HEAPF64[$y_tmp >> 3] = -+HEAPF64[$2 >> 3] / +HEAPF64[$r2 >> 3];
  HEAP32[$stat_dilog >> 2] = _dilogc_unitdisk(+HEAPF64[$x_tmp >> 3], +HEAPF64[$y_tmp >> 3], $result_re_tmp, $result_im_tmp) | 0;
  HEAPF64[$theta1 >> 3] = +Math_atan2(+(+HEAPF64[$2 >> 3]), +(+HEAPF64[$1 >> 3]));
  HEAPF64[$theta_abs >> 3] = +Math_abs(+(+HEAPF64[$theta1 >> 3]));
  HEAPF64[$theta_sgn >> 3] = +HEAPF64[$theta1 >> 3] < 0.0 ? -1.0 : 1.0;
  HEAPF64[$ln_minusz_re >> 3] = +Math_log(+(+HEAPF64[$r >> 3]));
  HEAPF64[$ln_minusz_im >> 3] = +HEAPF64[$theta_sgn >> 3] * (+HEAPF64[$theta_abs >> 3] - 3.141592653589793);
  HEAPF64[$lmz2_re >> 3] = +HEAPF64[$ln_minusz_re >> 3] * +HEAPF64[$ln_minusz_re >> 3] - +HEAPF64[$ln_minusz_im >> 3] * +HEAPF64[$ln_minusz_im >> 3];
  HEAPF64[$lmz2_im >> 3] = +HEAPF64[$ln_minusz_re >> 3] * 2.0 * +HEAPF64[$ln_minusz_im >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[$result_re_tmp >> 3] - +HEAPF64[$lmz2_re >> 3] * .5 - 1.6449340668482264;
  $120 = +HEAPF64[$result_re_tmp + 8 >> 3] + (+Math_abs(+(+HEAPF64[$lmz2_re >> 3])) * .5 + 1.6449340668482264) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $120;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = -+HEAPF64[$result_im_tmp >> 3] - +HEAPF64[$lmz2_im >> 3] * .5;
  $134 = +HEAPF64[$result_im_tmp + 8 >> 3] + +Math_abs(+(+HEAPF64[$lmz2_im >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $134;
  HEAP32[$0 >> 2] = HEAP32[$stat_dilog >> 2];
  $138 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 return 0;
}
function _gsl_ran_landau_pdf($x) {
 $x = +$x;
 var $0 = 0, $13 = 0.0, $149 = 0.0, $191 = 0.0, $233 = 0.0, $277 = 0.0, $28 = 0.0, $295 = 0.0, $34 = 0.0, $37 = 0.0, $4 = 0.0, $9 = 0.0, $DENLAN = 0, $U = 0, $V = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $U = sp + 16 | 0;
 $V = sp + 8 | 0;
 $DENLAN = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$V >> 3] = +HEAPF64[$0 >> 3];
 $4 = +HEAPF64[$V >> 3];
 if (+HEAPF64[$V >> 3] < -5.5) {
  HEAPF64[$U >> 3] = +Math_exp(+($4 + 1.0));
  $9 = +Math_exp(+(-1.0 / +HEAPF64[$U >> 3]));
  $13 = $9 / +Math_sqrt(+(+HEAPF64[$U >> 3])) * .3989422803;
  HEAPF64[$DENLAN >> 3] = $13 * ((+HEAPF64[8643] + (+HEAPF64[8644] + +HEAPF64[8645] * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3] + 1.0);
  $295 = +HEAPF64[$DENLAN >> 3];
  STACKTOP = sp;
  return +$295;
 }
 $28 = +HEAPF64[$V >> 3];
 if ($4 < -1.0) {
  HEAPF64[$U >> 3] = +Math_exp(+(-$28 - 1.0));
  $34 = +Math_exp(+-+HEAPF64[$U >> 3]);
  $37 = $34 * +Math_sqrt(+(+HEAPF64[$U >> 3]));
  HEAPF64[$DENLAN >> 3] = $37 * (+HEAPF64[8583] + (+HEAPF64[8584] + (+HEAPF64[8585] + (+HEAPF64[8586] + +HEAPF64[8587] * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) / (+HEAPF64[8613] + (+HEAPF64[8614] + (+HEAPF64[8615] + (+HEAPF64[8616] + +HEAPF64[8617] * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]);
  $295 = +HEAPF64[$DENLAN >> 3];
  STACKTOP = sp;
  return +$295;
 }
 if ($28 < 1.0) {
  HEAPF64[$DENLAN >> 3] = (+HEAPF64[8588] + (+HEAPF64[8589] + (+HEAPF64[8590] + (+HEAPF64[8591] + +HEAPF64[8592] * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) / (+HEAPF64[8618] + (+HEAPF64[8619] + (+HEAPF64[8620] + (+HEAPF64[8621] + +HEAPF64[8622] * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]);
  $295 = +HEAPF64[$DENLAN >> 3];
  STACKTOP = sp;
  return +$295;
 }
 if (+HEAPF64[$V >> 3] < 5.0) {
  HEAPF64[$DENLAN >> 3] = (+HEAPF64[8593] + (+HEAPF64[8594] + (+HEAPF64[8595] + (+HEAPF64[8596] + +HEAPF64[8597] * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) / (+HEAPF64[8623] + (+HEAPF64[8624] + (+HEAPF64[8625] + (+HEAPF64[8626] + +HEAPF64[8627] * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]) * +HEAPF64[$V >> 3]);
  $295 = +HEAPF64[$DENLAN >> 3];
  STACKTOP = sp;
  return +$295;
 }
 $149 = +HEAPF64[$V >> 3];
 if (+HEAPF64[$V >> 3] < 12.0) {
  HEAPF64[$U >> 3] = 1.0 / $149;
  HEAPF64[$DENLAN >> 3] = +HEAPF64[$U >> 3] * +HEAPF64[$U >> 3] * (+HEAPF64[8598] + (+HEAPF64[8599] + (+HEAPF64[8600] + (+HEAPF64[8601] + +HEAPF64[8602] * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) / (+HEAPF64[8628] + (+HEAPF64[8629] + (+HEAPF64[8630] + (+HEAPF64[8631] + +HEAPF64[8632] * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]);
  $295 = +HEAPF64[$DENLAN >> 3];
  STACKTOP = sp;
  return +$295;
 }
 $191 = +HEAPF64[$V >> 3];
 if ($149 < 50.0) {
  HEAPF64[$U >> 3] = 1.0 / $191;
  HEAPF64[$DENLAN >> 3] = +HEAPF64[$U >> 3] * +HEAPF64[$U >> 3] * (+HEAPF64[8603] + (+HEAPF64[8604] + (+HEAPF64[8605] + (+HEAPF64[8606] + +HEAPF64[8607] * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) / (+HEAPF64[8633] + (+HEAPF64[8634] + (+HEAPF64[8635] + (+HEAPF64[8636] + +HEAPF64[8637] * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]);
  $295 = +HEAPF64[$DENLAN >> 3];
  STACKTOP = sp;
  return +$295;
 }
 $233 = +HEAPF64[$V >> 3];
 if ($191 < 300.0) {
  HEAPF64[$U >> 3] = 1.0 / $233;
  HEAPF64[$DENLAN >> 3] = +HEAPF64[$U >> 3] * +HEAPF64[$U >> 3] * (+HEAPF64[8608] + (+HEAPF64[8609] + (+HEAPF64[8610] + (+HEAPF64[8611] + +HEAPF64[8612] * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) / (+HEAPF64[8638] + (+HEAPF64[8639] + (+HEAPF64[8640] + (+HEAPF64[8641] + +HEAPF64[8642] * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3]);
  $295 = +HEAPF64[$DENLAN >> 3];
  STACKTOP = sp;
  return +$295;
 } else {
  $277 = +HEAPF64[$V >> 3] * +Math_log(+(+HEAPF64[$V >> 3]));
  HEAPF64[$U >> 3] = 1.0 / ($233 - $277 / (+HEAPF64[$V >> 3] + 1.0));
  HEAPF64[$DENLAN >> 3] = +HEAPF64[$U >> 3] * +HEAPF64[$U >> 3] * ((+HEAPF64[8646] + +HEAPF64[8647] * +HEAPF64[$U >> 3]) * +HEAPF64[$U >> 3] + 1.0);
  $295 = +HEAPF64[$DENLAN >> 3];
  STACKTOP = sp;
  return +$295;
 }
 return 0.0;
}
function _gsl_sf_airy_Bi_deriv_e($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $113 = 0.0, $115 = 0, $132 = 0.0, $145 = 0, $149 = 0, $2 = 0, $20 = 0.0, $26 = 0.0, $3 = 0, $32 = 0.0, $34 = 0, $39 = 0.0, $6 = 0.0, $71 = 0.0, $73 = 0, $77 = 0.0, $a = 0, $arg = 0, $p = 0, $result_bps = 0, $result_c1 = 0, $result_c11 = 0, $result_c2 = 0, $result_c22 = 0, $s = 0, $stat_b = 0, $stat_e = 0, $status_ap = 0, $x2 = 0, $x3 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 180 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 176 | 0;
 $3 = sp + 172 | 0;
 $a = sp + 136 | 0;
 $p = sp + 120 | 0;
 $status_ap = sp + 168 | 0;
 $s = sp + 112 | 0;
 $x3 = sp + 104 | 0;
 $x2 = sp + 96 | 0;
 $result_c1 = sp + 80 | 0;
 $result_c2 = sp + 64 | 0;
 $z = sp + 56 | 0;
 $result_c11 = sp + 40 | 0;
 $result_c22 = sp + 24 | 0;
 $result_bps = sp + 8 | 0;
 $arg = sp;
 $stat_b = sp + 164 | 0;
 $stat_e = sp + 160 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAP32[$status_ap >> 2] = _airy_deriv_mod_phase($6, HEAP32[$2 >> 2] | 0, $a, $p) | 0;
  HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$p >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$a >> 3] * +HEAPF64[$s >> 3];
  $20 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3] * +HEAPF64[$p + 8 >> 3]));
  $26 = $20 + +Math_abs(+(+HEAPF64[$s >> 3] * +HEAPF64[$a + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $26;
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $34 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] + $32;
  HEAP32[$0 >> 2] = HEAP32[$status_ap >> 2];
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 $39 = +HEAPF64[$1 >> 3];
 if ($6 < 1.0) {
  HEAPF64[$x3 >> 3] = $39 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  _cheb_eval_mode_e66(5416, +HEAPF64[$x3 >> 3], HEAP32[$2 >> 2] | 0, $result_c1) | 0;
  _cheb_eval_mode_e66(5320, +HEAPF64[$x3 >> 3], HEAP32[$2 >> 2] | 0, $result_c2) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$x2 >> 3] * (+HEAPF64[$result_c1 >> 3] + .25) + +HEAPF64[$result_c2 >> 3] + .5;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$result_c1 + 8 >> 3] + +HEAPF64[$result_c2 + 8 >> 3];
  $71 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $73 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$73 >> 3] = +HEAPF64[$73 >> 3] + $71;
  HEAP32[$0 >> 2] = 0;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 $77 = +HEAPF64[$1 >> 3];
 if ($39 < 2.0) {
  HEAPF64[$z >> 3] = (2.0 * $77 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] - 9.0) / 7.0;
  _cheb_eval_mode_e66(5216, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c11) | 0;
  _cheb_eval_mode_e66(5104, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c22) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c11 >> 3] + .25) + +HEAPF64[$result_c22 >> 3] + .5;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$result_c11 + 8 >> 3] + +HEAPF64[$result_c22 + 8 >> 3];
  $113 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $115 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$115 >> 3] = +HEAPF64[$115 >> 3] + $113;
  HEAP32[$0 >> 2] = 0;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 if (!($77 < 3.185251336522433e+205)) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(4328, 4312, 862, 16);
  HEAP32[$0 >> 2] = 16;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 HEAPF64[$arg >> 3] = +HEAPF64[$1 >> 3] * +Math_sqrt(+(+HEAPF64[$1 >> 3])) / 3.0 * 2.0;
 HEAP32[$stat_b >> 2] = _gsl_sf_airy_Bi_deriv_scaled_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result_bps) | 0;
 $132 = +Math_abs(+(+HEAPF64[$arg >> 3] * 2.220446049250313e-16)) * 1.5;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$arg >> 3], $132, +HEAPF64[$result_bps >> 3], +HEAPF64[$result_bps + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) $145 = HEAP32[$stat_e >> 2] | 0; else $145 = (HEAP32[$stat_b >> 2] | 0) != 0 ? HEAP32[$stat_b >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $145;
 $149 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $149 | 0;
}
function _gsl_sf_fermi_dirac_2_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $122 = 0.0, $136 = 0.0, $142 = 0, $2 = 0, $46 = 0.0, $50 = 0.0, $54 = 0.0, $62 = 0.0, $70 = 0.0, $94 = 0.0, $98 = 0.0, $c = 0, $c4 = 0, $ex = 0, $n = 0, $rat = 0, $sum = 0, $t = 0, $t1 = 0, $t2 = 0, $t3 = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 108 | 0;
 $ex = sp + 88 | 0;
 $term = sp + 80 | 0;
 $sum = sp + 72 | 0;
 $n = sp + 104 | 0;
 $rat = sp + 64 | 0;
 $t = sp + 56 | 0;
 $t1 = sp + 48 | 0;
 $t2 = sp + 40 | 0;
 $c = sp + 24 | 0;
 $t3 = sp + 16 | 0;
 $c4 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(33376, 33392, 1325, 15);
  HEAP32[$0 >> 2] = 15;
  $142 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $142 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAPF64[$ex >> 3] = +Math_exp(+$10);
  HEAPF64[$term >> 3] = +HEAPF64[$ex >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$term >> 3];
  HEAP32[$n >> 2] = 2;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) >= 100) break;
   HEAPF64[$rat >> 3] = (+(HEAP32[$n >> 2] | 0) - 1.0) / +(HEAP32[$n >> 2] | 0);
   HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * -+HEAPF64[$ex >> 3] * +HEAPF64[$rat >> 3] * +HEAPF64[$rat >> 3] * +HEAPF64[$rat >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
   if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sum >> 3];
  $46 = +Math_abs(+(+HEAPF64[$sum >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $46;
  HEAP32[$0 >> 2] = 0;
  $142 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $142 | 0;
 }
 $50 = +HEAPF64[$1 >> 3];
 if ($10 < 1.0) {
  HEAP32[$0 >> 2] = _cheb_eval_e351(37336, $50, HEAP32[$2 >> 2] | 0) | 0;
  $142 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $142 | 0;
 }
 $54 = +HEAPF64[$1 >> 3];
 if ($50 < 4.0) {
  HEAPF64[$t >> 3] = ($54 - 1.0) * .6666666666666666 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(37136, +HEAPF64[$t >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $142 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $142 | 0;
 }
 $62 = +HEAPF64[$1 >> 3];
 if ($54 < 10.0) {
  HEAPF64[$t1 >> 3] = ($62 - 4.0) * .3333333333333333 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(36928, +HEAPF64[$t1 >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $142 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $142 | 0;
 }
 $70 = +HEAPF64[$1 >> 3];
 if ($62 < 30.0) {
  HEAPF64[$t2 >> 3] = .1 * $70 - 2.0;
  _cheb_eval_e351(36736, +HEAPF64[$t2 >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  $94 = +HEAPF64[$c + 8 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 6.661338147750939e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $94;
  HEAP32[$0 >> 2] = 0;
  $142 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $142 | 0;
 }
 $98 = +HEAPF64[$1 >> 3];
 if ($70 < 165140.3718518207) {
  HEAPF64[$t3 >> 3] = 60.0 / $98 - 1.0;
  _cheb_eval_e351(36464, +HEAPF64[$t3 >> 3], $c4) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c4 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  $122 = +HEAPF64[$c4 + 8 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 6.661338147750939e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $122;
  HEAP32[$0 >> 2] = 0;
  $142 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $142 | 0;
 }
 if ($98 < 5.64380309412229e+102) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * .16666666666666666 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  $136 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 6.661338147750939e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $136;
  HEAP32[$0 >> 2] = 0;
  $142 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $142 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(33408, 33392, 1377, 16);
  HEAP32[$0 >> 2] = 16;
  $142 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $142 | 0;
 }
 return 0;
}
function _bessel_Kn_scaled_small_x($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $133 = 0.0, $136 = 0.0, $140 = 0.0, $146 = 0.0, $148 = 0, $151 = 0, $2 = 0, $3 = 0, $36 = 0.0, $46 = 0.0, $KMAX = 0, $ex = 0, $k = 0, $k_fact = 0, $k_term = 0, $ln_nm1_fact = 0, $ln_pre1 = 0, $ln_x_2 = 0, $npk_fact = 0, $pre2 = 0, $psi_kp1 = 0, $psi_n = 0, $psi_npkp1 = 0, $sum1 = 0, $sum2 = 0, $term1 = 0, $term2 = 0, $y = 0, $yk = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 184 | 0;
 $1 = sp + 180 | 0;
 $2 = sp + 160 | 0;
 $3 = sp + 176 | 0;
 $k = sp + 172 | 0;
 $y = sp + 152 | 0;
 $ln_x_2 = sp + 144 | 0;
 $ex = sp + 136 | 0;
 $ln_nm1_fact = sp + 120 | 0;
 $k_term = sp + 112 | 0;
 $term1 = sp + 104 | 0;
 $sum1 = sp + 96 | 0;
 $ln_pre1 = sp + 88 | 0;
 $term2 = sp + 80 | 0;
 $sum2 = sp + 72 | 0;
 $pre2 = sp + 64 | 0;
 $KMAX = sp + 168 | 0;
 $psi_n = sp + 48 | 0;
 $npk_fact = sp + 32 | 0;
 $yk = sp + 24 | 0;
 $k_fact = sp + 16 | 0;
 $psi_kp1 = sp + 8 | 0;
 $psi_npkp1 = sp;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$y >> 3] = +HEAPF64[$2 >> 3] * .25 * +HEAPF64[$2 >> 3];
 HEAPF64[$ln_x_2 >> 3] = +Math_log(+(+HEAPF64[$2 >> 3] * .5));
 HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3]));
 _gsl_sf_lnfact_e((HEAP32[$1 >> 2] | 0) - 1 | 0, $ln_nm1_fact) | 0;
 HEAPF64[$ln_pre1 >> 3] = +(0 - (HEAP32[$1 >> 2] | 0) | 0) * +HEAPF64[$ln_x_2 >> 3] + +HEAPF64[$ln_nm1_fact >> 3];
 if (+HEAPF64[$ln_pre1 >> 3] > 706.782712893384) {
  _gsl_error(13992, 13872, 54, 16);
  HEAP32[$0 >> 2] = 16;
  $151 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $151 | 0;
 }
 HEAPF64[$sum1 >> 3] = 1.0;
 HEAPF64[$k_term >> 3] = 1.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > ((HEAP32[$1 >> 2] | 0) - 1 | 0)) break;
  $36 = -+HEAPF64[$y >> 3] / +(Math_imul(HEAP32[$k >> 2] | 0, (HEAP32[$1 >> 2] | 0) - (HEAP32[$k >> 2] | 0) | 0) | 0);
  HEAPF64[$k_term >> 3] = +HEAPF64[$k_term >> 3] * $36;
  HEAPF64[$sum1 >> 3] = +HEAPF64[$sum1 >> 3] + +HEAPF64[$k_term >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 $46 = +Math_exp(+(+HEAPF64[$ln_pre1 >> 3])) * .5;
 HEAPF64[$term1 >> 3] = $46 * +HEAPF64[$sum1 >> 3];
 HEAPF64[$pre2 >> 3] = +Math_exp(+(+(HEAP32[$1 >> 2] | 0) * +HEAPF64[$ln_x_2 >> 3])) * .5;
 if (+HEAPF64[$pre2 >> 3] > 0.0) {
  HEAP32[$KMAX >> 2] = 20;
  HEAPF64[$yk >> 3] = 1.0;
  HEAPF64[$k_fact >> 3] = 1.0;
  HEAPF64[$psi_kp1 >> 3] = -.5772156649015329;
  _gsl_sf_psi_int_e(HEAP32[$1 >> 2] | 0, $psi_n) | 0;
  _gsl_sf_fact_e(HEAP32[$1 >> 2] | 0, $npk_fact) | 0;
  HEAPF64[$psi_npkp1 >> 3] = +HEAPF64[$psi_n >> 3] + 1.0 / +(HEAP32[$1 >> 2] | 0);
  HEAPF64[$sum2 >> 3] = (+HEAPF64[$psi_kp1 >> 3] + +HEAPF64[$psi_npkp1 >> 3] - +HEAPF64[$ln_x_2 >> 3] * 2.0) / +HEAPF64[$npk_fact >> 3];
  HEAP32[$k >> 2] = 1;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) >= 20) break;
   HEAPF64[$psi_kp1 >> 3] = +HEAPF64[$psi_kp1 >> 3] + 1.0 / +(HEAP32[$k >> 2] | 0);
   HEAPF64[$psi_npkp1 >> 3] = +HEAPF64[$psi_npkp1 >> 3] + 1.0 / +((HEAP32[$1 >> 2] | 0) + (HEAP32[$k >> 2] | 0) | 0);
   HEAPF64[$k_fact >> 3] = +HEAPF64[$k_fact >> 3] * +(HEAP32[$k >> 2] | 0);
   HEAPF64[$npk_fact >> 3] = +HEAPF64[$npk_fact >> 3] * +((HEAP32[$1 >> 2] | 0) + (HEAP32[$k >> 2] | 0) | 0);
   HEAPF64[$yk >> 3] = +HEAPF64[$yk >> 3] * +HEAPF64[$y >> 3];
   HEAPF64[$k_term >> 3] = +HEAPF64[$yk >> 3] * (+HEAPF64[$psi_kp1 >> 3] + +HEAPF64[$psi_npkp1 >> 3] - +HEAPF64[$ln_x_2 >> 3] * 2.0) / (+HEAPF64[$k_fact >> 3] * +HEAPF64[$npk_fact >> 3]);
   HEAPF64[$sum2 >> 3] = +HEAPF64[$sum2 >> 3] + +HEAPF64[$k_term >> 3];
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAPF64[$term2 >> 3] = ((HEAP32[$1 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0) * +HEAPF64[$pre2 >> 3] * +HEAPF64[$sum2 >> 3];
 } else HEAPF64[$term2 >> 3] = 0.0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$ex >> 3] * (+HEAPF64[$term1 >> 3] + +HEAPF64[$term2 >> 3]);
 $133 = +Math_abs(+(+HEAPF64[$ln_pre1 >> 3]));
 $136 = $133 * +Math_abs(+(+HEAPF64[$term1 >> 3]));
 $140 = +HEAPF64[$ex >> 3] * 2.220446049250313e-16 * ($136 + +Math_abs(+(+HEAPF64[$term2 >> 3])));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $140;
 $146 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $148 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$148 >> 3] = +HEAPF64[$148 >> 3] + $146;
 HEAP32[$0 >> 2] = 0;
 $151 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $151 | 0;
}
function _gsl_sf_hyperg_0F1_e($c, $x, $result) {
 $c = +$c;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $120 = 0, $15 = 0, $2 = 0, $3 = 0, $49 = 0.0, $98 = 0.0, $Icm1 = 0, $Jcm1 = 0, $c_neg_integer = 0, $lg_c = 0, $lg_c1 = 0, $ln_pre_err = 0, $ln_pre_err6 = 0, $ln_pre_val = 0, $ln_pre_val5 = 0, $rintc = 0, $sgn = 0, $sgn2 = 0, $stat_I = 0, $stat_J = 0, $stat_g = 0, $stat_g3 = 0, $tl = 0, $tl4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 176 | 0;
 $1 = sp + 144 | 0;
 $2 = sp + 136 | 0;
 $3 = sp + 172 | 0;
 $rintc = sp + 128 | 0;
 $c_neg_integer = sp + 168 | 0;
 $Jcm1 = sp + 112 | 0;
 $lg_c = sp + 96 | 0;
 $sgn = sp + 88 | 0;
 $stat_g = sp + 164 | 0;
 $stat_J = sp + 160 | 0;
 $tl = sp + 80 | 0;
 $ln_pre_val = sp + 72 | 0;
 $ln_pre_err = sp + 64 | 0;
 $Icm1 = sp + 48 | 0;
 $lg_c1 = sp + 32 | 0;
 $sgn2 = sp + 24 | 0;
 $stat_g3 = sp + 156 | 0;
 $stat_I = sp + 152 | 0;
 $tl4 = sp + 16 | 0;
 $ln_pre_val5 = sp + 8 | 0;
 $ln_pre_err6 = sp;
 HEAPF64[$1 >> 3] = $c;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$rintc >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] + .5));
 if (+HEAPF64[$1 >> 3] < 0.0) $15 = +Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$rintc >> 3])) < 2.220446049250313e-13; else $15 = 0;
 HEAP32[$c_neg_integer >> 2] = $15 & 1;
 if (!(+HEAPF64[$1 >> 3] == 0.0)) if (!(HEAP32[$c_neg_integer >> 2] | 0)) {
  if (+HEAPF64[$2 >> 3] < 0.0) {
   HEAP32[$stat_g >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3], $lg_c, $sgn) | 0;
   HEAP32[$stat_J >> 2] = _hyperg_0F1_bessel_J(+HEAPF64[$1 >> 3] - 1.0, +Math_sqrt(+-+HEAPF64[$2 >> 3]) * 2.0, $Jcm1) | 0;
   if (HEAP32[$stat_g >> 2] | 0) {
    HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
    HEAP32[$0 >> 2] = HEAP32[$stat_g >> 2];
    $120 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $120 | 0;
   }
   if (+HEAPF64[$Jcm1 >> 3] == 0.0) {
    HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
    HEAP32[$0 >> 2] = HEAP32[$stat_J >> 2];
    $120 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $120 | 0;
   } else {
    $49 = +Math_log(+-+HEAPF64[$2 >> 3]) * .5;
    HEAPF64[$tl >> 3] = $49 * (1.0 - +HEAPF64[$1 >> 3]);
    HEAPF64[$ln_pre_val >> 3] = +HEAPF64[$lg_c >> 3] + +HEAPF64[$tl >> 3];
    HEAPF64[$ln_pre_err >> 3] = +HEAPF64[$lg_c + 8 >> 3] + +Math_abs(+(+HEAPF64[$tl >> 3])) * 4.440892098500626e-16;
    HEAP32[$0 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_pre_val >> 3], +HEAPF64[$ln_pre_err >> 3], +HEAPF64[$sgn >> 3] * +HEAPF64[$Jcm1 >> 3], +HEAPF64[$Jcm1 + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
    $120 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $120 | 0;
   }
  }
  if (+HEAPF64[$2 >> 3] == 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 1.0;
   HEAP32[$0 >> 2] = 0;
   $120 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $120 | 0;
  }
  HEAP32[$stat_g3 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3], $lg_c1, $sgn2) | 0;
  HEAP32[$stat_I >> 2] = _hyperg_0F1_bessel_I(+HEAPF64[$1 >> 3] - 1.0, +Math_sqrt(+(+HEAPF64[$2 >> 3])) * 2.0, $Icm1) | 0;
  if (HEAP32[$stat_g3 >> 2] | 0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = HEAP32[$stat_g3 >> 2];
   $120 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $120 | 0;
  }
  if (+HEAPF64[$Icm1 >> 3] == 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = HEAP32[$stat_I >> 2];
   $120 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $120 | 0;
  } else {
   $98 = +Math_log(+(+HEAPF64[$2 >> 3])) * .5;
   HEAPF64[$tl4 >> 3] = $98 * (1.0 - +HEAPF64[$1 >> 3]);
   HEAPF64[$ln_pre_val5 >> 3] = +HEAPF64[$lg_c1 >> 3] + +HEAPF64[$tl4 >> 3];
   HEAPF64[$ln_pre_err6 >> 3] = +HEAPF64[$lg_c1 + 8 >> 3] + +Math_abs(+(+HEAPF64[$tl4 >> 3])) * 4.440892098500626e-16;
   HEAP32[$0 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_pre_val5 >> 3], +HEAPF64[$ln_pre_err6 >> 3], +HEAPF64[$sgn2 >> 3] * +HEAPF64[$Icm1 >> 3], +HEAPF64[$Icm1 + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $120 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $120 | 0;
  }
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(51576, 51592, 111, 1);
 HEAP32[$0 >> 2] = 1;
 $120 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $120 | 0;
}
function _gsl_sf_legendre_sphPlm_array($lmax, $m, $x, $result_array) {
 $lmax = $lmax | 0;
 $m = $m | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $170 = 0, $2 = 0, $3 = 0, $4 = 0, $60 = 0.0, $72 = 0.0, $83 = 0, $ell = 0, $ell1 = 0, $factor1 = 0, $factor2 = 0, $lncirc = 0, $lnpoch = 0, $lnpre = 0, $rat1 = 0, $rat2 = 0, $sgn = 0, $y_ell = 0, $y_mm = 0, $y_mmp1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 124 | 0;
 $3 = sp + 104 | 0;
 $4 = sp + 120 | 0;
 $ell = sp + 116 | 0;
 $y_mm = sp + 96 | 0;
 $y_mmp1 = sp + 88 | 0;
 $lncirc = sp + 72 | 0;
 $lnpoch = sp + 56 | 0;
 $lnpre = sp + 48 | 0;
 $sgn = sp + 40 | 0;
 $y_ell = sp + 32 | 0;
 $ell1 = sp + 112 | 0;
 $rat1 = sp + 24 | 0;
 $rat2 = sp + 16 | 0;
 $factor1 = sp + 8 | 0;
 $factor2 = sp;
 HEAP32[$1 >> 2] = $lmax;
 HEAP32[$2 >> 2] = $m;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 if ((HEAP32[$2 >> 2] | 0) >= 0) if ((HEAP32[$1 >> 2] | 0) >= (HEAP32[$2 >> 2] | 0)) if (!(+HEAPF64[$3 >> 3] < -1.0 | +HEAPF64[$3 >> 3] > 1.0)) {
  if ((HEAP32[$2 >> 2] | 0) > 0) if (+HEAPF64[$3 >> 3] == 1.0 | +HEAPF64[$3 >> 3] == -1.0) {
   HEAP32[$ell >> 2] = HEAP32[$2 >> 2];
   while (1) {
    if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = 0.0;
    HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
   }
   HEAP32[$0 >> 2] = 0;
   $170 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $170 | 0;
  }
  if (!(HEAP32[$2 >> 2] | 0)) {
   HEAPF64[$y_mm >> 3] = .28209479177387814;
   HEAPF64[$y_mmp1 >> 3] = +HEAPF64[$3 >> 3] * 1.7320508075688772 * +HEAPF64[$y_mm >> 3];
  } else {
   HEAPF64[$sgn >> 3] = (HEAP32[$2 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0;
   _gsl_sf_log_1plusx_e(-+HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3], $lncirc) | 0;
   _gsl_sf_lnpoch_e(+(HEAP32[$2 >> 2] | 0), .5, $lnpoch) | 0;
   HEAPF64[$lnpre >> 3] = (+HEAPF64[$lnpoch >> 3] + +(HEAP32[$2 >> 2] | 0) * +HEAPF64[$lncirc >> 3]) * .5 + -.28618247146235004;
   $60 = +Math_sqrt(+((1.0 / +(HEAP32[$2 >> 2] | 0) + 2.0) / 12.566370614359172));
   HEAPF64[$y_mm >> 3] = $60 * +HEAPF64[$sgn >> 3] * +Math_exp(+(+HEAPF64[$lnpre >> 3]));
   $72 = +HEAPF64[$3 >> 3] * +Math_sqrt(+(+(HEAP32[$2 >> 2] | 0) * 2.0 + 3.0));
   HEAPF64[$y_mmp1 >> 3] = $72 * +HEAPF64[$y_mm >> 3];
  }
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$y_mm >> 3];
   HEAP32[$0 >> 2] = 0;
   $170 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $170 | 0;
  }
  $83 = (HEAP32[$1 >> 2] | 0) == ((HEAP32[$2 >> 2] | 0) + 1 | 0);
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$y_mm >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$y_mmp1 >> 3];
  if ($83) {
   HEAP32[$0 >> 2] = 0;
   $170 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $170 | 0;
  }
  HEAP32[$ell1 >> 2] = (HEAP32[$2 >> 2] | 0) + 2;
  while (1) {
   if ((HEAP32[$ell1 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$rat1 >> 3] = +((HEAP32[$ell1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / +((HEAP32[$ell1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0);
   HEAPF64[$rat2 >> 3] = (+((HEAP32[$ell1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) - 1.0) / (+((HEAP32[$ell1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0) - 1.0);
   HEAPF64[$factor1 >> 3] = +Math_sqrt(+(+HEAPF64[$rat1 >> 3] * +((HEAP32[$ell1 >> 2] << 1) + 1 | 0) * +((HEAP32[$ell1 >> 2] << 1) - 1 | 0)));
   HEAPF64[$factor2 >> 3] = +Math_sqrt(+(+HEAPF64[$rat1 >> 3] * +HEAPF64[$rat2 >> 3] * +((HEAP32[$ell1 >> 2] << 1) + 1 | 0) / +((HEAP32[$ell1 >> 2] << 1) - 3 | 0)));
   HEAPF64[$y_ell >> 3] = (+HEAPF64[$3 >> 3] * +HEAPF64[$y_mmp1 >> 3] * +HEAPF64[$factor1 >> 3] - +((HEAP32[$ell1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) - 1 | 0) * +HEAPF64[$y_mm >> 3] * +HEAPF64[$factor2 >> 3]) / +((HEAP32[$ell1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0);
   HEAPF64[$y_mm >> 3] = +HEAPF64[$y_mmp1 >> 3];
   HEAPF64[$y_mmp1 >> 3] = +HEAPF64[$y_ell >> 3];
   HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = +HEAPF64[$y_ell >> 3];
   HEAP32[$ell1 >> 2] = (HEAP32[$ell1 >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = 0;
  $170 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $170 | 0;
 }
 _gsl_error(53608, 53512, 602, 1);
 HEAP32[$0 >> 2] = 1;
 $170 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $170 | 0;
}
function _gsl_sf_ellint_E_e($phi, $k, $mode, $result) {
 $phi = +$phi;
 $k = +$k;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $105 = 0.0, $107 = 0, $119 = 0.0, $121 = 0, $133 = 0, $141 = 0, $146 = 0.0, $151 = 0, $164 = 0, $165 = 0, $2 = 0, $3 = 0, $4 = 0, $46 = 0.0, $84 = 0.0, $91 = 0.0, $93 = 0, $nc = 0, $phi_red = 0, $rd = 0, $rdstatus = 0, $re = 0, $re1 = 0, $restatus = 0, $rf = 0, $rfstatus = 0, $sin2_phi = 0, $sin3_phi = 0, $sin_phi = 0, $status = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 160 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 156 | 0;
 $4 = sp + 152 | 0;
 $nc = sp + 112 | 0;
 $phi_red = sp + 104 | 0;
 $sin_phi = sp + 96 | 0;
 $sin2_phi = sp + 88 | 0;
 $x = sp + 80 | 0;
 $y = sp + 72 | 0;
 $re = sp + 56 | 0;
 $status = sp + 148 | 0;
 $rf = sp + 40 | 0;
 $rd = sp + 24 | 0;
 $sin3_phi = sp + 16 | 0;
 $rfstatus = sp + 144 | 0;
 $rdstatus = sp + 140 | 0;
 $re1 = sp;
 $restatus = sp + 136 | 0;
 HEAPF64[$1 >> 3] = $phi;
 HEAPF64[$2 >> 3] = $k;
 HEAP32[$3 >> 2] = $mode;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$nc >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] / 3.141592653589793 + .5));
 HEAPF64[$phi_red >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$nc >> 3] * 3.141592653589793;
 HEAPF64[$1 >> 3] = +HEAPF64[$phi_red >> 3];
 HEAPF64[$sin_phi >> 3] = +Math_sin(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$sin2_phi >> 3] = +HEAPF64[$sin_phi >> 3] * +HEAPF64[$sin_phi >> 3];
 HEAPF64[$x >> 3] = 1.0 - +HEAPF64[$sin2_phi >> 3];
 HEAPF64[$y >> 3] = 1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$sin2_phi >> 3];
 if (+HEAPF64[$x >> 3] < 2.220446049250313e-16) {
  HEAP32[$status >> 2] = _gsl_sf_ellint_Ecomp_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, $re) | 0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$nc >> 3] * 2.0 * +HEAPF64[$re >> 3] + +((+HEAPF64[$sin_phi >> 3] >= 0.0 ? 1 : -1) | 0) * +HEAPF64[$re >> 3];
  $46 = +Math_abs(+(+HEAPF64[$nc >> 3])) * 2.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $46 * +HEAPF64[$re + 8 >> 3] + +HEAPF64[$re + 8 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $165 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $165 | 0;
 }
 HEAPF64[$sin3_phi >> 3] = +HEAPF64[$sin2_phi >> 3] * +HEAPF64[$sin_phi >> 3];
 HEAP32[$rfstatus >> 2] = _gsl_sf_ellint_RF_e(+HEAPF64[$x >> 3], +HEAPF64[$y >> 3], 1.0, HEAP32[$3 >> 2] | 0, $rf) | 0;
 HEAP32[$rdstatus >> 2] = _gsl_sf_ellint_RD_e(+HEAPF64[$x >> 3], +HEAPF64[$y >> 3], 1.0, HEAP32[$3 >> 2] | 0, $rd) | 0;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sin_phi >> 3] * +HEAPF64[$rf >> 3] - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / 3.0 * +HEAPF64[$sin3_phi >> 3] * +HEAPF64[$rd >> 3];
 $84 = +Math_abs(+(+HEAPF64[$sin_phi >> 3] * +HEAPF64[$rf >> 3])) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $84;
 $91 = +Math_abs(+(+HEAPF64[$sin_phi >> 3] * +HEAPF64[$rf + 8 >> 3]));
 $93 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$93 >> 3] = +HEAPF64[$93 >> 3] + $91;
 $105 = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / 3.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$sin3_phi >> 3] * +HEAPF64[$rd >> 3]));
 $107 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$107 >> 3] = +HEAPF64[$107 >> 3] + $105;
 $119 = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / 3.0 * +Math_abs(+(+HEAPF64[$sin3_phi >> 3] * +HEAPF64[$rd + 8 >> 3]));
 $121 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$121 >> 3] = +HEAPF64[$121 >> 3] + $119;
 if (+HEAPF64[$nc >> 3] == 0.0) {
  if (HEAP32[$rfstatus >> 2] | 0) $133 = HEAP32[$rfstatus >> 2] | 0; else $133 = (HEAP32[$rdstatus >> 2] | 0) != 0 ? HEAP32[$rdstatus >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $133;
  $165 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $165 | 0;
 }
 HEAP32[$restatus >> 2] = _gsl_sf_ellint_Ecomp_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, $re1) | 0;
 $141 = HEAP32[$4 >> 2] | 0;
 HEAPF64[$141 >> 3] = +HEAPF64[$141 >> 3] + +HEAPF64[$nc >> 3] * 2.0 * +HEAPF64[$re1 >> 3];
 $146 = +Math_abs(+(+HEAPF64[$nc >> 3])) * 2.0;
 $151 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$151 >> 3] = +HEAPF64[$151 >> 3] + $146 * +HEAPF64[$re1 + 8 >> 3];
 do if (HEAP32[$rfstatus >> 2] | 0) $164 = HEAP32[$rfstatus >> 2] | 0; else if (HEAP32[$rdstatus >> 2] | 0) {
  $164 = HEAP32[$rdstatus >> 2] | 0;
  break;
 } else {
  $164 = (HEAP32[$restatus >> 2] | 0) != 0 ? HEAP32[$restatus >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $164;
 $165 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $165 | 0;
}
function _gsl_sf_hyperg_2F1_conj_renorm_e($aR, $aI, $c, $x, $result) {
 $aR = +$aR;
 $aI = +$aI;
 $c = +$c;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $106 = 0, $135 = 0, $136 = 0, $2 = 0, $22 = 0, $3 = 0, $31 = 0, $4 = 0, $48 = 0, $5 = 0, $53 = 0, $59 = 0, $F = 0, $F1 = 0, $a1 = 0, $a2 = 0, $a_neg_integer = 0, $c_neg_integer = 0, $g1 = 0, $g2 = 0, $g3 = 0, $ln_pre_err = 0, $ln_pre_val = 0, $lng = 0, $rinta = 0, $rintc = 0, $sgn = 0, $stat = 0, $stat_F = 0, $stat_F2 = 0, $stat_e = 0, $stat_e3 = 0, $stat_g = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 236 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 184 | 0;
 $3 = sp + 176 | 0;
 $4 = sp + 168 | 0;
 $5 = sp + 232 | 0;
 $rintc = sp + 160 | 0;
 $rinta = sp + 152 | 0;
 $a_neg_integer = sp + 228 | 0;
 $c_neg_integer = sp + 224 | 0;
 $g1 = sp + 136 | 0;
 $g2 = sp + 120 | 0;
 $g3 = sp + 104 | 0;
 $a1 = sp + 88 | 0;
 $a2 = sp + 72 | 0;
 $stat = sp + 220 | 0;
 $F = sp + 56 | 0;
 $stat_F = sp + 216 | 0;
 $ln_pre_val = sp + 48 | 0;
 $ln_pre_err = sp + 40 | 0;
 $stat_e = sp + 212 | 0;
 $F1 = sp + 24 | 0;
 $lng = sp + 8 | 0;
 $sgn = sp;
 $stat_g = sp + 208 | 0;
 $stat_F2 = sp + 204 | 0;
 $stat_e3 = sp + 200 | 0;
 HEAPF64[$1 >> 3] = $aR;
 HEAPF64[$2 >> 3] = $aI;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$rintc >> 3] = +Math_floor(+(+HEAPF64[$3 >> 3] + .5));
 HEAPF64[$rinta >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] + .5));
 if (+HEAPF64[$1 >> 3] < 0.0) if (+Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$rinta >> 3])) < 2.220446049250313e-13) $22 = +HEAPF64[$2 >> 3] == 0.0; else $22 = 0; else $22 = 0;
 HEAP32[$a_neg_integer >> 2] = $22 & 1;
 if (+HEAPF64[$3 >> 3] < 0.0) $31 = +Math_abs(+(+HEAPF64[$3 >> 3] - +HEAPF64[$rintc >> 3])) < 2.220446049250313e-13; else $31 = 0;
 HEAP32[$c_neg_integer >> 2] = $31 & 1;
 if (!(HEAP32[$c_neg_integer >> 2] | 0)) {
  HEAP32[$stat_g >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$3 >> 3], $lng, $sgn) | 0;
  HEAP32[$stat_F2 >> 2] = _gsl_sf_hyperg_2F1_conj_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], $F1) | 0;
  HEAP32[$stat_e3 >> 2] = _gsl_sf_exp_mult_err_e(-+HEAPF64[$lng >> 3], +HEAPF64[$lng + 8 >> 3], +HEAPF64[$sgn >> 3] * +HEAPF64[$F1 >> 3], +HEAPF64[$F1 + 8 >> 3], HEAP32[$5 >> 2] | 0) | 0;
  do if (HEAP32[$stat_e3 >> 2] | 0) $135 = HEAP32[$stat_e3 >> 2] | 0; else if (HEAP32[$stat_F2 >> 2] | 0) {
   $135 = HEAP32[$stat_F2 >> 2] | 0;
   break;
  } else {
   $135 = (HEAP32[$stat_g >> 2] | 0) != 0 ? HEAP32[$stat_g >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$0 >> 2] = $135;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 if (HEAP32[$a_neg_integer >> 2] | 0) if (+HEAPF64[$1 >> 3] > +HEAPF64[$3 >> 3] + .1) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 HEAP32[$stat >> 2] = 0;
 $48 = _gsl_sf_lngamma_complex_e(+HEAPF64[$1 >> 3] - +HEAPF64[$3 >> 3] + 1.0, +HEAPF64[$2 >> 3], $g1, $a1) | 0;
 HEAP32[$stat >> 2] = (HEAP32[$stat >> 2] | 0) + $48;
 $53 = _gsl_sf_lngamma_complex_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $g2, $a2) | 0;
 HEAP32[$stat >> 2] = (HEAP32[$stat >> 2] | 0) + $53;
 $59 = _gsl_sf_lngamma_e(-+HEAPF64[$3 >> 3] + 2.0, $g3) | 0;
 HEAP32[$stat >> 2] = (HEAP32[$stat >> 2] | 0) + $59;
 if (HEAP32[$stat >> 2] | 0) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51880, 51896, 895, 1);
  HEAP32[$0 >> 2] = 1;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 HEAP32[$stat_F >> 2] = _gsl_sf_hyperg_2F1_conj_e(+HEAPF64[$1 >> 3] - +HEAPF64[$3 >> 3] + 1.0, +HEAPF64[$2 >> 3], -+HEAPF64[$3 >> 3] + 2.0, +HEAPF64[$4 >> 3], $F) | 0;
 HEAPF64[$ln_pre_val >> 3] = (+HEAPF64[$g1 >> 3] - +HEAPF64[$g2 >> 3]) * 2.0 - +HEAPF64[$g3 >> 3];
 HEAPF64[$ln_pre_err >> 3] = (+HEAPF64[$g1 + 8 >> 3] + +HEAPF64[$g2 + 8 >> 3]) * 2.0 + +HEAPF64[$g3 + 8 >> 3];
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_pre_val >> 3], +HEAPF64[$ln_pre_err >> 3], +HEAPF64[$F >> 3], +HEAPF64[$F + 8 >> 3], HEAP32[$5 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) $106 = HEAP32[$stat_e >> 2] | 0; else $106 = (HEAP32[$stat_F >> 2] | 0) != 0 ? HEAP32[$stat_F >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $106;
 $136 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $136 | 0;
}
function _gsl_sf_bessel_yl_e($l, $x, $result) {
 $l = $l | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $107 = 0.0, $113 = 0.0, $120 = 0.0, $130 = 0, $131 = 0, $2 = 0, $23 = 0.0, $3 = 0, $35 = 0, $41 = 0, $51 = 0, $56 = 0, $71 = 0, $76 = 0, $by = 0, $bym = 0, $byp = 0, $j = 0, $pre = 0, $pre2 = 0, $r_by = 0, $r_bym = 0, $stat_0 = 0, $stat_1 = 0, $status = 0, $status1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 100 | 0;
 $status = sp + 96 | 0;
 $pre = sp + 64 | 0;
 $status1 = sp + 92 | 0;
 $pre2 = sp + 56 | 0;
 $r_by = sp + 40 | 0;
 $r_bym = sp + 24 | 0;
 $stat_1 = sp + 88 | 0;
 $stat_0 = sp + 84 | 0;
 $bym = sp + 16 | 0;
 $by = sp + 8 | 0;
 $byp = sp;
 $j = sp + 80 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] <= 0.0)) {
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_y0_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $131 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $131 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_y1_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $131 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $131 | 0;
  }
  $23 = +HEAPF64[$2 >> 3];
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_y2_e($23, HEAP32[$3 >> 2] | 0) | 0;
   $131 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $131 | 0;
  }
  if ($23 < 3.0) {
   HEAP32[$0 >> 2] = _bessel_yl_small_x(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $131 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $131 | 0;
  }
  $35 = Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
  $41 = HEAP32[$1 >> 2] | 0;
  if (+HEAPF64[$2 >> 3] * 6055454452393343.0e-21 > +($35 + (HEAP32[$1 >> 2] | 0) | 0) + 1.0) {
   HEAP32[$status >> 2] = _gsl_sf_bessel_Ynu_asympx_e(+($41 | 0) + .5, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   HEAPF64[$pre >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
   $51 = HEAP32[$3 >> 2] | 0;
   HEAPF64[$51 >> 3] = +HEAPF64[$51 >> 3] * +HEAPF64[$pre >> 3];
   $56 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$56 >> 3] = +HEAPF64[$56 >> 3] * +HEAPF64[$pre >> 3];
   HEAP32[$0 >> 2] = HEAP32[$status >> 2];
   $131 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $131 | 0;
  }
  if (($41 | 0) > 40) {
   HEAP32[$status1 >> 2] = _gsl_sf_bessel_Ynu_asymp_Olver_e(+(HEAP32[$1 >> 2] | 0) + .5, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   HEAPF64[$pre2 >> 3] = +Math_sqrt(+(1.5707963267948966 / +HEAPF64[$2 >> 3]));
   $71 = HEAP32[$3 >> 2] | 0;
   HEAPF64[$71 >> 3] = +HEAPF64[$71 >> 3] * +HEAPF64[$pre2 >> 3];
   $76 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$76 >> 3] = +HEAPF64[$76 >> 3] * +HEAPF64[$pre2 >> 3];
   HEAP32[$0 >> 2] = HEAP32[$status1 >> 2];
   $131 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $131 | 0;
  }
  HEAP32[$stat_1 >> 2] = _gsl_sf_bessel_y1_e(+HEAPF64[$2 >> 3], $r_by) | 0;
  HEAP32[$stat_0 >> 2] = _gsl_sf_bessel_y0_e(+HEAPF64[$2 >> 3], $r_bym) | 0;
  HEAPF64[$bym >> 3] = +HEAPF64[$r_bym >> 3];
  HEAPF64[$by >> 3] = +HEAPF64[$r_by >> 3];
  HEAP32[$j >> 2] = 1;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$byp >> 3] = +((HEAP32[$j >> 2] << 1) + 1 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$by >> 3] - +HEAPF64[$bym >> 3];
   HEAPF64[$bym >> 3] = +HEAPF64[$by >> 3];
   HEAPF64[$by >> 3] = +HEAPF64[$byp >> 3];
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$by >> 3];
  $107 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  $113 = +Math_abs(+(+HEAPF64[$r_by + 8 >> 3] / +HEAPF64[$r_by >> 3])) + 2.220446049250313e-16;
  $120 = $107 * ($113 + +Math_abs(+(+HEAPF64[$r_bym + 8 >> 3] / +HEAPF64[$r_bym >> 3])));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $120;
  if (HEAP32[$stat_1 >> 2] | 0) $130 = HEAP32[$stat_1 >> 2] | 0; else $130 = (HEAP32[$stat_0 >> 2] | 0) != 0 ? HEAP32[$stat_0 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $130;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(19840, 19856, 181, 1);
 HEAP32[$0 >> 2] = 1;
 $131 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $131 | 0;
}
function _gsl_sf_lngamma_sgn_e($x, $result_lg, $sgn) {
 $x = +$x;
 $result_lg = $result_lg | 0;
 $sgn = $sgn | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $108 = 0.0, $118 = 0, $16 = 0.0, $18 = 0, $2 = 0, $25 = 0, $26 = 0.0, $3 = 0, $34 = 0.0, $36 = 0, $54 = 0, $55 = 0.0, $7 = 0, $8 = 0.0, $N = 0, $as = 0, $eps = 0, $lg_z = 0, $s = 0, $stat = 0, $stat1 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 76 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 68 | 0;
 $stat = sp + 64 | 0;
 $stat1 = sp + 60 | 0;
 $z = sp + 40 | 0;
 $s = sp + 32 | 0;
 $as = sp + 24 | 0;
 $N = sp + 56 | 0;
 $eps = sp + 16 | 0;
 $lg_z = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result_lg;
 HEAP32[$3 >> 2] = $sgn;
 $7 = +Math_abs(+(+HEAPF64[$1 >> 3] - 1.0)) < .01;
 $8 = +HEAPF64[$1 >> 3];
 if ($7) {
  HEAP32[$stat >> 2] = _lngamma_1_pade($8 - 1.0, HEAP32[$2 >> 2] | 0) | 0;
  $16 = 1.0 / (+Math_abs(+(+HEAPF64[$1 >> 3] - 1.0)) + 2.220446049250313e-16);
  $18 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$18 >> 3] = +HEAPF64[$18 >> 3] * $16;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 $25 = +Math_abs(+($8 - 2.0)) < .01;
 $26 = +HEAPF64[$1 >> 3];
 if ($25) {
  HEAP32[$stat1 >> 2] = _lngamma_2_pade($26 - 2.0, HEAP32[$2 >> 2] | 0) | 0;
  $34 = 1.0 / (+Math_abs(+(+HEAPF64[$1 >> 3] - 2.0)) + 2.220446049250313e-16);
  $36 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$36 >> 3] = +HEAPF64[$36 >> 3] * $34;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAP32[$0 >> 2] = HEAP32[$stat1 >> 2];
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 if ($26 >= .5) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAP32[$0 >> 2] = _lngamma_lanczos(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(38384, 38400, 1205, 1);
  HEAP32[$0 >> 2] = 1;
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 $54 = +Math_abs(+(+HEAPF64[$1 >> 3])) < .02;
 $55 = +HEAPF64[$1 >> 3];
 if ($54) {
  HEAP32[$0 >> 2] = _lngamma_sgn_0($55, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 if (!($55 > -716770142402832.4)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  _gsl_error(38416, 38400, 1249, 18);
  HEAP32[$0 >> 2] = 18;
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 HEAPF64[$z >> 3] = 1.0 - +HEAPF64[$1 >> 3];
 HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$1 >> 3] * 3.141592653589793));
 HEAPF64[$as >> 3] = +Math_abs(+(+HEAPF64[$s >> 3]));
 if (+HEAPF64[$s >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(38384, 38400, 1219, 1);
  HEAP32[$0 >> 2] = 1;
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 if (!(+HEAPF64[$as >> 3] < .047123889803846894)) {
  _lngamma_lanczos(+HEAPF64[$z >> 3], $lg_z) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$s >> 3] > 0.0 ? 1.0 : -1.0;
  $100 = +Math_log(+(+HEAPF64[$as >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.1447298858494002 - ($100 + +HEAPF64[$lg_z >> 3]);
  $108 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $108 + +HEAPF64[$lg_z + 8 >> 3];
  HEAP32[$0 >> 2] = 0;
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 if (+HEAPF64[$1 >> 3] < -2147483646.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  _gsl_error(38408, 38400, 1227, 18);
  HEAP32[$0 >> 2] = 18;
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 } else {
  HEAP32[$N >> 2] = 0 - ~~(+HEAPF64[$1 >> 3] - .5);
  HEAPF64[$eps >> 3] = +HEAPF64[$1 >> 3] + +(HEAP32[$N >> 2] | 0);
  HEAP32[$0 >> 2] = _lngamma_sgn_sing(HEAP32[$N >> 2] | 0, +HEAPF64[$eps >> 3], HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  $118 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 return 0;
}
function _gsl_sf_airy_Bi_scaled_e($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $134 = 0.0, $140 = 0.0, $142 = 0, $148 = 0, $2 = 0, $21 = 0.0, $27 = 0.0, $3 = 0, $33 = 0.0, $35 = 0, $45 = 0, $47 = 0.0, $6 = 0.0, $71 = 0.0, $77 = 0.0, $79 = 0, $89 = 0, $94 = 0, $98 = 0.0, $mod = 0, $result_c0 = 0, $result_c02 = 0, $result_c1 = 0, $result_c13 = 0, $s = 0, $scale = 0, $sin_result = 0, $stat_mp = 0, $stat_sin = 0, $theta = 0, $x3 = 0, $z = 0, $z1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 176 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 172 | 0;
 $3 = sp + 168 | 0;
 $mod = sp + 136 | 0;
 $theta = sp + 120 | 0;
 $sin_result = sp + 104 | 0;
 $stat_mp = sp + 164 | 0;
 $stat_sin = sp + 160 | 0;
 $z = sp + 96 | 0;
 $result_c0 = sp + 80 | 0;
 $result_c1 = sp + 64 | 0;
 $scale = sp + 56 | 0;
 $x3 = sp + 48 | 0;
 $z1 = sp + 40 | 0;
 $s = sp + 32 | 0;
 $result_c02 = sp + 16 | 0;
 $result_c13 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAP32[$stat_mp >> 2] = _airy_mod_phase($6, HEAP32[$2 >> 2] | 0, $mod, $theta) | 0;
  HEAP32[$stat_sin >> 2] = _gsl_sf_sin_err_e(+HEAPF64[$theta >> 3], +HEAPF64[$theta + 8 >> 3], $sin_result) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$mod >> 3] * +HEAPF64[$sin_result >> 3];
  $21 = +Math_abs(+(+HEAPF64[$mod >> 3] * +HEAPF64[$sin_result + 8 >> 3]));
  $27 = $21 + +Math_abs(+(+HEAPF64[$sin_result >> 3] * +HEAPF64[$mod + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $27;
  $33 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $35 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$35 >> 3] = +HEAPF64[$35 >> 3] + $33;
  if (HEAP32[$stat_mp >> 2] | 0) $45 = HEAP32[$stat_mp >> 2] | 0; else $45 = (HEAP32[$stat_sin >> 2] | 0) != 0 ? HEAP32[$stat_sin >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $45;
  $148 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 $47 = +HEAPF64[$1 >> 3];
 if ($6 < 1.0) {
  HEAPF64[$z >> 3] = $47 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  _cheb_eval_mode_e(2488, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c0) | 0;
  _cheb_eval_mode_e(2384, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c1) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$result_c0 >> 3] + .625 + +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c1 >> 3] + .4375);
  $71 = +HEAPF64[$result_c0 + 8 >> 3] + +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$result_c1 + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $71;
  $77 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $79 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$79 >> 3] = +HEAPF64[$79 >> 3] + $77;
  if (+HEAPF64[$1 >> 3] > 0.0) {
   HEAPF64[$scale >> 3] = +Math_exp(+(+Math_sqrt(+(+HEAPF64[$z >> 3])) * -.6666666666666666));
   $89 = HEAP32[$3 >> 2] | 0;
   HEAPF64[$89 >> 3] = +HEAPF64[$89 >> 3] * +HEAPF64[$scale >> 3];
   $94 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$94 >> 3] = +HEAPF64[$94 >> 3] * +HEAPF64[$scale >> 3];
  }
  HEAP32[$0 >> 2] = 0;
  $148 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 $98 = +HEAPF64[$1 >> 3];
 if ($47 <= 2.0) {
  HEAPF64[$x3 >> 3] = $98 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$z1 >> 3] = (+HEAPF64[$x3 >> 3] * 2.0 - 9.0) / 7.0;
  HEAPF64[$s >> 3] = +Math_exp(+(+Math_sqrt(+(+HEAPF64[$x3 >> 3])) * -.6666666666666666));
  _cheb_eval_mode_e(2288, +HEAPF64[$z1 >> 3], HEAP32[$2 >> 2] | 0, $result_c02) | 0;
  _cheb_eval_mode_e(2176, +HEAPF64[$z1 >> 3], HEAP32[$2 >> 2] | 0, $result_c13) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$s >> 3] * (+HEAPF64[$result_c02 >> 3] + 1.125 + +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c13 >> 3] + .625));
  $134 = +HEAPF64[$s >> 3] * (+HEAPF64[$result_c02 + 8 >> 3] + +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$result_c13 + 8 >> 3])));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $134;
  $140 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $142 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$142 >> 3] = +HEAPF64[$142 >> 3] + $140;
  HEAP32[$0 >> 2] = 0;
  $148 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 } else {
  HEAP32[$0 >> 2] = _airy_bie($98, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  $148 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 return 0;
}
function _gsl_sf_debye_4_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $111 = 0.0, $136 = 0.0, $162 = 0, $2 = 0, $26 = 0.0, $47 = 0.0, $c = 0, $ex = 0, $i = 0, $nexp = 0, $rk = 0, $sum = 0, $sum1 = 0, $t = 0, $x2 = 0, $x4 = 0, $xk = 0, $xk_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 120 | 0;
 $t = sp + 80 | 0;
 $c = sp + 64 | 0;
 $nexp = sp + 116 | 0;
 $ex = sp + 56 | 0;
 $xk = sp + 48 | 0;
 $rk = sp + 40 | 0;
 $sum = sp + 32 | 0;
 $i = sp + 112 | 0;
 $xk_inv = sp + 24 | 0;
 $x2 = sp + 16 | 0;
 $x4 = sp + 8 | 0;
 $sum1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 96 >> 3] = 99.54506449376352;
 HEAPF64[sp + 88 >> 3] = 708.3964185322641;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(28032, 28048, 368, 1);
  HEAP32[$0 >> 2] = 1;
  $162 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $162 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.2146848510894035e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - 2.0 * $10 / 5.0 + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 18.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $162 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $162 | 0;
 }
 $26 = +HEAPF64[$1 >> 3];
 if ($10 <= 4.0) {
  HEAPF64[$t >> 3] = $26 * +HEAPF64[$1 >> 3] / 8.0 - 1.0;
  _cheb_eval_e269(28736, +HEAPF64[$t >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] - +HEAPF64[$1 >> 3] * 2.0 / 5.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c + 8 >> 3] + +HEAPF64[$1 >> 3] * 4.440892098500626e-16 / 5.0;
  HEAP32[$0 >> 2] = 0;
  $162 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $162 | 0;
 }
 $47 = +HEAPF64[$1 >> 3];
 if ($26 < 35.350506208557206) {
  HEAP32[$nexp >> 2] = ~~+Math_floor(+(708.3964185322641 / $47));
  HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$xk >> 3] = +(HEAP32[$nexp >> 2] | 0) * +HEAPF64[$1 >> 3];
  HEAPF64[$rk >> 3] = +(HEAP32[$nexp >> 2] | 0);
  HEAPF64[$sum >> 3] = 0.0;
  HEAP32[$i >> 2] = HEAP32[$nexp >> 2];
  while (1) {
   if ((HEAP32[$i >> 2] | 0) < 1) break;
   HEAPF64[$xk_inv >> 3] = 1.0 / +HEAPF64[$xk >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] * +HEAPF64[$ex >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + ((((+HEAPF64[$xk_inv >> 3] * 24.0 + 24.0) * +HEAPF64[$xk_inv >> 3] + 12.0) * +HEAPF64[$xk_inv >> 3] + 4.0) * +HEAPF64[$xk_inv >> 3] + 1.0) / +HEAPF64[$rk >> 3];
   HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] - 1.0;
   HEAPF64[$xk >> 3] = +HEAPF64[$xk >> 3] - +HEAPF64[$1 >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 99.54506449376352 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - +HEAPF64[$sum >> 3] * 4.0 * +HEAPF64[$ex >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $162 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $162 | 0;
 }
 $111 = +HEAPF64[$1 >> 3];
 if ($47 < 708.3964185322641) {
  HEAPF64[$x2 >> 3] = $111 * +HEAPF64[$1 >> 3];
  HEAPF64[$x4 >> 3] = +HEAPF64[$x2 >> 3] * +HEAPF64[$x2 >> 3];
  HEAPF64[$sum1 >> 3] = +HEAPF64[$1 >> 3] * 24.0 + 24.0 + +HEAPF64[$x2 >> 3] * 12.0 + +HEAPF64[$x2 >> 3] * 4.0 * +HEAPF64[$1 >> 3] + +HEAPF64[$x4 >> 3];
  $136 = 99.54506449376352 - +HEAPF64[$sum1 >> 3] * 4.0 * +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $136 / +HEAPF64[$x4 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $162 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $162 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = 99.54506449376352 / $111 / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
 if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(28056, 28048, 412, 15);
  HEAP32[$0 >> 2] = 15;
  $162 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $162 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $162 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $162 | 0;
 }
 return 0;
}
function _approx_s($order, $qq) {
 $order = $order | 0;
 $qq = +$qq;
 var $0 = 0, $1 = 0, $150 = 0.0, $163 = 0.0, $175 = 0.0, $179 = 0.0, $2 = 0, $5 = 0, $67 = 0, $73 = 0, $74 = 0, $approx = 0, $c0 = 0, $c1 = 0, $c2 = 0, $n2 = 0, $n22 = 0, $q2 = 0, $q4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 64 | 0;
 $approx = sp + 56 | 0;
 $c0 = sp + 48 | 0;
 $c1 = sp + 40 | 0;
 $c2 = sp + 32 | 0;
 $n2 = sp + 24 | 0;
 $n22 = sp + 16 | 0;
 $q2 = sp + 8 | 0;
 $q4 = sp;
 HEAP32[$1 >> 2] = $order;
 HEAPF64[$2 >> 3] = $qq;
 if ((HEAP32[$1 >> 2] | 0) < 1) {
  _gsl_error(54688, 54536, 301, 4);
  HEAPF64[$0 >> 3] = 0.0;
  $179 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$179;
 }
 $5 = HEAP32[$1 >> 2] | 0;
 if (($5 | 0) == 3) {
  if (!(+HEAPF64[$2 >> 3] <= 6.25)) {
   HEAPF64[$0 >> 3] = +_asymptotic((HEAP32[$1 >> 2] | 0) - 1 | 0, +HEAPF64[$2 >> 3]);
   $179 = +HEAPF64[$0 >> 3];
   STACKTOP = sp;
   return +$179;
  }
  HEAPF64[$c2 >> 3] = +HEAPF64[$2 >> 3] - 8.0;
  HEAPF64[$c1 >> 3] = -128.0 - +HEAPF64[$2 >> 3] * 16.0 - +HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$2 >> 3];
  HEAPF64[$c0 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * (8.0 - +HEAPF64[$2 >> 3]);
  HEAPF64[$approx >> 3] = +_solve_cubic(+HEAPF64[$c2 >> 3], +HEAPF64[$c1 >> 3], +HEAPF64[$c0 >> 3]);
  if (+HEAPF64[$approx >> 3] < 0.0) {
   $163 = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
   if ($163 > +(HEAP32[$1 >> 2] | 0) * .1) {
    HEAPF64[$0 >> 3] = +_asymptotic((HEAP32[$1 >> 2] | 0) - 1 | 0, +HEAPF64[$2 >> 3]);
    $179 = +HEAPF64[$0 >> 3];
    STACKTOP = sp;
    return +$179;
   }
  }
  $175 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0);
  HEAPF64[$0 >> 3] = $175 + +Math_abs(+(+HEAPF64[$approx >> 3]));
  $179 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$179;
 } else if (($5 | 0) == 2) if (+HEAPF64[$2 >> 3] <= 5.0) {
  HEAPF64[$0 >> 3] = 10.0 - +Math_sqrt(+(+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] + 36.0));
  $179 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$179;
 } else {
  HEAPF64[$0 >> 3] = +_asymptotic((HEAP32[$1 >> 2] | 0) - 1 | 0, +HEAPF64[$2 >> 3]);
  $179 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$179;
 } else if (($5 | 0) == 1) if (+HEAPF64[$2 >> 3] <= 4.0) {
  HEAPF64[$0 >> 3] = 5.0 - (+HEAPF64[$2 >> 3] + +Math_sqrt(+(+HEAPF64[$2 >> 3] * 5.0 * +HEAPF64[$2 >> 3] + +HEAPF64[$2 >> 3] * 16.0 + 64.0))) * .5;
  $179 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$179;
 } else {
  HEAPF64[$0 >> 3] = +_asymptotic((HEAP32[$1 >> 2] | 0) - 1 | 0, +HEAPF64[$2 >> 3]);
  $179 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$179;
 } else {
  $67 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$1 >> 2] | 0) >= 70) {
   HEAPF64[$0 >> 3] = +(Math_imul($67, HEAP32[$1 >> 2] | 0) | 0);
   $179 = +HEAPF64[$0 >> 3];
   STACKTOP = sp;
   return +$179;
  }
  $73 = +($67 | 0) * 1.7 > +Math_sqrt(+(+HEAPF64[$2 >> 3])) * 2.0;
  $74 = HEAP32[$1 >> 2] | 0;
  if ($73) {
   HEAPF64[$n2 >> 3] = +(Math_imul($74, HEAP32[$1 >> 2] | 0) | 0);
   HEAPF64[$n22 >> 3] = (+HEAPF64[$n2 >> 3] - 1.0) * (+HEAPF64[$n2 >> 3] - 1.0);
   HEAPF64[$q2 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
   HEAPF64[$q4 >> 3] = +HEAPF64[$q2 >> 3] * +HEAPF64[$q2 >> 3];
   HEAPF64[$approx >> 3] = +HEAPF64[$n2 >> 3] + +HEAPF64[$q2 >> 3] * .5 / (+HEAPF64[$n2 >> 3] - 1.0);
   HEAPF64[$approx >> 3] = +HEAPF64[$approx >> 3] + (+HEAPF64[$n2 >> 3] * 5.0 + 7.0) * +HEAPF64[$q4 >> 3] / (+HEAPF64[$n22 >> 3] * 32.0 * (+HEAPF64[$n2 >> 3] - 1.0) * (+HEAPF64[$n2 >> 3] - 4.0));
   HEAPF64[$approx >> 3] = +HEAPF64[$approx >> 3] + (+HEAPF64[$n2 >> 3] * 9.0 * +HEAPF64[$n2 >> 3] + +HEAPF64[$n2 >> 3] * 58.0 + 29.0) * +HEAPF64[$q4 >> 3] * +HEAPF64[$q2 >> 3] / (+HEAPF64[$n22 >> 3] * 64.0 * +HEAPF64[$n22 >> 3] * (+HEAPF64[$n2 >> 3] - 1.0) * (+HEAPF64[$n2 >> 3] - 4.0) * (+HEAPF64[$n2 >> 3] - 9.0));
   if (+(HEAP32[$1 >> 2] | 0) * 1.4 < +Math_sqrt(+(+HEAPF64[$2 >> 3])) * 2.0) {
    $150 = +_asymptotic((HEAP32[$1 >> 2] | 0) - 1 | 0, +HEAPF64[$2 >> 3]);
    HEAPF64[$approx >> 3] = +HEAPF64[$approx >> 3] + $150;
    HEAPF64[$approx >> 3] = +HEAPF64[$approx >> 3] * .5;
   }
  } else HEAPF64[$approx >> 3] = +_asymptotic($74 - 1 | 0, +HEAPF64[$2 >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$approx >> 3];
  $179 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$179;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $113 = 0.0, $125 = 0.0, $131 = 0, $2 = 0, $45 = 0.0, $49 = 0.0, $53 = 0.0, $61 = 0.0, $69 = 0.0, $89 = 0.0, $93 = 0.0, $c = 0, $c4 = 0, $ex = 0, $n = 0, $rat = 0, $sum = 0, $t = 0, $t1 = 0, $t2 = 0, $t3 = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 108 | 0;
 $ex = sp + 88 | 0;
 $term = sp + 80 | 0;
 $sum = sp + 72 | 0;
 $n = sp + 104 | 0;
 $rat = sp + 64 | 0;
 $t = sp + 56 | 0;
 $t1 = sp + 48 | 0;
 $t2 = sp + 40 | 0;
 $c = sp + 24 | 0;
 $t3 = sp + 16 | 0;
 $c4 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(33376, 33392, 1265, 15);
  HEAP32[$0 >> 2] = 15;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAPF64[$ex >> 3] = +Math_exp(+$10);
  HEAPF64[$term >> 3] = +HEAPF64[$ex >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$term >> 3];
  HEAP32[$n >> 2] = 2;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) >= 100) break;
   HEAPF64[$rat >> 3] = (+(HEAP32[$n >> 2] | 0) - 1.0) / +(HEAP32[$n >> 2] | 0);
   HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * -+HEAPF64[$ex >> 3] * +HEAPF64[$rat >> 3] * +HEAPF64[$rat >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
   if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sum >> 3];
  $45 = +Math_abs(+(+HEAPF64[$sum >> 3])) * 2.0 * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $45;
  HEAP32[$0 >> 2] = 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $49 = +HEAPF64[$1 >> 3];
 if ($10 < 1.0) {
  HEAP32[$0 >> 2] = _cheb_eval_e351(38352, $49, HEAP32[$2 >> 2] | 0) | 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $53 = +HEAPF64[$1 >> 3];
 if ($49 < 4.0) {
  HEAPF64[$t >> 3] = ($53 - 1.0) * .6666666666666666 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(38144, +HEAPF64[$t >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $61 = +HEAPF64[$1 >> 3];
 if ($53 < 10.0) {
  HEAPF64[$t1 >> 3] = ($61 - 4.0) * .3333333333333333 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(37936, +HEAPF64[$t1 >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $69 = +HEAPF64[$1 >> 3];
 if ($61 < 30.0) {
  HEAPF64[$t2 >> 3] = .1 * $69 - 2.0;
  _cheb_eval_e351(37720, +HEAPF64[$t2 >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  $89 = +HEAPF64[$c + 8 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $89;
  HEAP32[$0 >> 2] = 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $93 = +HEAPF64[$1 >> 3];
 if ($69 < 67108864.0) {
  HEAPF64[$t3 >> 3] = 60.0 / $93 - 1.0;
  _cheb_eval_e351(37448, +HEAPF64[$t3 >> 3], $c4) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c4 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  $113 = +HEAPF64[$c4 + 8 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $113;
  HEAP32[$0 >> 2] = 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 if ($93 < 1.3407807929942596e+154) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * .5 * +HEAPF64[$1 >> 3];
  $125 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $125;
  HEAP32[$0 >> 2] = 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(33408, 33392, 1317, 16);
  HEAP32[$0 >> 2] = 16;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 return 0;
}
function _bessel_Yn_small_x($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $125 = 0.0, $128 = 0.0, $132 = 0.0, $138 = 0.0, $140 = 0, $143 = 0, $2 = 0, $3 = 0, $33 = 0.0, $43 = 0.0, $KMAX = 0, $k = 0, $k_fact = 0, $k_term = 0, $ln_nm1_fact = 0, $ln_pre1 = 0, $ln_x_2 = 0, $npk_fact = 0, $pre2 = 0, $psi_kp1 = 0, $psi_n = 0, $psi_npkp1 = 0, $sum1 = 0, $sum2 = 0, $term1 = 0, $term2 = 0, $y = 0, $yk = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 176 | 0;
 $1 = sp + 172 | 0;
 $2 = sp + 152 | 0;
 $3 = sp + 168 | 0;
 $k = sp + 164 | 0;
 $y = sp + 144 | 0;
 $ln_x_2 = sp + 136 | 0;
 $ln_nm1_fact = sp + 120 | 0;
 $k_term = sp + 112 | 0;
 $term1 = sp + 104 | 0;
 $sum1 = sp + 96 | 0;
 $ln_pre1 = sp + 88 | 0;
 $term2 = sp + 80 | 0;
 $sum2 = sp + 72 | 0;
 $pre2 = sp + 64 | 0;
 $KMAX = sp + 160 | 0;
 $psi_n = sp + 48 | 0;
 $npk_fact = sp + 32 | 0;
 $yk = sp + 24 | 0;
 $k_fact = sp + 16 | 0;
 $psi_kp1 = sp + 8 | 0;
 $psi_npkp1 = sp;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$y >> 3] = +HEAPF64[$2 >> 3] * .25 * +HEAPF64[$2 >> 3];
 HEAPF64[$ln_x_2 >> 3] = +Math_log(+(+HEAPF64[$2 >> 3] * .5));
 _gsl_sf_lnfact_e((HEAP32[$1 >> 2] | 0) - 1 | 0, $ln_nm1_fact) | 0;
 HEAPF64[$ln_pre1 >> 3] = +(0 - (HEAP32[$1 >> 2] | 0) | 0) * +HEAPF64[$ln_x_2 >> 3] + +HEAPF64[$ln_nm1_fact >> 3];
 if (+HEAPF64[$ln_pre1 >> 3] > 706.782712893384) {
  _gsl_error(14648, 14632, 51, 16);
  HEAP32[$0 >> 2] = 16;
  $143 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $143 | 0;
 }
 HEAPF64[$sum1 >> 3] = 1.0;
 HEAPF64[$k_term >> 3] = 1.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > ((HEAP32[$1 >> 2] | 0) - 1 | 0)) break;
  $33 = +HEAPF64[$y >> 3] / +(Math_imul(HEAP32[$k >> 2] | 0, (HEAP32[$1 >> 2] | 0) - (HEAP32[$k >> 2] | 0) | 0) | 0);
  HEAPF64[$k_term >> 3] = +HEAPF64[$k_term >> 3] * $33;
  HEAPF64[$sum1 >> 3] = +HEAPF64[$sum1 >> 3] + +HEAPF64[$k_term >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 $43 = -+Math_exp(+(+HEAPF64[$ln_pre1 >> 3]));
 HEAPF64[$term1 >> 3] = $43 * +HEAPF64[$sum1 >> 3] / 3.141592653589793;
 HEAPF64[$pre2 >> 3] = -+Math_exp(+(+(HEAP32[$1 >> 2] | 0) * +HEAPF64[$ln_x_2 >> 3])) / 3.141592653589793;
 if (+Math_abs(+(+HEAPF64[$pre2 >> 3])) > 0.0) {
  HEAP32[$KMAX >> 2] = 20;
  HEAPF64[$yk >> 3] = 1.0;
  HEAPF64[$k_fact >> 3] = 1.0;
  HEAPF64[$psi_kp1 >> 3] = -.5772156649015329;
  _gsl_sf_psi_int_e(HEAP32[$1 >> 2] | 0, $psi_n) | 0;
  _gsl_sf_fact_e(HEAP32[$1 >> 2] | 0, $npk_fact) | 0;
  HEAPF64[$psi_npkp1 >> 3] = +HEAPF64[$psi_n >> 3] + 1.0 / +(HEAP32[$1 >> 2] | 0);
  HEAPF64[$sum2 >> 3] = (+HEAPF64[$psi_kp1 >> 3] + +HEAPF64[$psi_npkp1 >> 3] - +HEAPF64[$ln_x_2 >> 3] * 2.0) / +HEAPF64[$npk_fact >> 3];
  HEAP32[$k >> 2] = 1;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) >= 20) break;
   HEAPF64[$psi_kp1 >> 3] = +HEAPF64[$psi_kp1 >> 3] + 1.0 / +(HEAP32[$k >> 2] | 0);
   HEAPF64[$psi_npkp1 >> 3] = +HEAPF64[$psi_npkp1 >> 3] + 1.0 / +((HEAP32[$1 >> 2] | 0) + (HEAP32[$k >> 2] | 0) | 0);
   HEAPF64[$k_fact >> 3] = +HEAPF64[$k_fact >> 3] * +(HEAP32[$k >> 2] | 0);
   HEAPF64[$npk_fact >> 3] = +HEAPF64[$npk_fact >> 3] * +((HEAP32[$1 >> 2] | 0) + (HEAP32[$k >> 2] | 0) | 0);
   HEAPF64[$yk >> 3] = +HEAPF64[$yk >> 3] * -+HEAPF64[$y >> 3];
   HEAPF64[$k_term >> 3] = +HEAPF64[$yk >> 3] * (+HEAPF64[$psi_kp1 >> 3] + +HEAPF64[$psi_npkp1 >> 3] - +HEAPF64[$ln_x_2 >> 3] * 2.0) / (+HEAPF64[$k_fact >> 3] * +HEAPF64[$npk_fact >> 3]);
   HEAPF64[$sum2 >> 3] = +HEAPF64[$sum2 >> 3] + +HEAPF64[$k_term >> 3];
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAPF64[$term2 >> 3] = +HEAPF64[$pre2 >> 3] * +HEAPF64[$sum2 >> 3];
 } else HEAPF64[$term2 >> 3] = 0.0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$term1 >> 3] + +HEAPF64[$term2 >> 3];
 $125 = +Math_abs(+(+HEAPF64[$ln_pre1 >> 3]));
 $128 = $125 * +Math_abs(+(+HEAPF64[$term1 >> 3]));
 $132 = ($128 + +Math_abs(+(+HEAPF64[$term2 >> 3]))) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $132;
 $138 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $140 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$140 >> 3] = +HEAPF64[$140 >> 3] + $138;
 HEAP32[$0 >> 2] = 0;
 $143 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $143 | 0;
}
function _conicalP_hyperg_large_x($mu, $tau, $y, $reF, $imF) {
 $mu = +$mu;
 $tau = +$tau;
 $y = +$y;
 $reF = $reF | 0;
 $imF = $imF | 0;
 var $0 = 0, $1 = 0, $101 = 0.0, $141 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $asum = 0, $den = 0, $im_a = 0, $im_ak = 0, $im_b = 0, $im_bk = 0, $im_c = 0, $im_ck = 0, $im_multiplier = 0, $im_sum = 0, $im_term = 0, $im_tmp = 0, $k = 0, $re_a = 0, $re_ak = 0, $re_b = 0, $re_bk = 0, $re_ck = 0, $re_multiplier = 0, $re_sum = 0, $re_term = 0, $re_tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 216 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 184 | 0;
 $3 = sp + 176 | 0;
 $4 = sp + 212 | 0;
 $5 = sp + 208 | 0;
 $re_a = sp + 168 | 0;
 $re_b = sp + 160 | 0;
 $im_a = sp + 144 | 0;
 $im_b = sp + 136 | 0;
 $im_c = sp + 128 | 0;
 $re_sum = sp + 120 | 0;
 $im_sum = sp + 112 | 0;
 $re_term = sp + 104 | 0;
 $im_term = sp + 96 | 0;
 $k = sp + 200 | 0;
 $re_ak = sp + 88 | 0;
 $re_bk = sp + 80 | 0;
 $re_ck = sp + 72 | 0;
 $im_ak = sp + 64 | 0;
 $im_bk = sp + 56 | 0;
 $im_ck = sp + 48 | 0;
 $den = sp + 40 | 0;
 $re_multiplier = sp + 32 | 0;
 $im_multiplier = sp + 24 | 0;
 $re_tmp = sp + 16 | 0;
 $im_tmp = sp + 8 | 0;
 $asum = sp;
 HEAPF64[$1 >> 3] = $mu;
 HEAPF64[$2 >> 3] = $tau;
 HEAPF64[$3 >> 3] = $y;
 HEAP32[$4 >> 2] = $reF;
 HEAP32[$5 >> 2] = $imF;
 HEAP32[sp + 204 >> 2] = 1e3;
 HEAPF64[$re_a >> 3] = .25 - +HEAPF64[$1 >> 3] * .5;
 HEAPF64[$re_b >> 3] = .75 - +HEAPF64[$1 >> 3] * .5;
 HEAPF64[sp + 152 >> 3] = 1.0;
 HEAPF64[$im_a >> 3] = +HEAPF64[$2 >> 3] * -.5;
 HEAPF64[$im_b >> 3] = +HEAPF64[$2 >> 3] * -.5;
 HEAPF64[$im_c >> 3] = -+HEAPF64[$2 >> 3];
 HEAPF64[$re_sum >> 3] = 1.0;
 HEAPF64[$im_sum >> 3] = 0.0;
 HEAPF64[$re_term >> 3] = 1.0;
 HEAPF64[$im_term >> 3] = 0.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > 1e3) break;
  HEAPF64[$re_ak >> 3] = +HEAPF64[$re_a >> 3] + +(HEAP32[$k >> 2] | 0) - 1.0;
  HEAPF64[$re_bk >> 3] = +HEAPF64[$re_b >> 3] + +(HEAP32[$k >> 2] | 0) - 1.0;
  HEAPF64[$re_ck >> 3] = +(HEAP32[$k >> 2] | 0) + 1.0 - 1.0;
  HEAPF64[$im_ak >> 3] = +HEAPF64[$im_a >> 3];
  HEAPF64[$im_bk >> 3] = +HEAPF64[$im_b >> 3];
  HEAPF64[$im_ck >> 3] = +HEAPF64[$im_c >> 3];
  HEAPF64[$den >> 3] = +HEAPF64[$re_ck >> 3] * +HEAPF64[$re_ck >> 3] + +HEAPF64[$im_ck >> 3] * +HEAPF64[$im_ck >> 3];
  HEAPF64[$re_multiplier >> 3] = ((+HEAPF64[$re_ak >> 3] * +HEAPF64[$re_bk >> 3] - +HEAPF64[$im_ak >> 3] * +HEAPF64[$im_bk >> 3]) * +HEAPF64[$re_ck >> 3] + +HEAPF64[$im_ck >> 3] * (+HEAPF64[$im_ak >> 3] * +HEAPF64[$re_bk >> 3] + +HEAPF64[$re_ak >> 3] * +HEAPF64[$im_bk >> 3])) / +HEAPF64[$den >> 3];
  HEAPF64[$im_multiplier >> 3] = ((+HEAPF64[$im_ak >> 3] * +HEAPF64[$re_bk >> 3] + +HEAPF64[$re_ak >> 3] * +HEAPF64[$im_bk >> 3]) * +HEAPF64[$re_ck >> 3] - +HEAPF64[$im_ck >> 3] * (+HEAPF64[$re_ak >> 3] * +HEAPF64[$re_bk >> 3] - +HEAPF64[$im_ak >> 3] * +HEAPF64[$im_bk >> 3])) / +HEAPF64[$den >> 3];
  HEAPF64[$re_tmp >> 3] = +HEAPF64[$re_multiplier >> 3] * +HEAPF64[$re_term >> 3] - +HEAPF64[$im_multiplier >> 3] * +HEAPF64[$im_term >> 3];
  HEAPF64[$im_tmp >> 3] = +HEAPF64[$im_multiplier >> 3] * +HEAPF64[$re_term >> 3] + +HEAPF64[$re_multiplier >> 3] * +HEAPF64[$im_term >> 3];
  $101 = +Math_abs(+(+HEAPF64[$re_sum >> 3]));
  HEAPF64[$asum >> 3] = $101 + +Math_abs(+(+HEAPF64[$im_sum >> 3]));
  HEAPF64[$re_term >> 3] = +HEAPF64[$3 >> 3] / +(HEAP32[$k >> 2] | 0) * +HEAPF64[$re_tmp >> 3];
  HEAPF64[$im_term >> 3] = +HEAPF64[$3 >> 3] / +(HEAP32[$k >> 2] | 0) * +HEAPF64[$im_tmp >> 3];
  if (+Math_abs(+(+HEAPF64[$re_term >> 3] / +HEAPF64[$asum >> 3])) < 2.220446049250313e-16) if (+Math_abs(+(+HEAPF64[$im_term >> 3] / +HEAPF64[$asum >> 3])) < 2.220446049250313e-16) break;
  HEAPF64[$re_sum >> 3] = +HEAPF64[$re_sum >> 3] + +HEAPF64[$re_term >> 3];
  HEAPF64[$im_sum >> 3] = +HEAPF64[$im_sum >> 3] + +HEAPF64[$im_term >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$re_sum >> 3];
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$im_sum >> 3];
 if ((HEAP32[$k >> 2] | 0) == 1e3) {
  _gsl_error(53488, 53184, 473, 11);
  HEAP32[$0 >> 2] = 11;
  $141 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $141 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $141 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $141 | 0;
 }
 return 0;
}
function _d9chu($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $150 = 0.0, $185 = 0.0, $190 = 0, $2 = 0, $3 = 0, $4 = 0, $aa = 0, $ab = 0, $anbn = 0, $bb = 0, $bp = 0, $c2 = 0, $ct1 = 0, $ct2 = 0, $ct3 = 0, $d1z = 0, $g1 = 0, $g2 = 0, $g3 = 0, $i = 0, $j = 0, $sab = 0, $x2i1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 216 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 184 | 0;
 $3 = sp + 176 | 0;
 $4 = sp + 212 | 0;
 $aa = sp + 136 | 0;
 $bb = sp + 104 | 0;
 $i = sp + 204 | 0;
 $bp = sp + 96 | 0;
 $ab = sp + 88 | 0;
 $ct2 = sp + 80 | 0;
 $sab = sp + 72 | 0;
 $ct3 = sp + 64 | 0;
 $anbn = sp + 56 | 0;
 $ct1 = sp + 48 | 0;
 $j = sp + 200 | 0;
 $c2 = sp + 40 | 0;
 $d1z = sp + 32 | 0;
 $g1 = sp + 24 | 0;
 $g2 = sp + 16 | 0;
 $g3 = sp + 8 | 0;
 $x2i1 = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[sp + 168 >> 3] = 1.7763568394002505e-15;
 HEAP32[sp + 208 >> 2] = 500;
 HEAPF64[$bp >> 3] = +HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3];
 HEAPF64[$ab >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$bp >> 3];
 HEAPF64[$ct2 >> 3] = (+HEAPF64[$3 >> 3] - +HEAPF64[$ab >> 3]) * 2.0;
 HEAPF64[$sab >> 3] = +HEAPF64[$1 >> 3] + +HEAPF64[$bp >> 3];
 HEAPF64[$ct3 >> 3] = +HEAPF64[$sab >> 3] + 1.0 + +HEAPF64[$ab >> 3];
 HEAPF64[$anbn >> 3] = +HEAPF64[$ct3 >> 3] + +HEAPF64[$sab >> 3] + 3.0;
 HEAPF64[$ct1 >> 3] = +HEAPF64[$3 >> 3] * 2.0 / +HEAPF64[$anbn >> 3] + 1.0;
 HEAPF64[$bb >> 3] = 1.0;
 HEAPF64[$aa >> 3] = 1.0;
 HEAPF64[$bb + 8 >> 3] = +HEAPF64[$3 >> 3] * 2.0 / +HEAPF64[$ct3 >> 3] + 1.0;
 HEAPF64[$aa + 8 >> 3] = +HEAPF64[$ct2 >> 3] / +HEAPF64[$ct3 >> 3] + 1.0;
 HEAPF64[$bb + 16 >> 3] = +HEAPF64[$ct1 >> 3] * 6.0 * +HEAPF64[$3 >> 3] / +HEAPF64[$ct3 >> 3] + 1.0;
 HEAPF64[$aa + 16 >> 3] = +HEAPF64[$ab >> 3] * 6.0 / +HEAPF64[$anbn >> 3] + 1.0 + +HEAPF64[$ct1 >> 3] * 3.0 * +HEAPF64[$ct2 >> 3] / +HEAPF64[$ct3 >> 3];
 HEAP32[$i >> 2] = 4;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 500) break;
  HEAPF64[$x2i1 >> 3] = +((HEAP32[$i >> 2] << 1) - 3 | 0);
  HEAPF64[$ct1 >> 3] = +HEAPF64[$x2i1 >> 3] / (+HEAPF64[$x2i1 >> 3] - 2.0);
  HEAPF64[$anbn >> 3] = +HEAPF64[$anbn >> 3] + (+HEAPF64[$x2i1 >> 3] + +HEAPF64[$sab >> 3]);
  HEAPF64[$ct2 >> 3] = (+HEAPF64[$x2i1 >> 3] - 1.0) / +HEAPF64[$anbn >> 3];
  HEAPF64[$c2 >> 3] = +HEAPF64[$x2i1 >> 3] * +HEAPF64[$ct2 >> 3] - 1.0;
  HEAPF64[$d1z >> 3] = +HEAPF64[$x2i1 >> 3] * 2.0 * +HEAPF64[$3 >> 3] / +HEAPF64[$anbn >> 3];
  HEAPF64[$ct3 >> 3] = +HEAPF64[$sab >> 3] * +HEAPF64[$ct2 >> 3];
  HEAPF64[$g1 >> 3] = +HEAPF64[$d1z >> 3] + +HEAPF64[$ct1 >> 3] * (+HEAPF64[$c2 >> 3] + +HEAPF64[$ct3 >> 3]);
  HEAPF64[$g2 >> 3] = +HEAPF64[$d1z >> 3] - +HEAPF64[$c2 >> 3];
  HEAPF64[$g3 >> 3] = +HEAPF64[$ct1 >> 3] * (1.0 - +HEAPF64[$ct3 >> 3] - +HEAPF64[$ct2 >> 3] * 2.0);
  HEAPF64[$bb + 24 >> 3] = +HEAPF64[$g1 >> 3] * +HEAPF64[$bb + 16 >> 3] + +HEAPF64[$g2 >> 3] * +HEAPF64[$bb + 8 >> 3] + +HEAPF64[$g3 >> 3] * +HEAPF64[$bb >> 3];
  HEAPF64[$aa + 24 >> 3] = +HEAPF64[$g1 >> 3] * +HEAPF64[$aa + 16 >> 3] + +HEAPF64[$g2 >> 3] * +HEAPF64[$aa + 8 >> 3] + +HEAPF64[$g3 >> 3] * +HEAPF64[$aa >> 3];
  $150 = +Math_abs(+(+HEAPF64[$aa + 24 >> 3] * +HEAPF64[$bb >> 3] - +HEAPF64[$aa >> 3] * +HEAPF64[$bb + 24 >> 3]));
  if ($150 < +Math_abs(+(+HEAPF64[$bb + 24 >> 3] * +HEAPF64[$bb >> 3])) * 1.7763568394002505e-15) break;
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= 3) break;
   HEAPF64[$aa + (HEAP32[$j >> 2] << 3) >> 3] = +HEAPF64[$aa + ((HEAP32[$j >> 2] | 0) + 1 << 3) >> 3];
   HEAPF64[$bb + (HEAP32[$j >> 2] << 3) >> 3] = +HEAPF64[$bb + ((HEAP32[$j >> 2] | 0) + 1 << 3) >> 3];
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$aa + 24 >> 3] / +HEAPF64[$bb + 24 >> 3];
 $185 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 1.7763568394002505e-15;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $185;
 if ((HEAP32[$i >> 2] | 0) == 500) {
  _gsl_error(52312, 52168, 201, 11);
  HEAP32[$0 >> 2] = 11;
  $190 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $190 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $190 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $190 | 0;
 }
 return 0;
}
function _gsl_sf_coulomb_wave_FGp_array($lam_min, $kmax, $eta, $x, $fc_array, $fcp_array, $gc_array, $gcp_array, $F_exp, $G_exp) {
 $lam_min = +$lam_min;
 $kmax = $kmax | 0;
 $eta = +$eta;
 $x = +$x;
 $fc_array = $fc_array | 0;
 $fcp_array = $fcp_array | 0;
 $gc_array = $gc_array | 0;
 $gcp_array = $gcp_array | 0;
 $F_exp = $F_exp | 0;
 $G_exp = $G_exp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F = 0, $Fp = 0, $G = 0, $Gp = 0, $el = 0, $el1 = 0, $fc_lm1 = 0, $fcl = 0, $fpl = 0, $gcl = 0, $gcl1 = 0, $gpl = 0, $k = 0, $lam = 0, $lam_max = 0, $rl = 0, $rl2 = 0, $sl = 0, $sl3 = 0, $stat_FG = 0, $x_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $0 = sp + 200 | 0;
 $1 = sp + 240 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 184 | 0;
 $4 = sp + 236 | 0;
 $5 = sp + 232 | 0;
 $6 = sp + 228 | 0;
 $7 = sp + 224 | 0;
 $8 = sp + 220 | 0;
 $9 = sp + 216 | 0;
 $x_inv = sp + 176 | 0;
 $lam_max = sp + 168 | 0;
 $F = sp + 152 | 0;
 $Fp = sp + 136 | 0;
 $G = sp + 120 | 0;
 $Gp = sp + 104 | 0;
 $stat_FG = sp + 212 | 0;
 $fcl = sp + 96 | 0;
 $fpl = sp + 88 | 0;
 $lam = sp + 80 | 0;
 $k = sp + 208 | 0;
 $gcl = sp + 72 | 0;
 $gpl = sp + 64 | 0;
 $el = sp + 56 | 0;
 $rl = sp + 48 | 0;
 $sl = sp + 40 | 0;
 $fc_lm1 = sp + 32 | 0;
 $el1 = sp + 24 | 0;
 $rl2 = sp + 16 | 0;
 $sl3 = sp + 8 | 0;
 $gcl1 = sp;
 HEAPF64[$0 >> 3] = $lam_min;
 HEAP32[$1 >> 2] = $kmax;
 HEAPF64[$2 >> 3] = $eta;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $fc_array;
 HEAP32[$5 >> 2] = $fcp_array;
 HEAP32[$6 >> 2] = $gc_array;
 HEAP32[$7 >> 2] = $gcp_array;
 HEAP32[$8 >> 2] = $F_exp;
 HEAP32[$9 >> 2] = $G_exp;
 HEAPF64[$x_inv >> 3] = 1.0 / +HEAPF64[$3 >> 3];
 HEAPF64[$lam_max >> 3] = +HEAPF64[$0 >> 3] + +(HEAP32[$1 >> 2] | 0);
 HEAP32[$stat_FG >> 2] = _gsl_sf_coulomb_wave_FG_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$lam_max >> 3], HEAP32[$1 >> 2] | 0, $F, $Fp, $G, $Gp, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
 HEAPF64[$fcl >> 3] = +HEAPF64[$F >> 3];
 HEAPF64[$fpl >> 3] = +HEAPF64[$Fp >> 3];
 HEAPF64[$lam >> 3] = +HEAPF64[$lam_max >> 3];
 HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3] = +HEAPF64[$F >> 3];
 HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3] = +HEAPF64[$Fp >> 3];
 HEAP32[$k >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) < 0) break;
  HEAPF64[$el >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$lam >> 3];
  HEAPF64[$rl >> 3] = +_hypot(1.0, +(+HEAPF64[$el >> 3]));
  HEAPF64[$sl >> 3] = +HEAPF64[$el >> 3] + +HEAPF64[$lam >> 3] * +HEAPF64[$x_inv >> 3];
  HEAPF64[$fc_lm1 >> 3] = (+HEAPF64[$fcl >> 3] * +HEAPF64[$sl >> 3] + +HEAPF64[$fpl >> 3]) / +HEAPF64[$rl >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[$fc_lm1 >> 3];
  HEAPF64[$fpl >> 3] = +HEAPF64[$fc_lm1 >> 3] * +HEAPF64[$sl >> 3] - +HEAPF64[$fcl >> 3] * +HEAPF64[$rl >> 3];
  HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[$fpl >> 3];
  HEAPF64[$fcl >> 3] = +HEAPF64[$fc_lm1 >> 3];
  HEAPF64[$lam >> 3] = +HEAPF64[$lam >> 3] - 1.0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + -1;
 }
 HEAPF64[$gcl >> 3] = +HEAPF64[$G >> 3];
 HEAPF64[$gpl >> 3] = +HEAPF64[$Gp >> 3];
 HEAPF64[$lam >> 3] = +HEAPF64[$0 >> 3] + 1.0;
 HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$G >> 3];
 HEAPF64[HEAP32[$7 >> 2] >> 3] = +HEAPF64[$Gp >> 3];
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[$el1 >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$lam >> 3];
  HEAPF64[$rl2 >> 3] = +_hypot(1.0, +(+HEAPF64[$el1 >> 3]));
  HEAPF64[$sl3 >> 3] = +HEAPF64[$el1 >> 3] + +HEAPF64[$lam >> 3] * +HEAPF64[$x_inv >> 3];
  HEAPF64[$gcl1 >> 3] = (+HEAPF64[$sl3 >> 3] * +HEAPF64[$gcl >> 3] - +HEAPF64[$gpl >> 3]) / +HEAPF64[$rl2 >> 3];
  HEAPF64[(HEAP32[$6 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[$gcl1 >> 3];
  HEAPF64[$gpl >> 3] = +HEAPF64[$rl2 >> 3] * +HEAPF64[$gcl >> 3] - +HEAPF64[$sl3 >> 3] * +HEAPF64[$gcl1 >> 3];
  HEAPF64[(HEAP32[$7 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[$gpl >> 3];
  HEAPF64[$gcl >> 3] = +HEAPF64[$gcl1 >> 3];
  HEAPF64[$lam >> 3] = +HEAPF64[$lam >> 3] + 1.0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$stat_FG >> 2] | 0;
}
function _expint_En_impl($n, $x, $result, $scale) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 $scale = $scale | 0;
 var $0 = 0, $1 = 0, $109 = 0.0, $111 = 0, $121 = 0, $2 = 0, $24 = 0.0, $29 = 0.0, $3 = 0, $4 = 0, $44 = 0.0, $63 = 0.0, $68 = 0.0, $89 = 0.0, $99 = 0.0, $prefactor = 0, $result_g = 0, $scale_factor = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 44 | 0;
 $result_g = sp + 16 | 0;
 $prefactor = sp + 8 | 0;
 $status = sp + 40 | 0;
 $scale_factor = sp;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$4 >> 2] = $scale;
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(31432, 31312, 426, 1);
  HEAP32[$0 >> 2] = 1;
  $121 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 }
 if (!(HEAP32[$1 >> 2] | 0)) {
  if (+HEAPF64[$2 >> 3] == 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
   _gsl_error(31432, 31312, 429, 1);
   HEAP32[$0 >> 2] = 1;
   $121 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $121 | 0;
  }
  if (HEAP32[$4 >> 2] | 0) $24 = 1.0; else $24 = +Math_exp(+-+HEAPF64[$2 >> 3]);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $24 / +HEAPF64[$2 >> 3];
  $29 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $29;
  if (+Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(31448, 31312, 433, 15);
   HEAP32[$0 >> 2] = 15;
   $121 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $121 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $121 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $121 | 0;
  }
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$0 >> 2] = _expint_E1_impl(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  $121 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 }
 $44 = +HEAPF64[$2 >> 3];
 if ((HEAP32[$1 >> 2] | 0) == 2) {
  HEAP32[$0 >> 2] = _expint_E2_impl($44, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  $121 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 }
 if ($44 < 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(31432, 31312, 442, 1);
  HEAP32[$0 >> 2] = 1;
  $121 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 }
 if (+HEAPF64[$2 >> 3] == 0.0) {
  if (HEAP32[$4 >> 2] | 0) $63 = +Math_exp(+(+HEAPF64[$2 >> 3])); else $63 = 1.0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $63 * (1.0 / (+(HEAP32[$1 >> 2] | 0) - 1.0));
  $68 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $68;
  if (+Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(31448, 31312, 447, 15);
   HEAP32[$0 >> 2] = 15;
   $121 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $121 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $121 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $121 | 0;
  }
 }
 HEAPF64[$prefactor >> 3] = +Math_pow(+(+HEAPF64[$2 >> 3]), +(+((HEAP32[$1 >> 2] | 0) - 1 | 0)));
 HEAP32[$status >> 2] = _gsl_sf_gamma_inc_e(+(1 - (HEAP32[$1 >> 2] | 0) | 0), +HEAPF64[$2 >> 3], $result_g) | 0;
 if (HEAP32[$4 >> 2] | 0) $89 = +Math_exp(+(+HEAPF64[$2 >> 3])); else $89 = 1.0;
 HEAPF64[$scale_factor >> 3] = $89;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$scale_factor >> 3] * +HEAPF64[$prefactor >> 3] * +HEAPF64[$result_g >> 3];
 $99 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $99;
 $109 = +Math_abs(+(+HEAPF64[$scale_factor >> 3] * +HEAPF64[$prefactor >> 3] * +HEAPF64[$result_g + 8 >> 3])) * 2.0;
 $111 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$111 >> 3] = +HEAPF64[$111 >> 3] + $109;
 if (!(HEAP32[$status >> 2] | 0)) if (+Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(31448, 31312, 457, 15);
  HEAP32[$0 >> 2] = 15;
  $121 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 }
 HEAP32[$0 >> 2] = HEAP32[$status >> 2];
 $121 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $121 | 0;
}
function _coulomb_jwkb($lam, $eta, $x, $fjwkb, $gjwkb, $exponent) {
 $lam = +$lam;
 $eta = +$eta;
 $x = +$x;
 $fjwkb = $fjwkb | 0;
 $gjwkb = $gjwkb | 0;
 $exponent = $exponent | 0;
 var $0 = 0, $1 = 0, $106 = 0.0, $111 = 0.0, $117 = 0.0, $120 = 0.0, $125 = 0.0, $131 = 0.0, $135 = 0, $2 = 0, $3 = 0, $32 = 0.0, $37 = 0.0, $4 = 0, $5 = 0, $50 = 0.0, $52 = 0.0, $6 = 0, $91 = 0.0, $95 = 0.0, $F = 0, $F_exp = 0, $G = 0, $G_exp = 0, $ai = 0, $airy_scale_exp = 0, $bi = 0, $llp1 = 0, $llp1_eff = 0, $phi = 0, $prefactor = 0, $rho_ghalf = 0, $sinh_arg = 0, $sinh_inv = 0, $zeta_half = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 172 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 144 | 0;
 $3 = sp + 136 | 0;
 $4 = sp + 168 | 0;
 $5 = sp + 164 | 0;
 $6 = sp + 160 | 0;
 $llp1 = sp + 128 | 0;
 $llp1_eff = sp + 120 | 0;
 $rho_ghalf = sp + 112 | 0;
 $sinh_arg = sp + 104 | 0;
 $sinh_inv = sp + 96 | 0;
 $phi = sp + 88 | 0;
 $zeta_half = sp + 80 | 0;
 $prefactor = sp + 72 | 0;
 $F = sp + 64 | 0;
 $G = sp + 56 | 0;
 $F_exp = sp + 48 | 0;
 $G_exp = sp + 40 | 0;
 $airy_scale_exp = sp + 32 | 0;
 $ai = sp + 16 | 0;
 $bi = sp;
 HEAPF64[$1 >> 3] = $lam;
 HEAPF64[$2 >> 3] = $eta;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $fjwkb;
 HEAP32[$5 >> 2] = $gjwkb;
 HEAP32[$6 >> 2] = $exponent;
 HEAPF64[$llp1 >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] + 1.0) + .17142857142857143;
 HEAPF64[$llp1_eff >> 3] = +HEAPF64[$llp1 >> 3] > 0.0 ? +HEAPF64[$llp1 >> 3] : 0.0;
 HEAPF64[$rho_ghalf >> 3] = +Math_sqrt(+(+HEAPF64[$3 >> 3] * (+HEAPF64[$2 >> 3] * 2.0 - +HEAPF64[$3 >> 3]) + +HEAPF64[$llp1_eff >> 3]));
 $32 = +Math_sqrt(+(+HEAPF64[$llp1_eff >> 3] / (+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] + +HEAPF64[$llp1_eff >> 3])));
 HEAPF64[$sinh_arg >> 3] = $32 * +HEAPF64[$rho_ghalf >> 3] / +HEAPF64[$3 >> 3];
 $37 = +HEAPF64[$sinh_arg >> 3];
 HEAPF64[$sinh_inv >> 3] = +Math_log(+($37 + +_hypot(1.0, +(+HEAPF64[$sinh_arg >> 3]))));
 $50 = +HEAPF64[$rho_ghalf >> 3] - +HEAPF64[$2 >> 3] * +Math_atan2(+(+HEAPF64[$rho_ghalf >> 3]), +(+HEAPF64[$3 >> 3] - +HEAPF64[$2 >> 3]));
 $52 = +Math_sqrt(+(+HEAPF64[$llp1_eff >> 3]));
 HEAPF64[$phi >> 3] = +Math_abs(+($50 - $52 * +HEAPF64[$sinh_inv >> 3]));
 HEAPF64[$zeta_half >> 3] = +Math_pow(+(+HEAPF64[$phi >> 3] * 3.0 / 2.0), .3333333333333333);
 HEAPF64[$prefactor >> 3] = +Math_sqrt(+(+HEAPF64[$phi >> 3] * 3.141592653589793 * +HEAPF64[$3 >> 3] / (+HEAPF64[$rho_ghalf >> 3] * 6.0)));
 HEAPF64[$F >> 3] = +HEAPF64[$prefactor >> 3] * 3.0 / +HEAPF64[$zeta_half >> 3];
 HEAPF64[$G >> 3] = +HEAPF64[$prefactor >> 3] * 3.0 / +HEAPF64[$zeta_half >> 3];
 HEAPF64[$airy_scale_exp >> 3] = +HEAPF64[$phi >> 3];
 _gsl_sf_airy_Ai_scaled_e(+HEAPF64[$zeta_half >> 3] * +HEAPF64[$zeta_half >> 3], 0, $ai) | 0;
 _gsl_sf_airy_Bi_scaled_e(+HEAPF64[$zeta_half >> 3] * +HEAPF64[$zeta_half >> 3], 0, $bi) | 0;
 HEAPF64[$F >> 3] = +HEAPF64[$F >> 3] * +HEAPF64[$ai >> 3];
 HEAPF64[$G >> 3] = +HEAPF64[$G >> 3] * +HEAPF64[$bi >> 3];
 $91 = +Math_log(+(+HEAPF64[$F >> 3]));
 HEAPF64[$F_exp >> 3] = $91 - +HEAPF64[$airy_scale_exp >> 3];
 $95 = +Math_log(+(+HEAPF64[$G >> 3]));
 HEAPF64[$G_exp >> 3] = $95 + +HEAPF64[$airy_scale_exp >> 3];
 if (+HEAPF64[$G_exp >> 3] >= 709.782712893384) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$F >> 3];
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$G >> 3];
  $106 = +Math_abs(+(+HEAPF64[$F >> 3])) * .001;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $106;
  $111 = +Math_abs(+(+HEAPF64[$G >> 3])) * .001;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $111;
  HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$airy_scale_exp >> 3];
  _gsl_error(26256, 26240, 858, 16);
  HEAP32[$0 >> 2] = 16;
  $135 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $135 | 0;
 } else {
  $117 = +Math_exp(+(+HEAPF64[$F_exp >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $117;
  $120 = +Math_exp(+(+HEAPF64[$G_exp >> 3]));
  HEAPF64[HEAP32[$5 >> 2] >> 3] = $120;
  $125 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * .001;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $125;
  $131 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * .001;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $131;
  HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $135 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $135 | 0;
 }
 return 0;
}
function _coulomb_FGmhalf_series($eta, $x, $F, $G) {
 $eta = +$eta;
 $x = +$x;
 $F = $F | 0;
 $G = $G | 0;
 var $0 = 0, $1 = 0, $107 = 0.0, $112 = 0.0, $129 = 0.0, $131 = 0.0, $135 = 0.0, $138 = 0.0, $144 = 0.0, $150 = 0, $2 = 0, $3 = 0, $4 = 0, $82 = 0.0, $Cmhalf = 0, $f_sum = 0, $g_sum = 0, $m = 0, $m2 = 0, $rpsi_1p2e = 0, $rpsi_1pe = 0, $rx = 0, $stat_CL = 0, $tex = 0, $tmp1 = 0, $u_m = 0, $u_mm1 = 0, $u_mm2 = 0, $v_m = 0, $v_mm1 = 0, $v_mm2 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 188 | 0;
 $1 = sp + 160 | 0;
 $2 = sp + 152 | 0;
 $3 = sp + 184 | 0;
 $4 = sp + 180 | 0;
 $rx = sp + 144 | 0;
 $x2 = sp + 136 | 0;
 $tex = sp + 128 | 0;
 $Cmhalf = sp + 112 | 0;
 $stat_CL = sp + 172 | 0;
 $u_mm2 = sp + 104 | 0;
 $u_mm1 = sp + 96 | 0;
 $u_m = sp + 88 | 0;
 $v_mm2 = sp + 80 | 0;
 $v_mm1 = sp + 72 | 0;
 $v_m = sp + 64 | 0;
 $f_sum = sp + 56 | 0;
 $g_sum = sp + 48 | 0;
 $tmp1 = sp + 40 | 0;
 $rpsi_1pe = sp + 24 | 0;
 $rpsi_1p2e = sp + 8 | 0;
 $m = sp + 168 | 0;
 $m2 = sp;
 HEAPF64[$1 >> 3] = $eta;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $F;
 HEAP32[$4 >> 2] = $G;
 HEAP32[sp + 176 >> 2] = 800;
 HEAPF64[$rx >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$x2 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
 HEAPF64[$tex >> 3] = +HEAPF64[$1 >> 3] * 2.0 * +HEAPF64[$2 >> 3];
 HEAP32[$stat_CL >> 2] = _CLeta(-.5, +HEAPF64[$1 >> 3], $Cmhalf) | 0;
 HEAPF64[$u_mm2 >> 3] = 1.0;
 HEAPF64[$u_mm1 >> 3] = +HEAPF64[$tex >> 3] * +HEAPF64[$u_mm2 >> 3];
 HEAP32[$m >> 2] = 2;
 _gsl_sf_psi_1piy_e(+HEAPF64[$1 >> 3], $rpsi_1pe) | 0;
 _gsl_sf_psi_1piy_e(+HEAPF64[$1 >> 3] * 2.0, $rpsi_1p2e) | 0;
 HEAPF64[$v_mm2 >> 3] = .46128414924312044 - +HEAPF64[$rpsi_1pe >> 3] + +HEAPF64[$rpsi_1p2e >> 3] * 2.0;
 HEAPF64[$v_mm1 >> 3] = +HEAPF64[$tex >> 3] * (+HEAPF64[$v_mm2 >> 3] - +HEAPF64[$u_mm2 >> 3] * 2.0);
 HEAPF64[$f_sum >> 3] = +HEAPF64[$u_mm2 >> 3] + +HEAPF64[$u_mm1 >> 3];
 HEAPF64[$g_sum >> 3] = +HEAPF64[$v_mm2 >> 3] + +HEAPF64[$v_mm1 >> 3];
 while (1) {
  if ((HEAP32[$m >> 2] | 0) >= 800) break;
  HEAPF64[$m2 >> 3] = +(Math_imul(HEAP32[$m >> 2] | 0, HEAP32[$m >> 2] | 0) | 0);
  HEAPF64[$u_m >> 3] = (+HEAPF64[$tex >> 3] * +HEAPF64[$u_mm1 >> 3] - +HEAPF64[$x2 >> 3] * +HEAPF64[$u_mm2 >> 3]) / +HEAPF64[$m2 >> 3];
  HEAPF64[$v_m >> 3] = (+HEAPF64[$tex >> 3] * +HEAPF64[$v_mm1 >> 3] - +HEAPF64[$x2 >> 3] * +HEAPF64[$v_mm2 >> 3] - +(HEAP32[$m >> 2] | 0) * 2.0 * +HEAPF64[$u_m >> 3]) / +HEAPF64[$m2 >> 3];
  HEAPF64[$f_sum >> 3] = +HEAPF64[$f_sum >> 3] + +HEAPF64[$u_m >> 3];
  HEAPF64[$g_sum >> 3] = +HEAPF64[$g_sum >> 3] + +HEAPF64[$v_m >> 3];
  if (+HEAPF64[$f_sum >> 3] != 0.0) if (+HEAPF64[$g_sum >> 3] != 0.0) {
   $82 = +Math_abs(+(+HEAPF64[$u_m >> 3] / +HEAPF64[$f_sum >> 3]));
   if ($82 + +Math_abs(+(+HEAPF64[$v_m >> 3] / +HEAPF64[$g_sum >> 3])) < 2.220446049250313e-15) break;
  }
  HEAPF64[$u_mm2 >> 3] = +HEAPF64[$u_mm1 >> 3];
  HEAPF64[$u_mm1 >> 3] = +HEAPF64[$u_m >> 3];
  HEAPF64[$v_mm2 >> 3] = +HEAPF64[$v_mm1 >> 3];
  HEAPF64[$v_mm1 >> 3] = +HEAPF64[$v_m >> 3];
  HEAP32[$m >> 2] = (HEAP32[$m >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$Cmhalf >> 3] * +HEAPF64[$rx >> 3] * +HEAPF64[$f_sum >> 3];
 $107 = +HEAPF64[$Cmhalf + 8 >> 3] * +Math_abs(+(+HEAPF64[$rx >> 3] * +HEAPF64[$f_sum >> 3]));
 $112 = $107 + +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $112;
 HEAPF64[$tmp1 >> 3] = +HEAPF64[$f_sum >> 3] * +Math_log(+(+HEAPF64[$2 >> 3]));
 HEAPF64[HEAP32[$4 >> 2] >> 3] = -+HEAPF64[$rx >> 3] * (+HEAPF64[$tmp1 >> 3] + +HEAPF64[$g_sum >> 3]) / +HEAPF64[$Cmhalf >> 3];
 $129 = +Math_abs(+(+HEAPF64[$rx >> 3]));
 $131 = +Math_abs(+(+HEAPF64[$tmp1 >> 3]));
 $135 = $129 * ($131 + +Math_abs(+(+HEAPF64[$g_sum >> 3])));
 $138 = $135 / +Math_abs(+(+HEAPF64[$Cmhalf >> 3]));
 $144 = $138 * +Math_abs(+(+HEAPF64[$Cmhalf + 8 >> 3] / +HEAPF64[$Cmhalf >> 3]));
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $144;
 if ((HEAP32[$m >> 2] | 0) == 800) {
  _gsl_error(26256, 26240, 503, 11);
  HEAP32[$0 >> 2] = 11;
  $150 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $150 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$stat_CL >> 2];
  $150 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $150 | 0;
 }
 return 0;
}
function _gsl_sf_legendre_H3d_array($lmax, $lambda, $eta, $result_array) {
 $lmax = $lmax | 0;
 $lambda = +$lambda;
 $eta = +$eta;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $111 = 0, $112 = 0, $2 = 0, $3 = 0, $4 = 0, $51 = 0, $H0 = 0, $Hl = 0, $Hlm1 = 0, $Hlp1 = 0, $coth_eta = 0, $ell = 0, $ell1 = 0, $ell2 = 0, $r_Hl = 0, $r_Hlp1 = 0, $root_term_0 = 0, $root_term_1 = 0, $stat = 0, $stat_lmax = 0, $stat_lmaxm1 = 0, $stat_max = 0, $stat_recursion = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 152 | 0;
 $1 = sp + 148 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 144 | 0;
 $ell = sp + 140 | 0;
 $ell1 = sp + 136 | 0;
 $H0 = sp + 80 | 0;
 $stat = sp + 132 | 0;
 $r_Hlp1 = sp + 64 | 0;
 $r_Hl = sp + 48 | 0;
 $stat_lmax = sp + 128 | 0;
 $stat_lmaxm1 = sp + 124 | 0;
 $stat_max = sp + 120 | 0;
 $coth_eta = sp + 40 | 0;
 $stat_recursion = sp + 116 | 0;
 $Hlp1 = sp + 32 | 0;
 $Hl = sp + 24 | 0;
 $Hlm1 = sp + 16 | 0;
 $ell2 = sp + 112 | 0;
 $root_term_0 = sp + 8 | 0;
 $root_term_1 = sp;
 HEAP32[$1 >> 2] = $lmax;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $eta;
 HEAP32[$4 >> 2] = $result_array;
 if (!(+HEAPF64[$3 >> 3] < 0.0)) if ((HEAP32[$1 >> 2] | 0) >= 0) {
  if (+HEAPF64[$3 >> 3] > 709.782712893384) {
   HEAP32[$ell1 >> 2] = 0;
   while (1) {
    if ((HEAP32[$ell1 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ell1 >> 2] << 3) >> 3] = 0.0;
    HEAP32[$ell1 >> 2] = (HEAP32[$ell1 >> 2] | 0) + 1;
   }
   _gsl_error(52824, 52808, 509, 16);
   HEAP32[$0 >> 2] = 16;
   $112 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $112 | 0;
  }
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$stat >> 2] = _gsl_sf_legendre_H3d_e(0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $H0) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$H0 >> 3];
   HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
   $112 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $112 | 0;
  }
  HEAP32[$stat_lmax >> 2] = _gsl_sf_legendre_H3d_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Hlp1) | 0;
  HEAP32[$stat_lmaxm1 >> 2] = _gsl_sf_legendre_H3d_e((HEAP32[$1 >> 2] | 0) - 1 | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $r_Hl) | 0;
  if (HEAP32[$stat_lmax >> 2] | 0) $51 = HEAP32[$stat_lmax >> 2] | 0; else $51 = (HEAP32[$stat_lmaxm1 >> 2] | 0) != 0 ? HEAP32[$stat_lmaxm1 >> 2] | 0 : 0;
  HEAP32[$stat_max >> 2] = $51;
  HEAPF64[$coth_eta >> 3] = 1.0 / +_tanh(+(+HEAPF64[$3 >> 3]));
  HEAP32[$stat_recursion >> 2] = 0;
  HEAPF64[$Hlp1 >> 3] = +HEAPF64[$r_Hlp1 >> 3];
  HEAPF64[$Hl >> 3] = +HEAPF64[$r_Hl >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3] = +HEAPF64[$Hlp1 >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$1 >> 2] | 0) - 1 << 3) >> 3] = +HEAPF64[$Hl >> 3];
  HEAP32[$ell2 >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[$ell2 >> 2] | 0) <= 0) break;
   HEAPF64[$root_term_0 >> 3] = +_hypot(+(+HEAPF64[$2 >> 3]), +(+(HEAP32[$ell2 >> 2] | 0)));
   HEAPF64[$root_term_1 >> 3] = +_hypot(+(+HEAPF64[$2 >> 3]), +(+(HEAP32[$ell2 >> 2] | 0) + 1.0));
   HEAPF64[$Hlm1 >> 3] = ((+(HEAP32[$ell2 >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$coth_eta >> 3] * +HEAPF64[$Hl >> 3] - +HEAPF64[$root_term_1 >> 3] * +HEAPF64[$Hlp1 >> 3]) / +HEAPF64[$root_term_0 >> 3];
   HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell2 >> 2] | 0) - 1 << 3) >> 3] = +HEAPF64[$Hlm1 >> 3];
   if (!(+HEAPF64[$Hlm1 >> 3] < 1.7976931348623157e+308)) HEAP32[$stat_recursion >> 2] = 16;
   HEAPF64[$Hlp1 >> 3] = +HEAPF64[$Hl >> 3];
   HEAPF64[$Hl >> 3] = +HEAPF64[$Hlm1 >> 3];
   HEAP32[$ell2 >> 2] = (HEAP32[$ell2 >> 2] | 0) + -1;
  }
  if (HEAP32[$stat_recursion >> 2] | 0) $111 = HEAP32[$stat_recursion >> 2] | 0; else $111 = (HEAP32[$stat_max >> 2] | 0) != 0 ? HEAP32[$stat_max >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $111;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 HEAP32[$ell >> 2] = 0;
 while (1) {
  if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ell >> 2] << 3) >> 3] = 0.0;
  HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
 }
 _gsl_error(52792, 52808, 503, 1);
 HEAP32[$0 >> 2] = 1;
 $112 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $112 | 0;
}
function _gsl_sf_legendre_Plm_e($l, $m, $x, $result) {
 $l = $l | 0;
 $m = $m | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $147 = 0.0, $150 = 0, $2 = 0, $21 = 0.0, $3 = 0, $30 = 0.0, $36 = 0.0, $4 = 0, $85 = 0.0, $99 = 0.0, $dif = 0, $ell = 0, $err_amp = 0, $exp_check = 0, $p_ell = 0, $p_ellm1 = 0, $p_ellm2 = 0, $p_mm = 0, $p_mmp1 = 0, $sum = 0, $t_d = 0, $t_s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 108 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 100 | 0;
 $dif = sp + 80 | 0;
 $sum = sp + 72 | 0;
 $t_d = sp + 64 | 0;
 $t_s = sp + 56 | 0;
 $exp_check = sp + 48 | 0;
 $err_amp = sp + 40 | 0;
 $p_mm = sp + 32 | 0;
 $p_mmp1 = sp + 24 | 0;
 $p_ellm2 = sp + 16 | 0;
 $p_ellm1 = sp + 8 | 0;
 $p_ell = sp;
 $ell = sp + 96 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAP32[$2 >> 2] = $m;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$dif >> 3] = +((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0);
 HEAPF64[$sum >> 3] = +((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0);
 if (+HEAPF64[$dif >> 3] == 0.0) $21 = 0.0; else $21 = +HEAPF64[$dif >> 3] * .5 * (+Math_log(+(+HEAPF64[$dif >> 3])) - 1.0);
 HEAPF64[$t_d >> 3] = $21;
 if (+HEAPF64[$dif >> 3] == 0.0) $30 = 0.0; else $30 = +HEAPF64[$sum >> 3] * .5 * (+Math_log(+(+HEAPF64[$sum >> 3])) - 1.0);
 HEAPF64[$t_s >> 3] = $30;
 $36 = +Math_log(+(+(HEAP32[$1 >> 2] | 0) * 2.0 + 1.0)) * .5;
 HEAPF64[$exp_check >> 3] = $36 + +HEAPF64[$t_d >> 3] - +HEAPF64[$t_s >> 3];
 if ((HEAP32[$2 >> 2] | 0) >= 0) if ((HEAP32[$1 >> 2] | 0) >= (HEAP32[$2 >> 2] | 0)) if (!(+HEAPF64[$3 >> 3] < -1.0 | +HEAPF64[$3 >> 3] > 1.0)) {
  if (+HEAPF64[$exp_check >> 3] < -698.3964185322641) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = inf;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = inf;
   _gsl_error(53528, 53512, 314, 16);
   HEAP32[$0 >> 2] = 16;
   $150 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $150 | 0;
  }
  HEAPF64[$err_amp >> 3] = 1.0 / (+Math_abs(+(1.0 - +Math_abs(+(+HEAPF64[$3 >> 3])))) + 2.220446049250313e-16);
  HEAPF64[$p_mm >> 3] = +_legendre_Pmm(HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3]);
  HEAPF64[$p_mmp1 >> 3] = +HEAPF64[$3 >> 3] * +((HEAP32[$2 >> 2] << 1) + 1 | 0) * +HEAPF64[$p_mm >> 3];
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$p_mm >> 3];
   $85 = +HEAPF64[$err_amp >> 3] * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$p_mm >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $85;
   HEAP32[$0 >> 2] = 0;
   $150 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $150 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == ((HEAP32[$2 >> 2] | 0) + 1 | 0)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$p_mmp1 >> 3];
   $99 = +HEAPF64[$err_amp >> 3] * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$p_mmp1 >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $99;
   HEAP32[$0 >> 2] = 0;
   $150 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $150 | 0;
  }
  HEAPF64[$p_ellm2 >> 3] = +HEAPF64[$p_mm >> 3];
  HEAPF64[$p_ellm1 >> 3] = +HEAPF64[$p_mmp1 >> 3];
  HEAPF64[$p_ell >> 3] = 0.0;
  HEAP32[$ell >> 2] = (HEAP32[$2 >> 2] | 0) + 2;
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$p_ell >> 3] = (+HEAPF64[$3 >> 3] * +((HEAP32[$ell >> 2] << 1) - 1 | 0) * +HEAPF64[$p_ellm1 >> 3] - +((HEAP32[$ell >> 2] | 0) + (HEAP32[$2 >> 2] | 0) - 1 | 0) * +HEAPF64[$p_ellm2 >> 3]) / +((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0);
   HEAPF64[$p_ellm2 >> 3] = +HEAPF64[$p_ellm1 >> 3];
   HEAPF64[$p_ellm1 >> 3] = +HEAPF64[$p_ell >> 3];
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$p_ell >> 3];
  $147 = +HEAPF64[$err_amp >> 3] * (+((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) * .5 + 1.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$p_ell >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $147;
  HEAP32[$0 >> 2] = 0;
  $150 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $150 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(53496, 53512, 310, 1);
 HEAP32[$0 >> 2] = 1;
 $150 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $150 | 0;
}
function _gsl_cdf_tdist_Pinv($P, $nu) {
 $P = +$P;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $116 = 0.0, $143 = 0.0, $149 = 0.0, $154 = 0.0, $16 = 0.0, $2 = 0, $28 = 0.0, $30 = 0.0, $34 = 0.0, $52 = 0.0, $79 = 0.0, $82 = 0.0, $92 = 0, $beta = 0, $dP = 0, $lambda = 0, $n = 0, $phi = 0, $ptail = 0, $step = 0, $step0 = 0, $step1 = 0, $x = 0, $xg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $x = sp + 72 | 0;
 $ptail = sp + 64 | 0;
 $xg = sp + 56 | 0;
 $beta = sp + 48 | 0;
 $dP = sp + 40 | 0;
 $phi = sp + 32 | 0;
 $n = sp + 104 | 0;
 $lambda = sp + 24 | 0;
 $step0 = sp + 16 | 0;
 $step1 = sp + 8 | 0;
 $step = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $nu;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = inf;
  $154 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$154;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = -inf;
  $154 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$154;
 }
 if (+HEAPF64[$2 >> 3] == 1.0) {
  HEAPF64[$x >> 3] = +Math_tan(+((+HEAPF64[$1 >> 3] - .5) * 3.141592653589793));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $154 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$154;
 }
 $16 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$2 >> 3] == 2.0) {
  HEAPF64[$x >> 3] = (2.0 * $16 - 1.0) / +Math_sqrt(+(+HEAPF64[$1 >> 3] * 2.0 * (1.0 - +HEAPF64[$1 >> 3])));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $154 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$154;
 }
 $28 = +HEAPF64[$1 >> 3];
 if ($16 < .5) $30 = $28; else $30 = 1.0 - $28;
 HEAPF64[$ptail >> 3] = $30;
 $34 = +Math_sqrt(+(+HEAPF64[$2 >> 3] * 3.141592653589793 / 2.0));
 if ($34 * +HEAPF64[$ptail >> 3] > +Math_pow(.05, +(+HEAPF64[$2 >> 3] / 2.0))) {
  HEAPF64[$xg >> 3] = +_gsl_cdf_ugaussian_Pinv(+HEAPF64[$1 >> 3]);
  HEAPF64[$x >> 3] = +_inv_cornish_fisher(+HEAPF64[$xg >> 3], +HEAPF64[$2 >> 3]);
 } else {
  HEAPF64[$beta >> 3] = +_gsl_sf_beta(.5, +HEAPF64[$2 >> 3] / 2.0);
  $52 = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
  if (+HEAPF64[$1 >> 3] < .5) HEAPF64[$x >> 3] = -$52 * +Math_pow(+(+HEAPF64[$beta >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$1 >> 3]), +(-1.0 / +HEAPF64[$2 >> 3])); else HEAPF64[$x >> 3] = $52 * +Math_pow(+(+HEAPF64[$beta >> 3] * +HEAPF64[$2 >> 3] * (1.0 - +HEAPF64[$1 >> 3])), +(-1.0 / +HEAPF64[$2 >> 3]));
  $79 = +Math_sqrt(+(+HEAPF64[$2 >> 3] / (+HEAPF64[$x >> 3] * +HEAPF64[$x >> 3]) + 1.0));
  HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] / $79;
 }
 HEAP32[$n >> 2] = 0;
 do {
  $82 = +HEAPF64[$1 >> 3];
  HEAPF64[$dP >> 3] = $82 - +_gsl_cdf_tdist_P(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3]);
  HEAPF64[$phi >> 3] = +_gsl_ran_tdist_pdf(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3]);
  if (+HEAPF64[$dP >> 3] == 0.0) break;
  $92 = HEAP32[$n >> 2] | 0;
  HEAP32[$n >> 2] = $92 + 1;
  if ($92 >>> 0 > 32) break;
  HEAPF64[$lambda >> 3] = +HEAPF64[$dP >> 3] / +HEAPF64[$phi >> 3];
  HEAPF64[$step0 >> 3] = +HEAPF64[$lambda >> 3];
  HEAPF64[$step1 >> 3] = (+HEAPF64[$2 >> 3] + 1.0) * +HEAPF64[$x >> 3] / (+HEAPF64[$x >> 3] * +HEAPF64[$x >> 3] + +HEAPF64[$2 >> 3]) * (+HEAPF64[$lambda >> 3] * +HEAPF64[$lambda >> 3] / 4.0);
  HEAPF64[$step >> 3] = +HEAPF64[$step0 >> 3];
  $116 = +Math_abs(+(+HEAPF64[$step1 >> 3]));
  if ($116 < +Math_abs(+(+HEAPF64[$step0 >> 3]))) HEAPF64[$step >> 3] = +HEAPF64[$step >> 3] + +HEAPF64[$step1 >> 3];
  if (+HEAPF64[$1 >> 3] > .5) if (+HEAPF64[$x >> 3] + +HEAPF64[$step >> 3] < 0.0) HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] / 2.0; else label = 25; else label = 25;
  do if ((label | 0) == 25) {
   label = 0;
   if (+HEAPF64[$1 >> 3] < .5) if (+HEAPF64[$x >> 3] + +HEAPF64[$step >> 3] > 0.0) {
    HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] / 2.0;
    break;
   }
   HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] + +HEAPF64[$step >> 3];
  } while (0);
  $143 = +Math_abs(+(+HEAPF64[$step >> 3]));
 } while ($143 > +Math_abs(+(+HEAPF64[$x >> 3])) * 1.0e-10);
 $149 = +Math_abs(+(+HEAPF64[$dP >> 3]));
 if ($149 > +HEAPF64[$1 >> 3] * 1.4901161193847656e-8) {
  _gsl_error(1344, 1376, 139, 5);
  HEAPF64[$0 >> 3] = nan;
  $154 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$154;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $154 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$154;
 }
 return 0.0;
}
function _gsl_sf_debye_3_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $104 = 0.0, $125 = 0.0, $149 = 0, $2 = 0, $26 = 0.0, $45 = 0.0, $c = 0, $ex = 0, $i = 0, $nexp = 0, $rk = 0, $sum = 0, $sum1 = 0, $t = 0, $x3 = 0, $xk = 0, $xk_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 112 | 0;
 $t = sp + 72 | 0;
 $c = sp + 56 | 0;
 $nexp = sp + 108 | 0;
 $ex = sp + 48 | 0;
 $xk = sp + 40 | 0;
 $rk = sp + 32 | 0;
 $sum = sp + 24 | 0;
 $i = sp + 104 | 0;
 $xk_inv = sp + 16 | 0;
 $x3 = sp + 8 | 0;
 $sum1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 88 >> 3] = 19.481818206800487;
 HEAPF64[sp + 80 >> 3] = 708.3964185322641;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(28032, 28048, 311, 1);
  HEAP32[$0 >> 2] = 1;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.2146848510894035e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - 3.0 * $10 / 8.0 + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 20.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 $26 = +HEAPF64[$1 >> 3];
 if ($10 <= 4.0) {
  HEAPF64[$t >> 3] = $26 * +HEAPF64[$1 >> 3] / 8.0 - 1.0;
  _cheb_eval_e269(28904, +HEAPF64[$t >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] - +HEAPF64[$1 >> 3] * .375;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c + 8 >> 3] + +HEAPF64[$1 >> 3] * 8.326672684688674e-17;
  HEAP32[$0 >> 2] = 0;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 $45 = +HEAPF64[$1 >> 3];
 if ($26 < 35.350506208557206) {
  HEAP32[$nexp >> 2] = ~~+Math_floor(+(708.3964185322641 / $45));
  HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$xk >> 3] = +(HEAP32[$nexp >> 2] | 0) * +HEAPF64[$1 >> 3];
  HEAPF64[$rk >> 3] = +(HEAP32[$nexp >> 2] | 0);
  HEAPF64[$sum >> 3] = 0.0;
  HEAP32[$i >> 2] = HEAP32[$nexp >> 2];
  while (1) {
   if ((HEAP32[$i >> 2] | 0) < 1) break;
   HEAPF64[$xk_inv >> 3] = 1.0 / +HEAPF64[$xk >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] * +HEAPF64[$ex >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + (((+HEAPF64[$xk_inv >> 3] * 6.0 + 6.0) * +HEAPF64[$xk_inv >> 3] + 3.0) * +HEAPF64[$xk_inv >> 3] + 1.0) / +HEAPF64[$rk >> 3];
   HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] - 1.0;
   HEAPF64[$xk >> 3] = +HEAPF64[$xk >> 3] - +HEAPF64[$1 >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 19.481818206800487 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - +HEAPF64[$sum >> 3] * 3.0 * +HEAPF64[$ex >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 $104 = +HEAPF64[$1 >> 3];
 if ($45 < 708.3964185322641) {
  HEAPF64[$x3 >> 3] = $104 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$sum1 >> 3] = +HEAPF64[$1 >> 3] * 6.0 + 6.0 + +HEAPF64[$1 >> 3] * 3.0 * +HEAPF64[$1 >> 3] + +HEAPF64[$x3 >> 3];
  $125 = 19.481818206800487 - +HEAPF64[$sum1 >> 3] * 3.0 * +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $125 / +HEAPF64[$x3 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = 19.481818206800487 / $104 / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
 if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(28056, 28048, 354, 15);
  HEAP32[$0 >> 2] = 15;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $149 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $149 | 0;
 }
 return 0;
}
function _gsl_sf_legendre_Plm_array($lmax, $m, $x, $result_array) {
 $lmax = $lmax | 0;
 $m = $m | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $136 = 0, $2 = 0, $21 = 0.0, $3 = 0, $30 = 0.0, $36 = 0.0, $4 = 0, $89 = 0.0, $dif = 0, $ell = 0, $ell1 = 0, $exp_check = 0, $p_ell = 0, $p_ellm1 = 0, $p_ellm2 = 0, $p_mm = 0, $p_mmp1 = 0, $sum = 0, $t_d = 0, $t_s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 100 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 96 | 0;
 $dif = sp + 72 | 0;
 $sum = sp + 64 | 0;
 $t_d = sp + 56 | 0;
 $t_s = sp + 48 | 0;
 $exp_check = sp + 40 | 0;
 $ell = sp + 92 | 0;
 $p_mm = sp + 32 | 0;
 $p_mmp1 = sp + 24 | 0;
 $p_ellm2 = sp + 16 | 0;
 $p_ellm1 = sp + 8 | 0;
 $p_ell = sp;
 $ell1 = sp + 88 | 0;
 HEAP32[$1 >> 2] = $lmax;
 HEAP32[$2 >> 2] = $m;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 HEAPF64[$dif >> 3] = +((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0);
 HEAPF64[$sum >> 3] = +((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0);
 if (+HEAPF64[$dif >> 3] == 0.0) $21 = 0.0; else $21 = +HEAPF64[$dif >> 3] * .5 * (+Math_log(+(+HEAPF64[$dif >> 3])) - 1.0);
 HEAPF64[$t_d >> 3] = $21;
 if (+HEAPF64[$dif >> 3] == 0.0) $30 = 0.0; else $30 = +HEAPF64[$sum >> 3] * .5 * (+Math_log(+(+HEAPF64[$sum >> 3])) - 1.0);
 HEAPF64[$t_s >> 3] = $30;
 $36 = +Math_log(+(+(HEAP32[$1 >> 2] | 0) * 2.0 + 1.0)) * .5;
 HEAPF64[$exp_check >> 3] = $36 + +HEAPF64[$t_d >> 3] - +HEAPF64[$t_s >> 3];
 if ((HEAP32[$2 >> 2] | 0) >= 0) if ((HEAP32[$1 >> 2] | 0) >= (HEAP32[$2 >> 2] | 0)) if (!(+HEAPF64[$3 >> 3] < -1.0 | +HEAPF64[$3 >> 3] > 1.0)) {
  if ((HEAP32[$2 >> 2] | 0) > 0) if (+HEAPF64[$3 >> 3] == 1.0 | +HEAPF64[$3 >> 3] == -1.0) {
   HEAP32[$ell >> 2] = HEAP32[$2 >> 2];
   while (1) {
    if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = 0.0;
    HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
   }
   HEAP32[$0 >> 2] = 0;
   $136 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $136 | 0;
  }
  if (+HEAPF64[$exp_check >> 3] < -698.3964185322641) {
   _gsl_error(53528, 53512, 386, 16);
   HEAP32[$0 >> 2] = 16;
   $136 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $136 | 0;
  }
  HEAPF64[$p_mm >> 3] = +_legendre_Pmm(HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3]);
  HEAPF64[$p_mmp1 >> 3] = +HEAPF64[$3 >> 3] * (+(HEAP32[$2 >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$p_mm >> 3];
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$p_mm >> 3];
   HEAP32[$0 >> 2] = 0;
   $136 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $136 | 0;
  }
  $89 = +HEAPF64[$p_mm >> 3];
  if ((HEAP32[$1 >> 2] | 0) == ((HEAP32[$2 >> 2] | 0) + 1 | 0)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = $89;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$p_mmp1 >> 3];
   HEAP32[$0 >> 2] = 0;
   $136 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $136 | 0;
  }
  HEAPF64[$p_ellm2 >> 3] = $89;
  HEAPF64[$p_ellm1 >> 3] = +HEAPF64[$p_mmp1 >> 3];
  HEAPF64[$p_ell >> 3] = 0.0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$p_mm >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$p_mmp1 >> 3];
  HEAP32[$ell1 >> 2] = (HEAP32[$2 >> 2] | 0) + 2;
  while (1) {
   if ((HEAP32[$ell1 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$p_ell >> 3] = (+HEAPF64[$3 >> 3] * (+(HEAP32[$ell1 >> 2] | 0) * 2.0 - 1.0) * +HEAPF64[$p_ellm1 >> 3] - +((HEAP32[$ell1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) - 1 | 0) * +HEAPF64[$p_ellm2 >> 3]) / +((HEAP32[$ell1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0);
   HEAPF64[$p_ellm2 >> 3] = +HEAPF64[$p_ellm1 >> 3];
   HEAPF64[$p_ellm1 >> 3] = +HEAPF64[$p_ell >> 3];
   HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$ell1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) << 3) >> 3] = +HEAPF64[$p_ell >> 3];
   HEAP32[$ell1 >> 2] = (HEAP32[$ell1 >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = 0;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 _gsl_error(53496, 53512, 377, 1);
 HEAP32[$0 >> 2] = 1;
 $136 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $136 | 0;
}
function _gsl_sf_bessel_J_CF1($nu, $x, $ratio, $sgn) {
 $nu = +$nu;
 $x = +$x;
 $ratio = $ratio | 0;
 $sgn = $sgn | 0;
 var $0 = 0, $1 = 0, $123 = 0, $2 = 0, $3 = 0, $4 = 0, $An = 0, $Anm1 = 0, $Anm2 = 0, $Bn = 0, $Bnm1 = 0, $Bnm2 = 0, $a1 = 0, $an = 0, $del = 0, $dn = 0, $fn = 0, $n = 0, $old_fn = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 152 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 148 | 0;
 $4 = sp + 144 | 0;
 $n = sp + 136 | 0;
 $Anm2 = sp + 96 | 0;
 $Bnm2 = sp + 88 | 0;
 $Anm1 = sp + 80 | 0;
 $Bnm1 = sp + 72 | 0;
 $a1 = sp + 64 | 0;
 $An = sp + 56 | 0;
 $Bn = sp + 48 | 0;
 $an = sp + 40 | 0;
 $fn = sp + 32 | 0;
 $dn = sp + 24 | 0;
 $s = sp + 16 | 0;
 $old_fn = sp + 8 | 0;
 $del = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $ratio;
 HEAP32[$4 >> 2] = $sgn;
 HEAPF64[sp + 112 >> 3] = 1.3407807929942596e+154;
 HEAPF64[sp + 104 >> 3] = 1.4916681462400413e-154;
 HEAP32[sp + 140 >> 2] = 1e4;
 HEAP32[$n >> 2] = 1;
 HEAPF64[$Anm2 >> 3] = 1.0;
 HEAPF64[$Bnm2 >> 3] = 0.0;
 HEAPF64[$Anm1 >> 3] = 0.0;
 HEAPF64[$Bnm1 >> 3] = 1.0;
 HEAPF64[$a1 >> 3] = +HEAPF64[$2 >> 3] / ((+HEAPF64[$1 >> 3] + 1.0) * 2.0);
 HEAPF64[$An >> 3] = +HEAPF64[$Anm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Anm2 >> 3];
 HEAPF64[$Bn >> 3] = +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Bnm2 >> 3];
 HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
 HEAPF64[$dn >> 3] = +HEAPF64[$a1 >> 3];
 HEAPF64[$s >> 3] = 1.0;
 do {
  if ((HEAP32[$n >> 2] | 0) >= 1e4) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm1 >> 3];
  HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm1 >> 3];
  HEAPF64[$Anm1 >> 3] = +HEAPF64[$An >> 3];
  HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bn >> 3];
  HEAPF64[$an >> 3] = -+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / ((+HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0) - 1.0) * 4.0 * (+HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0)));
  HEAPF64[$An >> 3] = +HEAPF64[$Anm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Anm2 >> 3];
  HEAPF64[$Bn >> 3] = +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Bnm2 >> 3];
  do if (+Math_abs(+(+HEAPF64[$An >> 3])) > 1.3407807929942596e+154) label = 5; else if (+Math_abs(+(+HEAPF64[$Bn >> 3])) > 1.3407807929942596e+154) label = 5; else {
   if (!(+Math_abs(+(+HEAPF64[$An >> 3])) < 1.4916681462400413e-154)) if (!(+Math_abs(+(+HEAPF64[$Bn >> 3])) < 1.4916681462400413e-154)) break;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] / 1.4916681462400413e-154;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] / 1.4916681462400413e-154;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] / 1.4916681462400413e-154;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] / 1.4916681462400413e-154;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] / 1.4916681462400413e-154;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] / 1.4916681462400413e-154;
  } while (0);
  if ((label | 0) == 5) {
   label = 0;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] / 1.3407807929942596e+154;
  }
  HEAPF64[$old_fn >> 3] = +HEAPF64[$fn >> 3];
  HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
  HEAPF64[$del >> 3] = +HEAPF64[$old_fn >> 3] / +HEAPF64[$fn >> 3];
  HEAPF64[$dn >> 3] = 1.0 / ((+HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0)) * 2.0 / +HEAPF64[$2 >> 3] - +HEAPF64[$dn >> 3]);
  if (+HEAPF64[$dn >> 3] < 0.0) HEAPF64[$s >> 3] = -+HEAPF64[$s >> 3];
 } while (!(+Math_abs(+(+HEAPF64[$del >> 3] - 1.0)) < 4.440892098500626e-16));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$fn >> 3];
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$s >> 3];
 if ((HEAP32[$n >> 2] | 0) >= 1e4) {
  _gsl_error(10696, 10680, 584, 11);
  HEAP32[$0 >> 2] = 11;
  $123 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $123 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $123 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $123 | 0;
 }
 return 0;
}
function _olver_A1($z, $abs_zeta, $err) {
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 $err = $err | 0;
 var $0 = 0, $1 = 0, $141 = 0.0, $144 = 0.0, $148 = 0.0, $155 = 0.0, $2 = 0, $3 = 0, $49 = 0.0, $52 = 0.0, $56 = 0.0, $6 = 0.0, $64 = 0.0, $92 = 0.0, $a = 0, $rz = 0, $rz2 = 0, $sum = 0, $t = 0, $t1 = 0, $t2 = 0, $t23 = 0, $term1 = 0, $term14 = 0, $term2 = 0, $term25 = 0, $term3 = 0, $term36 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 200 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 184 | 0;
 $3 = sp + 208 | 0;
 $t = sp + 176 | 0;
 $rz = sp + 168 | 0;
 $t2 = sp + 160 | 0;
 $term1 = sp + 152 | 0;
 $term2 = sp + 144 | 0;
 $term3 = sp + 136 | 0;
 $a = sp + 128 | 0;
 $sum = sp + 48 | 0;
 $t1 = sp + 40 | 0;
 $rz2 = sp + 32 | 0;
 $t23 = sp + 24 | 0;
 $term14 = sp + 16 | 0;
 $term25 = sp + 8 | 0;
 $term36 = sp;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[$2 >> 3] = $abs_zeta;
 HEAP32[$3 >> 2] = $err;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .98) {
  HEAPF64[$t >> 3] = 1.0 / +Math_sqrt(+(1.0 - $6 * +HEAPF64[$1 >> 3]));
  HEAPF64[$rz >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$t2 >> 3] = +HEAPF64[$t >> 3] * +HEAPF64[$t >> 3];
  HEAPF64[$term1 >> 3] = +HEAPF64[$t2 >> 3] * (81.0 - +HEAPF64[$t2 >> 3] * 462.0 + +HEAPF64[$t2 >> 3] * 385.0 * +HEAPF64[$t2 >> 3]) / 1152.0;
  HEAPF64[$term2 >> 3] = -455.0 / (+HEAPF64[$2 >> 3] * 4608.0 * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
  HEAPF64[$term3 >> 3] = +HEAPF64[$t >> 3] * 7.0 * (+HEAPF64[$t2 >> 3] * 5.0 + -3.0) / (+HEAPF64[$rz >> 3] * 1152.0 * +HEAPF64[$rz >> 3] * +HEAPF64[$rz >> 3]);
  $49 = +Math_abs(+(+HEAPF64[$term1 >> 3]));
  $52 = $49 + +Math_abs(+(+HEAPF64[$term2 >> 3]));
  $56 = ($52 + +Math_abs(+(+HEAPF64[$term3 >> 3]))) * 4.440892098500626e-16;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $56;
  HEAPF64[$0 >> 3] = +HEAPF64[$term1 >> 3] + +HEAPF64[$term2 >> 3] + +HEAPF64[$term3 >> 3];
  $155 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$155;
 }
 $64 = +HEAPF64[$1 >> 3];
 if ($6 < 1.02) {
  HEAPF64[$a >> 3] = 1.0 - $64;
  HEAPF64[sp + 120 >> 3] = -.0044444444444444444;
  HEAPF64[sp + 112 >> 3] = -.001844155844155844;
  HEAPF64[sp + 104 >> 3] = .0005681207681207681;
  HEAPF64[sp + 96 >> 3] = .001681378656616752;
  HEAPF64[sp + 88 >> 3] = .0018674404213900012;
  HEAPF64[sp + 80 >> 3] = .0016133010583374782;
  HEAPF64[sp + 72 >> 3] = .0012317731222062582;
  HEAPF64[sp + 64 >> 3] = .0008733471100737757;
  HEAPF64[sp + 56 >> 3] = .0005900494245535325;
  HEAPF64[$sum >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * .0005900494245535325 + .0008733471100737757) + .0012317731222062582) + .0016133010583374782) + .0018674404213900012) + .001681378656616752) + .0005681207681207681) + -.001844155844155844) + -.0044444444444444444;
  $92 = +Math_abs(+(+HEAPF64[$sum >> 3])) * 4.440892098500626e-16;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $92;
  HEAPF64[$0 >> 3] = +HEAPF64[$sum >> 3];
  $155 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$155;
 } else {
  HEAPF64[$t1 >> 3] = 1.0 / ($64 * +Math_sqrt(+(1.0 - 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]))));
  HEAPF64[$rz2 >> 3] = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$t23 >> 3] = +HEAPF64[$t1 >> 3] * +HEAPF64[$t1 >> 3];
  HEAPF64[$term14 >> 3] = -+HEAPF64[$t23 >> 3] * (+HEAPF64[$t23 >> 3] * 462.0 + 81.0 + +HEAPF64[$t23 >> 3] * 385.0 * +HEAPF64[$t23 >> 3]) / 1152.0;
  HEAPF64[$term25 >> 3] = 455.0 / (+HEAPF64[$2 >> 3] * 4608.0 * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
  HEAPF64[$term36 >> 3] = +HEAPF64[$t1 >> 3] * -7.0 * (+HEAPF64[$t23 >> 3] * 5.0 + 3.0) / (+HEAPF64[$rz2 >> 3] * 1152.0 * +HEAPF64[$rz2 >> 3] * +HEAPF64[$rz2 >> 3]);
  $141 = +Math_abs(+(+HEAPF64[$term14 >> 3]));
  $144 = $141 + +Math_abs(+(+HEAPF64[$term25 >> 3]));
  $148 = ($144 + +Math_abs(+(+HEAPF64[$term36 >> 3]))) * 4.440892098500626e-16;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $148;
  HEAPF64[$0 >> 3] = +HEAPF64[$term14 >> 3] + +HEAPF64[$term25 >> 3] + +HEAPF64[$term36 >> 3];
  $155 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$155;
 }
 return 0.0;
}
function _exprel_n_CF($N, $x, $result) {
 $N = +$N;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $129 = 0.0, $134 = 0, $2 = 0, $3 = 0, $71 = 0.0, $An = 0, $Anm1 = 0, $Anm2 = 0, $Bn = 0, $Bnm1 = 0, $Bnm2 = 0, $a1 = 0, $a2 = 0, $an = 0, $b1 = 0, $b2 = 0, $bn = 0, $del = 0, $fn = 0, $n = 0, $old_fn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 156 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 128 | 0;
 $3 = sp + 152 | 0;
 $n = sp + 144 | 0;
 $Anm2 = sp + 112 | 0;
 $Bnm2 = sp + 104 | 0;
 $Anm1 = sp + 96 | 0;
 $Bnm1 = sp + 88 | 0;
 $a1 = sp + 80 | 0;
 $b1 = sp + 72 | 0;
 $a2 = sp + 64 | 0;
 $b2 = sp + 56 | 0;
 $an = sp + 48 | 0;
 $bn = sp + 40 | 0;
 $fn = sp + 32 | 0;
 $An = sp + 24 | 0;
 $Bn = sp + 16 | 0;
 $old_fn = sp + 8 | 0;
 $del = sp;
 HEAPF64[$1 >> 3] = $N;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[sp + 120 >> 3] = 1.3407807929942596e+154;
 HEAP32[sp + 148 >> 2] = 5e3;
 HEAP32[$n >> 2] = 1;
 HEAPF64[$Anm2 >> 3] = 1.0;
 HEAPF64[$Bnm2 >> 3] = 0.0;
 HEAPF64[$Anm1 >> 3] = 0.0;
 HEAPF64[$Bnm1 >> 3] = 1.0;
 HEAPF64[$a1 >> 3] = 1.0;
 HEAPF64[$b1 >> 3] = 1.0;
 HEAPF64[$a2 >> 3] = -+HEAPF64[$2 >> 3];
 HEAPF64[$b2 >> 3] = +HEAPF64[$1 >> 3] + 1.0;
 HEAPF64[$An >> 3] = +HEAPF64[$b1 >> 3] * +HEAPF64[$Anm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Anm2 >> 3];
 HEAPF64[$Bn >> 3] = +HEAPF64[$b1 >> 3] * +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Bnm2 >> 3];
 HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm1 >> 3];
 HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm1 >> 3];
 HEAPF64[$Anm1 >> 3] = +HEAPF64[$An >> 3];
 HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bn >> 3];
 HEAPF64[$An >> 3] = +HEAPF64[$b2 >> 3] * +HEAPF64[$Anm1 >> 3] + +HEAPF64[$a2 >> 3] * +HEAPF64[$Anm2 >> 3];
 HEAPF64[$Bn >> 3] = +HEAPF64[$b2 >> 3] * +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$a2 >> 3] * +HEAPF64[$Bnm2 >> 3];
 HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
 do {
  if ((HEAP32[$n >> 2] | 0) >= 5e3) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm1 >> 3];
  HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm1 >> 3];
  HEAPF64[$Anm1 >> 3] = +HEAPF64[$An >> 3];
  HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bn >> 3];
  if (HEAP32[$n >> 2] & 1) $71 = +(((HEAP32[$n >> 2] | 0) - 1 | 0) / 2 | 0 | 0) * +HEAPF64[$2 >> 3]; else $71 = -(+HEAPF64[$1 >> 3] + +((HEAP32[$n >> 2] | 0) / 2 | 0 | 0) - 1.0) * +HEAPF64[$2 >> 3];
  HEAPF64[$an >> 3] = $71;
  HEAPF64[$bn >> 3] = +HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0) - 1.0;
  HEAPF64[$An >> 3] = +HEAPF64[$bn >> 3] * +HEAPF64[$Anm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Anm2 >> 3];
  HEAPF64[$Bn >> 3] = +HEAPF64[$bn >> 3] * +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Bnm2 >> 3];
  if (+Math_abs(+(+HEAPF64[$An >> 3])) > 1.3407807929942596e+154) label = 8; else if (+Math_abs(+(+HEAPF64[$Bn >> 3])) > 1.3407807929942596e+154) label = 8;
  if ((label | 0) == 8) {
   label = 0;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] / 1.3407807929942596e+154;
  }
  HEAPF64[$old_fn >> 3] = +HEAPF64[$fn >> 3];
  HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
  HEAPF64[$del >> 3] = +HEAPF64[$old_fn >> 3] / +HEAPF64[$fn >> 3];
 } while (!(+Math_abs(+(+HEAPF64[$del >> 3] - 1.0)) < 4.440892098500626e-16));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$fn >> 3];
 $129 = (+(HEAP32[$n >> 2] | 0) + 1.0) * 4.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$fn >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $129;
 if ((HEAP32[$n >> 2] | 0) == 5e3) {
  _gsl_error(31272, 31024, 99, 11);
  HEAP32[$0 >> 2] = 11;
  $134 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $134 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $134 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $134 | 0;
 }
 return 0;
}
function _gsl_sf_ellint_RC_e($x, $y, $mode, $result) {
 $x = +$x;
 $y = +$y;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $101 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $46 = 0.0, $51 = 0.0, $54 = 0.0, $89 = 0.0, $95 = 0.0, $c1 = 0, $c2 = 0, $errtol = 0, $goal = 0, $lamda = 0, $mu = 0, $n = 0, $prec = 0, $s = 0, $sn = 0, $xn = 0, $yn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 128 | 0;
 $4 = sp + 124 | 0;
 $goal = sp + 120 | 0;
 $errtol = sp + 72 | 0;
 $prec = sp + 64 | 0;
 $c1 = sp + 56 | 0;
 $c2 = sp + 48 | 0;
 $xn = sp + 40 | 0;
 $yn = sp + 32 | 0;
 $mu = sp + 24 | 0;
 $sn = sp + 16 | 0;
 $lamda = sp + 8 | 0;
 $s = sp;
 $n = sp + 112 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $mode;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[sp + 88 >> 3] = 1.1125369292536007e-307;
 HEAPF64[sp + 80 >> 3] = 3.5953862697246315e+307;
 HEAP32[$goal >> 2] = _GSL_MODE_PREC(HEAP32[$3 >> 2] | 0) | 0;
 HEAPF64[$errtol >> 3] = (HEAP32[$goal >> 2] | 0) == 0 ? .001 : .03;
 $11 = _gsl_prec_eps + (HEAP32[$goal >> 2] << 3) | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[$11 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[$11 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[$11 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[$11 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[$11 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[$11 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[$11 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[$11 + 7 >> 0];
 HEAPF64[$prec >> 3] = +HEAPF64[tempDoublePtr >> 3];
 HEAP32[sp + 116 >> 2] = 1e4;
 if (!(+HEAPF64[$1 >> 3] < 0.0)) if (!(+HEAPF64[$2 >> 3] < 0.0)) if (!(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] < 1.1125369292536007e-307)) {
  if (!((+HEAPF64[$1 >> 3] > +HEAPF64[$2 >> 3] ? +HEAPF64[$1 >> 3] : +HEAPF64[$2 >> 3]) < 3.5953862697246315e+307)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
   _gsl_error(29376, 29392, 111, 1);
   HEAP32[$0 >> 2] = 1;
   $101 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $101 | 0;
  }
  HEAPF64[$c1 >> 3] = .14285714285714285;
  HEAPF64[$c2 >> 3] = .4090909090909091;
  HEAPF64[$xn >> 3] = +HEAPF64[$1 >> 3];
  HEAPF64[$yn >> 3] = +HEAPF64[$2 >> 3];
  HEAP32[$n >> 2] = 0;
  while (1) {
   HEAPF64[$mu >> 3] = (+HEAPF64[$xn >> 3] + +HEAPF64[$yn >> 3] + +HEAPF64[$yn >> 3]) / 3.0;
   HEAPF64[$sn >> 3] = (+HEAPF64[$yn >> 3] + +HEAPF64[$mu >> 3]) / +HEAPF64[$mu >> 3] - 2.0;
   $46 = +Math_abs(+(+HEAPF64[$sn >> 3]));
   if ($46 < +HEAPF64[$errtol >> 3]) {
    label = 10;
    break;
   }
   $51 = +Math_sqrt(+(+HEAPF64[$xn >> 3])) * 2.0;
   $54 = $51 * +Math_sqrt(+(+HEAPF64[$yn >> 3]));
   HEAPF64[$lamda >> 3] = $54 + +HEAPF64[$yn >> 3];
   HEAPF64[$xn >> 3] = (+HEAPF64[$xn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
   HEAPF64[$yn >> 3] = (+HEAPF64[$yn >> 3] + +HEAPF64[$lamda >> 3]) * .25;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
   if ((HEAP32[$n >> 2] | 0) == 1e4) {
    label = 9;
    break;
   }
  }
  if ((label | 0) == 9) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
   _gsl_error(29408, 29392, 102, 11);
   HEAP32[$0 >> 2] = 11;
   $101 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $101 | 0;
  } else if ((label | 0) == 10) {
   HEAPF64[$s >> 3] = +HEAPF64[$sn >> 3] * +HEAPF64[$sn >> 3] * (+HEAPF64[$sn >> 3] * (+HEAPF64[$sn >> 3] * (+HEAPF64[$sn >> 3] * .4090909090909091 + .375) + .14285714285714285) + .3);
   $89 = (+HEAPF64[$s >> 3] + 1.0) / +Math_sqrt(+(+HEAPF64[$mu >> 3]));
   HEAPF64[HEAP32[$4 >> 2] >> 3] = $89;
   $95 = +HEAPF64[$prec >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $95;
   HEAP32[$0 >> 2] = 0;
   $101 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $101 | 0;
  }
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(29376, 29392, 84, 1);
 HEAP32[$0 >> 2] = 1;
 $101 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $101 | 0;
}
function _laguerre_large_n($n, $alpha, $x, $result) {
 $n = $n | 0;
 $alpha = +$alpha;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $103 = 0.0, $118 = 0.0, $133 = 0.0, $135 = 0, $148 = 0, $2 = 0, $3 = 0, $65 = 0.0, $A1 = 0, $a = 0, $b = 0, $cos2th = 0, $eps = 0, $eta = 0, $lg_b = 0, $lnfact = 0, $lnpre_err = 0, $lnpre_val = 0, $phi1 = 0, $pre_h = 0, $pre_term1 = 0, $pre_term2 = 0, $ser_err = 0, $ser_term1 = 0, $ser_term2 = 0, $ser_val = 0, $sin2th = 0, $stat_e = 0, $stat_lf = 0, $stat_lg = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $0 = sp + 200 | 0;
 $1 = sp + 176 | 0;
 $2 = sp + 168 | 0;
 $3 = sp + 196 | 0;
 $a = sp + 160 | 0;
 $b = sp + 152 | 0;
 $eta = sp + 144 | 0;
 $cos2th = sp + 136 | 0;
 $sin2th = sp + 128 | 0;
 $eps = sp + 120 | 0;
 $pre_h = sp + 112 | 0;
 $lg_b = sp + 96 | 0;
 $lnfact = sp + 80 | 0;
 $stat_lg = sp + 192 | 0;
 $stat_lf = sp + 188 | 0;
 $pre_term1 = sp + 72 | 0;
 $pre_term2 = sp + 64 | 0;
 $lnpre_val = sp + 56 | 0;
 $lnpre_err = sp + 48 | 0;
 $phi1 = sp + 40 | 0;
 $ser_term1 = sp + 32 | 0;
 $A1 = sp + 24 | 0;
 $ser_term2 = sp + 16 | 0;
 $ser_val = sp + 8 | 0;
 $ser_err = sp;
 $stat_e = sp + 184 | 0;
 HEAP32[$0 >> 2] = $n;
 HEAPF64[$1 >> 3] = $alpha;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$a >> 3] = +(0 - (HEAP32[$0 >> 2] | 0) | 0);
 HEAPF64[$b >> 3] = +HEAPF64[$1 >> 3] + 1.0;
 HEAPF64[$eta >> 3] = +HEAPF64[$b >> 3] * 2.0 - +HEAPF64[$a >> 3] * 4.0;
 HEAPF64[$cos2th >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$eta >> 3];
 HEAPF64[$sin2th >> 3] = 1.0 - +HEAPF64[$cos2th >> 3];
 HEAPF64[$eps >> 3] = +Math_asin(+(+Math_sqrt(+(+HEAPF64[$cos2th >> 3]))));
 HEAPF64[$pre_h >> 3] = +HEAPF64[$eta >> 3] * 2.4674011002723395 * +HEAPF64[$eta >> 3] * +HEAPF64[$cos2th >> 3] * +HEAPF64[$sin2th >> 3];
 HEAP32[$stat_lg >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$b >> 3] + +(HEAP32[$0 >> 2] | 0), $lg_b) | 0;
 HEAP32[$stat_lf >> 2] = _gsl_sf_lnfact_e(HEAP32[$0 >> 2] | 0, $lnfact) | 0;
 HEAPF64[$pre_term1 >> 3] = (1.0 - +HEAPF64[$b >> 3]) * .5 * +Math_log(+(+HEAPF64[$2 >> 3] * .25 * +HEAPF64[$eta >> 3]));
 HEAPF64[$pre_term2 >> 3] = +Math_log(+(+HEAPF64[$pre_h >> 3])) * .25;
 HEAPF64[$lnpre_val >> 3] = +HEAPF64[$lg_b >> 3] - +HEAPF64[$lnfact >> 3] + +HEAPF64[$2 >> 3] * .5 + +HEAPF64[$pre_term1 >> 3] - +HEAPF64[$pre_term2 >> 3];
 $65 = +Math_abs(+(+HEAPF64[$pre_term1 >> 3]));
 HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lg_b + 8 >> 3] + +HEAPF64[$lnfact + 8 >> 3] + ($65 + +Math_abs(+(+HEAPF64[$pre_term2 >> 3]))) * 2.220446049250313e-16;
 HEAPF64[$phi1 >> 3] = +HEAPF64[$eta >> 3] * .25 * (+HEAPF64[$eps >> 3] * 2.0 + +Math_sin(+(+HEAPF64[$eps >> 3] * 2.0)));
 HEAPF64[$ser_term1 >> 3] = -+Math_sin(+(+HEAPF64[$phi1 >> 3]));
 HEAPF64[$A1 >> 3] = (5.0 / (+HEAPF64[$sin2th >> 3] * 4.0) + (+HEAPF64[$b >> 3] * 3.0 * +HEAPF64[$b >> 3] - +HEAPF64[$b >> 3] * 6.0 + 2.0) * +HEAPF64[$sin2th >> 3] - 1.0) * .08333333333333333;
 $103 = -+HEAPF64[$A1 >> 3] * +Math_cos(+(+HEAPF64[$phi1 >> 3]));
 HEAPF64[$ser_term2 >> 3] = $103 / (+HEAPF64[$eta >> 3] * .25 * +Math_sin(+(+HEAPF64[$eps >> 3] * 2.0)));
 HEAPF64[$ser_val >> 3] = +HEAPF64[$ser_term1 >> 3] + +HEAPF64[$ser_term2 >> 3];
 $118 = +Math_abs(+(+HEAPF64[$ser_term1 >> 3]));
 HEAPF64[$ser_err >> 3] = +HEAPF64[$ser_term2 >> 3] * +HEAPF64[$ser_term2 >> 3] + ($118 + +Math_abs(+(+HEAPF64[$ser_term2 >> 3]))) * 2.220446049250313e-16;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], +HEAPF64[$ser_val >> 3], +HEAPF64[$ser_err >> 3], HEAP32[$3 >> 2] | 0) | 0;
 $133 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.9802322387695312e-8;
 $135 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$135 >> 3] = +HEAPF64[$135 >> 3] + $133;
 if (HEAP32[$stat_e >> 2] | 0) {
  $148 = HEAP32[$stat_e >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 if (HEAP32[$stat_lf >> 2] | 0) {
  $148 = HEAP32[$stat_lf >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 } else {
  $148 = (HEAP32[$stat_lg >> 2] | 0) != 0 ? HEAP32[$stat_lg >> 2] | 0 : 0;
  STACKTOP = sp;
  return $148 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_Kn_scaled_e($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $104 = 0.0, $112 = 0.0, $118 = 0.0, $120 = 0, $130 = 0, $131 = 0, $18 = 0.0, $2 = 0, $3 = 0, $34 = 0, $35 = 0, $43 = 0.0, $47 = 0.0, $57 = 0.0, $65 = 0.0, $99 = 0.0, $b_j = 0, $b_jm1 = 0, $b_jp1 = 0, $j = 0, $r_b_j = 0, $r_b_jm1 = 0, $stat_0 = 0, $stat_1 = 0, $two_over_x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 92 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 84 | 0;
 $two_over_x = sp + 56 | 0;
 $r_b_jm1 = sp + 40 | 0;
 $r_b_j = sp + 24 | 0;
 $stat_0 = sp + 80 | 0;
 $stat_1 = sp + 76 | 0;
 $b_jm1 = sp + 16 | 0;
 $b_j = sp + 8 | 0;
 $b_jp1 = sp;
 $j = sp + 72 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$1 >> 2] = Math_abs(HEAP32[$1 >> 2] | 0) | 0;
 if (+HEAPF64[$2 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(13856, 13872, 109, 1);
  HEAP32[$0 >> 2] = 1;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$0 >> 2] = _gsl_sf_bessel_K0_scaled_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $18 = +HEAPF64[$2 >> 3];
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$0 >> 2] = _gsl_sf_bessel_K1_scaled_e($18, HEAP32[$3 >> 2] | 0) | 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 if ($18 <= 5.0) {
  HEAP32[$0 >> 2] = _bessel_Kn_scaled_small_x(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $34 = +HEAPF64[$2 >> 3] * 6055454452393343.0e-21 > +((Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) + 1 | 0) * .25;
 $35 = HEAP32[$1 >> 2] | 0;
 if ($34) {
  HEAP32[$0 >> 2] = _gsl_sf_bessel_Knu_scaled_asympx_e(+($35 | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $43 = .29 / +(Math_imul($35, HEAP32[$1 >> 2] | 0) | 0);
 $47 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0);
 $57 = +(Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0);
 if ($43 < .5 / ($47 + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3])) $65 = .29 / $57; else $65 = .5 / ($57 + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
 if ($65 < 6055454452393343.0e-21) {
  HEAP32[$0 >> 2] = _gsl_sf_bessel_Knu_scaled_asymp_unif_e(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 HEAPF64[$two_over_x >> 3] = 2.0 / +HEAPF64[$2 >> 3];
 HEAP32[$stat_0 >> 2] = _gsl_sf_bessel_K0_scaled_e(+HEAPF64[$2 >> 3], $r_b_jm1) | 0;
 HEAP32[$stat_1 >> 2] = _gsl_sf_bessel_K1_scaled_e(+HEAPF64[$2 >> 3], $r_b_j) | 0;
 HEAPF64[$b_jm1 >> 3] = +HEAPF64[$r_b_jm1 >> 3];
 HEAPF64[$b_j >> 3] = +HEAPF64[$r_b_j >> 3];
 HEAP32[$j >> 2] = 1;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[$b_jp1 >> 3] = +HEAPF64[$b_jm1 >> 3] + +(HEAP32[$j >> 2] | 0) * +HEAPF64[$two_over_x >> 3] * +HEAPF64[$b_j >> 3];
  HEAPF64[$b_jm1 >> 3] = +HEAPF64[$b_j >> 3];
  HEAPF64[$b_j >> 3] = +HEAPF64[$b_jp1 >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$b_j >> 3];
 $99 = +Math_abs(+(+HEAPF64[$b_j >> 3]));
 $104 = +Math_abs(+(+HEAPF64[$r_b_jm1 + 8 >> 3] / +HEAPF64[$r_b_jm1 >> 3]));
 $112 = +(HEAP32[$1 >> 2] | 0) * $99 * ($104 + +Math_abs(+(+HEAPF64[$r_b_j + 8 >> 3] / +HEAPF64[$r_b_j >> 3])));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $112;
 $118 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $120 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$120 >> 3] = +HEAPF64[$120 >> 3] + $118;
 if (HEAP32[$stat_0 >> 2] | 0) $130 = HEAP32[$stat_0 >> 2] | 0; else $130 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $130;
 $131 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $131 | 0;
}
function _gsl_sf_bessel_j2_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $102 = 0.0, $111 = 0.0, $113 = 0, $119 = 0.0, $121 = 0, $131 = 0, $132 = 0, $17 = 0.0, $2 = 0, $55 = 0.0, $85 = 0.0, $94 = 0.0, $ax = 0, $cos_result = 0, $cos_x = 0, $f = 0, $sin_result = 0, $sin_x = 0, $stat_cos = 0, $stat_sin = 0, $sum = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 172 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 168 | 0;
 $ax = sp + 144 | 0;
 $y = sp + 136 | 0;
 $sum = sp + 56 | 0;
 $cos_result = sp + 40 | 0;
 $sin_result = sp + 24 | 0;
 $stat_cos = sp + 164 | 0;
 $stat_sin = sp + 160 | 0;
 $cos_x = sp + 16 | 0;
 $sin_x = sp + 8 | 0;
 $f = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $132 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $132 | 0;
 }
 if (+HEAPF64[$ax >> 3] < 5.966672584960166e-154) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(15840, 15856, 119, 15);
  HEAP32[$0 >> 2] = 15;
  $132 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $132 | 0;
 }
 $17 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$ax >> 3] < 1.3) {
  HEAPF64[$y >> 3] = $17 * +HEAPF64[$1 >> 3];
  HEAPF64[sp + 128 >> 3] = -.07142857142857142;
  HEAPF64[sp + 120 >> 3] = .001984126984126984;
  HEAPF64[sp + 112 >> 3] = -30062530062530064.0e-21;
  HEAPF64[sp + 104 >> 3] = 2.8906278906278904e-7;
  HEAPF64[sp + 96 >> 3] = -1.9270852604185937e-9;
  HEAPF64[sp + 88 >> 3] = 9.44649637460095e-12;
  HEAPF64[sp + 80 >> 3] = -3.5513144265417105e-14;
  HEAPF64[sp + 72 >> 3] = 1.0569388174231281e-16;
  HEAPF64[sp + 64 >> 3] = -2.5529923126162515e-19;
  HEAPF64[$sum >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * -2.5529923126162515e-19 + 1.0569388174231281e-16) + -3.5513144265417105e-14) + 9.44649637460095e-12) + -1.9270852604185937e-9) + 2.8906278906278904e-7) + -30062530062530064.0e-21) + .001984126984126984) + -.07142857142857142) + 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$y >> 3] / 15.0 * +HEAPF64[$sum >> 3];
  $55 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $55;
  HEAP32[$0 >> 2] = 0;
  $132 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $132 | 0;
 }
 HEAP32[$stat_cos >> 2] = _gsl_sf_cos_e($17, $cos_result) | 0;
 HEAP32[$stat_sin >> 2] = _gsl_sf_sin_e(+HEAPF64[$1 >> 3], $sin_result) | 0;
 HEAPF64[$cos_x >> 3] = +HEAPF64[$cos_result >> 3];
 HEAPF64[$sin_x >> 3] = +HEAPF64[$sin_result >> 3];
 HEAPF64[$f >> 3] = 3.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - 1.0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$f >> 3] * +HEAPF64[$sin_x >> 3] - +HEAPF64[$cos_x >> 3] * 3.0 / +HEAPF64[$1 >> 3]) / +HEAPF64[$1 >> 3];
 $85 = +Math_abs(+(+HEAPF64[$f >> 3] * +HEAPF64[$sin_result + 8 >> 3] / +HEAPF64[$1 >> 3]));
 $94 = $85 + +Math_abs(+(+HEAPF64[$cos_result + 8 >> 3] * 3.0 / +HEAPF64[$1 >> 3] / +HEAPF64[$1 >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $94;
 $102 = +Math_abs(+(+HEAPF64[$f >> 3] * +HEAPF64[$sin_x >> 3] / +HEAPF64[$1 >> 3]));
 $111 = ($102 + +Math_abs(+(+HEAPF64[$cos_x >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]))) * 3.0) * 4.440892098500626e-16;
 $113 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$113 >> 3] = +HEAPF64[$113 >> 3] + $111;
 $119 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $121 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$121 >> 3] = +HEAPF64[$121 >> 3] + $119;
 if (HEAP32[$stat_cos >> 2] | 0) $131 = HEAP32[$stat_cos >> 2] | 0; else $131 = (HEAP32[$stat_sin >> 2] | 0) != 0 ? HEAP32[$stat_sin >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $131;
 $132 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $132 | 0;
}
function _gsl_sf_debye_2_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $114 = 0.0, $121 = 0.0, $137 = 0, $2 = 0, $25 = 0.0, $45 = 0.0, $96 = 0.0, $c = 0, $ex = 0, $i = 0, $nexp = 0, $rk = 0, $sum = 0, $sum1 = 0, $t = 0, $x2 = 0, $xk = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 104 | 0;
 $t = sp + 64 | 0;
 $c = sp + 48 | 0;
 $nexp = sp + 100 | 0;
 $ex = sp + 40 | 0;
 $xk = sp + 32 | 0;
 $rk = sp + 24 | 0;
 $sum = sp + 16 | 0;
 $i = sp + 96 | 0;
 $x2 = sp + 8 | 0;
 $sum1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 80 >> 3] = 4.808227612638377;
 HEAPF64[sp + 72 >> 3] = 708.3964185322641;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(28032, 28048, 255, 1);
  HEAP32[$0 >> 2] = 1;
  $137 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $137 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.2146848510894035e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - $10 / 3.0 + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 24.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $137 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $137 | 0;
 }
 $25 = +HEAPF64[$1 >> 3];
 if ($10 <= 4.0) {
  HEAPF64[$t >> 3] = $25 * +HEAPF64[$1 >> 3] / 8.0 - 1.0;
  _cheb_eval_e269(29080, +HEAPF64[$t >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] - +HEAPF64[$1 >> 3] / 3.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c + 8 >> 3] + +HEAPF64[$1 >> 3] * 2.220446049250313e-16 / 3.0;
  HEAP32[$0 >> 2] = 0;
  $137 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $137 | 0;
 }
 $45 = +HEAPF64[$1 >> 3];
 if ($25 < 35.350506208557206) {
  HEAP32[$nexp >> 2] = ~~+Math_floor(+(708.3964185322641 / $45));
  HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$xk >> 3] = +(HEAP32[$nexp >> 2] | 0) * +HEAPF64[$1 >> 3];
  HEAPF64[$rk >> 3] = +(HEAP32[$nexp >> 2] | 0);
  HEAPF64[$sum >> 3] = 0.0;
  HEAP32[$i >> 2] = HEAP32[$nexp >> 2];
  while (1) {
   if ((HEAP32[$i >> 2] | 0) < 1) break;
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] * +HEAPF64[$ex >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + (2.0 / +HEAPF64[$xk >> 3] + 1.0 + 2.0 / (+HEAPF64[$xk >> 3] * +HEAPF64[$xk >> 3])) / +HEAPF64[$rk >> 3];
   HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] - 1.0;
   HEAPF64[$xk >> 3] = +HEAPF64[$xk >> 3] - +HEAPF64[$1 >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 4.808227612638377 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - +HEAPF64[$sum >> 3] * 2.0 * +HEAPF64[$ex >> 3];
  $96 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
  HEAP32[$0 >> 2] = 0;
  $137 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $137 | 0;
 }
 $100 = +HEAPF64[$1 >> 3];
 if ($45 < 708.3964185322641) {
  HEAPF64[$x2 >> 3] = $100 * +HEAPF64[$1 >> 3];
  HEAPF64[$sum1 >> 3] = +HEAPF64[$1 >> 3] * 2.0 + 2.0 + +HEAPF64[$x2 >> 3];
  $114 = 4.808227612638377 - +HEAPF64[$sum1 >> 3] * 2.0 * +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $114 / +HEAPF64[$x2 >> 3];
  $121 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $121;
  HEAP32[$0 >> 2] = 0;
  $137 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $137 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = 4.808227612638377 / $100 / +HEAPF64[$1 >> 3];
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
 if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(28056, 28048, 297, 15);
  HEAP32[$0 >> 2] = 15;
  $137 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $137 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $137 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $137 | 0;
 }
 return 0;
}
function _conicalP_negmu_xlt1_CF1($mu, $ell, $tau, $x, $result) {
 $mu = +$mu;
 $ell = $ell | 0;
 $tau = +$tau;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $128 = 0.0, $131 = 0.0, $136 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0.0, $An = 0, $Anm1 = 0, $Anm2 = 0, $Bn = 0, $Bnm1 = 0, $Bnm2 = 0, $a1 = 0, $an = 0, $b1 = 0, $bn = 0, $del = 0, $fn = 0, $n = 0, $old_fn = 0, $xi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 160 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 156 | 0;
 $3 = sp + 128 | 0;
 $4 = sp + 120 | 0;
 $5 = sp + 152 | 0;
 $n = sp + 144 | 0;
 $xi = sp + 104 | 0;
 $Anm2 = sp + 96 | 0;
 $Bnm2 = sp + 88 | 0;
 $Anm1 = sp + 80 | 0;
 $Bnm1 = sp + 72 | 0;
 $a1 = sp + 64 | 0;
 $b1 = sp + 56 | 0;
 $An = sp + 48 | 0;
 $Bn = sp + 40 | 0;
 $an = sp + 32 | 0;
 $bn = sp + 24 | 0;
 $fn = sp + 16 | 0;
 $old_fn = sp + 8 | 0;
 $del = sp;
 HEAPF64[$1 >> 3] = $mu;
 HEAP32[$2 >> 2] = $ell;
 HEAPF64[$3 >> 3] = $tau;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[sp + 112 >> 3] = 1.3407807929942596e+154;
 HEAP32[sp + 148 >> 2] = 5e3;
 HEAP32[$n >> 2] = 1;
 $9 = +Math_sqrt(+(1.0 - +HEAPF64[$4 >> 3]));
 HEAPF64[$xi >> 3] = +HEAPF64[$4 >> 3] / ($9 * +Math_sqrt(+(+HEAPF64[$4 >> 3] + 1.0)));
 HEAPF64[$Anm2 >> 3] = 1.0;
 HEAPF64[$Bnm2 >> 3] = 0.0;
 HEAPF64[$Anm1 >> 3] = 0.0;
 HEAPF64[$Bnm1 >> 3] = 1.0;
 HEAPF64[$a1 >> 3] = 1.0;
 HEAPF64[$b1 >> 3] = (+HEAPF64[$1 >> 3] + +(HEAP32[$2 >> 2] | 0) + 1.0) * 2.0 * +HEAPF64[$xi >> 3];
 HEAPF64[$An >> 3] = +HEAPF64[$b1 >> 3] * +HEAPF64[$Anm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Anm2 >> 3];
 HEAPF64[$Bn >> 3] = +HEAPF64[$b1 >> 3] * +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Bnm2 >> 3];
 HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
 do {
  if ((HEAP32[$n >> 2] | 0) >= 5e3) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm1 >> 3];
  HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm1 >> 3];
  HEAPF64[$Anm1 >> 3] = +HEAPF64[$An >> 3];
  HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bn >> 3];
  HEAPF64[$an >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3] + (+HEAPF64[$1 >> 3] - .5 + +(HEAP32[$2 >> 2] | 0) + +(HEAP32[$n >> 2] | 0)) * (+HEAPF64[$1 >> 3] - .5 + +(HEAP32[$2 >> 2] | 0) + +(HEAP32[$n >> 2] | 0));
  HEAPF64[$bn >> 3] = (+(HEAP32[$2 >> 2] | 0) + +HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0)) * 2.0 * +HEAPF64[$xi >> 3];
  HEAPF64[$An >> 3] = +HEAPF64[$bn >> 3] * +HEAPF64[$Anm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Anm2 >> 3];
  HEAPF64[$Bn >> 3] = +HEAPF64[$bn >> 3] * +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Bnm2 >> 3];
  if (+Math_abs(+(+HEAPF64[$An >> 3])) > 1.3407807929942596e+154) label = 5; else if (+Math_abs(+(+HEAPF64[$Bn >> 3])) > 1.3407807929942596e+154) label = 5;
  if ((label | 0) == 5) {
   label = 0;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] / 1.3407807929942596e+154;
  }
  HEAPF64[$old_fn >> 3] = +HEAPF64[$fn >> 3];
  HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
  HEAPF64[$del >> 3] = +HEAPF64[$old_fn >> 3] / +HEAPF64[$fn >> 3];
 } while (!(+Math_abs(+(+HEAPF64[$del >> 3] - 1.0)) < 4.440892098500626e-16));
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$fn >> 3];
 $128 = (+Math_sqrt(+(+(HEAP32[$n >> 2] | 0))) + 1.0) * 8.881784197001252e-16;
 $131 = $128 * +Math_abs(+(+HEAPF64[$fn >> 3]));
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $131;
 if ((HEAP32[$n >> 2] | 0) >= 5e3) {
  _gsl_error(53488, 53184, 108, 11);
  HEAP32[$0 >> 2] = 11;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 return 0;
}
function _hyperg_1F1_renorm_b0($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $107 = 0.0, $125 = 0, $2 = 0, $3 = 0, $30 = 0.0, $40 = 0.0, $44 = 0.0, $54 = 0.0, $9 = 0.0, $I1_scaled = 0, $J1 = 0, $corr1 = 0, $eta = 0, $ex = 0, $lnr_err = 0, $lnr_err3 = 0, $lnr_val = 0, $lnr_val2 = 0, $root_eta = 0, $root_eta1 = 0, $stat_I = 0, $stat_J = 0, $stat_e = 0, $t1 = 0, $t2 = 0, $t3 = 0, $t4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 176 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 144 | 0;
 $3 = sp + 172 | 0;
 $eta = sp + 136 | 0;
 $root_eta = sp + 128 | 0;
 $I1_scaled = sp + 112 | 0;
 $stat_I = sp + 168 | 0;
 $corr1 = sp + 104 | 0;
 $lnr_val = sp + 96 | 0;
 $lnr_err = sp + 88 | 0;
 $root_eta1 = sp + 80 | 0;
 $J1 = sp + 64 | 0;
 $stat_J = sp + 164 | 0;
 $t1 = sp + 56 | 0;
 $t2 = sp + 48 | 0;
 $t3 = sp + 40 | 0;
 $t4 = sp + 32 | 0;
 $lnr_val2 = sp + 24 | 0;
 $lnr_err3 = sp + 16 | 0;
 $ex = sp;
 $stat_e = sp + 160 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$eta >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3];
 $9 = +HEAPF64[$eta >> 3];
 if (+HEAPF64[$eta >> 3] > 0.0) {
  HEAPF64[$root_eta >> 3] = +Math_sqrt(+$9);
  HEAP32[$stat_I >> 2] = _gsl_sf_bessel_I1_scaled_e(+HEAPF64[$root_eta >> 3] * 2.0, $I1_scaled) | 0;
  if (+HEAPF64[$I1_scaled >> 3] <= 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = (HEAP32[$stat_I >> 2] | 0) != 0 ? HEAP32[$stat_I >> 2] | 0 : 1;
   $125 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $125 | 0;
  } else {
   $30 = +HEAPF64[$1 >> 3] * .6666666666666666 * +Math_pow(+(+HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] * 4.0)), 1.5);
   HEAPF64[$corr1 >> 3] = $30 * +_gsl_sf_bessel_In_scaled(2, +HEAPF64[$root_eta >> 3] * 2.0);
   $40 = +HEAPF64[$2 >> 3] * .5 + +Math_log(+(+HEAPF64[$eta >> 3])) * .5;
   $44 = $40 + +Math_abs(+(+HEAPF64[$root_eta >> 3] * 2.0));
   HEAPF64[$lnr_val >> 3] = $44 + +Math_log(+(+HEAPF64[$I1_scaled >> 3] + +HEAPF64[$corr1 >> 3]));
   $54 = (+Math_abs(+(+HEAPF64[$2 >> 3])) * 1.5 + 1.0) * 2.220446049250313e-16;
   HEAPF64[$lnr_err >> 3] = $54 + +Math_abs(+((+HEAPF64[$I1_scaled + 8 >> 3] + +HEAPF64[$corr1 >> 3]) / +HEAPF64[$I1_scaled >> 3]));
   HEAP32[$0 >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lnr_val >> 3], +HEAPF64[$lnr_err >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $125 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $125 | 0;
  }
 }
 if ($9 == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $125 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 }
 HEAPF64[$root_eta1 >> 3] = +Math_sqrt(+-+HEAPF64[$eta >> 3]);
 HEAP32[$stat_J >> 2] = _gsl_sf_bessel_J1_e(+HEAPF64[$root_eta1 >> 3] * 2.0, $J1) | 0;
 if (+HEAPF64[$J1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = (HEAP32[$stat_J >> 2] | 0) != 0 ? HEAP32[$stat_J >> 2] | 0 : 1;
  $125 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 } else {
  HEAPF64[$t1 >> 3] = +HEAPF64[$2 >> 3] * .5;
  HEAPF64[$t2 >> 3] = +Math_log(+-+HEAPF64[$eta >> 3]) * .5;
  HEAPF64[$t3 >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$t4 >> 3] = +Math_log(+(+HEAPF64[$J1 >> 3]));
  HEAPF64[$lnr_val2 >> 3] = +HEAPF64[$t1 >> 3] + +HEAPF64[$t2 >> 3] + +HEAPF64[$t3 >> 3] + +HEAPF64[$t4 >> 3];
  $107 = (+Math_abs(+(+HEAPF64[$2 >> 3])) * 1.5 + 1.0) * 2.220446049250313e-16;
  HEAPF64[$lnr_err3 >> 3] = $107 + +Math_abs(+(+HEAPF64[$J1 + 8 >> 3] / +HEAPF64[$J1 >> 3]));
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lnr_val2 >> 3], +HEAPF64[$lnr_err3 >> 3], $ex) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[$ex >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ex + 8 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_e >> 2];
  $125 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 }
 return 0;
}
function _gsl_cdf_tdist_Qinv($Q, $nu) {
 $Q = +$Q;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $117 = 0.0, $144 = 0.0, $150 = 0.0, $16 = 0.0, $2 = 0, $28 = 0.0, $30 = 0.0, $34 = 0.0, $52 = 0.0, $79 = 0.0, $82 = 0.0, $92 = 0, $beta = 0, $dQ = 0, $lambda = 0, $n = 0, $phi = 0, $qtail = 0, $step = 0, $step0 = 0, $step1 = 0, $x = 0, $xg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $x = sp + 72 | 0;
 $qtail = sp + 64 | 0;
 $xg = sp + 56 | 0;
 $beta = sp + 48 | 0;
 $dQ = sp + 40 | 0;
 $phi = sp + 32 | 0;
 $n = sp + 104 | 0;
 $lambda = sp + 24 | 0;
 $step0 = sp + 16 | 0;
 $step1 = sp + 8 | 0;
 $step = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $nu;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $150 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$150;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = -inf;
  $150 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$150;
 }
 if (+HEAPF64[$2 >> 3] == 1.0) {
  HEAPF64[$x >> 3] = +Math_tan(+((.5 - +HEAPF64[$1 >> 3]) * 3.141592653589793));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $150 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$150;
 }
 $16 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$2 >> 3] == 2.0) {
  HEAPF64[$x >> 3] = (1.0 - 2.0 * $16) / +Math_sqrt(+(+HEAPF64[$1 >> 3] * 2.0 * (1.0 - +HEAPF64[$1 >> 3])));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $150 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$150;
 }
 $28 = +HEAPF64[$1 >> 3];
 if ($16 < .5) $30 = $28; else $30 = 1.0 - $28;
 HEAPF64[$qtail >> 3] = $30;
 $34 = +Math_sqrt(+(+HEAPF64[$2 >> 3] * 3.141592653589793 / 2.0));
 if ($34 * +HEAPF64[$qtail >> 3] > +Math_pow(.05, +(+HEAPF64[$2 >> 3] / 2.0))) {
  HEAPF64[$xg >> 3] = +_gsl_cdf_ugaussian_Qinv(+HEAPF64[$1 >> 3]);
  HEAPF64[$x >> 3] = +_inv_cornish_fisher(+HEAPF64[$xg >> 3], +HEAPF64[$2 >> 3]);
 } else {
  HEAPF64[$beta >> 3] = +_gsl_sf_beta(.5, +HEAPF64[$2 >> 3] / 2.0);
  $52 = +Math_sqrt(+(+HEAPF64[$2 >> 3]));
  if (+HEAPF64[$1 >> 3] < .5) HEAPF64[$x >> 3] = $52 * +Math_pow(+(+HEAPF64[$beta >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$1 >> 3]), +(-1.0 / +HEAPF64[$2 >> 3])); else HEAPF64[$x >> 3] = -$52 * +Math_pow(+(+HEAPF64[$beta >> 3] * +HEAPF64[$2 >> 3] * (1.0 - +HEAPF64[$1 >> 3])), +(-1.0 / +HEAPF64[$2 >> 3]));
  $79 = +Math_sqrt(+(+HEAPF64[$2 >> 3] / (+HEAPF64[$x >> 3] * +HEAPF64[$x >> 3]) + 1.0));
  HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] / $79;
 }
 HEAP32[$n >> 2] = 0;
 do {
  $82 = +HEAPF64[$1 >> 3];
  HEAPF64[$dQ >> 3] = $82 - +_gsl_cdf_tdist_Q(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3]);
  HEAPF64[$phi >> 3] = +_gsl_ran_tdist_pdf(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3]);
  if (+HEAPF64[$dQ >> 3] == 0.0) break;
  $92 = HEAP32[$n >> 2] | 0;
  HEAP32[$n >> 2] = $92 + 1;
  if ($92 >>> 0 > 32) break;
  HEAPF64[$lambda >> 3] = -+HEAPF64[$dQ >> 3] / +HEAPF64[$phi >> 3];
  HEAPF64[$step0 >> 3] = +HEAPF64[$lambda >> 3];
  HEAPF64[$step1 >> 3] = (+HEAPF64[$2 >> 3] + 1.0) * +HEAPF64[$x >> 3] / (+HEAPF64[$x >> 3] * +HEAPF64[$x >> 3] + +HEAPF64[$2 >> 3]) * (+HEAPF64[$lambda >> 3] * +HEAPF64[$lambda >> 3] / 4.0);
  HEAPF64[$step >> 3] = +HEAPF64[$step0 >> 3];
  $117 = +Math_abs(+(+HEAPF64[$step1 >> 3]));
  if ($117 < +Math_abs(+(+HEAPF64[$step0 >> 3]))) HEAPF64[$step >> 3] = +HEAPF64[$step >> 3] + +HEAPF64[$step1 >> 3];
  if (+HEAPF64[$1 >> 3] < .5) if (+HEAPF64[$x >> 3] + +HEAPF64[$step >> 3] < 0.0) HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] / 2.0; else label = 25; else label = 25;
  do if ((label | 0) == 25) {
   label = 0;
   if (+HEAPF64[$1 >> 3] > .5) if (+HEAPF64[$x >> 3] + +HEAPF64[$step >> 3] > 0.0) {
    HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] / 2.0;
    break;
   }
   HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] + +HEAPF64[$step >> 3];
  } while (0);
  $144 = +Math_abs(+(+HEAPF64[$step >> 3]));
 } while ($144 > +Math_abs(+(+HEAPF64[$x >> 3])) * 1.0e-10);
 HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
 $150 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$150;
}
function _hyperg_U_small_a_bgt0($a, $b, $x, $result, $ln_multiplier) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 $ln_multiplier = $ln_multiplier | 0;
 var $0 = 0, $1 = 0, $102 = 0.0, $105 = 0.0, $107 = 0, $118 = 0, $125 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $85 = 0.0, $91 = 0.0, $94 = 0.0, $Ub = 0, $Ubm1 = 0, $Ubp1 = 0, $b0 = 0, $bp = 0, $eps = 0, $r_Ub = 0, $r_Ubm1 = 0, $stat = 0, $stat_0 = 0, $stat_1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 120 | 0;
 $5 = sp + 116 | 0;
 $stat = sp + 112 | 0;
 $eps = sp + 72 | 0;
 $b0 = sp + 64 | 0;
 $r_Ubm1 = sp + 48 | 0;
 $r_Ub = sp + 32 | 0;
 $stat_0 = sp + 108 | 0;
 $stat_1 = sp + 104 | 0;
 $Ubm1 = sp + 24 | 0;
 $Ub = sp + 16 | 0;
 $Ubp1 = sp + 8 | 0;
 $bp = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$5 >> 2] = $ln_multiplier;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $125 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 }
 if (+HEAPF64[$2 >> 3] > 5.0e3) {
  if (!(+HEAPF64[$3 >> 3] < +Math_abs(+(+HEAPF64[$2 >> 3])) * .9)) label = 5;
 } else label = 5;
 do if ((label | 0) == 5) {
  if (+HEAPF64[$2 >> 3] > 500.0) if (+HEAPF64[$3 >> 3] < +Math_abs(+(+HEAPF64[$2 >> 3])) * .5) break;
  if (!(+HEAPF64[$2 >> 3] > 15.0)) {
   HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
   HEAP32[$0 >> 2] = _hyperg_U_small_ab(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $125 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $125 | 0;
  }
  HEAPF64[$eps >> 3] = +HEAPF64[$2 >> 3] - +Math_floor(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$b0 >> 3] = +HEAPF64[$eps >> 3] + 1.0;
  HEAP32[$stat_0 >> 2] = _hyperg_U_small_ab(+HEAPF64[$1 >> 3], +HEAPF64[$b0 >> 3], +HEAPF64[$3 >> 3], $r_Ubm1) | 0;
  HEAP32[$stat_1 >> 2] = _hyperg_U_small_ab(+HEAPF64[$1 >> 3], +HEAPF64[$b0 >> 3] + 1.0, +HEAPF64[$3 >> 3], $r_Ub) | 0;
  HEAPF64[$Ubm1 >> 3] = +HEAPF64[$r_Ubm1 >> 3];
  HEAPF64[$Ub >> 3] = +HEAPF64[$r_Ub >> 3];
  HEAPF64[$bp >> 3] = +HEAPF64[$b0 >> 3] + 1.0;
  while (1) {
   if (!(+HEAPF64[$bp >> 3] < +HEAPF64[$2 >> 3] - .1)) break;
   HEAPF64[$Ubp1 >> 3] = ((+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$bp >> 3]) * +HEAPF64[$Ubm1 >> 3] + (+HEAPF64[$bp >> 3] + +HEAPF64[$3 >> 3] - 1.0) * +HEAPF64[$Ub >> 3]) / +HEAPF64[$3 >> 3];
   HEAPF64[$Ubm1 >> 3] = +HEAPF64[$Ub >> 3];
   HEAPF64[$Ub >> 3] = +HEAPF64[$Ubp1 >> 3];
   HEAPF64[$bp >> 3] = +HEAPF64[$bp >> 3] + 1.0;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$Ub >> 3];
  $85 = +Math_abs(+(+HEAPF64[$r_Ubm1 + 8 >> 3] / +HEAPF64[$r_Ubm1 >> 3]));
  $91 = $85 + +Math_abs(+(+HEAPF64[$r_Ub + 8 >> 3] / +HEAPF64[$r_Ub >> 3]));
  $94 = $91 * +Math_abs(+(+HEAPF64[$Ub >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $94;
  $102 = (+Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$b0 >> 3])) + 1.0) * 4.440892098500626e-16;
  $105 = $102 * +Math_abs(+(+HEAPF64[$Ub >> 3]));
  $107 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$107 >> 3] = +HEAPF64[$107 >> 3] + $105;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  if (HEAP32[$stat_0 >> 2] | 0) $118 = HEAP32[$stat_0 >> 2] | 0; else $118 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $118;
  $125 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 } while (0);
 HEAP32[$stat >> 2] = _gsl_sf_hyperg_U_large_b_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 if ((HEAP32[$stat >> 2] | 0) == 16) {
  HEAP32[$0 >> 2] = 0;
  $125 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $125 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 }
 return 0;
}
function _gsl_sf_lngamma_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $103 = 0, $15 = 0.0, $17 = 0, $2 = 0, $23 = 0, $24 = 0.0, $32 = 0.0, $34 = 0, $39 = 0.0, $48 = 0, $49 = 0.0, $6 = 0, $7 = 0.0, $86 = 0.0, $94 = 0.0, $N = 0, $as = 0, $eps = 0, $lg_z = 0, $s = 0, $stat = 0, $stat1 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 88 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 84 | 0;
 $stat = sp + 80 | 0;
 $stat1 = sp + 76 | 0;
 $z = sp + 48 | 0;
 $s = sp + 40 | 0;
 $as = sp + 32 | 0;
 $N = sp + 72 | 0;
 $eps = sp + 24 | 0;
 $lg_z = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $6 = +Math_abs(+(+HEAPF64[$1 >> 3] - 1.0)) < .01;
 $7 = +HEAPF64[$1 >> 3];
 if ($6) {
  HEAP32[$stat >> 2] = _lngamma_1_pade($7 - 1.0, HEAP32[$2 >> 2] | 0) | 0;
  $15 = 1.0 / (+Math_abs(+(+HEAPF64[$1 >> 3] - 1.0)) + 2.220446049250313e-16);
  $17 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$17 >> 3] = +HEAPF64[$17 >> 3] * $15;
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 $23 = +Math_abs(+($7 - 2.0)) < .01;
 $24 = +HEAPF64[$1 >> 3];
 if ($23) {
  HEAP32[$stat1 >> 2] = _lngamma_2_pade($24 - 2.0, HEAP32[$2 >> 2] | 0) | 0;
  $32 = 1.0 / (+Math_abs(+(+HEAPF64[$1 >> 3] - 2.0)) + 2.220446049250313e-16);
  $34 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] * $32;
  HEAP32[$0 >> 2] = HEAP32[$stat1 >> 2];
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 $39 = +HEAPF64[$1 >> 3];
 if ($24 >= .5) {
  HEAP32[$0 >> 2] = _lngamma_lanczos($39, HEAP32[$2 >> 2] | 0) | 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 if ($39 == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(38384, 38400, 1138, 1);
  HEAP32[$0 >> 2] = 1;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 $48 = +Math_abs(+(+HEAPF64[$1 >> 3])) < .02;
 $49 = +HEAPF64[$1 >> 3];
 if ($48) {
  HEAP32[$0 >> 2] = _lngamma_sgn_0($49, HEAP32[$2 >> 2] | 0, sp + 56 | 0) | 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 if (!($49 > -716770142402832.4)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(38408, 38400, 1180, 18);
  HEAP32[$0 >> 2] = 18;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 HEAPF64[$z >> 3] = 1.0 - +HEAPF64[$1 >> 3];
 HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$z >> 3] * 3.141592653589793));
 HEAPF64[$as >> 3] = +Math_abs(+(+HEAPF64[$s >> 3]));
 if (+HEAPF64[$s >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(38384, 38400, 1152, 1);
  HEAP32[$0 >> 2] = 1;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 if (!(+HEAPF64[$as >> 3] < .047123889803846894)) {
  _lngamma_lanczos(+HEAPF64[$z >> 3], $lg_z) | 0;
  $86 = +Math_log(+(+HEAPF64[$as >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.1447298858494002 - ($86 + +HEAPF64[$lg_z >> 3]);
  $94 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $94 + +HEAPF64[$lg_z + 8 >> 3];
  HEAP32[$0 >> 2] = 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 if (+HEAPF64[$1 >> 3] < -2147483646.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(38408, 38400, 1159, 18);
  HEAP32[$0 >> 2] = 18;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 } else {
  HEAP32[$N >> 2] = 0 - ~~(+HEAPF64[$1 >> 3] - .5);
  HEAPF64[$eps >> 3] = +HEAPF64[$1 >> 3] + +(HEAP32[$N >> 2] | 0);
  HEAP32[$0 >> 2] = _lngamma_sgn_sing(HEAP32[$N >> 2] | 0, +HEAPF64[$eps >> 3], HEAP32[$2 >> 2] | 0, sp + 16 | 0) | 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 return 0;
}
function _gsl_sf_hyperg_1F1_int_e($a, $b, $x, $result) {
 $a = $a | 0;
 $b = $b | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $108 = 0.0, $121 = 0, $127 = 0, $2 = 0, $3 = 0, $4 = 0, $43 = 0.0, $49 = 0.0, $65 = 0.0, $73 = 0.0, $Kummer_1F1 = 0, $stat_K = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 32 | 0;
 $Kummer_1F1 = sp;
 $stat_K = sp + 28 | 0;
 $stat_e = sp + 24 | 0;
 HEAP32[$1 >> 2] = $a;
 HEAP32[$2 >> 2] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
  HEAP32[$0 >> 2] = _gsl_sf_exp_e(+HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51664, 51680, 1803, 1);
  HEAP32[$0 >> 2] = 1;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) < 0) if ((HEAP32[$1 >> 2] | 0) > 0 ? 1 : (HEAP32[$1 >> 2] | 0) < (HEAP32[$2 >> 2] | 0)) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51664, 51680, 1812, 1);
  HEAP32[$0 >> 2] = 1;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 if (+HEAPF64[$3 >> 3] > 100.0) {
  $43 = +_GSL_MAX_DBL(1.0, +(+Math_abs(+(+((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0)))));
  $49 = $43 * +_GSL_MAX_DBL(1.0, +(+Math_abs(+(+(1 - (HEAP32[$1 >> 2] | 0) | 0)))));
  if ($49 < +HEAPF64[$3 >> 3] * .5) {
   HEAP32[$0 >> 2] = _hyperg_1F1_asymp_posx(+(HEAP32[$1 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $127 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $127 | 0;
  }
 }
 if (+HEAPF64[$3 >> 3] < -100.0) {
  $65 = +_GSL_MAX_DBL(1.0, +(+Math_abs(+(+(HEAP32[$1 >> 2] | 0)))));
  $73 = $65 * +_GSL_MAX_DBL(1.0, +(+Math_abs(+(+(1 + (HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0)))));
  if ($73 < +Math_abs(+(+HEAPF64[$3 >> 3])) * .5) {
   HEAP32[$0 >> 2] = _hyperg_1F1_asymp_negx(+(HEAP32[$1 >> 2] | 0), +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $127 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $127 | 0;
  }
 }
 if ((HEAP32[$1 >> 2] | 0) < 0) if ((HEAP32[$2 >> 2] | 0) < 0) {
  HEAP32[$0 >> 2] = _hyperg_1F1_ab_negint(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < 0) if ((HEAP32[$2 >> 2] | 0) > 0) {
  HEAP32[$stat_K >> 2] = _hyperg_1F1_ab_posint((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0, HEAP32[$2 >> 2] | 0, -+HEAPF64[$3 >> 3], $Kummer_1F1) | 0;
  $108 = +Math_abs(+(+HEAPF64[$3 >> 3])) * 2.220446049250313e-16;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$3 >> 3], $108, +HEAPF64[$Kummer_1F1 >> 3], +HEAPF64[$Kummer_1F1 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e >> 2] | 0) $121 = HEAP32[$stat_e >> 2] | 0; else $121 = (HEAP32[$stat_K >> 2] | 0) != 0 ? HEAP32[$stat_K >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $121;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 HEAP32[$0 >> 2] = _hyperg_1F1_ab_posint(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 $127 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $127 | 0;
}
function _conicalP_xlt1_hyperg_A($mu, $tau, $x, $result) {
 $mu = +$mu;
 $tau = +$tau;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $106 = 0.0, $134 = 0.0, $136 = 0, $142 = 0.0, $144 = 0, $17 = 0.0, $2 = 0, $26 = 0.0, $3 = 0, $51 = 0, $78 = 0.0, $79 = 0, $84 = 0.0, $85 = 0, $92 = 0.0, $F1 = 0, $F2 = 0, $err_amp = 0, $ln_g1 = 0, $ln_g2 = 0, $pre1 = 0, $pre2 = 0, $pre_err = 0, $pre_val = 0, $stat_F1 = 0, $stat_F2 = 0, $status = 0, $t1_err = 0, $t1_val = 0, $t2_err = 0, $t2_val = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 208 | 0;
 $1 = sp + 200 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 228 | 0;
 $x2 = sp + 184 | 0;
 $err_amp = sp + 176 | 0;
 $pre_val = sp + 168 | 0;
 $pre_err = sp + 160 | 0;
 $ln_g1 = sp + 144 | 0;
 $ln_g2 = sp + 128 | 0;
 $F1 = sp + 80 | 0;
 $F2 = sp + 64 | 0;
 $pre1 = sp + 48 | 0;
 $pre2 = sp + 32 | 0;
 $t1_val = sp + 24 | 0;
 $t1_err = sp + 16 | 0;
 $t2_val = sp + 8 | 0;
 $t2_err = sp;
 $stat_F1 = sp + 224 | 0;
 $stat_F2 = sp + 220 | 0;
 $status = sp + 216 | 0;
 HEAPF64[$0 >> 3] = $mu;
 HEAPF64[$1 >> 3] = $tau;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$x2 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3];
 HEAPF64[$err_amp >> 3] = 1.0 / (+Math_abs(+(1.0 - +Math_abs(+(+HEAPF64[$2 >> 3])))) + 2.220446049250313e-16) + 1.0;
 $17 = +Math_sqrt(+(1.0 - +HEAPF64[$x2 >> 3])) * .5;
 HEAPF64[$pre_val >> 3] = 1.772453850905516 / +Math_pow(+$17, +(+HEAPF64[$0 >> 3]));
 $26 = +HEAPF64[$err_amp >> 3] * 2.220446049250313e-16 * (+Math_abs(+(+HEAPF64[$0 >> 3])) + 1.0);
 HEAPF64[$pre_err >> 3] = $26 * +Math_abs(+(+HEAPF64[$pre_val >> 3]));
 HEAP32[$stat_F1 >> 2] = _gsl_sf_hyperg_2F1_conj_e(.25 - +HEAPF64[$0 >> 3] * .5, +HEAPF64[$1 >> 3] * .5, .5, +HEAPF64[$x2 >> 3], $F1) | 0;
 HEAP32[$stat_F2 >> 2] = _gsl_sf_hyperg_2F1_conj_e(.75 - +HEAPF64[$0 >> 3] * .5, +HEAPF64[$1 >> 3] * .5, 1.5, +HEAPF64[$x2 >> 3], $F2) | 0;
 if (HEAP32[$stat_F1 >> 2] | 0) $51 = HEAP32[$stat_F1 >> 2] | 0; else $51 = (HEAP32[$stat_F2 >> 2] | 0) != 0 ? HEAP32[$stat_F2 >> 2] | 0 : 0;
 HEAP32[$status >> 2] = $51;
 _gsl_sf_lngamma_complex_e(.75 - +HEAPF64[$0 >> 3] * .5, +HEAPF64[$1 >> 3] * -.5, $ln_g1, sp + 112 | 0) | 0;
 _gsl_sf_lngamma_complex_e(.25 - +HEAPF64[$0 >> 3] * .5, +HEAPF64[$1 >> 3] * -.5, $ln_g2, sp + 96 | 0) | 0;
 _gsl_sf_exp_err_e(+HEAPF64[$ln_g1 >> 3] * -2.0, +HEAPF64[$ln_g1 + 8 >> 3] * 2.0, $pre1) | 0;
 _gsl_sf_exp_err_e(+HEAPF64[$ln_g2 >> 3] * -2.0, +HEAPF64[$ln_g2 + 8 >> 3] * 2.0, $pre2) | 0;
 HEAPF64[$pre2 >> 3] = +HEAPF64[$pre2 >> 3] * +HEAPF64[$2 >> 3] * -2.0;
 $78 = +Math_abs(+(+HEAPF64[$2 >> 3])) * 2.0;
 $79 = $pre2 + 8 | 0;
 HEAPF64[$79 >> 3] = +HEAPF64[$79 >> 3] * $78;
 $84 = +Math_abs(+(+HEAPF64[$pre2 >> 3])) * 2.220446049250313e-16;
 $85 = $pre2 + 8 | 0;
 HEAPF64[$85 >> 3] = +HEAPF64[$85 >> 3] + $84;
 HEAPF64[$t1_val >> 3] = +HEAPF64[$pre1 >> 3] * +HEAPF64[$F1 >> 3];
 $92 = +Math_abs(+(+HEAPF64[$pre1 >> 3]));
 HEAPF64[$t1_err >> 3] = $92 * +HEAPF64[$F1 + 8 >> 3] + +HEAPF64[$pre1 + 8 >> 3] * +Math_abs(+(+HEAPF64[$F1 >> 3]));
 HEAPF64[$t2_val >> 3] = +HEAPF64[$pre2 >> 3] * +HEAPF64[$F2 >> 3];
 $106 = +Math_abs(+(+HEAPF64[$pre2 >> 3]));
 HEAPF64[$t2_err >> 3] = $106 * +HEAPF64[$F2 + 8 >> 3] + +HEAPF64[$pre2 + 8 >> 3] * +Math_abs(+(+HEAPF64[$F2 >> 3]));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre_val >> 3] * (+HEAPF64[$t1_val >> 3] + +HEAPF64[$t2_val >> 3]);
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre_val >> 3] * (+HEAPF64[$t1_err >> 3] + +HEAPF64[$t2_err >> 3]);
 $134 = +HEAPF64[$pre_err >> 3] * +Math_abs(+(+HEAPF64[$t1_val >> 3] + +HEAPF64[$t2_val >> 3]));
 $136 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$136 >> 3] = +HEAPF64[$136 >> 3] + $134;
 $142 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $144 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$144 >> 3] = +HEAPF64[$144 >> 3] + $142;
 STACKTOP = sp;
 return HEAP32[$status >> 2] | 0;
}
function _dilogc_series_3($r, $x, $y, $real_result, $imag_result) {
 $r = +$r;
 $x = +$x;
 $y = +$y;
 $real_result = $real_result | 0;
 $imag_result = $imag_result | 0;
 var $0 = 0, $1 = 0, $120 = 0.0, $125 = 0.0, $132 = 0.0, $140 = 0.0, $2 = 0, $3 = 0, $4 = 0, $H_im = 0, $H_re = 0, $Him0 = 0, $a = 0, $an = 0, $cos_theta = 0, $n = 0, $nfact = 0, $omc = 0, $omc2 = 0, $sin_theta = 0, $sum_im = 0, $sum_re = 0, $t = 0, $theta = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $0 = sp + 232 | 0;
 $1 = sp + 224 | 0;
 $2 = sp + 216 | 0;
 $3 = sp + 248 | 0;
 $4 = sp + 244 | 0;
 $theta = sp + 208 | 0;
 $cos_theta = sp + 200 | 0;
 $sin_theta = sp + 192 | 0;
 $a = sp + 184 | 0;
 $omc = sp + 176 | 0;
 $omc2 = sp + 168 | 0;
 $H_re = sp + 112 | 0;
 $H_im = sp + 56 | 0;
 $an = sp + 48 | 0;
 $nfact = sp + 40 | 0;
 $sum_re = sp + 32 | 0;
 $sum_im = sp + 24 | 0;
 $Him0 = sp + 8 | 0;
 $n = sp + 240 | 0;
 $t = sp;
 HEAPF64[$0 >> 3] = $r;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $real_result;
 HEAP32[$4 >> 2] = $imag_result;
 HEAPF64[$theta >> 3] = +Math_atan2(+(+HEAPF64[$2 >> 3]), +(+HEAPF64[$1 >> 3]));
 HEAPF64[$cos_theta >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$0 >> 3];
 HEAPF64[$sin_theta >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$0 >> 3];
 HEAPF64[$a >> 3] = +Math_log(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$omc >> 3] = 1.0 - +HEAPF64[$cos_theta >> 3];
 HEAPF64[$omc2 >> 3] = +HEAPF64[$omc >> 3] * +HEAPF64[$omc >> 3];
 HEAPF64[$H_re >> 3] = (+HEAPF64[$theta >> 3] * +HEAPF64[$theta >> 3] - +Math_abs(+(+HEAPF64[$theta >> 3])) * 6.283185307179586) * .25 + 1.6449340668482264;
 _gsl_sf_clausen_e(+HEAPF64[$theta >> 3], $Him0) | 0;
 HEAPF64[$H_im >> 3] = +HEAPF64[$Him0 >> 3];
 HEAPF64[$H_re + 8 >> 3] = +Math_log(+(+HEAPF64[$omc >> 3] * 2.0)) * -.5;
 HEAPF64[$H_im + 8 >> 3] = -+Math_atan2(+-+HEAPF64[$sin_theta >> 3], +(+HEAPF64[$omc >> 3]));
 HEAPF64[$H_re + 16 >> 3] = -.5;
 HEAPF64[$H_im + 16 >> 3] = +HEAPF64[$sin_theta >> 3] * .5 / +HEAPF64[$omc >> 3];
 HEAPF64[$H_re + 24 >> 3] = -.5 / +HEAPF64[$omc >> 3];
 HEAPF64[$H_im + 24 >> 3] = 0.0;
 HEAPF64[$H_re + 32 >> 3] = 0.0;
 HEAPF64[$H_im + 32 >> 3] = +HEAPF64[$sin_theta >> 3] * -.5 / +HEAPF64[$omc2 >> 3];
 HEAPF64[$H_re + 40 >> 3] = (+HEAPF64[$cos_theta >> 3] + 2.0) * .5 / +HEAPF64[$omc2 >> 3];
 HEAPF64[$H_im + 40 >> 3] = 0.0;
 HEAPF64[$H_re + 48 >> 3] = 0.0;
 HEAPF64[$H_im + 48 >> 3] = +HEAPF64[$sin_theta >> 3] * .5 / (+HEAPF64[$omc2 >> 3] * +HEAPF64[$omc2 >> 3] * +HEAPF64[$omc >> 3]) * (+HEAPF64[$omc >> 3] * 8.0 - +HEAPF64[$sin_theta >> 3] * +HEAPF64[$sin_theta >> 3] * (+HEAPF64[$cos_theta >> 3] + 3.0));
 HEAPF64[$sum_re >> 3] = +HEAPF64[$H_re >> 3];
 HEAPF64[$sum_im >> 3] = +HEAPF64[$H_im >> 3];
 HEAPF64[$an >> 3] = 1.0;
 HEAPF64[$nfact >> 3] = 1.0;
 HEAP32[$n >> 2] = 1;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) > 6) break;
  HEAPF64[$an >> 3] = +HEAPF64[$an >> 3] * +HEAPF64[$a >> 3];
  HEAPF64[$nfact >> 3] = +HEAPF64[$nfact >> 3] * +(HEAP32[$n >> 2] | 0);
  HEAPF64[$t >> 3] = +HEAPF64[$an >> 3] / +HEAPF64[$nfact >> 3];
  HEAPF64[$sum_re >> 3] = +HEAPF64[$sum_re >> 3] + +HEAPF64[$t >> 3] * +HEAPF64[$H_re + (HEAP32[$n >> 2] << 3) >> 3];
  HEAPF64[$sum_im >> 3] = +HEAPF64[$sum_im >> 3] + +HEAPF64[$t >> 3] * +HEAPF64[$H_im + (HEAP32[$n >> 2] << 3) >> 3];
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$sum_re >> 3];
 $120 = +Math_abs(+(+HEAPF64[$sum_re >> 3])) * 2.6645352591003757e-15;
 $125 = $120 + +Math_abs(+(+HEAPF64[$an >> 3] / +HEAPF64[$nfact >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $125;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sum_im >> 3];
 $132 = +Math_abs(+(+HEAPF64[$sum_im >> 3])) * 2.6645352591003757e-15;
 $140 = $132 + +HEAPF64[$Him0 + 8 >> 3] + +Math_abs(+(+HEAPF64[$an >> 3] / +HEAPF64[$nfact >> 3]));
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $140;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_legendre_Q1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $122 = 0.0, $128 = 0, $2 = 0, $42 = 0.0, $47 = 0.0, $56 = 0.0, $61 = 0.0, $65 = 0.0, $74 = 0.0, $79 = 0.0, $series = 0, $sum = 0, $y = 0, $y1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 148 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 144 | 0;
 $y = sp + 88 | 0;
 $series = sp + 80 | 0;
 $y1 = sp + 72 | 0;
 $sum = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= -1.0 | +HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(52992, 53008, 234, 1);
  HEAP32[$0 >> 2] = 1;
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 if (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] < .002460783300575925) {
  HEAPF64[sp + 128 >> 3] = .3333333333333333;
  HEAPF64[sp + 120 >> 3] = .2;
  HEAPF64[sp + 112 >> 3] = .14285714285714285;
  HEAPF64[sp + 104 >> 3] = .1111111111111111;
  HEAPF64[sp + 96 >> 3] = .09090909090909091;
  HEAPF64[$y >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$series >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * .09090909090909091 + .1111111111111111) + .14285714285714285) + .2) + .3333333333333333) + 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$series >> 3] - 1.0;
  $42 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $42;
  HEAP32[$0 >> 2] = 0;
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 $47 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 1.0) {
  $56 = .5 * $47 * +Math_log(+((+HEAPF64[$1 >> 3] + 1.0) / (1.0 - +HEAPF64[$1 >> 3]))) - 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $56;
  $61 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $61;
  HEAP32[$0 >> 2] = 0;
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 $65 = +HEAPF64[$1 >> 3];
 if ($47 < 6.0) {
  $74 = .5 * $65 * +Math_log(+((+HEAPF64[$1 >> 3] + 1.0) / (+HEAPF64[$1 >> 3] - 1.0))) - 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $74;
  $79 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $79;
  HEAP32[$0 >> 2] = 0;
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 if ($65 * 1.4916681462400413e-154 < .5715767664977295) {
  HEAPF64[$y1 >> 3] = 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  HEAPF64[sp + 64 >> 3] = .6;
  HEAPF64[sp + 56 >> 3] = .42857142857142855;
  HEAPF64[sp + 48 >> 3] = .3333333333333333;
  HEAPF64[sp + 40 >> 3] = .2727272727272727;
  HEAPF64[sp + 32 >> 3] = .23076923076923078;
  HEAPF64[sp + 24 >> 3] = .2;
  HEAPF64[sp + 16 >> 3] = .17647058823529413;
  HEAPF64[sp + 8 >> 3] = .15789473684210525;
  HEAPF64[$sum >> 3] = +HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * .15789473684210525 + .17647058823529413) + .2) + .23076923076923078) + .2727272727272727) + .3333333333333333) + .42857142857142855) + .6) + 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sum >> 3] / (+HEAPF64[$1 >> 3] * 3.0 * +HEAPF64[$1 >> 3]);
  $122 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $122;
  HEAP32[$0 >> 2] = 0;
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(53024, 53008, 274, 15);
  HEAP32[$0 >> 2] = 15;
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 return 0;
}
function _beta_inc_AXPY40($A, $Y, $a, $b, $x) {
 $A = +$A;
 $Y = +$Y;
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $149 = 0.0, $158 = 0.0, $2 = 0, $3 = 0, $34 = 0.0, $4 = 0, $42 = 0.0, $5 = 0, $61 = 0.0, $62 = 0.0, $64 = 0.0, $70 = 0.0, $82 = 0.0, $83 = 0.0, $N = 0, $N1 = 0, $cf = 0, $cf3 = 0, $epsabs = 0, $epsabs2 = 0, $ln_beta = 0, $ln_pre = 0, $prefactor = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 80 | 0;
 $N = sp + 72 | 0;
 $N1 = sp + 64 | 0;
 $ln_beta = sp + 56 | 0;
 $ln_pre = sp + 48 | 0;
 $prefactor = sp + 40 | 0;
 $epsabs = sp + 32 | 0;
 $cf = sp + 24 | 0;
 $epsabs2 = sp + 16 | 0;
 $cf3 = sp + 8 | 0;
 $term = sp;
 HEAPF64[$1 >> 3] = $A;
 HEAPF64[$2 >> 3] = $Y;
 HEAPF64[$3 >> 3] = $a;
 HEAPF64[$4 >> 3] = $b;
 HEAPF64[$5 >> 3] = $x;
 if (+HEAPF64[$5 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] * 0.0 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 if (+HEAPF64[$5 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] * 1.0 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 if (+HEAPF64[$3 >> 3] > 1.0e5) if (+HEAPF64[$4 >> 3] < 10.0) if (+HEAPF64[$5 >> 3] > +HEAPF64[$3 >> 3] / (+HEAPF64[$3 >> 3] + +HEAPF64[$4 >> 3])) {
  HEAPF64[$N >> 3] = +HEAPF64[$3 >> 3] + (+HEAPF64[$4 >> 3] - 1.0) / 2.0;
  $34 = +HEAPF64[$1 >> 3];
  $42 = $34 * +_gsl_sf_gamma_inc_Q(+HEAPF64[$4 >> 3], -+HEAPF64[$N >> 3] * +Math_log(+(+HEAPF64[$5 >> 3])));
  HEAPF64[$0 >> 3] = $42 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 if (+HEAPF64[$4 >> 3] > 1.0e5) if (+HEAPF64[$3 >> 3] < 10.0) if (+HEAPF64[$5 >> 3] < +HEAPF64[$4 >> 3] / (+HEAPF64[$3 >> 3] + +HEAPF64[$4 >> 3])) {
  HEAPF64[$N1 >> 3] = +HEAPF64[$4 >> 3] + (+HEAPF64[$3 >> 3] - 1.0) / 2.0;
  $61 = +HEAPF64[$1 >> 3];
  $62 = +HEAPF64[$3 >> 3];
  $64 = -+HEAPF64[$N1 >> 3];
  $70 = $61 * +_gsl_sf_gamma_inc_P($62, $64 * +_log1p(+-+HEAPF64[$5 >> 3]));
  HEAPF64[$0 >> 3] = $70 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 HEAPF64[$ln_beta >> 3] = +_gsl_sf_lnbeta(+HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3]);
 $82 = -+HEAPF64[$ln_beta >> 3] + +HEAPF64[$3 >> 3] * +Math_log(+(+HEAPF64[$5 >> 3]));
 $83 = +HEAPF64[$4 >> 3];
 HEAPF64[$ln_pre >> 3] = $82 + $83 * +_log1p(+-+HEAPF64[$5 >> 3]);
 HEAPF64[$prefactor >> 3] = +Math_exp(+(+HEAPF64[$ln_pre >> 3]));
 if (+HEAPF64[$5 >> 3] < (+HEAPF64[$3 >> 3] + 1.0) / (+HEAPF64[$3 >> 3] + +HEAPF64[$4 >> 3] + 2.0)) {
  HEAPF64[$epsabs >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$prefactor >> 3] / +HEAPF64[$3 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[$cf >> 3] = +_beta_cont_frac41(+HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], +HEAPF64[$5 >> 3], +HEAPF64[$epsabs >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$prefactor >> 3] * +HEAPF64[$cf >> 3] / +HEAPF64[$3 >> 3]) + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 HEAPF64[$epsabs2 >> 3] = +Math_abs(+((+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) / (+HEAPF64[$1 >> 3] * +HEAPF64[$prefactor >> 3] / +HEAPF64[$4 >> 3]))) * 2.220446049250313e-16;
 HEAPF64[$cf3 >> 3] = +_beta_cont_frac41(+HEAPF64[$4 >> 3], +HEAPF64[$3 >> 3], 1.0 - +HEAPF64[$5 >> 3], +HEAPF64[$epsabs2 >> 3]);
 HEAPF64[$term >> 3] = +HEAPF64[$prefactor >> 3] * +HEAPF64[$cf3 >> 3] / +HEAPF64[$4 >> 3];
 $149 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] == -+HEAPF64[$2 >> 3]) {
  HEAPF64[$0 >> 3] = -$149 * +HEAPF64[$term >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 } else {
  HEAPF64[$0 >> 3] = $149 * (1.0 - +HEAPF64[$term >> 3]) + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 return 0.0;
}
function _beta_inc_AXPY8($A, $Y, $a, $b, $x) {
 $A = +$A;
 $Y = +$Y;
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $149 = 0.0, $158 = 0.0, $2 = 0, $3 = 0, $34 = 0.0, $4 = 0, $42 = 0.0, $5 = 0, $61 = 0.0, $62 = 0.0, $64 = 0.0, $70 = 0.0, $82 = 0.0, $83 = 0.0, $N = 0, $N1 = 0, $cf = 0, $cf3 = 0, $epsabs = 0, $epsabs2 = 0, $ln_beta = 0, $ln_pre = 0, $prefactor = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 80 | 0;
 $N = sp + 72 | 0;
 $N1 = sp + 64 | 0;
 $ln_beta = sp + 56 | 0;
 $ln_pre = sp + 48 | 0;
 $prefactor = sp + 40 | 0;
 $epsabs = sp + 32 | 0;
 $cf = sp + 24 | 0;
 $epsabs2 = sp + 16 | 0;
 $cf3 = sp + 8 | 0;
 $term = sp;
 HEAPF64[$1 >> 3] = $A;
 HEAPF64[$2 >> 3] = $Y;
 HEAPF64[$3 >> 3] = $a;
 HEAPF64[$4 >> 3] = $b;
 HEAPF64[$5 >> 3] = $x;
 if (+HEAPF64[$5 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] * 0.0 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 if (+HEAPF64[$5 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] * 1.0 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 if (+HEAPF64[$3 >> 3] > 1.0e5) if (+HEAPF64[$4 >> 3] < 10.0) if (+HEAPF64[$5 >> 3] > +HEAPF64[$3 >> 3] / (+HEAPF64[$3 >> 3] + +HEAPF64[$4 >> 3])) {
  HEAPF64[$N >> 3] = +HEAPF64[$3 >> 3] + (+HEAPF64[$4 >> 3] - 1.0) / 2.0;
  $34 = +HEAPF64[$1 >> 3];
  $42 = $34 * +_gsl_sf_gamma_inc_Q(+HEAPF64[$4 >> 3], -+HEAPF64[$N >> 3] * +Math_log(+(+HEAPF64[$5 >> 3])));
  HEAPF64[$0 >> 3] = $42 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 if (+HEAPF64[$4 >> 3] > 1.0e5) if (+HEAPF64[$3 >> 3] < 10.0) if (+HEAPF64[$5 >> 3] < +HEAPF64[$4 >> 3] / (+HEAPF64[$3 >> 3] + +HEAPF64[$4 >> 3])) {
  HEAPF64[$N1 >> 3] = +HEAPF64[$4 >> 3] + (+HEAPF64[$3 >> 3] - 1.0) / 2.0;
  $61 = +HEAPF64[$1 >> 3];
  $62 = +HEAPF64[$3 >> 3];
  $64 = -+HEAPF64[$N1 >> 3];
  $70 = $61 * +_gsl_sf_gamma_inc_P($62, $64 * +_log1p(+-+HEAPF64[$5 >> 3]));
  HEAPF64[$0 >> 3] = $70 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 HEAPF64[$ln_beta >> 3] = +_gsl_sf_lnbeta(+HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3]);
 $82 = -+HEAPF64[$ln_beta >> 3] + +HEAPF64[$3 >> 3] * +Math_log(+(+HEAPF64[$5 >> 3]));
 $83 = +HEAPF64[$4 >> 3];
 HEAPF64[$ln_pre >> 3] = $82 + $83 * +_log1p(+-+HEAPF64[$5 >> 3]);
 HEAPF64[$prefactor >> 3] = +Math_exp(+(+HEAPF64[$ln_pre >> 3]));
 if (+HEAPF64[$5 >> 3] < (+HEAPF64[$3 >> 3] + 1.0) / (+HEAPF64[$3 >> 3] + +HEAPF64[$4 >> 3] + 2.0)) {
  HEAPF64[$epsabs >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$prefactor >> 3] / +HEAPF64[$3 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[$cf >> 3] = +_beta_cont_frac9(+HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], +HEAPF64[$5 >> 3], +HEAPF64[$epsabs >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$prefactor >> 3] * +HEAPF64[$cf >> 3] / +HEAPF64[$3 >> 3]) + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 HEAPF64[$epsabs2 >> 3] = +Math_abs(+((+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) / (+HEAPF64[$1 >> 3] * +HEAPF64[$prefactor >> 3] / +HEAPF64[$4 >> 3]))) * 2.220446049250313e-16;
 HEAPF64[$cf3 >> 3] = +_beta_cont_frac9(+HEAPF64[$4 >> 3], +HEAPF64[$3 >> 3], 1.0 - +HEAPF64[$5 >> 3], +HEAPF64[$epsabs2 >> 3]);
 HEAPF64[$term >> 3] = +HEAPF64[$prefactor >> 3] * +HEAPF64[$cf3 >> 3] / +HEAPF64[$4 >> 3];
 $149 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] == -+HEAPF64[$2 >> 3]) {
  HEAPF64[$0 >> 3] = -$149 * +HEAPF64[$term >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 } else {
  HEAPF64[$0 >> 3] = $149 * (1.0 - +HEAPF64[$term >> 3]) + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 return 0.0;
}
function _beta_inc_AXPY($A, $Y, $a, $b, $x) {
 $A = +$A;
 $Y = +$Y;
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $149 = 0.0, $158 = 0.0, $2 = 0, $3 = 0, $34 = 0.0, $4 = 0, $42 = 0.0, $5 = 0, $61 = 0.0, $62 = 0.0, $64 = 0.0, $70 = 0.0, $82 = 0.0, $83 = 0.0, $N = 0, $N1 = 0, $cf = 0, $cf3 = 0, $epsabs = 0, $epsabs2 = 0, $ln_beta = 0, $ln_pre = 0, $prefactor = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 80 | 0;
 $N = sp + 72 | 0;
 $N1 = sp + 64 | 0;
 $ln_beta = sp + 56 | 0;
 $ln_pre = sp + 48 | 0;
 $prefactor = sp + 40 | 0;
 $epsabs = sp + 32 | 0;
 $cf = sp + 24 | 0;
 $epsabs2 = sp + 16 | 0;
 $cf3 = sp + 8 | 0;
 $term = sp;
 HEAPF64[$1 >> 3] = $A;
 HEAPF64[$2 >> 3] = $Y;
 HEAPF64[$3 >> 3] = $a;
 HEAPF64[$4 >> 3] = $b;
 HEAPF64[$5 >> 3] = $x;
 if (+HEAPF64[$5 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] * 0.0 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 if (+HEAPF64[$5 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] * 1.0 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 if (+HEAPF64[$3 >> 3] > 1.0e5) if (+HEAPF64[$4 >> 3] < 10.0) if (+HEAPF64[$5 >> 3] > +HEAPF64[$3 >> 3] / (+HEAPF64[$3 >> 3] + +HEAPF64[$4 >> 3])) {
  HEAPF64[$N >> 3] = +HEAPF64[$3 >> 3] + (+HEAPF64[$4 >> 3] - 1.0) / 2.0;
  $34 = +HEAPF64[$1 >> 3];
  $42 = $34 * +_gsl_sf_gamma_inc_Q(+HEAPF64[$4 >> 3], -+HEAPF64[$N >> 3] * +Math_log(+(+HEAPF64[$5 >> 3])));
  HEAPF64[$0 >> 3] = $42 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 if (+HEAPF64[$4 >> 3] > 1.0e5) if (+HEAPF64[$3 >> 3] < 10.0) if (+HEAPF64[$5 >> 3] < +HEAPF64[$4 >> 3] / (+HEAPF64[$3 >> 3] + +HEAPF64[$4 >> 3])) {
  HEAPF64[$N1 >> 3] = +HEAPF64[$4 >> 3] + (+HEAPF64[$3 >> 3] - 1.0) / 2.0;
  $61 = +HEAPF64[$1 >> 3];
  $62 = +HEAPF64[$3 >> 3];
  $64 = -+HEAPF64[$N1 >> 3];
  $70 = $61 * +_gsl_sf_gamma_inc_P($62, $64 * +_log1p(+-+HEAPF64[$5 >> 3]));
  HEAPF64[$0 >> 3] = $70 + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 HEAPF64[$ln_beta >> 3] = +_gsl_sf_lnbeta(+HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3]);
 $82 = -+HEAPF64[$ln_beta >> 3] + +HEAPF64[$3 >> 3] * +Math_log(+(+HEAPF64[$5 >> 3]));
 $83 = +HEAPF64[$4 >> 3];
 HEAPF64[$ln_pre >> 3] = $82 + $83 * +_log1p(+-+HEAPF64[$5 >> 3]);
 HEAPF64[$prefactor >> 3] = +Math_exp(+(+HEAPF64[$ln_pre >> 3]));
 if (+HEAPF64[$5 >> 3] < (+HEAPF64[$3 >> 3] + 1.0) / (+HEAPF64[$3 >> 3] + +HEAPF64[$4 >> 3] + 2.0)) {
  HEAPF64[$epsabs >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$prefactor >> 3] / +HEAPF64[$3 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[$cf >> 3] = +_beta_cont_frac(+HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], +HEAPF64[$5 >> 3], +HEAPF64[$epsabs >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$prefactor >> 3] * +HEAPF64[$cf >> 3] / +HEAPF64[$3 >> 3]) + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 HEAPF64[$epsabs2 >> 3] = +Math_abs(+((+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) / (+HEAPF64[$1 >> 3] * +HEAPF64[$prefactor >> 3] / +HEAPF64[$4 >> 3]))) * 2.220446049250313e-16;
 HEAPF64[$cf3 >> 3] = +_beta_cont_frac(+HEAPF64[$4 >> 3], +HEAPF64[$3 >> 3], 1.0 - +HEAPF64[$5 >> 3], +HEAPF64[$epsabs2 >> 3]);
 HEAPF64[$term >> 3] = +HEAPF64[$prefactor >> 3] * +HEAPF64[$cf3 >> 3] / +HEAPF64[$4 >> 3];
 $149 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] == -+HEAPF64[$2 >> 3]) {
  HEAPF64[$0 >> 3] = -$149 * +HEAPF64[$term >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 } else {
  HEAPF64[$0 >> 3] = $149 * (1.0 - +HEAPF64[$term >> 3]) + +HEAPF64[$2 >> 3];
  $158 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$158;
 }
 return 0.0;
}
function _gsl_sf_exp_mult_err_e10_e($x, $dx, $y, $dy, $result) {
 $x = +$x;
 $dx = +$dx;
 $y = +$y;
 $dy = +$dy;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $106 = 0.0, $112 = 0.0, $114 = 0, $120 = 0, $15 = 0.0, $2 = 0, $3 = 0, $36 = 0.0, $4 = 0, $42 = 0.0, $48 = 0.0, $5 = 0, $50 = 0, $90 = 0.0, $N = 0, $arg_err = 0, $arg_val = 0, $ay = 0, $ex = 0, $l10_val = 0, $ly = 0, $sy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 92 | 0;
 $ay = sp + 48 | 0;
 $ex = sp + 40 | 0;
 $ly = sp + 32 | 0;
 $l10_val = sp + 24 | 0;
 $sy = sp + 16 | 0;
 $N = sp + 88 | 0;
 $arg_val = sp + 8 | 0;
 $arg_err = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $dx;
 HEAPF64[$3 >> 3] = $y;
 HEAPF64[$4 >> 3] = $dy;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$ay >> 3] = +Math_abs(+(+HEAPF64[$3 >> 3]));
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  $15 = +Math_abs(+(+HEAPF64[$4 >> 3] * +Math_exp(+(+HEAPF64[$1 >> 3]))));
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $15;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 354.891356446692 & +HEAPF64[$1 >> 3] > -354.19820926613204) if (+HEAPF64[$ay >> 3] < 1.0726246343954077e+154 & +HEAPF64[$ay >> 3] > 1.7900017754880496e-154) {
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$ex >> 3];
  $36 = +Math_abs(+(+HEAPF64[$4 >> 3]));
  $42 = +HEAPF64[$ex >> 3] * ($36 + +Math_abs(+(+HEAPF64[$3 >> 3] * +HEAPF64[$2 >> 3])));
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $42;
  $48 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * 4.440892098500626e-16;
  $50 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$50 >> 3] = +HEAPF64[$50 >> 3] + $48;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 HEAPF64[$ly >> 3] = +Math_log(+(+HEAPF64[$ay >> 3]));
 HEAPF64[$l10_val >> 3] = (+HEAPF64[$1 >> 3] + +HEAPF64[$ly >> 3]) / 2.302585092994046;
 if (+HEAPF64[$l10_val >> 3] > 2147483646.0) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = inf;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(31008, 31024, 304, 16);
  HEAP32[$0 >> 2] = 16;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 if (+HEAPF64[$l10_val >> 3] < -2147483647.0) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(31032, 31024, 307, 15);
  HEAP32[$0 >> 2] = 15;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 } else {
  HEAPF64[$sy >> 3] = +((+HEAPF64[$3 >> 3] >= 0.0 ? 1 : -1) | 0);
  HEAP32[$N >> 2] = ~~+Math_floor(+(+HEAPF64[$l10_val >> 3]));
  HEAPF64[$arg_val >> 3] = (+HEAPF64[$l10_val >> 3] - +(HEAP32[$N >> 2] | 0)) * 2.302585092994046;
  $90 = +HEAPF64[$4 >> 3] / +Math_abs(+(+HEAPF64[$3 >> 3]));
  HEAPF64[$arg_err >> 3] = $90 + +HEAPF64[$2 >> 3] + +Math_abs(+(+HEAPF64[$arg_val >> 3])) * 4.440892098500626e-16;
  $100 = +HEAPF64[$sy >> 3] * +Math_exp(+(+HEAPF64[$arg_val >> 3]));
  HEAPF64[HEAP32[$5 >> 2] >> 3] = $100;
  $106 = +HEAPF64[$arg_err >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3]));
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $106;
  $112 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * 4.440892098500626e-16;
  $114 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$114 >> 3] = +HEAPF64[$114 >> 3] + $112;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] = HEAP32[$N >> 2];
  HEAP32[$0 >> 2] = 0;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 return 0;
}
function _gsl_sf_mathieu_ce($order, $qq, $zz, $result) {
 $order = $order | 0;
 $qq = +$qq;
 $zz = +$zz;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $121 = 0, $124 = 0, $17 = 0.0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $51 = 0, $66 = 0.0, $92 = 0.0, $aa = 0, $coeff = 0, $even_odd = 0, $factor = 0, $fn = 0, $ii = 0, $norm = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880 | 0;
 $0 = sp + 876 | 0;
 $1 = sp + 872 | 0;
 $2 = sp + 848 | 0;
 $3 = sp + 840 | 0;
 $4 = sp + 868 | 0;
 $even_odd = sp + 864 | 0;
 $ii = sp + 860 | 0;
 $status = sp + 856 | 0;
 $coeff = sp + 40 | 0;
 $norm = sp + 32 | 0;
 $fn = sp + 24 | 0;
 $factor = sp + 16 | 0;
 $aa = sp;
 HEAP32[$1 >> 2] = $order;
 HEAPF64[$2 >> 3] = $qq;
 HEAPF64[$3 >> 3] = $zz;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$norm >> 3] = 0.0;
 HEAP32[$even_odd >> 2] = 0;
 HEAP32[$even_odd >> 2] = ((HEAP32[$1 >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[$norm >> 3] = 1.0;
  if (!(HEAP32[$1 >> 2] | 0)) HEAPF64[$norm >> 3] = +Math_sqrt(2.0);
  $17 = +Math_cos(+(+(HEAP32[$1 >> 2] | 0) * +HEAPF64[$3 >> 3]));
  HEAPF64[$fn >> 3] = $17 / +HEAPF64[$norm >> 3];
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$fn >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16;
  HEAPF64[$factor >> 3] = +Math_abs(+(+HEAPF64[$fn >> 3]));
  if (+HEAPF64[$factor >> 3] > 1.0) {
   $30 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$30 >> 3] = +HEAPF64[$30 >> 3] * +HEAPF64[$factor >> 3];
  }
  HEAP32[$0 >> 2] = 0;
  $124 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $124 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < 0) HEAP32[$1 >> 2] = Math_imul(HEAP32[$1 >> 2] | 0, -1) | 0;
 HEAP32[$status >> 2] = _gsl_sf_mathieu_a(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $aa) | 0;
 if (HEAP32[$status >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $124 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $124 | 0;
 }
 HEAP32[$status >> 2] = _gsl_sf_mathieu_a_coeff(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$aa >> 3], $coeff) | 0;
 if (HEAP32[$status >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $124 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $124 | 0;
 }
 $51 = (HEAP32[$even_odd >> 2] | 0) == 0;
 HEAPF64[$fn >> 3] = 0.0;
 L22 : do if ($51) {
  HEAPF64[$norm >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$coeff >> 3];
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >= 100) break L22;
   $66 = +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3] * +Math_cos(+(+(HEAP32[$ii >> 2] | 0) * 2.0 * +HEAPF64[$3 >> 3]));
   HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + $66;
   HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3] * +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3];
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
 } else {
  HEAP32[$ii >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >= 100) break L22;
   $92 = +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3] * +Math_cos(+((+(HEAP32[$ii >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$3 >> 3]));
   HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + $92;
   HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3] * +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3];
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
 } while (0);
 HEAPF64[$norm >> 3] = +Math_sqrt(+(+HEAPF64[$norm >> 3]));
 HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] / +HEAPF64[$norm >> 3];
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$fn >> 3];
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16;
 HEAPF64[$factor >> 3] = +Math_abs(+(+HEAPF64[$fn >> 3]));
 if (+HEAPF64[$factor >> 3] > 1.0) {
  $121 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$121 >> 3] = +HEAPF64[$121 >> 3] * +HEAPF64[$factor >> 3];
 }
 HEAP32[$0 >> 2] = 0;
 $124 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $124 | 0;
}
function _gsl_sf_exp_mult_err_e($x, $dx, $y, $dy, $result) {
 $x = +$x;
 $dx = +$dx;
 $y = +$y;
 $dy = +$dy;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $108 = 0.0, $110 = 0, $118 = 0.0, $120 = 0, $123 = 0, $15 = 0.0, $2 = 0, $3 = 0, $34 = 0.0, $4 = 0, $40 = 0.0, $46 = 0.0, $48 = 0, $5 = 0, $M = 0, $N = 0, $a = 0, $ay = 0, $b = 0, $eMN = 0, $eab = 0, $ex = 0, $lnr = 0, $ly = 0, $sy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 120 | 0;
 $ay = sp + 80 | 0;
 $ex = sp + 72 | 0;
 $ly = sp + 64 | 0;
 $lnr = sp + 56 | 0;
 $sy = sp + 48 | 0;
 $M = sp + 40 | 0;
 $N = sp + 32 | 0;
 $a = sp + 24 | 0;
 $b = sp + 16 | 0;
 $eMN = sp + 8 | 0;
 $eab = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $dx;
 HEAPF64[$3 >> 3] = $y;
 HEAPF64[$4 >> 3] = $dy;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$ay >> 3] = +Math_abs(+(+HEAPF64[$3 >> 3]));
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  $15 = +Math_abs(+(+HEAPF64[$4 >> 3] * +Math_exp(+(+HEAPF64[$1 >> 3]))));
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $15;
  HEAP32[$0 >> 2] = 0;
  $123 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $123 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 354.891356446692 & +HEAPF64[$1 >> 3] > -354.19820926613204) if (+HEAPF64[$ay >> 3] < 1.0726246343954077e+154 & +HEAPF64[$ay >> 3] > 1.7900017754880496e-154) {
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$ex >> 3];
  $34 = +Math_abs(+(+HEAPF64[$4 >> 3]));
  $40 = +HEAPF64[$ex >> 3] * ($34 + +Math_abs(+(+HEAPF64[$3 >> 3] * +HEAPF64[$2 >> 3])));
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $40;
  $46 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * 4.440892098500626e-16;
  $48 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$48 >> 3] = +HEAPF64[$48 >> 3] + $46;
  HEAP32[$0 >> 2] = 0;
  $123 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $123 | 0;
 }
 HEAPF64[$ly >> 3] = +Math_log(+(+HEAPF64[$ay >> 3]));
 HEAPF64[$lnr >> 3] = +HEAPF64[$1 >> 3] + +HEAPF64[$ly >> 3];
 if (+HEAPF64[$lnr >> 3] > 709.772712893384) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31008, 31024, 254, 16);
  HEAP32[$0 >> 2] = 16;
  $123 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $123 | 0;
 }
 if (+HEAPF64[$lnr >> 3] < -708.3864185322641) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(31032, 31024, 257, 15);
  HEAP32[$0 >> 2] = 15;
  $123 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $123 | 0;
 } else {
  HEAPF64[$sy >> 3] = +((+HEAPF64[$3 >> 3] >= 0.0 ? 1 : -1) | 0);
  HEAPF64[$M >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$N >> 3] = +Math_floor(+(+HEAPF64[$ly >> 3]));
  HEAPF64[$a >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$M >> 3];
  HEAPF64[$b >> 3] = +HEAPF64[$ly >> 3] - +HEAPF64[$N >> 3];
  HEAPF64[$eMN >> 3] = +Math_exp(+(+HEAPF64[$M >> 3] + +HEAPF64[$N >> 3]));
  HEAPF64[$eab >> 3] = +Math_exp(+(+HEAPF64[$a >> 3] + +HEAPF64[$b >> 3]));
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sy >> 3] * +HEAPF64[$eMN >> 3] * +HEAPF64[$eab >> 3];
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = +HEAPF64[$eMN >> 3] * +HEAPF64[$eab >> 3] * 2.0 * 2.220446049250313e-16;
  $108 = +HEAPF64[$eMN >> 3] * +HEAPF64[$eab >> 3] * +Math_abs(+(+HEAPF64[$4 >> 3] / +HEAPF64[$3 >> 3]));
  $110 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$110 >> 3] = +HEAPF64[$110 >> 3] + $108;
  $118 = +HEAPF64[$eMN >> 3] * +HEAPF64[$eab >> 3] * +Math_abs(+(+HEAPF64[$2 >> 3]));
  $120 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$120 >> 3] = +HEAPF64[$120 >> 3] + $118;
  HEAP32[$0 >> 2] = 0;
  $123 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $123 | 0;
 }
 return 0;
}
function _legendre_H3d_series($ell, $lambda, $eta, $result) {
 $ell = $ell | 0;
 $lambda = +$lambda;
 $eta = +$eta;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $108 = 0.0, $122 = 0.0, $137 = 0, $2 = 0, $3 = 0, $62 = 0.0, $70 = 0.0, $75 = 0.0, $aR = 0, $lg_lp32 = 0, $lnN = 0, $ln_zm1 = 0, $ln_zp1 = 0, $lnpre_err = 0, $lnpre_val = 0, $lnprepow = 0, $lnsheta = 0, $n = 0, $shheta = 0, $stat_e = 0, $sum = 0, $sum_err = 0, $term = 0, $zeta = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 160 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 128 | 0;
 $3 = sp + 156 | 0;
 $shheta = sp + 120 | 0;
 $ln_zp1 = sp + 112 | 0;
 $ln_zm1 = sp + 104 | 0;
 $zeta = sp + 96 | 0;
 $lg_lp32 = sp + 80 | 0;
 $term = sp + 72 | 0;
 $sum = sp + 64 | 0;
 $sum_err = sp + 56 | 0;
 $lnsheta = sp + 40 | 0;
 $lnN = sp + 32 | 0;
 $lnpre_val = sp + 24 | 0;
 $lnpre_err = sp + 16 | 0;
 $lnprepow = sp + 8 | 0;
 $stat_e = sp + 148 | 0;
 $n = sp + 144 | 0;
 $aR = sp;
 HEAP32[$0 >> 2] = $ell;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $eta;
 HEAP32[$3 >> 2] = $result;
 HEAP32[sp + 152 >> 2] = 5e3;
 HEAPF64[$shheta >> 3] = +_sinh(+(+HEAPF64[$2 >> 3] * .5));
 HEAPF64[$ln_zp1 >> 3] = +Math_log(+(+HEAPF64[$shheta >> 3] * +HEAPF64[$shheta >> 3] + 1.0)) + .6931471805599453;
 HEAPF64[$ln_zm1 >> 3] = +Math_log(+(+HEAPF64[$shheta >> 3])) * 2.0 + .6931471805599453;
 HEAPF64[$zeta >> 3] = -+HEAPF64[$shheta >> 3] * +HEAPF64[$shheta >> 3];
 HEAPF64[$term >> 3] = 1.0;
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$sum_err >> 3] = 0.0;
 _gsl_sf_lngamma_e(+(HEAP32[$0 >> 2] | 0) + 1.5, $lg_lp32) | 0;
 _gsl_sf_lnsinh_e(+HEAPF64[$2 >> 3], $lnsheta) | 0;
 _legendre_H3d_lnnorm(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3], $lnN) | 0;
 HEAPF64[$lnprepow >> 3] = (+(HEAP32[$0 >> 2] | 0) + .5) * .5 * (+HEAPF64[$ln_zm1 >> 3] - +HEAPF64[$ln_zp1 >> 3]);
 HEAPF64[$lnpre_val >> 3] = +HEAPF64[$lnprepow >> 3] + (+HEAPF64[$lnN >> 3] + 1.1447298858494002 - .6931471805599453 - +HEAPF64[$lnsheta >> 3]) * .5 - +HEAPF64[$lg_lp32 >> 3] - +Math_log(+(+Math_abs(+(+HEAPF64[$1 >> 3]))));
 HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lnsheta + 8 >> 3] + +HEAPF64[$lg_lp32 + 8 >> 3] + +Math_abs(+(+HEAPF64[$lnpre_val >> 3])) * 2.220446049250313e-16;
 $62 = (+Math_abs(+(+HEAPF64[$lnN >> 3])) + 1.1447298858494002 + .6931471805599453) * 4.440892098500626e-16;
 HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lnpre_err >> 3] + $62;
 $70 = +Math_abs(+(+HEAPF64[$ln_zm1 >> 3]));
 $75 = (+(HEAP32[$0 >> 2] | 0) + .5) * .5 * ($70 + +Math_abs(+(+HEAPF64[$ln_zp1 >> 3]))) * 4.440892098500626e-16;
 HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lnpre_err >> 3] + $75;
 HEAP32[$n >> 2] = 1;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= 5e3) break;
  HEAPF64[$aR >> 3] = +(HEAP32[$n >> 2] | 0) - .5;
  HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * ((+HEAPF64[$aR >> 3] * +HEAPF64[$aR >> 3] + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) * +HEAPF64[$zeta >> 3] / (+((HEAP32[$0 >> 2] | 0) + (HEAP32[$n >> 2] | 0) | 0) + .5) / +(HEAP32[$n >> 2] | 0));
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
  $108 = +Math_abs(+(+HEAPF64[$term >> 3])) * 4.440892098500626e-16;
  HEAPF64[$sum_err >> 3] = +HEAPF64[$sum_err >> 3] + $108;
  if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 4.440892098500626e-16) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 $122 = +Math_abs(+(+HEAPF64[$term >> 3]));
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], +HEAPF64[$sum >> 3], $122 + +HEAPF64[$sum_err >> 3], HEAP32[$3 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) {
  $137 = HEAP32[$stat_e >> 2] | 0;
  STACKTOP = sp;
  return $137 | 0;
 }
 if (!(((HEAP32[$n >> 2] | 0) == 5e3 ? 11 : 0) | 0)) {
  $137 = 0;
  STACKTOP = sp;
  return $137 | 0;
 }
 $137 = (HEAP32[$n >> 2] | 0) == 5e3 ? 11 : 0;
 STACKTOP = sp;
 return $137 | 0;
}
function _gsl_sf_bessel_Inu_scaled_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $109 = 0.0, $119 = 0, $120 = 0, $2 = 0, $3 = 0, $37 = 0.0, $39 = 0, $52 = 0.0, $64 = 0.0, $65 = 0.0, $I_nu_ratio = 0, $K_mu = 0, $K_mup1 = 0, $K_nu = 0, $K_num1 = 0, $K_nup1 = 0, $Kp_mu = 0, $N = 0, $b = 0, $ex = 0, $mu = 0, $n = 0, $stat = 0, $stat_Irat = 0, $stat_Kmu = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 128 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 124 | 0;
 $b = sp + 72 | 0;
 $ex = sp + 64 | 0;
 $stat = sp + 120 | 0;
 $N = sp + 116 | 0;
 $mu = sp + 56 | 0;
 $K_mu = sp + 48 | 0;
 $K_mup1 = sp + 40 | 0;
 $Kp_mu = sp + 32 | 0;
 $K_nu = sp + 24 | 0;
 $K_nup1 = sp + 16 | 0;
 $K_num1 = sp + 8 | 0;
 $I_nu_ratio = sp;
 $stat_Irat = sp + 112 | 0;
 $stat_Kmu = sp + 108 | 0;
 $n = sp + 104 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] < 0.0)) if (!(+HEAPF64[$1 >> 3] < 0.0)) {
  if (+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] < (+HEAPF64[$1 >> 3] + 1.0) * 10.0) {
   HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$2 >> 3]);
   HEAP32[$stat >> 2] = _gsl_sf_bessel_IJ_taylor_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], 1, 100, 2.220446049250313e-16, $b) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$b >> 3] * +HEAPF64[$ex >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$b + 8 >> 3] * +HEAPF64[$ex >> 3];
   $37 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $39 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$39 >> 3] = +HEAPF64[$39 >> 3] + $37;
   HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
   $120 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $120 | 0;
  }
  $52 = +HEAPF64[$1 >> 3];
  if (.5 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]) < 6055454452393343.0e-21) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_Inu_scaled_asymp_unif_e($52, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $120 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $120 | 0;
  }
  HEAP32[$N >> 2] = ~~($52 + .5);
  HEAPF64[$mu >> 3] = +HEAPF64[$1 >> 3] - +(HEAP32[$N >> 2] | 0);
  $64 = +HEAPF64[$mu >> 3];
  $65 = +HEAPF64[$2 >> 3];
  if (+HEAPF64[$2 >> 3] < 2.0) HEAP32[$stat_Kmu >> 2] = _gsl_sf_bessel_K_scaled_temme($64, $65, $K_mu, $K_mup1, $Kp_mu) | 0; else HEAP32[$stat_Kmu >> 2] = _gsl_sf_bessel_K_scaled_steed_temme_CF2($64, $65, $K_mu, $K_mup1, $Kp_mu) | 0;
  HEAPF64[$K_nu >> 3] = +HEAPF64[$K_mu >> 3];
  HEAPF64[$K_nup1 >> 3] = +HEAPF64[$K_mup1 >> 3];
  HEAP32[$n >> 2] = 0;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$N >> 2] | 0)) break;
   HEAPF64[$K_num1 >> 3] = +HEAPF64[$K_nu >> 3];
   HEAPF64[$K_nu >> 3] = +HEAPF64[$K_nup1 >> 3];
   HEAPF64[$K_nup1 >> 3] = (+HEAPF64[$mu >> 3] + +(HEAP32[$n >> 2] | 0) + 1.0) * 2.0 / +HEAPF64[$2 >> 3] * +HEAPF64[$K_nu >> 3] + +HEAPF64[$K_num1 >> 3];
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  HEAP32[$stat_Irat >> 2] = _gsl_sf_bessel_I_CF1_ser(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $I_nu_ratio) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0 / (+HEAPF64[$2 >> 3] * (+HEAPF64[$K_nup1 >> 3] + +HEAPF64[$I_nu_ratio >> 3] * +HEAPF64[$K_nu >> 3]));
  $109 = (+(HEAP32[$N >> 2] | 0) * .5 + 2.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $109;
  if (HEAP32[$stat_Kmu >> 2] | 0) $119 = HEAP32[$stat_Kmu >> 2] | 0; else $119 = (HEAP32[$stat_Irat >> 2] | 0) != 0 ? HEAP32[$stat_Irat >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $119;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(12128, 12144, 43, 1);
 HEAP32[$0 >> 2] = 1;
 $120 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $120 | 0;
}
function _gsl_sf_ellint_P_e($phi, $k, $n, $mode, $result) {
 $phi = +$phi;
 $k = +$k;
 $n = +$n;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $103 = 0, $112 = 0, $117 = 0.0, $122 = 0, $135 = 0, $136 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $58 = 0.0, $65 = 0.0, $67 = 0, $77 = 0.0, $79 = 0, $89 = 0.0, $91 = 0, $nc = 0, $phi_red = 0, $rf = 0, $rfstatus = 0, $rj = 0, $rjstatus = 0, $rp = 0, $rpstatus = 0, $sin2_phi = 0, $sin3_phi = 0, $sin_phi = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 148 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 112 | 0;
 $3 = sp + 104 | 0;
 $4 = sp + 144 | 0;
 $5 = sp + 140 | 0;
 $nc = sp + 96 | 0;
 $phi_red = sp + 88 | 0;
 $sin_phi = sp + 80 | 0;
 $sin2_phi = sp + 72 | 0;
 $sin3_phi = sp + 64 | 0;
 $x = sp + 56 | 0;
 $y = sp + 48 | 0;
 $rf = sp + 32 | 0;
 $rj = sp + 16 | 0;
 $rfstatus = sp + 136 | 0;
 $rjstatus = sp + 132 | 0;
 $rp = sp;
 $rpstatus = sp + 128 | 0;
 HEAPF64[$1 >> 3] = $phi;
 HEAPF64[$2 >> 3] = $k;
 HEAPF64[$3 >> 3] = $n;
 HEAP32[$4 >> 2] = $mode;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$nc >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] / 3.141592653589793 + .5));
 HEAPF64[$phi_red >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$nc >> 3] * 3.141592653589793;
 HEAPF64[$1 >> 3] = +HEAPF64[$phi_red >> 3];
 HEAPF64[$sin_phi >> 3] = +Math_sin(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$sin2_phi >> 3] = +HEAPF64[$sin_phi >> 3] * +HEAPF64[$sin_phi >> 3];
 HEAPF64[$sin3_phi >> 3] = +HEAPF64[$sin2_phi >> 3] * +HEAPF64[$sin_phi >> 3];
 HEAPF64[$x >> 3] = 1.0 - +HEAPF64[$sin2_phi >> 3];
 HEAPF64[$y >> 3] = 1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$sin2_phi >> 3];
 HEAP32[$rfstatus >> 2] = _gsl_sf_ellint_RF_e(+HEAPF64[$x >> 3], +HEAPF64[$y >> 3], 1.0, HEAP32[$4 >> 2] | 0, $rf) | 0;
 HEAP32[$rjstatus >> 2] = _gsl_sf_ellint_RJ_e(+HEAPF64[$x >> 3], +HEAPF64[$y >> 3], 1.0, +HEAPF64[$3 >> 3] * +HEAPF64[$sin2_phi >> 3] + 1.0, HEAP32[$4 >> 2] | 0, $rj) | 0;
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sin_phi >> 3] * +HEAPF64[$rf >> 3] - +HEAPF64[$3 >> 3] / 3.0 * +HEAPF64[$sin3_phi >> 3] * +HEAPF64[$rj >> 3];
 $58 = +Math_abs(+(+HEAPF64[$sin_phi >> 3] * +HEAPF64[$rf >> 3])) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $58;
 $65 = +Math_abs(+(+HEAPF64[$sin_phi >> 3] * +HEAPF64[$rf + 8 >> 3]));
 $67 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$67 >> 3] = +HEAPF64[$67 >> 3] + $65;
 $77 = +HEAPF64[$3 >> 3] / 3.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$sin3_phi >> 3] * +HEAPF64[$rj >> 3]));
 $79 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$79 >> 3] = +HEAPF64[$79 >> 3] + $77;
 $89 = +HEAPF64[$3 >> 3] / 3.0 * +Math_abs(+(+HEAPF64[$sin3_phi >> 3] * +HEAPF64[$rj + 8 >> 3]));
 $91 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$91 >> 3] = +HEAPF64[$91 >> 3] + $89;
 if (+HEAPF64[$nc >> 3] == 0.0) {
  if (HEAP32[$rfstatus >> 2] | 0) $103 = HEAP32[$rfstatus >> 2] | 0; else $103 = (HEAP32[$rjstatus >> 2] | 0) != 0 ? HEAP32[$rjstatus >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $103;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 HEAP32[$rpstatus >> 2] = _gsl_sf_ellint_Pcomp_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0, $rp) | 0;
 $112 = HEAP32[$5 >> 2] | 0;
 HEAPF64[$112 >> 3] = +HEAPF64[$112 >> 3] + +HEAPF64[$nc >> 3] * 2.0 * +HEAPF64[$rp >> 3];
 $117 = +Math_abs(+(+HEAPF64[$nc >> 3])) * 2.0;
 $122 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$122 >> 3] = +HEAPF64[$122 >> 3] + $117 * +HEAPF64[$rp + 8 >> 3];
 do if (HEAP32[$rfstatus >> 2] | 0) $135 = HEAP32[$rfstatus >> 2] | 0; else if (HEAP32[$rjstatus >> 2] | 0) {
  $135 = HEAP32[$rjstatus >> 2] | 0;
  break;
 } else {
  $135 = (HEAP32[$rpstatus >> 2] | 0) != 0 ? HEAP32[$rpstatus >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $135;
 $136 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $136 | 0;
}
function _gsl_sf_sin_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $106 = 0.0, $111 = 0.0, $117 = 0.0, $123 = 0.0, $131 = 0, $2 = 0, $26 = 0.0, $33 = 0.0, $71 = 0.0, $99 = 0, $abs_x = 0, $cos_cs_result = 0, $octant = 0, $sgn_result = 0, $sgn_x = 0, $sin_cs_result = 0, $stat_cs = 0, $t = 0, $t1 = 0, $x2 = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 140 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 136 | 0;
 $sgn_x = sp + 88 | 0;
 $abs_x = sp + 80 | 0;
 $x2 = sp + 72 | 0;
 $sgn_result = sp + 64 | 0;
 $y = sp + 56 | 0;
 $octant = sp + 132 | 0;
 $stat_cs = sp + 128 | 0;
 $z = sp + 48 | 0;
 $sin_cs_result = sp + 32 | 0;
 $t = sp + 24 | 0;
 $cos_cs_result = sp + 8 | 0;
 $t1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 112 >> 3] = .7853981256484985;
 HEAPF64[sp + 104 >> 3] = 3.774894707930798e-8;
 HEAPF64[sp + 96 >> 3] = 2.6951514290790595e-15;
 HEAPF64[$sgn_x >> 3] = +((+HEAPF64[$1 >> 3] >= 0.0 ? 1 : -1) | 0);
 HEAPF64[$abs_x >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$abs_x >> 3] < .0001220703125) {
  HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * (1.0 - +HEAPF64[$x2 >> 3] / 6.0);
  $26 = +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$x2 >> 3] * +HEAPF64[$x2 >> 3] / 100.0));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $26;
  HEAP32[$0 >> 2] = 0;
  $131 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 HEAPF64[$sgn_result >> 3] = +HEAPF64[$sgn_x >> 3];
 HEAPF64[$y >> 3] = +Math_floor(+(+HEAPF64[$abs_x >> 3] / .7853981633974483));
 $33 = +HEAPF64[$y >> 3];
 HEAP32[$octant >> 2] = ~~($33 - +_ldexp(+Math_floor(+(+_ldexp(+HEAPF64[$y >> 3], -3))), 3));
 if (HEAP32[$octant >> 2] & 1) {
  HEAP32[$octant >> 2] = (HEAP32[$octant >> 2] | 0) + 1;
  HEAP32[$octant >> 2] = HEAP32[$octant >> 2] & 7;
  HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] + 1.0;
 }
 if ((HEAP32[$octant >> 2] | 0) > 3) {
  HEAP32[$octant >> 2] = (HEAP32[$octant >> 2] | 0) - 4;
  HEAPF64[$sgn_result >> 3] = -+HEAPF64[$sgn_result >> 3];
 }
 HEAPF64[$z >> 3] = +HEAPF64[$abs_x >> 3] - +HEAPF64[$y >> 3] * .7853981256484985 - +HEAPF64[$y >> 3] * 3.774894707930798e-8 - +HEAPF64[$y >> 3] * 2.6951514290790595e-15;
 $71 = +Math_abs(+(+HEAPF64[$z >> 3])) * 8.0 / 3.141592653589793 - 1.0;
 if (!(HEAP32[$octant >> 2] | 0)) {
  HEAPF64[$t >> 3] = $71;
  HEAP32[$stat_cs >> 2] = _cheb_eval_e641(62224, +HEAPF64[$t >> 3], $sin_cs_result) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$z >> 3] * (+HEAPF64[$z >> 3] * +HEAPF64[$z >> 3] * +HEAPF64[$sin_cs_result >> 3] + 1.0);
 } else {
  HEAPF64[$t1 >> 3] = $71;
  HEAP32[$stat_cs >> 2] = _cheb_eval_e641(62096, +HEAPF64[$t1 >> 3], $cos_cs_result) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - +HEAPF64[$z >> 3] * .5 * +HEAPF64[$z >> 3] * (1.0 - +HEAPF64[$z >> 3] * +HEAPF64[$z >> 3] * +HEAPF64[$cos_cs_result >> 3]);
 }
 $99 = HEAP32[$2 >> 2] | 0;
 HEAPF64[$99 >> 3] = +HEAPF64[$99 >> 3] * +HEAPF64[$sgn_result >> 3];
 do if (+HEAPF64[$abs_x >> 3] > 4503599627370496.0) {
  $106 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $106;
 } else {
  $111 = +HEAPF64[$abs_x >> 3];
  if (+HEAPF64[$abs_x >> 3] > 6710886400.0) {
   $117 = 2.0 * $111 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $117;
   break;
  }
  $123 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  if ($111 > 6710886.4) {
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.9802322387695312e-8 * $123;
   break;
  } else {
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16 * $123;
   break;
  }
 } while (0);
 HEAP32[$0 >> 2] = HEAP32[$stat_cs >> 2];
 $131 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $131 | 0;
}
function _gsl_sf_mathieu_se($order, $qq, $zz, $result) {
 $order = $order | 0;
 $qq = +$qq;
 $zz = +$zz;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $119 = 0, $122 = 0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $51 = 0, $73 = 0.0, $99 = 0.0, $aa = 0, $coeff = 0, $even_odd = 0, $factor = 0, $fn = 0, $ii = 0, $norm = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880 | 0;
 $0 = sp + 876 | 0;
 $1 = sp + 872 | 0;
 $2 = sp + 848 | 0;
 $3 = sp + 840 | 0;
 $4 = sp + 868 | 0;
 $even_odd = sp + 864 | 0;
 $ii = sp + 860 | 0;
 $status = sp + 856 | 0;
 $coeff = sp + 40 | 0;
 $norm = sp + 32 | 0;
 $fn = sp + 24 | 0;
 $factor = sp + 16 | 0;
 $aa = sp;
 HEAP32[$1 >> 2] = $order;
 HEAPF64[$2 >> 3] = $qq;
 HEAPF64[$3 >> 3] = $zz;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$norm >> 3] = 0.0;
 HEAP32[$even_odd >> 2] = 0;
 HEAP32[$even_odd >> 2] = ((HEAP32[$1 >> 2] | 0) % 2 | 0 | 0) != 0 ? 1 : 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $122 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[$norm >> 3] = 1.0;
  HEAPF64[$fn >> 3] = +Math_sin(+(+(HEAP32[$1 >> 2] | 0) * +HEAPF64[$3 >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$fn >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16;
  HEAPF64[$factor >> 3] = +Math_abs(+(+HEAPF64[$fn >> 3]));
  if (+HEAPF64[$factor >> 3] > 1.0) {
   $30 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
   HEAPF64[$30 >> 3] = +HEAPF64[$30 >> 3] * +HEAPF64[$factor >> 3];
  }
  HEAP32[$0 >> 2] = 0;
  $122 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < 0) HEAP32[$1 >> 2] = Math_imul(HEAP32[$1 >> 2] | 0, -1) | 0;
 HEAP32[$status >> 2] = _gsl_sf_mathieu_b(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $aa) | 0;
 if (HEAP32[$status >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $122 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 HEAP32[$status >> 2] = _gsl_sf_mathieu_b_coeff(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$aa >> 3], $coeff) | 0;
 if (HEAP32[$status >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $122 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 $51 = (HEAP32[$even_odd >> 2] | 0) == 0;
 HEAPF64[$fn >> 3] = 0.0;
 HEAP32[$ii >> 2] = 0;
 L23 : do if ($51) while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= 100) break L23;
  HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3] * +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3];
  $73 = +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3] * +Math_sin(+(+((HEAP32[$ii >> 2] | 0) + 1 | 0) * 2.0 * +HEAPF64[$3 >> 3]));
  HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + $73;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 } else while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= 100) break L23;
  HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3] * +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3];
  $99 = +HEAPF64[$coeff + (HEAP32[$ii >> 2] << 3) >> 3] * +Math_sin(+((+(HEAP32[$ii >> 2] | 0) * 2.0 + 1.0) * +HEAPF64[$3 >> 3]));
  HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] + $99;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 } while (0);
 HEAPF64[$norm >> 3] = +Math_sqrt(+(+HEAPF64[$norm >> 3]));
 HEAPF64[$fn >> 3] = +HEAPF64[$fn >> 3] / +HEAPF64[$norm >> 3];
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$fn >> 3];
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16;
 HEAPF64[$factor >> 3] = +Math_abs(+(+HEAPF64[$fn >> 3]));
 if (+HEAPF64[$factor >> 3] > 1.0) {
  $119 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$119 >> 3] = +HEAPF64[$119 >> 3] * +HEAPF64[$factor >> 3];
 }
 HEAP32[$0 >> 2] = 0;
 $122 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $122 | 0;
}
function _hyperg_U_CF1($a, $b, $N, $x, $result, $count) {
 $a = +$a;
 $b = +$b;
 $N = $N | 0;
 $x = +$x;
 $result = $result | 0;
 $count = $count | 0;
 var $0 = 0, $1 = 0, $128 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $An = 0, $Anm1 = 0, $Anm2 = 0, $Bn = 0, $Bnm1 = 0, $Bnm2 = 0, $a1 = 0, $an = 0, $b1 = 0, $bn = 0, $del = 0, $fn = 0, $n = 0, $old_fn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 156 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 152 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 148 | 0;
 $6 = sp + 144 | 0;
 $n = sp + 136 | 0;
 $Anm2 = sp + 96 | 0;
 $Bnm2 = sp + 88 | 0;
 $Anm1 = sp + 80 | 0;
 $Bnm1 = sp + 72 | 0;
 $a1 = sp + 64 | 0;
 $b1 = sp + 56 | 0;
 $An = sp + 48 | 0;
 $Bn = sp + 40 | 0;
 $an = sp + 32 | 0;
 $bn = sp + 24 | 0;
 $fn = sp + 16 | 0;
 $old_fn = sp + 8 | 0;
 $del = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAP32[$3 >> 2] = $N;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAP32[$6 >> 2] = $count;
 HEAPF64[sp + 104 >> 3] = 1.3407807929942596e+154;
 HEAP32[sp + 140 >> 2] = 2e4;
 HEAP32[$n >> 2] = 1;
 HEAPF64[$Anm2 >> 3] = 1.0;
 HEAPF64[$Bnm2 >> 3] = 0.0;
 HEAPF64[$Anm1 >> 3] = 0.0;
 HEAPF64[$Bnm1 >> 3] = 1.0;
 HEAPF64[$a1 >> 3] = -(+HEAPF64[$1 >> 3] + +(HEAP32[$3 >> 2] | 0));
 HEAPF64[$b1 >> 3] = +HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[$4 >> 3] - +((HEAP32[$3 >> 2] | 0) + 1 | 0) * 2.0;
 HEAPF64[$An >> 3] = +HEAPF64[$b1 >> 3] * +HEAPF64[$Anm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Anm2 >> 3];
 HEAPF64[$Bn >> 3] = +HEAPF64[$b1 >> 3] * +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Bnm2 >> 3];
 HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
 do {
  if ((HEAP32[$n >> 2] | 0) >= 2e4) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm1 >> 3];
  HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm1 >> 3];
  HEAPF64[$Anm1 >> 3] = +HEAPF64[$An >> 3];
  HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bn >> 3];
  HEAPF64[$an >> 3] = -(+HEAPF64[$1 >> 3] + +(HEAP32[$3 >> 2] | 0) + +(HEAP32[$n >> 2] | 0) - +HEAPF64[$2 >> 3]) * (+HEAPF64[$1 >> 3] + +(HEAP32[$3 >> 2] | 0) + +(HEAP32[$n >> 2] | 0) - 1.0);
  HEAPF64[$bn >> 3] = +HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[$4 >> 3] - +((HEAP32[$3 >> 2] | 0) + (HEAP32[$n >> 2] | 0) | 0) * 2.0;
  HEAPF64[$An >> 3] = +HEAPF64[$bn >> 3] * +HEAPF64[$Anm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Anm2 >> 3];
  HEAPF64[$Bn >> 3] = +HEAPF64[$bn >> 3] * +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Bnm2 >> 3];
  if (+Math_abs(+(+HEAPF64[$An >> 3])) > 1.3407807929942596e+154) label = 5; else if (+Math_abs(+(+HEAPF64[$Bn >> 3])) > 1.3407807929942596e+154) label = 5;
  if ((label | 0) == 5) {
   label = 0;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] / 1.3407807929942596e+154;
  }
  HEAPF64[$old_fn >> 3] = +HEAPF64[$fn >> 3];
  HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
  HEAPF64[$del >> 3] = +HEAPF64[$old_fn >> 3] / +HEAPF64[$fn >> 3];
 } while (!(+Math_abs(+(+HEAPF64[$del >> 3] - 1.0)) < 2.220446049250313e-15));
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$fn >> 3];
 HEAP32[HEAP32[$6 >> 2] >> 2] = HEAP32[$n >> 2];
 if ((HEAP32[$n >> 2] | 0) == 2e4) {
  _gsl_error(52312, 52168, 121, 11);
  HEAP32[$0 >> 2] = 11;
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 return 0;
}
function _fd_neg($j, $x, $result) {
 $j = +$j;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $105 = 0.0, $107 = 0, $112 = 0, $2 = 0, $3 = 0, $53 = 0.0, $82 = 0.0, $enx = 0, $ex = 0, $ex1 = 0, $f = 0, $f_previous = 0, $jterm = 0, $n = 0, $p = 0, $p2 = 0, $qden = 0, $qnum = 0, $rat = 0, $s = 0, $sum = 0, $term = 0, $term3 = 0, $xn = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1760 | 0;
 $0 = sp + 1748 | 0;
 $1 = sp + 1728 | 0;
 $2 = sp + 1720 | 0;
 $3 = sp + 1744 | 0;
 $qnum = sp + 912 | 0;
 $qden = sp + 104 | 0;
 $ex = sp + 96 | 0;
 $term = sp + 88 | 0;
 $sum = sp + 80 | 0;
 $n = sp + 1740 | 0;
 $rat = sp + 72 | 0;
 $p = sp + 64 | 0;
 $s = sp + 56 | 0;
 $xn = sp + 48 | 0;
 $ex1 = sp + 40 | 0;
 $enx = sp + 32 | 0;
 $f = sp + 24 | 0;
 $f_previous = sp + 16 | 0;
 $jterm = sp + 1736 | 0;
 $p2 = sp + 8 | 0;
 $term3 = sp;
 HEAPF64[$1 >> 3] = $j;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 if (+HEAPF64[$2 >> 3] < -1.0) if (+HEAPF64[$2 >> 3] < -+Math_abs(+(+HEAPF64[$1 >> 3] + 1.0))) {
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$term >> 3] = +HEAPF64[$ex >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$term >> 3];
  HEAP32[$n >> 2] = 2;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) >= 100) break;
   HEAPF64[$rat >> 3] = (+(HEAP32[$n >> 2] | 0) - 1.0) / +(HEAP32[$n >> 2] | 0);
   HEAPF64[$p >> 3] = +Math_pow(+(+HEAPF64[$rat >> 3]), +(+HEAPF64[$1 >> 3] + 1.0));
   HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * -+HEAPF64[$ex >> 3] * +HEAPF64[$p >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
   if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$sum >> 3];
  $53 = +Math_abs(+(+HEAPF64[$sum >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $53;
  HEAP32[$0 >> 2] = 0;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 HEAPF64[$s >> 3] = 0.0;
 HEAPF64[$xn >> 3] = +HEAPF64[$2 >> 3];
 HEAPF64[$ex1 >> 3] = -+Math_exp(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$enx >> 3] = -+HEAPF64[$ex1 >> 3];
 HEAPF64[$f >> 3] = 0.0;
 HEAP32[$jterm >> 2] = 0;
 while (1) {
  if ((HEAP32[$jterm >> 2] | 0) > 100) break;
  HEAPF64[$p2 >> 3] = +Math_pow(+(+(HEAP32[$jterm >> 2] | 0) + 1.0), +(+HEAPF64[$1 >> 3] + 1.0));
  HEAPF64[$term3 >> 3] = +HEAPF64[$enx >> 3] / +HEAPF64[$p2 >> 3];
  HEAPF64[$f_previous >> 3] = +HEAPF64[$f >> 3];
  _fd_whiz(+HEAPF64[$term3 >> 3], HEAP32[$jterm >> 2] | 0, $qnum, $qden, $f, $s) | 0;
  HEAPF64[$xn >> 3] = +HEAPF64[$xn >> 3] + +HEAPF64[$2 >> 3];
  $82 = +Math_abs(+(+HEAPF64[$f >> 3] - +HEAPF64[$f_previous >> 3]));
  if ($82 < +Math_abs(+(+HEAPF64[$f >> 3])) * 2.0 * 2.220446049250313e-16) break;
  if (+HEAPF64[$xn >> 3] < -708.3964185322641) break;
  HEAPF64[$enx >> 3] = +HEAPF64[$enx >> 3] * +HEAPF64[$ex1 >> 3];
  HEAP32[$jterm >> 2] = (HEAP32[$jterm >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$f >> 3];
 $100 = +Math_abs(+(+HEAPF64[$f >> 3] - +HEAPF64[$f_previous >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $100;
 $105 = +Math_abs(+(+HEAPF64[$f >> 3])) * 4.440892098500626e-16;
 $107 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$107 >> 3] = +HEAPF64[$107 >> 3] + $105;
 if ((HEAP32[$jterm >> 2] | 0) == 100) {
  _gsl_error(36424, 33392, 968, 11);
  HEAP32[$0 >> 2] = 11;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 return 0;
}
function _mcmahon_correction($mu, $beta) {
 $mu = +$mu;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $172 = 0.0, $2 = 0, $eb = 0, $ebsq = 0, $mi = 0, $n2 = 0, $n3 = 0, $n4 = 0, $n5 = 0, $n6 = 0, $r = 0, $term1 = 0, $term11 = 0, $term2 = 0, $term22 = 0, $term3 = 0, $term33 = 0, $term4 = 0, $term44 = 0, $term5 = 0, $term55 = 0, $term6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 176 | 0;
 $1 = sp + 168 | 0;
 $2 = sp + 160 | 0;
 $eb = sp + 152 | 0;
 $ebsq = sp + 144 | 0;
 $term1 = sp + 136 | 0;
 $term2 = sp + 128 | 0;
 $term3 = sp + 120 | 0;
 $term4 = sp + 112 | 0;
 $term5 = sp + 104 | 0;
 $mi = sp + 96 | 0;
 $r = sp + 88 | 0;
 $n2 = sp + 80 | 0;
 $n3 = sp + 72 | 0;
 $n4 = sp + 64 | 0;
 $n5 = sp + 56 | 0;
 $n6 = sp + 48 | 0;
 $term11 = sp + 40 | 0;
 $term22 = sp + 32 | 0;
 $term33 = sp + 24 | 0;
 $term44 = sp + 16 | 0;
 $term55 = sp + 8 | 0;
 $term6 = sp;
 HEAPF64[$1 >> 3] = $mu;
 HEAPF64[$2 >> 3] = $beta;
 HEAPF64[$eb >> 3] = +HEAPF64[$2 >> 3] * 8.0;
 HEAPF64[$ebsq >> 3] = +HEAPF64[$eb >> 3] * +HEAPF64[$eb >> 3];
 if (+HEAPF64[$1 >> 3] < 2.220446049250313e-16) {
  HEAPF64[$term1 >> 3] = 1.0 / +HEAPF64[$ebsq >> 3];
  HEAPF64[$term2 >> 3] = -124.0 / (+HEAPF64[$ebsq >> 3] * 3.0 * +HEAPF64[$ebsq >> 3]);
  HEAPF64[$term3 >> 3] = 120928.0 / (+HEAPF64[$ebsq >> 3] * 15.0 * +HEAPF64[$ebsq >> 3] * +HEAPF64[$ebsq >> 3]);
  HEAPF64[$term4 >> 3] = -401743168.0 / (+HEAPF64[$ebsq >> 3] * 105.0 * +HEAPF64[$ebsq >> 3] * +HEAPF64[$ebsq >> 3] * +HEAPF64[$ebsq >> 3]);
  HEAPF64[$term5 >> 3] = 1071187749376.0 / (+HEAPF64[$ebsq >> 3] * 315.0 * +HEAPF64[$ebsq >> 3] * +HEAPF64[$ebsq >> 3] * +HEAPF64[$ebsq >> 3] * +HEAPF64[$ebsq >> 3]);
  HEAPF64[$0 >> 3] = (+HEAPF64[$term1 >> 3] + +HEAPF64[$term2 >> 3] + +HEAPF64[$term3 >> 3] + +HEAPF64[$term4 >> 3] + +HEAPF64[$term5 >> 3]) * 8.0 + 1.0;
  $172 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$172;
 } else {
  HEAPF64[$mi >> 3] = 1.0 / +HEAPF64[$1 >> 3];
  HEAPF64[$r >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$ebsq >> 3];
  HEAPF64[$n2 >> 3] = (7.0 - +HEAPF64[$mi >> 3] * 31.0) * 1.3333333333333333;
  HEAPF64[$n3 >> 3] = ((+HEAPF64[$mi >> 3] * 3779.0 + -982.0) * +HEAPF64[$mi >> 3] + 83.0) * 2.1333333333333333;
  HEAPF64[$n4 >> 3] = (((1585743.0 - +HEAPF64[$mi >> 3] * 6277237.0) * +HEAPF64[$mi >> 3] + -153855.0) * +HEAPF64[$mi >> 3] + 6949.0) * .6095238095238096;
  HEAPF64[$n5 >> 3] = ((((+HEAPF64[$mi >> 3] * 2092163573.0 + -512062548.0) * +HEAPF64[$mi >> 3] + 48010494.0) * +HEAPF64[$mi >> 3] + -2479316.0) * +HEAPF64[$mi >> 3] + 70197.0) * 1.6253968253968254;
  HEAPF64[$n6 >> 3] = (((((1982611456181.0 - +HEAPF64[$mi >> 3] * 8249725736393.0) * +HEAPF64[$mi >> 3] + -179289628602.0) * +HEAPF64[$mi >> 3] + 8903961290.0) * +HEAPF64[$mi >> 3] + -287149133.0) * +HEAPF64[$mi >> 3] + 5592657.0) * .591053391053391;
  HEAPF64[$term11 >> 3] = (1.0 - +HEAPF64[$mi >> 3]) * +HEAPF64[$r >> 3];
  HEAPF64[$term22 >> 3] = +HEAPF64[$term11 >> 3] * +HEAPF64[$n2 >> 3] * +HEAPF64[$r >> 3];
  HEAPF64[$term33 >> 3] = +HEAPF64[$term11 >> 3] * +HEAPF64[$n3 >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3];
  HEAPF64[$term44 >> 3] = +HEAPF64[$term11 >> 3] * +HEAPF64[$n4 >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3];
  HEAPF64[$term55 >> 3] = +HEAPF64[$term11 >> 3] * +HEAPF64[$n5 >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3];
  HEAPF64[$term6 >> 3] = +HEAPF64[$term11 >> 3] * +HEAPF64[$n6 >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3];
  HEAPF64[$0 >> 3] = 1.0 - (+HEAPF64[$term11 >> 3] + +HEAPF64[$term22 >> 3] + +HEAPF64[$term33 >> 3] + +HEAPF64[$term44 >> 3] + +HEAPF64[$term55 >> 3] + +HEAPF64[$term6 >> 3]) * 8.0;
  $172 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$172;
 }
 return 0.0;
}
function _gsl_sf_gegenpoly_n_e($n, $lambda, $x, $result) {
 $n = $n | 0;
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $112 = 0.0, $116 = 0, $2 = 0, $3 = 0, $31 = 0.0, $4 = 0, $47 = 0.0, $57 = 0.0, $73 = 0, $g2 = 0, $g3 = 0, $gk = 0, $gkm1 = 0, $gkm2 = 0, $k = 0, $stat_g = 0, $stat_g2 = 0, $stat_g3 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 100 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 96 | 0;
 $z = sp + 56 | 0;
 $k = sp + 92 | 0;
 $g2 = sp + 40 | 0;
 $g3 = sp + 24 | 0;
 $stat_g2 = sp + 88 | 0;
 $stat_g3 = sp + 84 | 0;
 $stat_g = sp + 80 | 0;
 $gkm2 = sp + 16 | 0;
 $gkm1 = sp + 8 | 0;
 $gk = sp;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] <= -.5)) if ((HEAP32[$1 >> 2] | 0) >= 0) {
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $116 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $116 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAP32[$0 >> 2] = _gsl_sf_gegenpoly_1_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $116 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $116 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   HEAP32[$0 >> 2] = _gsl_sf_gegenpoly_2_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $116 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $116 | 0;
  }
  $31 = +HEAPF64[$2 >> 3];
  if ((HEAP32[$1 >> 2] | 0) == 3) {
   HEAP32[$0 >> 2] = _gsl_sf_gegenpoly_3_e($31, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   $116 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $116 | 0;
  }
  if ($31 == 0.0) if (+HEAPF64[$3 >> 3] >= -1.0 | +HEAPF64[$3 >> 3] <= 1.0) {
   HEAPF64[$z >> 3] = +(HEAP32[$1 >> 2] | 0) * +Math_acos(+(+HEAPF64[$3 >> 3]));
   $47 = +Math_cos(+(+HEAPF64[$z >> 3])) * 2.0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = $47 / +(HEAP32[$1 >> 2] | 0);
   $57 = +Math_abs(+(+HEAPF64[$z >> 3] * +HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $57;
   HEAP32[$0 >> 2] = 0;
   $116 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $116 | 0;
  }
  HEAP32[$stat_g2 >> 2] = _gsl_sf_gegenpoly_2_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $g2) | 0;
  HEAP32[$stat_g3 >> 2] = _gsl_sf_gegenpoly_3_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $g3) | 0;
  if (HEAP32[$stat_g2 >> 2] | 0) $73 = HEAP32[$stat_g2 >> 2] | 0; else $73 = (HEAP32[$stat_g3 >> 2] | 0) != 0 ? HEAP32[$stat_g3 >> 2] | 0 : 0;
  HEAP32[$stat_g >> 2] = $73;
  HEAPF64[$gkm2 >> 3] = +HEAPF64[$g2 >> 3];
  HEAPF64[$gkm1 >> 3] = +HEAPF64[$g3 >> 3];
  HEAPF64[$gk >> 3] = 0.0;
  HEAP32[$k >> 2] = 4;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$gk >> 3] = ((+(HEAP32[$k >> 2] | 0) + +HEAPF64[$2 >> 3] - 1.0) * 2.0 * +HEAPF64[$3 >> 3] * +HEAPF64[$gkm1 >> 3] - (+(HEAP32[$k >> 2] | 0) + +HEAPF64[$2 >> 3] * 2.0 - 2.0) * +HEAPF64[$gkm2 >> 3]) / +(HEAP32[$k >> 2] | 0);
   HEAPF64[$gkm2 >> 3] = +HEAPF64[$gkm1 >> 3];
   HEAPF64[$gkm1 >> 3] = +HEAPF64[$gk >> 3];
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$gk >> 3];
  $112 = +(HEAP32[$1 >> 2] | 0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$gk >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $112;
  HEAP32[$0 >> 2] = HEAP32[$stat_g >> 2];
  $116 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $116 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(51248, 51264, 93, 1);
 HEAP32[$0 >> 2] = 1;
 $116 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $116 | 0;
}
function _gsl_sf_coulomb_wave_FG_array($lam_min, $kmax, $eta, $x, $fc_array, $gc_array, $F_exp, $G_exp) {
 $lam_min = +$lam_min;
 $kmax = $kmax | 0;
 $eta = +$eta;
 $x = +$x;
 $fc_array = $fc_array | 0;
 $gc_array = $gc_array | 0;
 $F_exp = $F_exp | 0;
 $G_exp = $G_exp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $F = 0, $Fp = 0, $G = 0, $Gp = 0, $el = 0, $el1 = 0, $fc_lm1 = 0, $fcl = 0, $fpl = 0, $gcl = 0, $gcl1 = 0, $gpl = 0, $k = 0, $lam = 0, $lam_max = 0, $rl = 0, $rl2 = 0, $sl = 0, $sl3 = 0, $stat_FG = 0, $x_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 200 | 0;
 $1 = sp + 232 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 184 | 0;
 $4 = sp + 228 | 0;
 $5 = sp + 224 | 0;
 $6 = sp + 220 | 0;
 $7 = sp + 216 | 0;
 $x_inv = sp + 176 | 0;
 $lam_max = sp + 168 | 0;
 $F = sp + 152 | 0;
 $Fp = sp + 136 | 0;
 $G = sp + 120 | 0;
 $Gp = sp + 104 | 0;
 $stat_FG = sp + 212 | 0;
 $fcl = sp + 96 | 0;
 $fpl = sp + 88 | 0;
 $lam = sp + 80 | 0;
 $k = sp + 208 | 0;
 $gcl = sp + 72 | 0;
 $gpl = sp + 64 | 0;
 $el = sp + 56 | 0;
 $rl = sp + 48 | 0;
 $sl = sp + 40 | 0;
 $fc_lm1 = sp + 32 | 0;
 $el1 = sp + 24 | 0;
 $rl2 = sp + 16 | 0;
 $sl3 = sp + 8 | 0;
 $gcl1 = sp;
 HEAPF64[$0 >> 3] = $lam_min;
 HEAP32[$1 >> 2] = $kmax;
 HEAPF64[$2 >> 3] = $eta;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $fc_array;
 HEAP32[$5 >> 2] = $gc_array;
 HEAP32[$6 >> 2] = $F_exp;
 HEAP32[$7 >> 2] = $G_exp;
 HEAPF64[$x_inv >> 3] = 1.0 / +HEAPF64[$3 >> 3];
 HEAPF64[$lam_max >> 3] = +HEAPF64[$0 >> 3] + +(HEAP32[$1 >> 2] | 0);
 HEAP32[$stat_FG >> 2] = _gsl_sf_coulomb_wave_FG_e(+HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$lam_max >> 3], HEAP32[$1 >> 2] | 0, $F, $Fp, $G, $Gp, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
 HEAPF64[$fcl >> 3] = +HEAPF64[$F >> 3];
 HEAPF64[$fpl >> 3] = +HEAPF64[$Fp >> 3];
 HEAPF64[$lam >> 3] = +HEAPF64[$lam_max >> 3];
 HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3] = +HEAPF64[$F >> 3];
 HEAP32[$k >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) < 0) break;
  HEAPF64[$el >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$lam >> 3];
  HEAPF64[$rl >> 3] = +_hypot(1.0, +(+HEAPF64[$el >> 3]));
  HEAPF64[$sl >> 3] = +HEAPF64[$el >> 3] + +HEAPF64[$lam >> 3] * +HEAPF64[$x_inv >> 3];
  HEAPF64[$fc_lm1 >> 3] = (+HEAPF64[$fcl >> 3] * +HEAPF64[$sl >> 3] + +HEAPF64[$fpl >> 3]) / +HEAPF64[$rl >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[$fc_lm1 >> 3];
  HEAPF64[$fpl >> 3] = +HEAPF64[$fc_lm1 >> 3] * +HEAPF64[$sl >> 3] - +HEAPF64[$fcl >> 3] * +HEAPF64[$rl >> 3];
  HEAPF64[$fcl >> 3] = +HEAPF64[$fc_lm1 >> 3];
  HEAPF64[$lam >> 3] = +HEAPF64[$lam >> 3] - 1.0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + -1;
 }
 HEAPF64[$gcl >> 3] = +HEAPF64[$G >> 3];
 HEAPF64[$gpl >> 3] = +HEAPF64[$Gp >> 3];
 HEAPF64[$lam >> 3] = +HEAPF64[$0 >> 3] + 1.0;
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$G >> 3];
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[$el1 >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$lam >> 3];
  HEAPF64[$rl2 >> 3] = +_hypot(1.0, +(+HEAPF64[$el1 >> 3]));
  HEAPF64[$sl3 >> 3] = +HEAPF64[$el1 >> 3] + +HEAPF64[$lam >> 3] * +HEAPF64[$x_inv >> 3];
  HEAPF64[$gcl1 >> 3] = (+HEAPF64[$sl3 >> 3] * +HEAPF64[$gcl >> 3] - +HEAPF64[$gpl >> 3]) / +HEAPF64[$rl2 >> 3];
  HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[$gcl1 >> 3];
  HEAPF64[$gpl >> 3] = +HEAPF64[$rl2 >> 3] * +HEAPF64[$gcl >> 3] - +HEAPF64[$sl3 >> 3] * +HEAPF64[$gcl1 >> 3];
  HEAPF64[$gcl >> 3] = +HEAPF64[$gcl1 >> 3];
  HEAPF64[$lam >> 3] = +HEAPF64[$lam >> 3] + 1.0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$stat_FG >> 2] | 0;
}
function _gsl_sf_bessel_In_scaled_array($nmin, $nmax, $x, $result_array) {
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $106 = 0, $107 = 0, $2 = 0, $3 = 0, $37 = 0.0, $4 = 0, $I0_scaled = 0, $In = 0, $Inm1 = 0, $Inp1 = 0, $ax = 0, $j = 0, $j1 = 0, $n = 0, $r_In = 0, $r_Inp1 = 0, $stat = 0, $stat_0 = 0, $stat_1 = 0, $two_over_x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 124 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 120 | 0;
 $j = sp + 116 | 0;
 $j1 = sp + 112 | 0;
 $I0_scaled = sp + 72 | 0;
 $stat = sp + 108 | 0;
 $ax = sp + 64 | 0;
 $two_over_x = sp + 56 | 0;
 $r_Inp1 = sp + 40 | 0;
 $r_In = sp + 24 | 0;
 $stat_0 = sp + 104 | 0;
 $stat_1 = sp + 100 | 0;
 $Inp1 = sp + 16 | 0;
 $In = sp + 8 | 0;
 $Inm1 = sp;
 $n = sp + 96 | 0;
 HEAP32[$1 >> 2] = $nmin;
 HEAP32[$2 >> 2] = $nmax;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 if ((HEAP32[$1 >> 2] | 0) < 0 ? 1 : (HEAP32[$2 >> 2] | 0) < (HEAP32[$1 >> 2] | 0)) {
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) > ((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0)) break;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3] = 0.0;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  _gsl_error(11992, 12008, 120, 1);
  HEAP32[$0 >> 2] = 1;
  $107 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $107 | 0;
 }
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAP32[$j1 >> 2] = 0;
  while (1) {
   if ((HEAP32[$j1 >> 2] | 0) > ((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0)) break;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$j1 >> 2] << 3) >> 3] = 0.0;
   HEAP32[$j1 >> 2] = (HEAP32[$j1 >> 2] | 0) + 1;
  }
  if (!(HEAP32[$1 >> 2] | 0)) HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAP32[$0 >> 2] = 0;
  $107 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $107 | 0;
 }
 $37 = +HEAPF64[$3 >> 3];
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAP32[$stat >> 2] = _gsl_sf_bessel_I0_scaled_e($37, $I0_scaled) | 0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$I0_scaled >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $107 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $107 | 0;
 }
 HEAPF64[$ax >> 3] = +Math_abs(+$37);
 HEAPF64[$two_over_x >> 3] = 2.0 / +HEAPF64[$ax >> 3];
 HEAP32[$stat_0 >> 2] = _gsl_sf_bessel_In_scaled_e((HEAP32[$2 >> 2] | 0) + 1 | 0, +HEAPF64[$ax >> 3], $r_Inp1) | 0;
 HEAP32[$stat_1 >> 2] = _gsl_sf_bessel_In_scaled_e(HEAP32[$2 >> 2] | 0, +HEAPF64[$ax >> 3], $r_In) | 0;
 HEAPF64[$Inp1 >> 3] = +HEAPF64[$r_Inp1 >> 3];
 HEAPF64[$In >> 3] = +HEAPF64[$r_In >> 3];
 HEAP32[$n >> 2] = HEAP32[$2 >> 2];
 while (1) {
  if ((HEAP32[$n >> 2] | 0) < (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = +HEAPF64[$In >> 3];
  HEAPF64[$Inm1 >> 3] = +HEAPF64[$Inp1 >> 3] + +(HEAP32[$n >> 2] | 0) * +HEAPF64[$two_over_x >> 3] * +HEAPF64[$In >> 3];
  HEAPF64[$Inp1 >> 3] = +HEAPF64[$In >> 3];
  HEAPF64[$In >> 3] = +HEAPF64[$Inm1 >> 3];
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + -1;
 }
 L28 : do if (+HEAPF64[$3 >> 3] < 0.0) {
  HEAP32[$n >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$n >> 2] | 0) > (HEAP32[$2 >> 2] | 0)) break L28;
   if (HEAP32[$n >> 2] & 1) HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = -+HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3];
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAP32[$stat_0 >> 2] | 0) $106 = HEAP32[$stat_0 >> 2] | 0; else $106 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $106;
 $107 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $107 | 0;
}
function _gsl_sf_cos_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $101 = 0.0, $106 = 0.0, $112 = 0.0, $118 = 0.0, $126 = 0, $18 = 0.0, $2 = 0, $24 = 0.0, $66 = 0.0, $94 = 0, $abs_x = 0, $cos_cs_result = 0, $octant = 0, $sgn_result = 0, $sin_cs_result = 0, $stat_cs = 0, $t = 0, $t1 = 0, $x2 = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 128 | 0;
 $abs_x = sp + 80 | 0;
 $x2 = sp + 72 | 0;
 $sgn_result = sp + 64 | 0;
 $y = sp + 56 | 0;
 $octant = sp + 124 | 0;
 $stat_cs = sp + 120 | 0;
 $z = sp + 48 | 0;
 $cos_cs_result = sp + 32 | 0;
 $t = sp + 24 | 0;
 $sin_cs_result = sp + 8 | 0;
 $t1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 104 >> 3] = .7853981256484985;
 HEAPF64[sp + 96 >> 3] = 3.774894707930798e-8;
 HEAPF64[sp + 88 >> 3] = 2.6951514290790595e-15;
 HEAPF64[$abs_x >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$abs_x >> 3] < .0001220703125) {
  HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - +HEAPF64[$x2 >> 3] * .5;
  $18 = +Math_abs(+(+HEAPF64[$x2 >> 3] * +HEAPF64[$x2 >> 3] / 12.0));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $18;
  HEAP32[$0 >> 2] = 0;
  $126 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $126 | 0;
 }
 HEAPF64[$sgn_result >> 3] = 1.0;
 HEAPF64[$y >> 3] = +Math_floor(+(+HEAPF64[$abs_x >> 3] / .7853981633974483));
 $24 = +HEAPF64[$y >> 3];
 HEAP32[$octant >> 2] = ~~($24 - +_ldexp(+Math_floor(+(+_ldexp(+HEAPF64[$y >> 3], -3))), 3));
 if (HEAP32[$octant >> 2] & 1) {
  HEAP32[$octant >> 2] = (HEAP32[$octant >> 2] | 0) + 1;
  HEAP32[$octant >> 2] = HEAP32[$octant >> 2] & 7;
  HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] + 1.0;
 }
 if ((HEAP32[$octant >> 2] | 0) > 3) {
  HEAP32[$octant >> 2] = (HEAP32[$octant >> 2] | 0) - 4;
  HEAPF64[$sgn_result >> 3] = -+HEAPF64[$sgn_result >> 3];
 }
 if ((HEAP32[$octant >> 2] | 0) > 1) HEAPF64[$sgn_result >> 3] = -+HEAPF64[$sgn_result >> 3];
 HEAPF64[$z >> 3] = +HEAPF64[$abs_x >> 3] - +HEAPF64[$y >> 3] * .7853981256484985 - +HEAPF64[$y >> 3] * 3.774894707930798e-8 - +HEAPF64[$y >> 3] * 2.6951514290790595e-15;
 $66 = +Math_abs(+(+HEAPF64[$z >> 3])) * 8.0 / 3.141592653589793 - 1.0;
 if (!(HEAP32[$octant >> 2] | 0)) {
  HEAPF64[$t >> 3] = $66;
  HEAP32[$stat_cs >> 2] = _cheb_eval_e641(62096, +HEAPF64[$t >> 3], $cos_cs_result) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - +HEAPF64[$z >> 3] * .5 * +HEAPF64[$z >> 3] * (1.0 - +HEAPF64[$z >> 3] * +HEAPF64[$z >> 3] * +HEAPF64[$cos_cs_result >> 3]);
 } else {
  HEAPF64[$t1 >> 3] = $66;
  HEAP32[$stat_cs >> 2] = _cheb_eval_e641(62224, +HEAPF64[$t1 >> 3], $sin_cs_result) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$z >> 3] * (+HEAPF64[$z >> 3] * +HEAPF64[$z >> 3] * +HEAPF64[$sin_cs_result >> 3] + 1.0);
 }
 $94 = HEAP32[$2 >> 2] | 0;
 HEAPF64[$94 >> 3] = +HEAPF64[$94 >> 3] * +HEAPF64[$sgn_result >> 3];
 do if (+HEAPF64[$abs_x >> 3] > 4503599627370496.0) {
  $101 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $101;
 } else {
  $106 = +HEAPF64[$abs_x >> 3];
  if (+HEAPF64[$abs_x >> 3] > 6710886400.0) {
   $112 = 2.0 * $106 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $112;
   break;
  }
  $118 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  if ($106 > 6710886.4) {
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.9802322387695312e-8 * $118;
   break;
  } else {
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16 * $118;
   break;
  }
 } while (0);
 HEAP32[$0 >> 2] = HEAP32[$stat_cs >> 2];
 $126 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $126 | 0;
}
function _gsl_sf_bessel_I1_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $115 = 0.0, $117 = 0, $120 = 0, $2 = 0, $24 = 0.0, $49 = 0.0, $55 = 0.0, $57 = 0, $62 = 0.0, $87 = 0.0, $89 = 0, $b = 0, $b4 = 0, $c = 0, $c1 = 0, $c3 = 0, $ey = 0, $s = 0, $s5 = 0, $sy = 0, $sy2 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 140 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 136 | 0;
 $y = sp + 104 | 0;
 $ey = sp + 96 | 0;
 $c = sp + 80 | 0;
 $sy = sp + 72 | 0;
 $c1 = sp + 56 | 0;
 $b = sp + 48 | 0;
 $s = sp + 40 | 0;
 $sy2 = sp + 32 | 0;
 $c3 = sp + 16 | 0;
 $b4 = sp + 8 | 0;
 $s5 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 120 >> 3] = 4.450147717014403e-308;
 HEAPF64[sp + 112 >> 3] = 4.2146848510894035e-8;
 HEAPF64[$y >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$y >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 if (+HEAPF64[$y >> 3] < 4.450147717014403e-308) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(11344, 11360, 158, 15);
  HEAP32[$0 >> 2] = 15;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 if (+HEAPF64[$y >> 3] < 4.2146848510894035e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * .5;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 $24 = +HEAPF64[$y >> 3];
 if (+HEAPF64[$y >> 3] <= 3.0) {
  HEAPF64[$ey >> 3] = +Math_exp(+-$24);
  _cheb_eval_e88(11960, +HEAPF64[$y >> 3] * +HEAPF64[$y >> 3] / 4.5 - 1.0, $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$ey >> 3] * (+HEAPF64[$c >> 3] + .875);
  $49 = +HEAPF64[$ey >> 3] * +HEAPF64[$c + 8 >> 3] + +HEAPF64[$y >> 3] * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $49;
  $55 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $57 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$57 >> 3] = +HEAPF64[$57 >> 3] + $55;
  HEAP32[$0 >> 2] = 0;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 $62 = +Math_sqrt(+(+HEAPF64[$y >> 3]));
 if ($24 <= 8.0) {
  HEAPF64[$sy >> 3] = $62;
  _cheb_eval_e88(11840, (48.0 / +HEAPF64[$y >> 3] - 11.0) / 5.0, $c1) | 0;
  HEAPF64[$b >> 3] = (+HEAPF64[$c1 >> 3] + .375) / +HEAPF64[$sy >> 3];
  HEAPF64[$s >> 3] = +HEAPF64[$1 >> 3] > 0.0 ? 1.0 : -1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$s >> 3] * +HEAPF64[$b >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c1 + 8 >> 3] / +HEAPF64[$sy >> 3];
  $87 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $89 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$89 >> 3] = +HEAPF64[$89 >> 3] + $87;
  HEAP32[$0 >> 2] = 0;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 } else {
  HEAPF64[$sy2 >> 3] = $62;
  _cheb_eval_e88(11640, 16.0 / +HEAPF64[$y >> 3] - 1.0, $c3) | 0;
  HEAPF64[$b4 >> 3] = (+HEAPF64[$c3 >> 3] + .375) / +HEAPF64[$sy2 >> 3];
  HEAPF64[$s5 >> 3] = +HEAPF64[$1 >> 3] > 0.0 ? 1.0 : -1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$s5 >> 3] * +HEAPF64[$b4 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c3 + 8 >> 3] / +HEAPF64[$sy2 >> 3];
  $115 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $117 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$117 >> 3] = +HEAPF64[$117 >> 3] + $115;
  HEAP32[$0 >> 2] = 0;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 return 0;
}
function _gsl_sf_gamma_inc_Q_e($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $102 = 0, $2 = 0, $25 = 0.0, $3 = 0, $38 = 0.0, $40 = 0, $69 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $96 = 0.0, $98 = 0, $P = 0, $P1 = 0, $stat_P = 0, $stat_P2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 56 | 0;
 $P = sp + 16 | 0;
 $stat_P = sp + 52 | 0;
 $P1 = sp;
 $stat_P2 = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$1 >> 3] < 0.0)) if (!(+HEAPF64[$2 >> 3] < 0.0)) {
  if (+HEAPF64[$2 >> 3] == 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $102 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $102 | 0;
  }
  if (+HEAPF64[$1 >> 3] == 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $102 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $102 | 0;
  }
  $25 = +HEAPF64[$1 >> 3];
  if (+HEAPF64[$2 >> 3] <= +HEAPF64[$1 >> 3] * .5) {
   HEAP32[$stat_P >> 2] = _gamma_inc_P_series($25, +HEAPF64[$2 >> 3], $P) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0 - +HEAPF64[$P >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$P + 8 >> 3];
   $38 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $40 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$40 >> 3] = +HEAPF64[$40 >> 3] + $38;
   HEAP32[$0 >> 2] = HEAP32[$stat_P >> 2];
   $102 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $102 | 0;
  }
  if ($25 >= 1.0e6) if ((+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]) * (+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]) < +HEAPF64[$1 >> 3]) {
   HEAP32[$0 >> 2] = _gamma_inc_Q_asymp_unif(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $102 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $102 | 0;
  }
  if (+HEAPF64[$1 >> 3] < .2) if (+HEAPF64[$2 >> 3] < 5.0) {
   HEAP32[$0 >> 2] = _gamma_inc_Q_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $102 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $102 | 0;
  }
  $69 = +HEAPF64[$2 >> 3];
  if (+HEAPF64[$1 >> 3] <= +HEAPF64[$2 >> 3]) {
   $71 = +HEAPF64[$1 >> 3];
   $72 = +HEAPF64[$2 >> 3];
   $73 = HEAP32[$3 >> 2] | 0;
   if ($69 <= 1.0e6) {
    HEAP32[$0 >> 2] = _gamma_inc_Q_CF($71, $72, $73) | 0;
    $102 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $102 | 0;
   } else {
    HEAP32[$0 >> 2] = _gamma_inc_Q_large_x($71, $72, $73) | 0;
    $102 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $102 | 0;
   }
  } else {
   $80 = $69 > +HEAPF64[$1 >> 3] - +Math_sqrt(+(+HEAPF64[$1 >> 3]));
   $81 = +HEAPF64[$1 >> 3];
   $82 = +HEAPF64[$2 >> 3];
   if ($80) {
    HEAP32[$0 >> 2] = _gamma_inc_Q_CF($81, $82, HEAP32[$3 >> 2] | 0) | 0;
    $102 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $102 | 0;
   } else {
    HEAP32[$stat_P2 >> 2] = _gamma_inc_P_series($81, $82, $P1) | 0;
    HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0 - +HEAPF64[$P1 >> 3];
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$P1 + 8 >> 3];
    $96 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
    $98 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$98 >> 3] = +HEAPF64[$98 >> 3] + $96;
    HEAP32[$0 >> 2] = HEAP32[$stat_P2 >> 2];
    $102 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $102 | 0;
   }
  }
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(50960, 50976, 503, 1);
 HEAP32[$0 >> 2] = 1;
 $102 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $102 | 0;
}
function _beta_cont_frac235($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $131 = 0.0, $136 = 0, $2 = 0, $3 = 0, $4 = 0, $cf = 0, $coeff = 0, $delta_frac = 0, $den_term = 0, $iter_count = 0, $k = 0, $num_term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 88 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 84 | 0;
 $iter_count = sp + 76 | 0;
 $cf = sp + 32 | 0;
 $num_term = sp + 24 | 0;
 $den_term = sp + 16 | 0;
 $k = sp + 72 | 0;
 $coeff = sp + 8 | 0;
 $delta_frac = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAP32[sp + 80 >> 2] = 512;
 HEAPF64[sp + 40 >> 3] = 4.450147717014403e-308;
 HEAP32[$iter_count >> 2] = 0;
 HEAPF64[$num_term >> 3] = 1.0;
 HEAPF64[$den_term >> 3] = 1.0 - (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) * +HEAPF64[$3 >> 3] / (+HEAPF64[$1 >> 3] + 1.0);
 if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = 4.450147717014403e-308;
 HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
 HEAPF64[$cf >> 3] = +HEAPF64[$den_term >> 3];
 while (1) {
  if ((HEAP32[$iter_count >> 2] | 0) >>> 0 >= 512) break;
  HEAP32[$k >> 2] = (HEAP32[$iter_count >> 2] | 0) + 1;
  HEAPF64[$coeff >> 3] = +(HEAP32[$k >> 2] | 0) * (+HEAPF64[$2 >> 3] - +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$3 >> 3] / ((+HEAPF64[$1 >> 3] - 1.0 + +(HEAP32[$k >> 2] << 1 | 0)) * (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0)));
  HEAPF64[$den_term >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$den_term >> 3] + 1.0;
  HEAPF64[$num_term >> 3] = +HEAPF64[$coeff >> 3] / +HEAPF64[$num_term >> 3] + 1.0;
  if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = 4.450147717014403e-308;
  if (+Math_abs(+(+HEAPF64[$num_term >> 3])) < 4.450147717014403e-308) HEAPF64[$num_term >> 3] = 4.450147717014403e-308;
  HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
  HEAPF64[$delta_frac >> 3] = +HEAPF64[$den_term >> 3] * +HEAPF64[$num_term >> 3];
  HEAPF64[$cf >> 3] = +HEAPF64[$cf >> 3] * +HEAPF64[$delta_frac >> 3];
  HEAPF64[$coeff >> 3] = -(+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] | 0)) * (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] + +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$3 >> 3] / ((+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0)) * (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0) + 1.0));
  HEAPF64[$den_term >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$den_term >> 3] + 1.0;
  HEAPF64[$num_term >> 3] = +HEAPF64[$coeff >> 3] / +HEAPF64[$num_term >> 3] + 1.0;
  if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = 4.450147717014403e-308;
  if (+Math_abs(+(+HEAPF64[$num_term >> 3])) < 4.450147717014403e-308) HEAPF64[$num_term >> 3] = 4.450147717014403e-308;
  HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
  HEAPF64[$delta_frac >> 3] = +HEAPF64[$den_term >> 3] * +HEAPF64[$num_term >> 3];
  HEAPF64[$cf >> 3] = +HEAPF64[$cf >> 3] * +HEAPF64[$delta_frac >> 3];
  if (+Math_abs(+(+HEAPF64[$delta_frac >> 3] - 1.0)) < 4.440892098500626e-16) break;
  HEAP32[$iter_count >> 2] = (HEAP32[$iter_count >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$cf >> 3];
 $131 = +((HEAP32[$iter_count >> 2] | 0) >>> 0) * 4.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$cf >> 3]));
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $131;
 if ((HEAP32[$iter_count >> 2] | 0) >>> 0 >= 512) {
  _gsl_error(25976, 25944, 97, 11);
  HEAP32[$0 >> 2] = 11;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 return 0;
}
function _gsl_sf_airy_Ai_e($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $110 = 0.0, $112 = 0, $120 = 0, $2 = 0, $21 = 0.0, $27 = 0.0, $3 = 0, $33 = 0.0, $35 = 0, $45 = 0, $47 = 0.0, $48 = 0.0, $6 = 0.0, $71 = 0.0, $77 = 0.0, $79 = 0, $cos_result = 0, $mod = 0, $result_aie = 0, $result_c0 = 0, $result_c1 = 0, $s = 0, $stat_aie = 0, $stat_cos = 0, $stat_mp = 0, $theta = 0, $x32 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 148 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 144 | 0;
 $3 = sp + 140 | 0;
 $mod = sp + 104 | 0;
 $theta = sp + 88 | 0;
 $cos_result = sp + 72 | 0;
 $stat_mp = sp + 136 | 0;
 $stat_cos = sp + 132 | 0;
 $z = sp + 64 | 0;
 $result_c0 = sp + 48 | 0;
 $result_c1 = sp + 32 | 0;
 $x32 = sp + 24 | 0;
 $s = sp + 16 | 0;
 $result_aie = sp;
 $stat_aie = sp + 128 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAP32[$stat_mp >> 2] = _airy_mod_phase($6, HEAP32[$2 >> 2] | 0, $mod, $theta) | 0;
  HEAP32[$stat_cos >> 2] = _gsl_sf_cos_err_e(+HEAPF64[$theta >> 3], +HEAPF64[$theta + 8 >> 3], $cos_result) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$mod >> 3] * +HEAPF64[$cos_result >> 3];
  $21 = +Math_abs(+(+HEAPF64[$mod >> 3] * +HEAPF64[$cos_result + 8 >> 3]));
  $27 = $21 + +Math_abs(+(+HEAPF64[$cos_result >> 3] * +HEAPF64[$mod + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $27;
  $33 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $35 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$35 >> 3] = +HEAPF64[$35 >> 3] + $33;
  if (HEAP32[$stat_mp >> 2] | 0) $45 = HEAP32[$stat_mp >> 2] | 0; else $45 = (HEAP32[$stat_cos >> 2] | 0) != 0 ? HEAP32[$stat_cos >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $45;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 $47 = +HEAPF64[$1 >> 3];
 $48 = +HEAPF64[$1 >> 3];
 if ($6 <= 1.0) {
  HEAPF64[$z >> 3] = $47 * $48 * +HEAPF64[$1 >> 3];
  _cheb_eval_mode_e(3008, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c0) | 0;
  _cheb_eval_mode_e(2904, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c1) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$result_c0 >> 3] - +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c1 >> 3] + .25) + .375;
  $71 = +HEAPF64[$result_c0 + 8 >> 3] + +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$result_c1 + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $71;
  $77 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $79 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$79 >> 3] = +HEAPF64[$79 >> 3] + $77;
  HEAP32[$0 >> 2] = 0;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 HEAPF64[$x32 >> 3] = $47 * +Math_sqrt(+$48);
 HEAPF64[$s >> 3] = +Math_exp(+(+HEAPF64[$x32 >> 3] * -2.0 / 3.0));
 HEAP32[$stat_aie >> 2] = _airy_aie(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result_aie) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$result_aie >> 3] * +HEAPF64[$s >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_aie + 8 >> 3] * +HEAPF64[$s >> 3] + +HEAPF64[HEAP32[$3 >> 2] >> 3] * +HEAPF64[$x32 >> 3] * 2.220446049250313e-16;
 $110 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
 $112 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$112 >> 3] = +HEAPF64[$112 >> 3] + $110;
 if (+Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(1392, 1408, 693, 15);
  HEAP32[$0 >> 2] = 15;
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$stat_aie >> 2];
  $120 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 return 0;
}
function _gsl_sf_hyperg_U_e10_e($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $113 = 0, $114 = 0, $2 = 0, $3 = 0, $4 = 0, $79 = 0.0, $U = 0, $a_integer = 0, $ap = 0, $b_integer = 0, $bp = 0, $ln_pre_err = 0, $ln_pre_val = 0, $lnx = 0, $rinta = 0, $rintb = 0, $stat_U = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 120 | 0;
 $rinta = sp + 72 | 0;
 $rintb = sp + 64 | 0;
 $a_integer = sp + 116 | 0;
 $b_integer = sp + 112 | 0;
 $lnx = sp + 56 | 0;
 $ln_pre_val = sp + 48 | 0;
 $ln_pre_err = sp + 40 | 0;
 $ap = sp + 32 | 0;
 $bp = sp + 24 | 0;
 $U = sp;
 $stat_U = sp + 108 | 0;
 $stat_e = sp + 104 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$rinta >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] + .5));
 HEAPF64[$rintb >> 3] = +Math_floor(+(+HEAPF64[$2 >> 3] + .5));
 HEAP32[$a_integer >> 2] = +Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$rinta >> 3])) < 2.220446049250313e-13 & 1;
 HEAP32[$b_integer >> 2] = +Math_abs(+(+HEAPF64[$2 >> 3] - +HEAPF64[$rintb >> 3])) < 2.220446049250313e-13 & 1;
 if (+HEAPF64[$3 >> 3] == 0.0) if (+HEAPF64[$2 >> 3] >= 1.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(52152, 52168, 1673, 1);
  HEAP32[$0 >> 2] = 1;
  $114 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  $114 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAP32[$0 >> 2] = _hyperg_U_origin(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $114 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 if (+HEAPF64[$3 >> 3] < 0.0) {
  HEAP32[$0 >> 2] = _hyperg_U_negx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $114 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 if (HEAP32[$a_integer >> 2] | 0) if (HEAP32[$b_integer >> 2] | 0) {
  HEAP32[$0 >> 2] = _gsl_sf_hyperg_U_int_e10_e(~~+HEAPF64[$rinta >> 3], ~~+HEAPF64[$rintb >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $114 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 if (+HEAPF64[$2 >> 3] >= 1.0) {
  HEAP32[$0 >> 2] = _hyperg_U_bge1(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $114 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 HEAPF64[$lnx >> 3] = +Math_log(+(+HEAPF64[$3 >> 3]));
 HEAPF64[$ln_pre_val >> 3] = (1.0 - +HEAPF64[$2 >> 3]) * +HEAPF64[$lnx >> 3];
 $79 = +Math_abs(+(+HEAPF64[$lnx >> 3])) * 2.0 * 2.220446049250313e-16;
 HEAPF64[$ln_pre_err >> 3] = $79 * (+Math_abs(+(+HEAPF64[$2 >> 3])) + 1.0);
 HEAPF64[$ap >> 3] = +HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3];
 HEAPF64[$bp >> 3] = 2.0 - +HEAPF64[$2 >> 3];
 HEAP32[$stat_U >> 2] = _hyperg_U_bge1(+HEAPF64[$ap >> 3], +HEAPF64[$bp >> 3], +HEAPF64[$3 >> 3], $U) | 0;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$ln_pre_val >> 3] + +(HEAP32[$U + 16 >> 2] | 0) * 2.302585092994046, +HEAPF64[$ln_pre_err >> 3], +HEAPF64[$U >> 3], +HEAPF64[$U + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) $113 = HEAP32[$stat_e >> 2] | 0; else $113 = (HEAP32[$stat_U >> 2] | 0) != 0 ? HEAP32[$stat_U >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $113;
 $114 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $114 | 0;
}
function _hyperg_2F1_series($a, $b, $c, $x, $result) {
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0, $107 = 0.0, $111 = 0.0, $113 = 0, $116 = 0, $13 = 0, $2 = 0, $29 = 0, $3 = 0, $36 = 0.0, $4 = 0, $40 = 0.0, $42 = 0, $5 = 0, $65 = 0.0, $del = 0, $del_neg = 0, $del_pos = 0, $i = 0, $k = 0, $sum_neg = 0, $sum_pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 88 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 84 | 0;
 $sum_pos = sp + 40 | 0;
 $sum_neg = sp + 32 | 0;
 $del_pos = sp + 24 | 0;
 $del_neg = sp + 16 | 0;
 $del = sp + 8 | 0;
 $k = sp;
 $i = sp + 80 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$sum_pos >> 3] = 1.0;
 HEAPF64[$sum_neg >> 3] = 0.0;
 HEAPF64[$del_pos >> 3] = 1.0;
 HEAPF64[$del_neg >> 3] = 0.0;
 HEAPF64[$del >> 3] = 1.0;
 HEAPF64[$k >> 3] = 0.0;
 HEAP32[$i >> 2] = 0;
 if (+Math_abs(+(+HEAPF64[$3 >> 3])) < 2.220446049250313e-16) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 1.0;
  _gsl_error(51912, 51896, 56, 1);
  HEAP32[$0 >> 2] = 1;
  $116 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $116 | 0;
 }
 do {
  $13 = (HEAP32[$i >> 2] | 0) + 1 | 0;
  HEAP32[$i >> 2] = $13;
  if (($13 | 0) > 3e4) {
   label = 4;
   break;
  }
  HEAPF64[$del >> 3] = +HEAPF64[$del >> 3] * ((+HEAPF64[$1 >> 3] + +HEAPF64[$k >> 3]) * (+HEAPF64[$2 >> 3] + +HEAPF64[$k >> 3]) * +HEAPF64[$4 >> 3] / ((+HEAPF64[$3 >> 3] + +HEAPF64[$k >> 3]) * (+HEAPF64[$k >> 3] + 1.0)));
  $65 = +HEAPF64[$del >> 3];
  if (+HEAPF64[$del >> 3] > 0.0) {
   HEAPF64[$del_pos >> 3] = $65;
   HEAPF64[$sum_pos >> 3] = +HEAPF64[$sum_pos >> 3] + +HEAPF64[$del >> 3];
  } else {
   if ($65 == 0.0) {
    label = 8;
    break;
   }
   HEAPF64[$del_neg >> 3] = -+HEAPF64[$del >> 3];
   HEAPF64[$sum_neg >> 3] = +HEAPF64[$sum_neg >> 3] - +HEAPF64[$del >> 3];
  }
  HEAPF64[$k >> 3] = +HEAPF64[$k >> 3] + 1.0;
 } while (+Math_abs(+((+HEAPF64[$del_pos >> 3] + +HEAPF64[$del_neg >> 3]) / (+HEAPF64[$sum_pos >> 3] - +HEAPF64[$sum_neg >> 3]))) > 2.220446049250313e-16);
 if ((label | 0) == 4) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sum_pos >> 3] - +HEAPF64[$sum_neg >> 3];
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = +HEAPF64[$del_pos >> 3] + +HEAPF64[$del_neg >> 3];
  $29 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$29 >> 3] = +HEAPF64[$29 >> 3] + (+HEAPF64[$sum_pos >> 3] + +HEAPF64[$sum_neg >> 3]) * 4.440892098500626e-16;
  $36 = (+Math_sqrt(+(+HEAPF64[$k >> 3])) * 2.0 + 1.0) * 4.440892098500626e-16;
  $40 = $36 * +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3]));
  $42 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$42 >> 3] = +HEAPF64[$42 >> 3] + $40;
  _gsl_error(51912, 51896, 65, 11);
  HEAP32[$0 >> 2] = 11;
  $116 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $116 | 0;
 } else if ((label | 0) == 8) {
  HEAPF64[$del_pos >> 3] = 0.0;
  HEAPF64[$del_neg >> 3] = 0.0;
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sum_pos >> 3] - +HEAPF64[$sum_neg >> 3];
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = +HEAPF64[$del_pos >> 3] + +HEAPF64[$del_neg >> 3];
 $100 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$100 >> 3] = +HEAPF64[$100 >> 3] + (+HEAPF64[$sum_pos >> 3] + +HEAPF64[$sum_neg >> 3]) * 4.440892098500626e-16;
 $107 = (+Math_sqrt(+(+HEAPF64[$k >> 3])) * 2.0 + 1.0) * 4.440892098500626e-16;
 $111 = $107 * +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3]));
 $113 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$113 >> 3] = +HEAPF64[$113 >> 3] + $111;
 HEAP32[$0 >> 2] = 0;
 $116 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $116 | 0;
}
function _gsl_cdf_gamma_Pinv($P, $a, $b) {
 $P = +$P;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $104 = 0.0, $11 = 0.0, $111 = 0.0, $116 = 0.0, $123 = 0.0, $14 = 0.0, $2 = 0, $21 = 0.0, $24 = 0.0, $3 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $41 = 0.0, $43 = 0.0, $53 = 0, $61 = 0.0, $71 = 0.0, $86 = 0.0, $dP = 0, $lambda = 0, $n = 0, $phi = 0, $step = 0, $step0 = 0, $step1 = 0, $x = 0, $x0 = 0, $x01 = 0, $x02 = 0, $xg = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 88 | 0;
 $x = sp + 80 | 0;
 $x0 = sp + 72 | 0;
 $x01 = sp + 64 | 0;
 $xg = sp + 56 | 0;
 $x02 = sp + 48 | 0;
 $lambda = sp + 40 | 0;
 $dP = sp + 32 | 0;
 $phi = sp + 24 | 0;
 $n = sp + 120 | 0;
 $step0 = sp + 16 | 0;
 $step1 = sp + 8 | 0;
 $step = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = inf;
  $123 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$123;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $123 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$123;
 }
 do if (+HEAPF64[$1 >> 3] < .05) {
  $11 = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3]);
  $14 = $11 + +Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$x0 >> 3] = +Math_exp(+($14 / +HEAPF64[$2 >> 3]));
  HEAPF64[$x >> 3] = +HEAPF64[$x0 >> 3];
 } else {
  $21 = +HEAPF64[$1 >> 3];
  if (+HEAPF64[$1 >> 3] > .95) {
   $24 = -+_log1p(+-$21);
   HEAPF64[$x01 >> 3] = $24 + +_gsl_sf_lngamma(+HEAPF64[$2 >> 3]);
   HEAPF64[$x >> 3] = +HEAPF64[$x01 >> 3];
   break;
  }
  HEAPF64[$xg >> 3] = +_gsl_cdf_ugaussian_Pinv($21);
  $34 = +HEAPF64[$xg >> 3] < +Math_sqrt(+(+HEAPF64[$2 >> 3])) * -.5;
  $35 = +HEAPF64[$2 >> 3];
  if ($34) $41 = $35; else {
   $36 = +Math_sqrt(+$35);
   $41 = $36 * +HEAPF64[$xg >> 3] + +HEAPF64[$2 >> 3];
  }
  HEAPF64[$x02 >> 3] = $41;
  HEAPF64[$x >> 3] = +HEAPF64[$x02 >> 3];
 } while (0);
 HEAP32[$n >> 2] = 0;
 while (1) {
  $43 = +HEAPF64[$1 >> 3];
  HEAPF64[$dP >> 3] = $43 - +_gsl_cdf_gamma_P(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3], 1.0);
  HEAPF64[$phi >> 3] = +_gsl_ran_gamma_pdf(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3], 1.0);
  if (+HEAPF64[$dP >> 3] == 0.0) break;
  $53 = HEAP32[$n >> 2] | 0;
  HEAP32[$n >> 2] = $53 + 1;
  if ($53 >>> 0 > 32) break;
  $61 = +Math_abs(+(+HEAPF64[$dP >> 3] / +HEAPF64[$x >> 3])) * 2.0;
  if ($61 > +HEAPF64[$phi >> 3]) $71 = +Math_abs(+(+HEAPF64[$dP >> 3] / +HEAPF64[$x >> 3])) * 2.0; else $71 = +HEAPF64[$phi >> 3];
  HEAPF64[$lambda >> 3] = +HEAPF64[$dP >> 3] / $71;
  HEAPF64[$step0 >> 3] = +HEAPF64[$lambda >> 3];
  HEAPF64[$step1 >> 3] = -((+HEAPF64[$2 >> 3] - 1.0) / +HEAPF64[$x >> 3] - 1.0) * +HEAPF64[$lambda >> 3] * +HEAPF64[$lambda >> 3] / 4.0;
  HEAPF64[$step >> 3] = +HEAPF64[$step0 >> 3];
  $86 = +Math_abs(+(+HEAPF64[$step1 >> 3]));
  if ($86 < +Math_abs(+(+HEAPF64[$step0 >> 3])) * .5) HEAPF64[$step >> 3] = +HEAPF64[$step >> 3] + +HEAPF64[$step1 >> 3];
  if (+HEAPF64[$x >> 3] + +HEAPF64[$step >> 3] > 0.0) HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] + +HEAPF64[$step >> 3]; else HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] / 2.0;
  $104 = +Math_abs(+(+HEAPF64[$step0 >> 3]));
  if ($104 > +HEAPF64[$x >> 3] * 1.0e-10) continue;
  $111 = +Math_abs(+(+HEAPF64[$step0 >> 3] * +HEAPF64[$phi >> 3]));
  if (!($111 > +HEAPF64[$1 >> 3] * 1.0e-10)) break;
 }
 $116 = +Math_abs(+(+HEAPF64[$dP >> 3]));
 if ($116 > +HEAPF64[$1 >> 3] * 1.4901161193847656e-8) {
  _gsl_error(240, 272, 111, 5);
  HEAPF64[$0 >> 3] = nan;
  $123 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$123;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$x >> 3];
  $123 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$123;
 }
 return 0.0;
}
function _legendreQ_CF1_xgt1($ell, $a, $b, $x, $result) {
 $ell = $ell | 0;
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $112 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $An = 0, $Anm1 = 0, $Anm2 = 0, $Bn = 0, $Bnm1 = 0, $Bnm2 = 0, $a1 = 0, $an = 0, $b1 = 0, $bn = 0, $del = 0, $fn = 0, $lna = 0, $n = 0, $old_fn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 160 | 0;
 $1 = sp + 156 | 0;
 $2 = sp + 136 | 0;
 $3 = sp + 128 | 0;
 $4 = sp + 120 | 0;
 $5 = sp + 152 | 0;
 $n = sp + 144 | 0;
 $Anm2 = sp + 104 | 0;
 $Bnm2 = sp + 96 | 0;
 $Anm1 = sp + 88 | 0;
 $Bnm1 = sp + 80 | 0;
 $a1 = sp + 72 | 0;
 $b1 = sp + 64 | 0;
 $An = sp + 56 | 0;
 $Bn = sp + 48 | 0;
 $an = sp + 40 | 0;
 $bn = sp + 32 | 0;
 $fn = sp + 24 | 0;
 $old_fn = sp + 16 | 0;
 $del = sp + 8 | 0;
 $lna = sp;
 HEAP32[$1 >> 2] = $ell;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[sp + 112 >> 3] = 1.3407807929942596e+154;
 HEAP32[sp + 148 >> 2] = 5e3;
 HEAP32[$n >> 2] = 1;
 HEAPF64[$Anm2 >> 3] = 1.0;
 HEAPF64[$Bnm2 >> 3] = 0.0;
 HEAPF64[$Anm1 >> 3] = 0.0;
 HEAPF64[$Bnm1 >> 3] = 1.0;
 HEAPF64[$a1 >> 3] = +(HEAP32[$1 >> 2] | 0) + 1.0 + +HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3];
 HEAPF64[$b1 >> 3] = ((+(HEAP32[$1 >> 2] | 0) + 1.0 + +HEAPF64[$2 >> 3]) * 2.0 + 1.0) * +HEAPF64[$4 >> 3];
 HEAPF64[$An >> 3] = +HEAPF64[$b1 >> 3] * +HEAPF64[$Anm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Anm2 >> 3];
 HEAPF64[$Bn >> 3] = +HEAPF64[$b1 >> 3] * +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$a1 >> 3] * +HEAPF64[$Bnm2 >> 3];
 HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
 do {
  if ((HEAP32[$n >> 2] | 0) >= 5e3) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm1 >> 3];
  HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm1 >> 3];
  HEAPF64[$Anm1 >> 3] = +HEAPF64[$An >> 3];
  HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bn >> 3];
  HEAPF64[$lna >> 3] = +((HEAP32[$1 >> 2] | 0) + (HEAP32[$n >> 2] | 0) | 0) + +HEAPF64[$2 >> 3];
  HEAPF64[$an >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3] - +HEAPF64[$lna >> 3] * +HEAPF64[$lna >> 3];
  HEAPF64[$bn >> 3] = (+HEAPF64[$lna >> 3] * 2.0 + 1.0) * +HEAPF64[$4 >> 3];
  HEAPF64[$An >> 3] = +HEAPF64[$bn >> 3] * +HEAPF64[$Anm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Anm2 >> 3];
  HEAPF64[$Bn >> 3] = +HEAPF64[$bn >> 3] * +HEAPF64[$Bnm1 >> 3] + +HEAPF64[$an >> 3] * +HEAPF64[$Bnm2 >> 3];
  if (+Math_abs(+(+HEAPF64[$An >> 3])) > 1.3407807929942596e+154) label = 5; else if (+Math_abs(+(+HEAPF64[$Bn >> 3])) > 1.3407807929942596e+154) label = 5;
  if ((label | 0) == 5) {
   label = 0;
   HEAPF64[$An >> 3] = +HEAPF64[$An >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bn >> 3] = +HEAPF64[$Bn >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm1 >> 3] = +HEAPF64[$Anm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bnm1 >> 3] = +HEAPF64[$Bnm1 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Anm2 >> 3] = +HEAPF64[$Anm2 >> 3] / 1.3407807929942596e+154;
   HEAPF64[$Bnm2 >> 3] = +HEAPF64[$Bnm2 >> 3] / 1.3407807929942596e+154;
  }
  HEAPF64[$old_fn >> 3] = +HEAPF64[$fn >> 3];
  HEAPF64[$fn >> 3] = +HEAPF64[$An >> 3] / +HEAPF64[$Bn >> 3];
  HEAPF64[$del >> 3] = +HEAPF64[$old_fn >> 3] / +HEAPF64[$fn >> 3];
 } while (!(+Math_abs(+(+HEAPF64[$del >> 3] - 1.0)) < 8.881784197001252e-16));
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$fn >> 3];
 if ((HEAP32[$n >> 2] | 0) == 5e3) {
  _gsl_error(53160, 53008, 89, 11);
  HEAP32[$0 >> 2] = 11;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 return 0;
}
function _gsl_sf_gamma_inc_P_e($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $105 = 0.0, $107 = 0, $113 = 0, $2 = 0, $3 = 0, $50 = 0.0, $52 = 0, $63 = 0.0, $64 = 0.0, $77 = 0.0, $79 = 0, $92 = 0.0, $93 = 0.0, $Q = 0, $Q1 = 0, $Q3 = 0, $stat_Q = 0, $stat_Q2 = 0, $stat_Q4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 76 | 0;
 $Q = sp + 32 | 0;
 $stat_Q = sp + 72 | 0;
 $Q1 = sp + 16 | 0;
 $stat_Q2 = sp + 68 | 0;
 $Q3 = sp;
 $stat_Q4 = sp + 64 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$1 >> 3] <= 0.0)) if (!(+HEAPF64[$2 >> 3] < 0.0)) {
  if (+HEAPF64[$2 >> 3] == 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $113 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $113 | 0;
  }
  if (!(+HEAPF64[$2 >> 3] < 20.0)) if (!(+HEAPF64[$2 >> 3] < +HEAPF64[$1 >> 3] * .5)) {
   if (+HEAPF64[$1 >> 3] > 1.0e6) if ((+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]) * (+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]) < +HEAPF64[$1 >> 3]) {
    HEAP32[$stat_Q >> 2] = _gamma_inc_Q_asymp_unif(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $Q) | 0;
    HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0 - +HEAPF64[$Q >> 3];
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$Q + 8 >> 3];
    $50 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
    $52 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$52 >> 3] = +HEAPF64[$52 >> 3] + $50;
    HEAP32[$0 >> 2] = HEAP32[$stat_Q >> 2];
    $113 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $113 | 0;
   }
   if (+HEAPF64[$1 >> 3] <= +HEAPF64[$2 >> 3]) {
    $63 = +HEAPF64[$1 >> 3];
    $64 = +HEAPF64[$2 >> 3];
    if (+HEAPF64[$1 >> 3] > +HEAPF64[$2 >> 3] * .2) HEAP32[$stat_Q2 >> 2] = _gamma_inc_Q_CF($63, $64, $Q1) | 0; else HEAP32[$stat_Q2 >> 2] = _gamma_inc_Q_large_x($63, $64, $Q1) | 0;
    HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0 - +HEAPF64[$Q1 >> 3];
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$Q1 + 8 >> 3];
    $77 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
    $79 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$79 >> 3] = +HEAPF64[$79 >> 3] + $77;
    HEAP32[$0 >> 2] = HEAP32[$stat_Q2 >> 2];
    $113 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $113 | 0;
   } else {
    $92 = +HEAPF64[$1 >> 3];
    $93 = +HEAPF64[$2 >> 3];
    if ((+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]) * (+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]) < +HEAPF64[$1 >> 3]) {
     HEAP32[$stat_Q4 >> 2] = _gamma_inc_Q_CF($92, $93, $Q3) | 0;
     HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0 - +HEAPF64[$Q3 >> 3];
     HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$Q3 + 8 >> 3];
     $105 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
     $107 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
     HEAPF64[$107 >> 3] = +HEAPF64[$107 >> 3] + $105;
     HEAP32[$0 >> 2] = HEAP32[$stat_Q4 >> 2];
     $113 = HEAP32[$0 >> 2] | 0;
     STACKTOP = sp;
     return $113 | 0;
    } else {
     HEAP32[$0 >> 2] = _gamma_inc_P_series($92, $93, HEAP32[$3 >> 2] | 0) | 0;
     $113 = HEAP32[$0 >> 2] | 0;
     STACKTOP = sp;
     return $113 | 0;
    }
   }
  }
  HEAP32[$0 >> 2] = _gamma_inc_P_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $113 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $113 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(50960, 50976, 584, 1);
 HEAP32[$0 >> 2] = 1;
 $113 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $113 | 0;
}
function _gsl_sf_bessel_lnKnu_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $101 = 0.0, $110 = 0.0, $116 = 0.0, $122 = 0.0, $124 = 0, $128 = 0, $13 = 0.0, $19 = 0.0, $2 = 0, $23 = 0.0, $29 = 0.0, $3 = 0, $35 = 0.0, $37 = 0, $49 = 0.0, $79 = 0.0, $88 = 0.0, $90 = 0, $K_scaled = 0, $K_scaled1 = 0, $lg_nu = 0, $ln_bound = 0, $status = 0, $sum = 0, $xi = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 100 | 0;
 $K_scaled = sp + 64 | 0;
 $ln_bound = sp + 56 | 0;
 $lg_nu = sp + 40 | 0;
 $xi = sp + 32 | 0;
 $sum = sp + 24 | 0;
 $K_scaled1 = sp;
 $status = sp + 96 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] <= 0.0)) if (!(+HEAPF64[$1 >> 3] < 0.0)) {
  $13 = +HEAPF64[$2 >> 3];
  if (+HEAPF64[$1 >> 3] == 0.0) {
   _gsl_sf_bessel_K0_scaled_e($13, $K_scaled) | 0;
   $19 = -+HEAPF64[$2 >> 3] + +Math_log(+(+Math_abs(+(+HEAPF64[$K_scaled >> 3]))));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = $19;
   $23 = +Math_abs(+(+HEAPF64[$2 >> 3])) * 2.220446049250313e-16;
   $29 = $23 + +Math_abs(+(+HEAPF64[$K_scaled + 8 >> 3] / +HEAPF64[$K_scaled >> 3]));
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $29;
   $35 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
   $37 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$37 >> 3] = +HEAPF64[$37 >> 3] + $35;
   HEAP32[$0 >> 2] = 0;
   $128 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $128 | 0;
  }
  if ($13 < 2.0) if (+HEAPF64[$1 >> 3] > 1.0) {
   _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3], $lg_nu) | 0;
   $49 = -.6931471805599453 - +HEAPF64[$1 >> 3] * +Math_log(+(+HEAPF64[$2 >> 3] * .5));
   HEAPF64[$ln_bound >> 3] = $49 + +HEAPF64[$lg_nu >> 3];
   if (+HEAPF64[$ln_bound >> 3] > 689.782712893384) {
    HEAPF64[$xi >> 3] = +HEAPF64[$2 >> 3] * .25 * +HEAPF64[$2 >> 3];
    HEAPF64[$sum >> 3] = 1.0 - +HEAPF64[$xi >> 3] / (+HEAPF64[$1 >> 3] - 1.0);
    if (+HEAPF64[$1 >> 3] > 2.0) HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$xi >> 3] / (+HEAPF64[$1 >> 3] - 1.0) * (+HEAPF64[$xi >> 3] / (+HEAPF64[$1 >> 3] - 2.0));
    $79 = +HEAPF64[$ln_bound >> 3] + +Math_log(+(+HEAPF64[$sum >> 3]));
    HEAPF64[HEAP32[$3 >> 2] >> 3] = $79;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$lg_nu + 8 >> 3];
    $88 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
    $90 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
    HEAPF64[$90 >> 3] = +HEAPF64[$90 >> 3] + $88;
    HEAP32[$0 >> 2] = 0;
    $128 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $128 | 0;
   }
  }
  HEAP32[$status >> 2] = _gsl_sf_bessel_Knu_scaled_e10_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $K_scaled1) | 0;
  $101 = -+HEAPF64[$2 >> 3] + +Math_log(+(+Math_abs(+(+HEAPF64[$K_scaled1 >> 3]))));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $101 + +(HEAP32[$K_scaled1 + 16 >> 2] | 0) * 2.302585092994046;
  $110 = +Math_abs(+(+HEAPF64[$2 >> 3])) * 2.220446049250313e-16;
  $116 = $110 + +Math_abs(+(+HEAPF64[$K_scaled1 + 8 >> 3] / +HEAPF64[$K_scaled1 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $116;
  $122 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $124 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$124 >> 3] = +HEAPF64[$124 >> 3] + $122;
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(14e3, 14016, 116, 1);
 HEAP32[$0 >> 2] = 1;
 $128 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $128 | 0;
}
function _gsl_sf_gammastar_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $111 = 0.0, $119 = 0, $2 = 0, $44 = 0, $46 = 0.0, $54 = 0.0, $81 = 0.0, $83 = 0, $87 = 0.0, $c2 = 0, $lg = 0, $lnr_err = 0, $lnr_val = 0, $lx = 0, $stat_e = 0, $stat_lg = 0, $t = 0, $t1 = 0, $xi = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 104 | 0;
 $lg = sp + 72 | 0;
 $stat_lg = sp + 100 | 0;
 $lx = sp + 64 | 0;
 $lnr_val = sp + 48 | 0;
 $lnr_err = sp + 40 | 0;
 $stat_e = sp + 96 | 0;
 $t = sp + 32 | 0;
 $t1 = sp + 24 | 0;
 $c2 = sp + 8 | 0;
 $xi = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(38384, 38400, 1304, 1);
  HEAP32[$0 >> 2] = 1;
  $119 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $119 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .5) {
  HEAP32[$stat_lg >> 2] = _gsl_sf_lngamma_e($10, $lg) | 0;
  HEAPF64[$lx >> 3] = +Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[sp + 56 >> 3] = .9189385332046727;
  HEAPF64[$lnr_val >> 3] = +HEAPF64[$lg >> 3] - (+HEAPF64[$1 >> 3] - .5) * +HEAPF64[$lx >> 3] + +HEAPF64[$1 >> 3] - .9189385332046727;
  HEAPF64[$lnr_err >> 3] = +HEAPF64[$lg + 8 >> 3] + ((+HEAPF64[$1 >> 3] + .5) * +Math_abs(+(+HEAPF64[$lx >> 3])) + .9189385332046727) * 4.440892098500626e-16;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lnr_val >> 3], +HEAPF64[$lnr_err >> 3], HEAP32[$2 >> 2] | 0) | 0;
  if (HEAP32[$stat_lg >> 2] | 0) $44 = HEAP32[$stat_lg >> 2] | 0; else $44 = (HEAP32[$stat_e >> 2] | 0) != 0 ? HEAP32[$stat_e >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $44;
  $119 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $119 | 0;
 }
 $46 = +HEAPF64[$1 >> 3];
 if ($10 < 2.0) {
  HEAPF64[$t >> 3] = ($46 - .5) * 1.3333333333333333 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e375(50704, +HEAPF64[$t >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $119 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $119 | 0;
 }
 $54 = +HEAPF64[$1 >> 3];
 if ($46 < 10.0) {
  HEAPF64[$t1 >> 3] = ($54 - 2.0) * .25 - 1.0;
  _cheb_eval_e375(50432, +HEAPF64[$t1 >> 3], $c2) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c2 >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) + 1.0 + 1.0 / (+HEAPF64[$1 >> 3] * 12.0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c2 + 8 >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  $81 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $83 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$83 >> 3] = +HEAPF64[$83 >> 3] + $81;
  HEAP32[$0 >> 2] = 0;
  $119 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $119 | 0;
 }
 $87 = +HEAPF64[$1 >> 3];
 if ($54 < 8192.0) {
  HEAP32[$0 >> 2] = _gammastar_ser($87, HEAP32[$2 >> 2] | 0) | 0;
  $119 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $119 | 0;
 }
 if ($87 < 4503599627370496.0) {
  HEAPF64[$xi >> 3] = 1.0 / +HEAPF64[$1 >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$xi >> 3] / 12.0 * (+HEAPF64[$xi >> 3] / 24.0 * (1.0 - +HEAPF64[$xi >> 3] * (+HEAPF64[$xi >> 3] * .06608796296296296 + .7722222222222223)) + 1.0) + 1.0;
  $111 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $111;
  HEAP32[$0 >> 2] = 0;
  $119 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $119 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 1.0 / +HEAPF64[$1 >> 3];
  HEAP32[$0 >> 2] = 0;
  $119 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $119 | 0;
 }
 return 0;
}
function _gsl_sf_debye_1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $106 = 0.0, $114 = 0.0, $117 = 0, $2 = 0, $22 = 0.0, $26 = 0.0, $46 = 0.0, $89 = 0.0, $93 = 0.0, $95 = 0.0, $c = 0, $ex = 0, $i = 0, $nexp = 0, $rk = 0, $sum = 0, $t = 0, $xk = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 92 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 88 | 0;
 $t = sp + 48 | 0;
 $c = sp + 32 | 0;
 $nexp = sp + 84 | 0;
 $ex = sp + 24 | 0;
 $sum = sp + 16 | 0;
 $xk = sp + 8 | 0;
 $rk = sp;
 $i = sp + 80 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 64 >> 3] = 1.6449340668482264;
 HEAPF64[sp + 56 >> 3] = 708.3964185322641;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(28032, 28048, 202, 1);
  HEAP32[$0 >> 2] = 1;
  $117 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $117 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 2.9802322387695312e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - .25 * $10 + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 36.0;
  $22 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $22;
  HEAP32[$0 >> 2] = 0;
  $117 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $117 | 0;
 }
 $26 = +HEAPF64[$1 >> 3];
 if ($10 <= 4.0) {
  HEAPF64[$t >> 3] = $26 * +HEAPF64[$1 >> 3] / 8.0 - 1.0;
  _cheb_eval_e269(29248, +HEAPF64[$t >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] - +HEAPF64[$1 >> 3] * .25;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c + 8 >> 3] + +HEAPF64[$1 >> 3] * .25 * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $117 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $117 | 0;
 }
 $46 = +HEAPF64[$1 >> 3];
 if ($26 < 35.350506208557206) {
  HEAP32[$nexp >> 2] = ~~+Math_floor(+(708.3964185322641 / $46));
  HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$sum >> 3] = 0.0;
  HEAPF64[$xk >> 3] = +(HEAP32[$nexp >> 2] | 0) * +HEAPF64[$1 >> 3];
  HEAPF64[$rk >> 3] = +(HEAP32[$nexp >> 2] | 0);
  HEAP32[$i >> 2] = HEAP32[$nexp >> 2];
  while (1) {
   if ((HEAP32[$i >> 2] | 0) < 1) break;
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] * +HEAPF64[$ex >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + (1.0 / +HEAPF64[$xk >> 3] + 1.0) / +HEAPF64[$rk >> 3];
   HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] - 1.0;
   HEAPF64[$xk >> 3] = +HEAPF64[$xk >> 3] - +HEAPF64[$1 >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.6449340668482264 / +HEAPF64[$1 >> 3] - +HEAPF64[$sum >> 3] * +HEAPF64[$ex >> 3];
  $89 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $89;
  HEAP32[$0 >> 2] = 0;
  $117 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $117 | 0;
 } else {
  $93 = +HEAPF64[$1 >> 3];
  if ($46 < 708.3964185322641) {
   $95 = +Math_exp(+-$93);
   HEAPF64[HEAP32[$2 >> 2] >> 3] = (1.6449340668482264 - $95 * (+HEAPF64[$1 >> 3] + 1.0)) / +HEAPF64[$1 >> 3];
   $106 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $106;
   HEAP32[$0 >> 2] = 0;
   $117 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $117 | 0;
  } else {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.6449340668482264 / $93;
   $114 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $114;
   HEAP32[$0 >> 2] = 0;
   $117 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $117 | 0;
  }
 }
 return 0;
}
function _gsl_sf_legendre_Q0_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $106 = 0.0, $112 = 0, $2 = 0, $38 = 0.0, $43 = 0.0, $49 = 0.0, $54 = 0.0, $58 = 0.0, $64 = 0.0, $69 = 0.0, $series = 0, $y = 0, $y1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 128 | 0;
 $y = sp + 72 | 0;
 $series = sp + 64 | 0;
 $y1 = sp + 56 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= -1.0 | +HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(52992, 53008, 185, 1);
  HEAP32[$0 >> 2] = 1;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 if (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] < .002460783300575925) {
  HEAPF64[sp + 112 >> 3] = .3333333333333333;
  HEAPF64[sp + 104 >> 3] = .2;
  HEAPF64[sp + 96 >> 3] = .14285714285714285;
  HEAPF64[sp + 88 >> 3] = .1111111111111111;
  HEAPF64[sp + 80 >> 3] = .09090909090909091;
  HEAPF64[$y >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$series >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * .09090909090909091 + .1111111111111111) + .14285714285714285) + .2) + .3333333333333333) + 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$series >> 3];
  $38 = +Math_abs(+(+HEAPF64[$1 >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $38;
  HEAP32[$0 >> 2] = 0;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 $43 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 1.0) {
  $49 = +Math_log(+((1.0 + $43) / (1.0 - +HEAPF64[$1 >> 3]))) * .5;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $49;
  $54 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $54;
  HEAP32[$0 >> 2] = 0;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 $58 = +HEAPF64[$1 >> 3];
 if ($43 < 10.0) {
  $64 = +Math_log(+(($58 + 1.0) / (+HEAPF64[$1 >> 3] - 1.0))) * .5;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $64;
  $69 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $69;
  HEAP32[$0 >> 2] = 0;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 if ($58 * 2.2250738585072014e-308 < 2.0) {
  HEAPF64[$y1 >> 3] = 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  HEAPF64[sp + 48 >> 3] = .3333333333333333;
  HEAPF64[sp + 40 >> 3] = .2;
  HEAPF64[sp + 32 >> 3] = .14285714285714285;
  HEAPF64[sp + 24 >> 3] = .1111111111111111;
  HEAPF64[sp + 16 >> 3] = .09090909090909091;
  HEAPF64[sp + 8 >> 3] = .07692307692307693;
  HEAPF64[sp >> 3] = .06666666666666667;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 / +HEAPF64[$1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * (+HEAPF64[$y1 >> 3] * .06666666666666667 + .07692307692307693) + .09090909090909091) + .1111111111111111) + .14285714285714285) + .2) + .3333333333333333) + 1.0);
  $106 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $106;
  HEAP32[$0 >> 2] = 0;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(53024, 53008, 223, 15);
  HEAP32[$0 >> 2] = 15;
  $112 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 return 0;
}
function _gamma_inc_P_series($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $108 = 0.0, $113 = 0.0, $123 = 0.0, $125 = 0, $136 = 0, $2 = 0, $24 = 0.0, $3 = 0, $30 = 0.0, $45 = 0.0, $D = 0, $cf_res = 0, $n = 0, $nlow = 0, $remainder = 0, $stat_D = 0, $status = 0, $sum = 0, $term = 0, $tnp1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 100 | 0;
 $D = sp + 48 | 0;
 $stat_D = sp + 92 | 0;
 $cf_res = sp + 32 | 0;
 $status = sp + 88 | 0;
 $sum = sp + 24 | 0;
 $term = sp + 16 | 0;
 $remainder = sp + 8 | 0;
 $n = sp + 84 | 0;
 $nlow = sp + 80 | 0;
 $tnp1 = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[sp + 96 >> 2] = 1e4;
 HEAP32[$stat_D >> 2] = _gamma_inc_D(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $D) | 0;
 if (+HEAPF64[$1 >> 3] > 1.0e5 ? +HEAPF64[$2 >> 3] > +HEAPF64[$1 >> 3] * .995 : 0) {
  HEAP32[$status >> 2] = _gsl_sf_exprel_n_CF_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $cf_res) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$D >> 3] * +HEAPF64[$cf_res >> 3];
  $24 = +Math_abs(+(+HEAPF64[$D >> 3] * +HEAPF64[$cf_res + 8 >> 3]));
  $30 = $24 + +Math_abs(+(+HEAPF64[$D + 8 >> 3] * +HEAPF64[$cf_res >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $30;
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 if (+HEAPF64[$2 >> 3] > +HEAPF64[$1 >> 3] + 1.0e4) {
  _gsl_error(51168, 50976, 107, 11);
  HEAP32[$0 >> 2] = 11;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$term >> 3] = 1.0;
 if (+HEAPF64[$2 >> 3] > +HEAPF64[$1 >> 3]) $45 = +HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]; else $45 = 0.0;
 HEAP32[$nlow >> 2] = ~~$45;
 HEAP32[$n >> 2] = 1;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$nlow >> 2] | 0)) break;
  HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * (+HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0)));
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= 1e4) break;
  HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * (+HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0)));
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
  if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 HEAPF64[$tnp1 >> 3] = +HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0)) * +HEAPF64[$term >> 3];
 HEAPF64[$remainder >> 3] = +HEAPF64[$tnp1 >> 3] / (1.0 - +HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0) + 1.0));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$D >> 3] * +HEAPF64[$sum >> 3];
 $108 = +HEAPF64[$D + 8 >> 3] * +Math_abs(+(+HEAPF64[$sum >> 3]));
 $113 = $108 + +Math_abs(+(+HEAPF64[$D >> 3] * +HEAPF64[$remainder >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $113;
 $123 = (+(HEAP32[$n >> 2] | 0) + 1.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 $125 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$125 >> 3] = +HEAPF64[$125 >> 3] + $123;
 if ((HEAP32[$n >> 2] | 0) == 1e4) if (+Math_abs(+(+HEAPF64[$remainder >> 3] / +HEAPF64[$sum >> 3])) > 1.4901161193847656e-8) {
  _gsl_error(51208, 50976, 146, 11);
  HEAP32[$0 >> 2] = 11;
  $136 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $136 | 0;
 }
 HEAP32[$0 >> 2] = HEAP32[$stat_D >> 2];
 $136 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $136 | 0;
}
function _hyperg_2F1_conj_series($aR, $aI, $c, $x, $result) {
 $aR = +$aR;
 $aI = +$aI;
 $c = +$c;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0, $107 = 0.0, $111 = 0.0, $113 = 0, $116 = 0, $2 = 0, $3 = 0, $35 = 0.0, $4 = 0, $5 = 0, $59 = 0, $66 = 0.0, $70 = 0.0, $72 = 0, $del = 0, $del_neg = 0, $del_pos = 0, $k = 0, $sum_neg = 0, $sum_pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 80 | 0;
 $sum_pos = sp + 40 | 0;
 $sum_neg = sp + 32 | 0;
 $del_pos = sp + 24 | 0;
 $del_neg = sp + 16 | 0;
 $del = sp + 8 | 0;
 $k = sp;
 HEAPF64[$1 >> 3] = $aR;
 HEAPF64[$2 >> 3] = $aI;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(51912, 51896, 107, 1);
  HEAP32[$0 >> 2] = 1;
  $116 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $116 | 0;
 }
 HEAPF64[$sum_pos >> 3] = 1.0;
 HEAPF64[$sum_neg >> 3] = 0.0;
 HEAPF64[$del_pos >> 3] = 1.0;
 HEAPF64[$del_neg >> 3] = 0.0;
 HEAPF64[$del >> 3] = 1.0;
 HEAPF64[$k >> 3] = 0.0;
 while (1) {
  HEAPF64[$del >> 3] = +HEAPF64[$del >> 3] * ((+HEAPF64[$1 >> 3] + +HEAPF64[$k >> 3]) * (+HEAPF64[$1 >> 3] + +HEAPF64[$k >> 3]) + +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]) / ((+HEAPF64[$k >> 3] + 1.0) * (+HEAPF64[$3 >> 3] + +HEAPF64[$k >> 3])) * +HEAPF64[$4 >> 3];
  $35 = +HEAPF64[$del >> 3];
  if (+HEAPF64[$del >> 3] >= 0.0) {
   HEAPF64[$del_pos >> 3] = $35;
   HEAPF64[$sum_pos >> 3] = +HEAPF64[$sum_pos >> 3] + +HEAPF64[$del >> 3];
  } else {
   HEAPF64[$del_neg >> 3] = -$35;
   HEAPF64[$sum_neg >> 3] = +HEAPF64[$sum_neg >> 3] - +HEAPF64[$del >> 3];
  }
  if (+HEAPF64[$k >> 3] > 3.0e4) {
   label = 8;
   break;
  }
  HEAPF64[$k >> 3] = +HEAPF64[$k >> 3] + 1.0;
  if (!(+Math_abs(+((+HEAPF64[$del_pos >> 3] + +HEAPF64[$del_neg >> 3]) / (+HEAPF64[$sum_pos >> 3] - +HEAPF64[$sum_neg >> 3]))) > 2.220446049250313e-16)) {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 8) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sum_pos >> 3] - +HEAPF64[$sum_neg >> 3];
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = +HEAPF64[$del_pos >> 3] + +HEAPF64[$del_neg >> 3];
  $59 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$59 >> 3] = +HEAPF64[$59 >> 3] + (+HEAPF64[$sum_pos >> 3] + +HEAPF64[$sum_neg >> 3]) * 4.440892098500626e-16;
  $66 = (+Math_sqrt(+(+HEAPF64[$k >> 3])) * 2.0 + 1.0) * 4.440892098500626e-16;
  $70 = $66 * +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3]));
  $72 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$72 >> 3] = +HEAPF64[$72 >> 3] + $70;
  _gsl_error(51912, 51896, 133, 11);
  HEAP32[$0 >> 2] = 11;
  $116 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $116 | 0;
 } else if ((label | 0) == 10) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sum_pos >> 3] - +HEAPF64[$sum_neg >> 3];
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = +HEAPF64[$del_pos >> 3] + +HEAPF64[$del_neg >> 3];
  $100 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$100 >> 3] = +HEAPF64[$100 >> 3] + (+HEAPF64[$sum_pos >> 3] + +HEAPF64[$sum_neg >> 3]) * 4.440892098500626e-16;
  $107 = (+Math_sqrt(+(+HEAPF64[$k >> 3])) * 2.0 + 1.0) * 4.440892098500626e-16;
  $111 = $107 * +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3]));
  $113 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$113 >> 3] = +HEAPF64[$113 >> 3] + $111;
  HEAP32[$0 >> 2] = 0;
  $116 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $116 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_y2_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $101 = 0.0, $103 = 0, $113 = 0, $114 = 0, $15 = 0.0, $2 = 0, $51 = 0.0, $81 = 0.0, $87 = 0.0, $93 = 0.0, $a = 0, $cos_result = 0, $cx = 0, $sin_result = 0, $stat_cos = 0, $stat_sin = 0, $sum = 0, $sx = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 148 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 144 | 0;
 $y = sp + 120 | 0;
 $sum = sp + 56 | 0;
 $cos_result = sp + 40 | 0;
 $sin_result = sp + 24 | 0;
 $stat_cos = sp + 140 | 0;
 $stat_sin = sp + 136 | 0;
 $sx = sp + 16 | 0;
 $cx = sp + 8 | 0;
 $a = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(19840, 19856, 141, 1);
  HEAP32[$0 >> 2] = 1;
  $114 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 1.7718548704178658e-103) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(19872, 19856, 144, 16);
  HEAP32[$0 >> 2] = 16;
  $114 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .5) {
  HEAPF64[$y >> 3] = $15 * +HEAPF64[$1 >> 3];
  HEAPF64[sp + 112 >> 3] = .16666666666666666;
  HEAPF64[sp + 104 >> 3] = .041666666666666664;
  HEAPF64[sp + 96 >> 3] = -.006944444444444444;
  HEAPF64[sp + 88 >> 3] = .00028935185185185184;
  HEAPF64[sp + 80 >> 3] = -5787037037037037.0e-21;
  HEAPF64[sp + 72 >> 3] = 6.889329805996472e-8;
  HEAPF64[sp + 64 >> 3] = -5.467722068251169e-10;
  HEAPF64[$sum >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * -5.467722068251169e-10 + 6.889329805996472e-8) + -5787037037037037.0e-21) + .00028935185185185184) + -.006944444444444444) + .041666666666666664) + .16666666666666666) + 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -3.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) * +HEAPF64[$sum >> 3];
  $51 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $51;
  HEAP32[$0 >> 2] = 0;
  $114 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 HEAP32[$stat_cos >> 2] = _gsl_sf_cos_e($15, $cos_result) | 0;
 HEAP32[$stat_sin >> 2] = _gsl_sf_sin_e(+HEAPF64[$1 >> 3], $sin_result) | 0;
 HEAPF64[$sx >> 3] = +HEAPF64[$sin_result >> 3];
 HEAPF64[$cx >> 3] = +HEAPF64[$cos_result >> 3];
 HEAPF64[$a >> 3] = 3.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 HEAPF64[HEAP32[$2 >> 2] >> 3] = (1.0 - +HEAPF64[$a >> 3]) / +HEAPF64[$1 >> 3] * +HEAPF64[$cx >> 3] - +HEAPF64[$a >> 3] * +HEAPF64[$sx >> 3];
 $81 = +HEAPF64[$cos_result + 8 >> 3] * +Math_abs(+((1.0 - +HEAPF64[$a >> 3]) / +HEAPF64[$1 >> 3]));
 $87 = $81 + +HEAPF64[$sin_result + 8 >> 3] * +Math_abs(+(+HEAPF64[$a >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $87;
 $93 = +Math_abs(+(+HEAPF64[$cx >> 3] / +HEAPF64[$1 >> 3]));
 $101 = ($93 + +Math_abs(+(+HEAPF64[$sx >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3])))) * 2.220446049250313e-16;
 $103 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$103 >> 3] = +HEAPF64[$103 >> 3] + $101;
 if (HEAP32[$stat_cos >> 2] | 0) $113 = HEAP32[$stat_cos >> 2] | 0; else $113 = (HEAP32[$stat_sin >> 2] | 0) != 0 ? HEAP32[$stat_sin >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $113;
 $114 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $114 | 0;
}
function _beta_cont_frac41($a, $b, $x, $epsabs) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $epsabs = +$epsabs;
 var $0 = 0, $1 = 0, $125 = 0.0, $133 = 0.0, $2 = 0, $3 = 0, $4 = 0, $cf = 0, $coeff = 0, $delta_frac = 0, $den_term = 0, $iter_count = 0, $k = 0, $num_term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $iter_count = sp + 92 | 0;
 $cf = sp + 32 | 0;
 $num_term = sp + 24 | 0;
 $den_term = sp + 16 | 0;
 $k = sp + 88 | 0;
 $coeff = sp + 8 | 0;
 $delta_frac = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAPF64[$4 >> 3] = $epsabs;
 HEAP32[sp + 96 >> 2] = 512;
 HEAPF64[sp + 40 >> 3] = 4.450147717014403e-308;
 HEAP32[$iter_count >> 2] = 0;
 HEAPF64[$num_term >> 3] = 1.0;
 HEAPF64[$den_term >> 3] = 1.0 - (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) * +HEAPF64[$3 >> 3] / (+HEAPF64[$1 >> 3] + 1.0);
 if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = nan;
 HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
 HEAPF64[$cf >> 3] = +HEAPF64[$den_term >> 3];
 while (1) {
  if ((HEAP32[$iter_count >> 2] | 0) >>> 0 >= 512) break;
  HEAP32[$k >> 2] = (HEAP32[$iter_count >> 2] | 0) + 1;
  HEAPF64[$coeff >> 3] = +(HEAP32[$k >> 2] | 0) * (+HEAPF64[$2 >> 3] - +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$3 >> 3] / ((+HEAPF64[$1 >> 3] - 1.0 + +(HEAP32[$k >> 2] << 1 | 0)) * (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0)));
  HEAPF64[$den_term >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$den_term >> 3] + 1.0;
  HEAPF64[$num_term >> 3] = +HEAPF64[$coeff >> 3] / +HEAPF64[$num_term >> 3] + 1.0;
  if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = nan;
  if (+Math_abs(+(+HEAPF64[$num_term >> 3])) < 4.450147717014403e-308) HEAPF64[$num_term >> 3] = nan;
  HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
  HEAPF64[$delta_frac >> 3] = +HEAPF64[$den_term >> 3] * +HEAPF64[$num_term >> 3];
  HEAPF64[$cf >> 3] = +HEAPF64[$cf >> 3] * +HEAPF64[$delta_frac >> 3];
  HEAPF64[$coeff >> 3] = -(+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] | 0)) * (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] + +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$3 >> 3] / ((+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0)) * (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0) + 1.0));
  HEAPF64[$den_term >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$den_term >> 3] + 1.0;
  HEAPF64[$num_term >> 3] = +HEAPF64[$coeff >> 3] / +HEAPF64[$num_term >> 3] + 1.0;
  if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = nan;
  if (+Math_abs(+(+HEAPF64[$num_term >> 3])) < 4.450147717014403e-308) HEAPF64[$num_term >> 3] = nan;
  HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
  HEAPF64[$delta_frac >> 3] = +HEAPF64[$den_term >> 3] * +HEAPF64[$num_term >> 3];
  HEAPF64[$cf >> 3] = +HEAPF64[$cf >> 3] * +HEAPF64[$delta_frac >> 3];
  if (+Math_abs(+(+HEAPF64[$delta_frac >> 3] - 1.0)) < 4.440892098500626e-16) break;
  $125 = +HEAPF64[$cf >> 3] * +Math_abs(+(+HEAPF64[$delta_frac >> 3] - 1.0));
  if ($125 < +HEAPF64[$4 >> 3]) break;
  HEAP32[$iter_count >> 2] = (HEAP32[$iter_count >> 2] | 0) + 1;
 }
 if ((HEAP32[$iter_count >> 2] | 0) >>> 0 >= 512) {
  HEAPF64[$0 >> 3] = nan;
  $133 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$133;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$cf >> 3];
  $133 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$133;
 }
 return 0.0;
}
function _beta_cont_frac9($a, $b, $x, $epsabs) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $epsabs = +$epsabs;
 var $0 = 0, $1 = 0, $125 = 0.0, $133 = 0.0, $2 = 0, $3 = 0, $4 = 0, $cf = 0, $coeff = 0, $delta_frac = 0, $den_term = 0, $iter_count = 0, $k = 0, $num_term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $iter_count = sp + 92 | 0;
 $cf = sp + 32 | 0;
 $num_term = sp + 24 | 0;
 $den_term = sp + 16 | 0;
 $k = sp + 88 | 0;
 $coeff = sp + 8 | 0;
 $delta_frac = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAPF64[$4 >> 3] = $epsabs;
 HEAP32[sp + 96 >> 2] = 512;
 HEAPF64[sp + 40 >> 3] = 4.450147717014403e-308;
 HEAP32[$iter_count >> 2] = 0;
 HEAPF64[$num_term >> 3] = 1.0;
 HEAPF64[$den_term >> 3] = 1.0 - (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) * +HEAPF64[$3 >> 3] / (+HEAPF64[$1 >> 3] + 1.0);
 if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = nan;
 HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
 HEAPF64[$cf >> 3] = +HEAPF64[$den_term >> 3];
 while (1) {
  if ((HEAP32[$iter_count >> 2] | 0) >>> 0 >= 512) break;
  HEAP32[$k >> 2] = (HEAP32[$iter_count >> 2] | 0) + 1;
  HEAPF64[$coeff >> 3] = +(HEAP32[$k >> 2] | 0) * (+HEAPF64[$2 >> 3] - +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$3 >> 3] / ((+HEAPF64[$1 >> 3] - 1.0 + +(HEAP32[$k >> 2] << 1 | 0)) * (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0)));
  HEAPF64[$den_term >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$den_term >> 3] + 1.0;
  HEAPF64[$num_term >> 3] = +HEAPF64[$coeff >> 3] / +HEAPF64[$num_term >> 3] + 1.0;
  if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = nan;
  if (+Math_abs(+(+HEAPF64[$num_term >> 3])) < 4.450147717014403e-308) HEAPF64[$num_term >> 3] = nan;
  HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
  HEAPF64[$delta_frac >> 3] = +HEAPF64[$den_term >> 3] * +HEAPF64[$num_term >> 3];
  HEAPF64[$cf >> 3] = +HEAPF64[$cf >> 3] * +HEAPF64[$delta_frac >> 3];
  HEAPF64[$coeff >> 3] = -(+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] | 0)) * (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] + +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$3 >> 3] / ((+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0)) * (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0) + 1.0));
  HEAPF64[$den_term >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$den_term >> 3] + 1.0;
  HEAPF64[$num_term >> 3] = +HEAPF64[$coeff >> 3] / +HEAPF64[$num_term >> 3] + 1.0;
  if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = nan;
  if (+Math_abs(+(+HEAPF64[$num_term >> 3])) < 4.450147717014403e-308) HEAPF64[$num_term >> 3] = nan;
  HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
  HEAPF64[$delta_frac >> 3] = +HEAPF64[$den_term >> 3] * +HEAPF64[$num_term >> 3];
  HEAPF64[$cf >> 3] = +HEAPF64[$cf >> 3] * +HEAPF64[$delta_frac >> 3];
  if (+Math_abs(+(+HEAPF64[$delta_frac >> 3] - 1.0)) < 4.440892098500626e-16) break;
  $125 = +HEAPF64[$cf >> 3] * +Math_abs(+(+HEAPF64[$delta_frac >> 3] - 1.0));
  if ($125 < +HEAPF64[$4 >> 3]) break;
  HEAP32[$iter_count >> 2] = (HEAP32[$iter_count >> 2] | 0) + 1;
 }
 if ((HEAP32[$iter_count >> 2] | 0) >>> 0 >= 512) {
  HEAPF64[$0 >> 3] = nan;
  $133 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$133;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$cf >> 3];
  $133 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$133;
 }
 return 0.0;
}
function _beta_cont_frac($a, $b, $x, $epsabs) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $epsabs = +$epsabs;
 var $0 = 0, $1 = 0, $125 = 0.0, $133 = 0.0, $2 = 0, $3 = 0, $4 = 0, $cf = 0, $coeff = 0, $delta_frac = 0, $den_term = 0, $iter_count = 0, $k = 0, $num_term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $iter_count = sp + 92 | 0;
 $cf = sp + 32 | 0;
 $num_term = sp + 24 | 0;
 $den_term = sp + 16 | 0;
 $k = sp + 88 | 0;
 $coeff = sp + 8 | 0;
 $delta_frac = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAPF64[$4 >> 3] = $epsabs;
 HEAP32[sp + 96 >> 2] = 512;
 HEAPF64[sp + 40 >> 3] = 4.450147717014403e-308;
 HEAP32[$iter_count >> 2] = 0;
 HEAPF64[$num_term >> 3] = 1.0;
 HEAPF64[$den_term >> 3] = 1.0 - (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) * +HEAPF64[$3 >> 3] / (+HEAPF64[$1 >> 3] + 1.0);
 if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = nan;
 HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
 HEAPF64[$cf >> 3] = +HEAPF64[$den_term >> 3];
 while (1) {
  if ((HEAP32[$iter_count >> 2] | 0) >>> 0 >= 512) break;
  HEAP32[$k >> 2] = (HEAP32[$iter_count >> 2] | 0) + 1;
  HEAPF64[$coeff >> 3] = +(HEAP32[$k >> 2] | 0) * (+HEAPF64[$2 >> 3] - +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$3 >> 3] / ((+HEAPF64[$1 >> 3] - 1.0 + +(HEAP32[$k >> 2] << 1 | 0)) * (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0)));
  HEAPF64[$den_term >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$den_term >> 3] + 1.0;
  HEAPF64[$num_term >> 3] = +HEAPF64[$coeff >> 3] / +HEAPF64[$num_term >> 3] + 1.0;
  if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = nan;
  if (+Math_abs(+(+HEAPF64[$num_term >> 3])) < 4.450147717014403e-308) HEAPF64[$num_term >> 3] = nan;
  HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
  HEAPF64[$delta_frac >> 3] = +HEAPF64[$den_term >> 3] * +HEAPF64[$num_term >> 3];
  HEAPF64[$cf >> 3] = +HEAPF64[$cf >> 3] * +HEAPF64[$delta_frac >> 3];
  HEAPF64[$coeff >> 3] = -(+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] | 0)) * (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] + +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$3 >> 3] / ((+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0)) * (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] << 1 | 0) + 1.0));
  HEAPF64[$den_term >> 3] = +HEAPF64[$coeff >> 3] * +HEAPF64[$den_term >> 3] + 1.0;
  HEAPF64[$num_term >> 3] = +HEAPF64[$coeff >> 3] / +HEAPF64[$num_term >> 3] + 1.0;
  if (+Math_abs(+(+HEAPF64[$den_term >> 3])) < 4.450147717014403e-308) HEAPF64[$den_term >> 3] = nan;
  if (+Math_abs(+(+HEAPF64[$num_term >> 3])) < 4.450147717014403e-308) HEAPF64[$num_term >> 3] = nan;
  HEAPF64[$den_term >> 3] = 1.0 / +HEAPF64[$den_term >> 3];
  HEAPF64[$delta_frac >> 3] = +HEAPF64[$den_term >> 3] * +HEAPF64[$num_term >> 3];
  HEAPF64[$cf >> 3] = +HEAPF64[$cf >> 3] * +HEAPF64[$delta_frac >> 3];
  if (+Math_abs(+(+HEAPF64[$delta_frac >> 3] - 1.0)) < 4.440892098500626e-16) break;
  $125 = +HEAPF64[$cf >> 3] * +Math_abs(+(+HEAPF64[$delta_frac >> 3] - 1.0));
  if ($125 < +HEAPF64[$4 >> 3]) break;
  HEAP32[$iter_count >> 2] = (HEAP32[$iter_count >> 2] | 0) + 1;
 }
 if ((HEAP32[$iter_count >> 2] | 0) >>> 0 >= 512) {
  HEAPF64[$0 >> 3] = nan;
  $133 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$133;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$cf >> 3];
  $133 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$133;
 }
 return 0.0;
}
function _gsl_sf_conicalP_half_e($lambda, $x, $result) {
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $104 = 0.0, $106 = 0, $11 = 0.0, $110 = 0, $2 = 0, $22 = 0.0, $29 = 0.0, $3 = 0, $34 = 0.0, $42 = 0.0, $49 = 0.0, $51 = 0, $67 = 0.0, $ac = 0, $carg_err = 0, $carg_val = 0, $cos_result = 0, $den = 0, $den2 = 0, $err_amp = 0, $err_amp1 = 0, $ln_term = 0, $sq_term = 0, $stat_cos = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 108 | 0;
 $err_amp = sp + 80 | 0;
 $ac = sp + 72 | 0;
 $den = sp + 64 | 0;
 $err_amp1 = sp + 56 | 0;
 $sq_term = sp + 48 | 0;
 $ln_term = sp + 40 | 0;
 $den2 = sp + 32 | 0;
 $carg_val = sp + 24 | 0;
 $carg_err = sp + 16 | 0;
 $cos_result = sp;
 $stat_cos = sp + 104 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] <= -1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(53168, 53184, 1017, 1);
  HEAP32[$0 >> 2] = 1;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 }
 $11 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$2 >> 3] < 1.0) {
  HEAPF64[$err_amp >> 3] = 1.0 / (+Math_abs(+(1.0 - +Math_abs(+$11))) + 2.220446049250313e-16) + 1.0;
  HEAPF64[$ac >> 3] = +Math_acos(+(+HEAPF64[$2 >> 3]));
  $22 = +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3]));
  HEAPF64[$den >> 3] = +Math_sqrt(+($22 * +Math_sqrt(+(+HEAPF64[$2 >> 3] + 1.0))));
  $29 = .7978845608028654 / +HEAPF64[$den >> 3];
  $34 = $29 * +_cosh(+(+HEAPF64[$ac >> 3] * +HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $34;
  $42 = +HEAPF64[$err_amp >> 3] * 3.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $42;
  $49 = +Math_abs(+(+HEAPF64[$ac >> 3] * +HEAPF64[$1 >> 3])) + 1.0;
  $51 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$51 >> 3] = +HEAPF64[$51 >> 3] * $49;
  HEAP32[$0 >> 2] = 0;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 }
 if ($11 == 1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 } else {
  HEAPF64[$err_amp1 >> 3] = 1.0 / (+Math_abs(+(1.0 - +Math_abs(+(+HEAPF64[$2 >> 3])))) + 2.220446049250313e-16) + 1.0;
  $67 = +Math_sqrt(+(+HEAPF64[$2 >> 3] - 1.0));
  HEAPF64[$sq_term >> 3] = $67 * +Math_sqrt(+(+HEAPF64[$2 >> 3] + 1.0));
  HEAPF64[$ln_term >> 3] = +Math_log(+(+HEAPF64[$2 >> 3] + +HEAPF64[$sq_term >> 3]));
  HEAPF64[$den2 >> 3] = +Math_sqrt(+(+HEAPF64[$sq_term >> 3]));
  HEAPF64[$carg_val >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$ln_term >> 3];
  HEAPF64[$carg_err >> 3] = +Math_abs(+(+HEAPF64[$carg_val >> 3])) * 4.440892098500626e-16;
  HEAP32[$stat_cos >> 2] = _gsl_sf_cos_err_e(+HEAPF64[$carg_val >> 3], +HEAPF64[$carg_err >> 3], $cos_result) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = .7978845608028654 / +HEAPF64[$den2 >> 3] * +HEAPF64[$cos_result >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$err_amp1 >> 3] * .7978845608028654 / +HEAPF64[$den2 >> 3] * +HEAPF64[$cos_result + 8 >> 3];
  $104 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 8.881784197001252e-16;
  $106 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$106 >> 3] = +HEAPF64[$106 >> 3] + $104;
  HEAP32[$0 >> 2] = HEAP32[$stat_cos >> 2];
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_Knu_scaled_asymp_unif_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $110 = 0.0, $129 = 0, $135 = 0.0, $137 = 0, $144 = 0, $2 = 0, $24 = 0.0, $3 = 0, $39 = 0.0, $58 = 0.0, $61 = 0.0, $62 = 0.0, $67 = 0.0, $68 = 0.0, $75 = 0.0, $76 = 0.0, $85 = 0.0, $86 = 0.0, $eta = 0, $ex_arg = 0, $ex_result = 0, $i = 0, $pre = 0, $root_term = 0, $stat_ex = 0, $sum = 0, $t = 0, $tpow = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 228 | 0;
 $1 = sp + 208 | 0;
 $2 = sp + 200 | 0;
 $3 = sp + 224 | 0;
 $i = sp + 220 | 0;
 $z = sp + 192 | 0;
 $root_term = sp + 184 | 0;
 $pre = sp + 176 | 0;
 $eta = sp + 168 | 0;
 $ex_arg = sp + 160 | 0;
 $ex_result = sp + 144 | 0;
 $stat_ex = sp + 216 | 0;
 $t = sp + 136 | 0;
 $sum = sp + 128 | 0;
 $tpow = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$z >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[$root_term >> 3] = +_hypot(1.0, +(+HEAPF64[$z >> 3]));
 HEAPF64[$pre >> 3] = +Math_sqrt(+(3.141592653589793 / (+HEAPF64[$1 >> 3] * 2.0 * +HEAPF64[$root_term >> 3])));
 HEAPF64[$eta >> 3] = +HEAPF64[$root_term >> 3] + +Math_log(+(+HEAPF64[$z >> 3] / (+HEAPF64[$root_term >> 3] + 1.0)));
 $24 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$z >> 3] < 165140.3718518207) $39 = $24 * (+HEAPF64[$z >> 3] - +HEAPF64[$eta >> 3]); else $39 = .5 * $24 / +HEAPF64[$z >> 3] * (1.0 / (+HEAPF64[$z >> 3] * 12.0 * +HEAPF64[$z >> 3]) + 1.0);
 HEAPF64[$ex_arg >> 3] = $39;
 HEAP32[$stat_ex >> 2] = _gsl_sf_exp_e(+HEAPF64[$ex_arg >> 3], $ex_result) | 0;
 if (HEAP32[$stat_ex >> 2] | 0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_ex >> 2];
  $144 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $144 | 0;
 }
 HEAPF64[$t >> 3] = 1.0 / +HEAPF64[$root_term >> 3];
 HEAPF64[$tpow >> 3] = 1.0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  HEAPF64[$tpow + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$t >> 3] * +HEAPF64[$tpow + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $58 = +_debye_u1($tpow);
 $61 = 1.0 - $58 / +HEAPF64[$1 >> 3];
 $62 = +_debye_u2($tpow);
 $67 = $61 + $62 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 $68 = +_debye_u3($tpow);
 $75 = $67 - $68 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 $76 = +_debye_u4($tpow);
 $85 = $75 + $76 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 $86 = +_debye_u5($tpow);
 HEAPF64[$sum >> 3] = $85 - $86 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$ex_result >> 3] * +HEAPF64[$sum >> 3];
 $110 = +HEAPF64[$pre >> 3] * +HEAPF64[$ex_result + 8 >> 3] * +Math_abs(+(+HEAPF64[$sum >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $110;
 $129 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$129 >> 3] = +HEAPF64[$129 >> 3] + +HEAPF64[$pre >> 3] * +HEAPF64[$ex_result >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 $135 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $137 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$137 >> 3] = +HEAPF64[$137 >> 3] + $135;
 HEAP32[$0 >> 2] = 0;
 $144 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $144 | 0;
}
function _gsl_sf_bessel_Inu_scaled_asymp_unif_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $128 = 0.0, $130 = 0, $136 = 0.0, $138 = 0, $145 = 0, $2 = 0, $24 = 0.0, $3 = 0, $40 = 0.0, $59 = 0.0, $62 = 0.0, $63 = 0.0, $68 = 0.0, $69 = 0.0, $76 = 0.0, $77 = 0.0, $86 = 0.0, $87 = 0.0, $eta = 0, $ex_arg = 0, $ex_result = 0, $i = 0, $pre = 0, $root_term = 0, $stat_ex = 0, $sum = 0, $t = 0, $tpow = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $0 = sp + 228 | 0;
 $1 = sp + 208 | 0;
 $2 = sp + 200 | 0;
 $3 = sp + 224 | 0;
 $i = sp + 220 | 0;
 $z = sp + 192 | 0;
 $root_term = sp + 184 | 0;
 $pre = sp + 176 | 0;
 $eta = sp + 168 | 0;
 $ex_arg = sp + 160 | 0;
 $ex_result = sp + 144 | 0;
 $stat_ex = sp + 216 | 0;
 $t = sp + 136 | 0;
 $sum = sp + 128 | 0;
 $tpow = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$z >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[$root_term >> 3] = +_hypot(1.0, +(+HEAPF64[$z >> 3]));
 HEAPF64[$pre >> 3] = 1.0 / +Math_sqrt(+(+HEAPF64[$1 >> 3] * 6.283185307179586 * +HEAPF64[$root_term >> 3]));
 HEAPF64[$eta >> 3] = +HEAPF64[$root_term >> 3] + +Math_log(+(+HEAPF64[$z >> 3] / (+HEAPF64[$root_term >> 3] + 1.0)));
 $24 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$z >> 3] < 165140.3718518207) $40 = $24 * (-+HEAPF64[$z >> 3] + +HEAPF64[$eta >> 3]); else $40 = -.5 * $24 / +HEAPF64[$z >> 3] * (1.0 - 1.0 / (+HEAPF64[$z >> 3] * 12.0 * +HEAPF64[$z >> 3]));
 HEAPF64[$ex_arg >> 3] = $40;
 HEAP32[$stat_ex >> 2] = _gsl_sf_exp_e(+HEAPF64[$ex_arg >> 3], $ex_result) | 0;
 if (HEAP32[$stat_ex >> 2] | 0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_ex >> 2];
  $145 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $145 | 0;
 }
 HEAPF64[$t >> 3] = 1.0 / +HEAPF64[$root_term >> 3];
 HEAPF64[$tpow >> 3] = 1.0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  HEAPF64[$tpow + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$t >> 3] * +HEAPF64[$tpow + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $59 = +_debye_u1($tpow);
 $62 = $59 / +HEAPF64[$1 >> 3] + 1.0;
 $63 = +_debye_u2($tpow);
 $68 = $62 + $63 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 $69 = +_debye_u3($tpow);
 $76 = $68 + $69 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 $77 = +_debye_u4($tpow);
 $86 = $76 + $77 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 $87 = +_debye_u5($tpow);
 HEAPF64[$sum >> 3] = $86 + $87 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$ex_result >> 3] * +HEAPF64[$sum >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$ex_result >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 $128 = +HEAPF64[$pre >> 3] * +HEAPF64[$ex_result + 8 >> 3] * +Math_abs(+(+HEAPF64[$sum >> 3]));
 $130 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$130 >> 3] = +HEAPF64[$130 >> 3] + $128;
 $136 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $138 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$138 >> 3] = +HEAPF64[$138 >> 3] + $136;
 HEAP32[$0 >> 2] = 0;
 $145 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $145 | 0;
}
function _gsl_sf_hydrogenicR_e($n, $l, $Z, $r, $result) {
 $n = $n | 0;
 $l = $l | 0;
 $Z = +$Z;
 $r = +$r;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $102 = 0, $128 = 0, $129 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $94 = 0.0, $A = 0, $W_err = 0, $W_val = 0, $ea = 0, $lag = 0, $norm = 0, $pp = 0, $rho = 0, $stat_lag = 0, $stat_norm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 108 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 80 | 0;
 $5 = sp + 104 | 0;
 $A = sp + 72 | 0;
 $norm = sp + 56 | 0;
 $stat_norm = sp + 100 | 0;
 $rho = sp + 48 | 0;
 $ea = sp + 40 | 0;
 $pp = sp + 32 | 0;
 $lag = sp + 16 | 0;
 $stat_lag = sp + 96 | 0;
 $W_val = sp + 8 | 0;
 $W_err = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $l;
 HEAPF64[$3 >> 3] = $Z;
 HEAPF64[$4 >> 3] = $r;
 HEAP32[$5 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >= 1) if ((HEAP32[$2 >> 2] | 0) <= ((HEAP32[$1 >> 2] | 0) - 1 | 0)) if (!(+HEAPF64[$3 >> 3] <= 0.0)) if (!(+HEAPF64[$4 >> 3] < 0.0)) {
  HEAPF64[$A >> 3] = +HEAPF64[$3 >> 3] * 2.0 / +(HEAP32[$1 >> 2] | 0);
  HEAP32[$stat_norm >> 2] = _R_norm(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], $norm) | 0;
  HEAPF64[$rho >> 3] = +HEAPF64[$A >> 3] * +HEAPF64[$4 >> 3];
  HEAPF64[$ea >> 3] = +Math_exp(+(+HEAPF64[$rho >> 3] * -.5));
  HEAPF64[$pp >> 3] = +_gsl_sf_pow_int(+HEAPF64[$rho >> 3], HEAP32[$2 >> 2] | 0);
  HEAP32[$stat_lag >> 2] = _gsl_sf_laguerre_n_e((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) - 1 | 0, +((HEAP32[$2 >> 2] << 1) + 1 | 0), +HEAPF64[$rho >> 3], $lag) | 0;
  HEAPF64[$W_val >> 3] = +HEAPF64[$norm >> 3] * +HEAPF64[$ea >> 3] * +HEAPF64[$pp >> 3];
  HEAPF64[$W_err >> 3] = +HEAPF64[$norm + 8 >> 3] * +HEAPF64[$ea >> 3] * +HEAPF64[$pp >> 3];
  HEAPF64[$W_err >> 3] = +HEAPF64[$W_err >> 3] + +HEAPF64[$norm >> 3] * (+HEAPF64[$rho >> 3] * .5 + 1.0) * 2.220446049250313e-16 * +HEAPF64[$ea >> 3] * +HEAPF64[$pp >> 3];
  HEAPF64[$W_err >> 3] = +HEAPF64[$W_err >> 3] + +HEAPF64[$norm >> 3] * +HEAPF64[$ea >> 3] * (+(HEAP32[$2 >> 2] | 0) + 1.0) * 2.220446049250313e-16 * +HEAPF64[$pp >> 3];
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$W_val >> 3] * +HEAPF64[$lag >> 3];
  $94 = +HEAPF64[$W_val >> 3] * +HEAPF64[$lag + 8 >> 3] + +HEAPF64[$W_err >> 3] * +Math_abs(+(+HEAPF64[$lag >> 3]));
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $94;
  $100 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * 4.440892098500626e-16;
  $102 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAPF64[$102 >> 3] = +HEAPF64[$102 >> 3] + $100;
  if (!(HEAP32[$2 >> 2] | 0)) label = 9; else if (+HEAPF64[$4 >> 3] > 0.0) if ((HEAP32[$2 >> 2] | 0) > 0) label = 9;
  if ((label | 0) == 9) if (+HEAPF64[$lag >> 3] != 0.0) if (!(HEAP32[$stat_lag >> 2] | 0)) if (!(HEAP32[$stat_norm >> 2] | 0)) if (+Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(26296, 26312, 101, 15);
   HEAP32[$0 >> 2] = 15;
   $129 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $129 | 0;
  }
  if (HEAP32[$stat_lag >> 2] | 0) $128 = HEAP32[$stat_lag >> 2] | 0; else $128 = (HEAP32[$stat_norm >> 2] | 0) != 0 ? HEAP32[$stat_norm >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $128;
  $129 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(26328, 26312, 81, 1);
 HEAP32[$0 >> 2] = 1;
 $129 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $129 | 0;
}
function _fd_series_int($j, $x, $result) {
 $j = $j | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $2 = 0, $43 = 0.0, $57 = 0, $60 = 0, $88 = 0.0, $del = 0, $eta_factor = 0, $jfact = 0, $m = 0, $n = 0, $pow_factor = 0, $pre2 = 0, $sum = 0, $sum2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 92 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 88 | 0;
 $n = sp + 84 | 0;
 $sum = sp + 64 | 0;
 $del = sp + 56 | 0;
 $pow_factor = sp + 48 | 0;
 $eta_factor = sp + 32 | 0;
 $m = sp + 80 | 0;
 $jfact = sp + 16 | 0;
 $sum2 = sp + 8 | 0;
 $pre2 = sp;
 HEAP32[$0 >> 2] = $j;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$sum >> 3] = 0.0;
 HEAPF64[$pow_factor >> 3] = 1.0;
 _gsl_sf_eta_int_e((HEAP32[$0 >> 2] | 0) + 1 | 0, $eta_factor) | 0;
 HEAPF64[$del >> 3] = +HEAPF64[$pow_factor >> 3] * +HEAPF64[$eta_factor >> 3];
 HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$del >> 3];
 HEAP32[$n >> 2] = 1;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) > ((HEAP32[$0 >> 2] | 0) + 2 | 0)) break;
  _gsl_sf_eta_int_e((HEAP32[$0 >> 2] | 0) + 1 - (HEAP32[$n >> 2] | 0) | 0, $eta_factor) | 0;
  HEAPF64[$pow_factor >> 3] = +HEAPF64[$pow_factor >> 3] * (+HEAPF64[$1 >> 3] / +(HEAP32[$n >> 2] | 0));
  HEAPF64[$del >> 3] = +HEAPF64[$pow_factor >> 3] * +HEAPF64[$eta_factor >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$del >> 3];
  if (+Math_abs(+(+HEAPF64[$del >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 if ((HEAP32[$0 >> 2] | 0) >= 32) {
  $103 = +HEAPF64[$sum >> 3];
  $104 = HEAP32[$2 >> 2] | 0;
  HEAPF64[$104 >> 3] = $103;
  $105 = +HEAPF64[$sum >> 3];
  $106 = +Math_abs(+$105);
  $107 = 4.440892098500626e-16 * $106;
  $108 = HEAP32[$2 >> 2] | 0;
  $109 = $108 + 8 | 0;
  HEAPF64[$109 >> 3] = $107;
  STACKTOP = sp;
  return 0;
 }
 _gsl_sf_fact_e(HEAP32[$0 >> 2] | 0, $jfact) | 0;
 $43 = +_gsl_sf_pow_int(+HEAPF64[$1 >> 3], HEAP32[$0 >> 2] | 0);
 HEAPF64[$pre2 >> 3] = $43 / +HEAPF64[$jfact >> 3];
 _gsl_sf_eta_int_e(-3, $eta_factor) | 0;
 $57 = Math_imul((HEAP32[$0 >> 2] | 0) + 4 | 0, (HEAP32[$0 >> 2] | 0) + 3 | 0) | 0;
 $60 = Math_imul($57, (HEAP32[$0 >> 2] | 0) + 2 | 0) | 0;
 HEAPF64[$pow_factor >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / +(Math_imul($60, (HEAP32[$0 >> 2] | 0) + 1 | 0) | 0);
 HEAPF64[$sum2 >> 3] = +HEAPF64[$eta_factor >> 3] * +HEAPF64[$pow_factor >> 3];
 HEAP32[$m >> 2] = 3;
 while (1) {
  if ((HEAP32[$m >> 2] | 0) >= 24) break;
  _gsl_sf_eta_int_e(1 - (HEAP32[$m >> 2] << 1) | 0, $eta_factor) | 0;
  $88 = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / +(Math_imul((HEAP32[$0 >> 2] | 0) + (HEAP32[$m >> 2] << 1) | 0, (HEAP32[$0 >> 2] | 0) + (HEAP32[$m >> 2] << 1) - 1 | 0) | 0);
  HEAPF64[$pow_factor >> 3] = +HEAPF64[$pow_factor >> 3] * $88;
  HEAPF64[$sum2 >> 3] = +HEAPF64[$sum2 >> 3] + +HEAPF64[$eta_factor >> 3] * +HEAPF64[$pow_factor >> 3];
  HEAP32[$m >> 2] = (HEAP32[$m >> 2] | 0) + 1;
 }
 HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$pre2 >> 3] * +HEAPF64[$sum2 >> 3];
 $103 = +HEAPF64[$sum >> 3];
 $104 = HEAP32[$2 >> 2] | 0;
 HEAPF64[$104 >> 3] = $103;
 $105 = +HEAPF64[$sum >> 3];
 $106 = +Math_abs(+$105);
 $107 = 4.440892098500626e-16 * $106;
 $108 = HEAP32[$2 >> 2] | 0;
 $109 = $108 + 8 | 0;
 HEAPF64[$109 >> 3] = $107;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_exp_mult_e10_e($x, $y, $result) {
 $x = +$x;
 $y = +$y;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $105 = 0, $2 = 0, $3 = 0, $30 = 0.0, $34 = 0.0, $72 = 0.0, $75 = 0.0, $85 = 0.0, $91 = 0.0, $97 = 0.0, $99 = 0, $N = 0, $arg_err = 0, $arg_val = 0, $ay = 0, $ex = 0, $l10_val = 0, $ly = 0, $sy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 76 | 0;
 $ay = sp + 48 | 0;
 $ex = sp + 40 | 0;
 $ly = sp + 32 | 0;
 $l10_val = sp + 24 | 0;
 $sy = sp + 16 | 0;
 $N = sp + 72 | 0;
 $arg_val = sp + 8 | 0;
 $arg_err = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$ay >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  $105 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $105 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 354.891356446692 & +HEAPF64[$1 >> 3] > -354.19820926613204) if (+HEAPF64[$ay >> 3] < 1.0726246343954077e+154 & +HEAPF64[$ay >> 3] > 1.7900017754880496e-154) {
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$ex >> 3];
  $30 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 2.0) * 2.220446049250313e-16;
  $34 = $30 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $34;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  $105 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $105 | 0;
 }
 HEAPF64[$ly >> 3] = +Math_log(+(+HEAPF64[$ay >> 3]));
 HEAPF64[$l10_val >> 3] = (+HEAPF64[$1 >> 3] + +HEAPF64[$ly >> 3]) / 2.302585092994046;
 if (+HEAPF64[$l10_val >> 3] > 2147483646.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(31008, 31024, 207, 16);
  HEAP32[$0 >> 2] = 16;
  $105 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $105 | 0;
 }
 if (+HEAPF64[$l10_val >> 3] < -2147483647.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(31032, 31024, 210, 15);
  HEAP32[$0 >> 2] = 15;
  $105 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $105 | 0;
 } else {
  HEAPF64[$sy >> 3] = +((+HEAPF64[$2 >> 3] >= 0.0 ? 1 : -1) | 0);
  HEAP32[$N >> 2] = ~~+Math_floor(+(+HEAPF64[$l10_val >> 3]));
  HEAPF64[$arg_val >> 3] = (+HEAPF64[$l10_val >> 3] - +(HEAP32[$N >> 2] | 0)) * 2.302585092994046;
  $72 = +Math_abs(+(+HEAPF64[$1 >> 3]));
  $75 = $72 + +Math_abs(+(+HEAPF64[$ly >> 3]));
  HEAPF64[$arg_err >> 3] = ($75 + +Math_abs(+(+(HEAP32[$N >> 2] | 0))) * 2.302585092994046) * 4.440892098500626e-16;
  $85 = +HEAPF64[$sy >> 3] * +Math_exp(+(+HEAPF64[$arg_val >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $85;
  $91 = +HEAPF64[$arg_err >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $91;
  $97 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $99 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$99 >> 3] = +HEAPF64[$99 >> 3] + $97;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = HEAP32[$N >> 2];
  HEAP32[$0 >> 2] = 0;
  $105 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $105 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_Kn_scaled_array($nmin, $nmax, $x, $result_array) {
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $3 = 0, $4 = 0, $44 = 0, $88 = 0, $Kn = 0, $Knm1 = 0, $Knp1 = 0, $b = 0, $j = 0, $j2 = 0, $n = 0, $r_Kn = 0, $r_Knm1 = 0, $stat = 0, $stat1 = 0, $stat_0 = 0, $stat_1 = 0, $two_over_x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 128 | 0;
 $1 = sp + 124 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 116 | 0;
 $j = sp + 112 | 0;
 $b = sp + 64 | 0;
 $stat = sp + 108 | 0;
 $two_over_x = sp + 56 | 0;
 $r_Knm1 = sp + 40 | 0;
 $r_Kn = sp + 24 | 0;
 $stat_0 = sp + 104 | 0;
 $stat_1 = sp + 100 | 0;
 $stat1 = sp + 96 | 0;
 $Knp1 = sp + 16 | 0;
 $Kn = sp + 8 | 0;
 $Knm1 = sp;
 $n = sp + 92 | 0;
 $j2 = sp + 88 | 0;
 HEAP32[$1 >> 2] = $nmin;
 HEAP32[$2 >> 2] = $nmax;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) if (!(+HEAPF64[$3 >> 3] <= 0.0)) {
  $24 = +HEAPF64[$3 >> 3];
  if (!(HEAP32[$2 >> 2] | 0)) {
   HEAP32[$stat >> 2] = _gsl_sf_bessel_K0_scaled_e($24, $b) | 0;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$b >> 3];
   HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
   $88 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $88 | 0;
  }
  HEAPF64[$two_over_x >> 3] = 2.0 / $24;
  HEAP32[$stat_0 >> 2] = _gsl_sf_bessel_Kn_scaled_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$3 >> 3], $r_Knm1) | 0;
  HEAP32[$stat_1 >> 2] = _gsl_sf_bessel_Kn_scaled_e((HEAP32[$1 >> 2] | 0) + 1 | 0, +HEAPF64[$3 >> 3], $r_Kn) | 0;
  if (HEAP32[$stat_0 >> 2] | 0) $44 = HEAP32[$stat_0 >> 2] | 0; else $44 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
  HEAP32[$stat1 >> 2] = $44;
  HEAPF64[$Kn >> 3] = +HEAPF64[$r_Kn >> 3];
  HEAPF64[$Knm1 >> 3] = +HEAPF64[$r_Knm1 >> 3];
  HEAP32[$n >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) > ((HEAP32[$2 >> 2] | 0) + 1 | 0)) {
    label = 21;
    break;
   }
   if (!(+HEAPF64[$Knm1 >> 3] < 1.7976931348623157e+308)) break;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n >> 2] | 0) - 1 - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = +HEAPF64[$Knm1 >> 3];
   HEAPF64[$Knp1 >> 3] = +HEAPF64[$Knm1 >> 3] + +(HEAP32[$n >> 2] | 0) * +HEAPF64[$two_over_x >> 3] * +HEAPF64[$Kn >> 3];
   HEAPF64[$Knm1 >> 3] = +HEAPF64[$Kn >> 3];
   HEAPF64[$Kn >> 3] = +HEAPF64[$Knp1 >> 3];
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  if ((label | 0) == 21) {
   HEAP32[$0 >> 2] = HEAP32[$stat1 >> 2];
   $88 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $88 | 0;
  }
  HEAP32[$j2 >> 2] = HEAP32[$n >> 2];
  while (1) {
   if ((HEAP32[$j2 >> 2] | 0) > ((HEAP32[$2 >> 2] | 0) + 1 | 0)) break;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$j2 >> 2] | 0) - 1 - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = 0.0;
   HEAP32[$j2 >> 2] = (HEAP32[$j2 >> 2] | 0) + 1;
  }
  _gsl_error(13888, 13872, 208, 16);
  HEAP32[$0 >> 2] = 16;
  $88 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 }
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) > ((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0)) break;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3] = 0.0;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 _gsl_error(13856, 13872, 171, 1);
 HEAP32[$0 >> 2] = 1;
 $88 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $88 | 0;
}
function _gsl_sf_choose_e($n, $m, $result) {
 $n = $n | 0;
 $m = $m | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $105 = 0, $106 = 0, $2 = 0, $3 = 0, $40 = 0.0, $87 = 0.0, $k = 0, $lc = 0, $prod = 0, $stat_e = 0, $stat_lc = 0, $tk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $prod = sp + 24 | 0;
 $k = sp + 40 | 0;
 $tk = sp + 16 | 0;
 $lc = sp;
 $stat_lc = sp + 36 | 0;
 $stat_e = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $m;
 HEAP32[$3 >> 2] = $result;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 > (HEAP32[$1 >> 2] | 0) >>> 0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(38384, 38400, 1587, 1);
  HEAP32[$0 >> 2] = 1;
  $106 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) == 0 ? 1 : (HEAP32[$2 >> 2] | 0) == (HEAP32[$1 >> 2] | 0)) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $106 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) >>> 0 <= 170) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[46024 + ((HEAP32[$1 >> 2] | 0) * 24 | 0) >> 3] / +HEAPF64[46024 + ((HEAP32[$2 >> 2] | 0) * 24 | 0) >> 3] / +HEAPF64[46024 + (((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) * 24 | 0) >> 3];
  $40 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 1.3322676295501878e-15;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $40;
  HEAP32[$0 >> 2] = 0;
  $106 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 }
 if (HEAP32[$2 >> 2] << 1 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) HEAP32[$2 >> 2] = (HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0);
 if (((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) >>> 0 >= 64) {
  HEAP32[$stat_lc >> 2] = _gsl_sf_lnchoose_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, $lc) | 0;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lc >> 3], +HEAPF64[$lc + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  if (HEAP32[$stat_lc >> 2] | 0) $105 = HEAP32[$stat_lc >> 2] | 0; else $105 = (HEAP32[$stat_e >> 2] | 0) != 0 ? HEAP32[$stat_e >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $105;
  $106 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 }
 HEAPF64[$prod >> 3] = 1.0;
 HEAP32[$k >> 2] = HEAP32[$1 >> 2];
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 < ((HEAP32[$2 >> 2] | 0) + 1 | 0) >>> 0) {
   label = 15;
   break;
  }
  HEAPF64[$tk >> 3] = +((HEAP32[$k >> 2] | 0) >>> 0) / +(((HEAP32[$k >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) >>> 0);
  if (+HEAPF64[$tk >> 3] > 1.7976931348623157e+308 / +HEAPF64[$prod >> 3]) {
   label = 13;
   break;
  }
  HEAPF64[$prod >> 3] = +HEAPF64[$prod >> 3] * +HEAPF64[$tk >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + -1;
 }
 if ((label | 0) == 13) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(38472, 38400, 1609, 16);
  HEAP32[$0 >> 2] = 16;
  $106 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 } else if ((label | 0) == 15) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$prod >> 3];
  $87 = +HEAPF64[$prod >> 3] * 4.440892098500626e-16 * +Math_abs(+(+(((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) >>> 0)));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $87;
  HEAP32[$0 >> 2] = 0;
  $106 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_j1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $104 = 0, $105 = 0, $17 = 0.0, $2 = 0, $43 = 0.0, $63 = 0.0, $67 = 0.0, $70 = 0.0, $78 = 0.0, $84 = 0.0, $86 = 0, $92 = 0.0, $94 = 0, $ax = 0, $cos_result = 0, $cos_x = 0, $sin_result = 0, $sin_x = 0, $stat_cos = 0, $stat_sin = 0, $sum = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 128 | 0;
 $ax = sp + 104 | 0;
 $y = sp + 96 | 0;
 $sum = sp + 48 | 0;
 $cos_result = sp + 32 | 0;
 $sin_result = sp + 16 | 0;
 $stat_cos = sp + 124 | 0;
 $stat_sin = sp + 120 | 0;
 $cos_x = sp + 8 | 0;
 $sin_x = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $105 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $105 | 0;
 }
 if (+HEAPF64[$ax >> 3] < 6.897728961372324e-308) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(15840, 15856, 77, 15);
  HEAP32[$0 >> 2] = 15;
  $105 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $105 | 0;
 }
 $17 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$ax >> 3] < .25) {
  HEAPF64[$y >> 3] = $17 * +HEAPF64[$1 >> 3];
  HEAPF64[sp + 88 >> 3] = -.1;
  HEAPF64[sp + 80 >> 3] = .0035714285714285713;
  HEAPF64[sp + 72 >> 3] = -6613756613756614.0e-20;
  HEAPF64[sp + 64 >> 3] = 7.515632515632515e-7;
  HEAPF64[sp + 56 >> 3] = -5.7812557812557815e-9;
  HEAPF64[$sum >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * -5.7812557812557815e-9 + 7.515632515632515e-7) + -6613756613756614.0e-20) + .0035714285714285713) + -.1) + 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] / 3.0 * +HEAPF64[$sum >> 3];
  $43 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $43;
  HEAP32[$0 >> 2] = 0;
  $105 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $105 | 0;
 }
 HEAP32[$stat_cos >> 2] = _gsl_sf_cos_e($17, $cos_result) | 0;
 HEAP32[$stat_sin >> 2] = _gsl_sf_sin_e(+HEAPF64[$1 >> 3], $sin_result) | 0;
 HEAPF64[$cos_x >> 3] = +HEAPF64[$cos_result >> 3];
 HEAPF64[$sin_x >> 3] = +HEAPF64[$sin_result >> 3];
 HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$sin_x >> 3] / +HEAPF64[$1 >> 3] - +HEAPF64[$cos_x >> 3]) / +HEAPF64[$1 >> 3];
 $63 = +Math_abs(+(+HEAPF64[$sin_result + 8 >> 3] / +HEAPF64[$1 >> 3]));
 $67 = $63 + +Math_abs(+(+HEAPF64[$cos_result + 8 >> 3]));
 $70 = $67 / +Math_abs(+(+HEAPF64[$1 >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $70;
 $78 = +Math_abs(+(+HEAPF64[$sin_x >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3])));
 $84 = ($78 + +Math_abs(+(+HEAPF64[$cos_x >> 3] / +HEAPF64[$1 >> 3]))) * 4.440892098500626e-16;
 $86 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$86 >> 3] = +HEAPF64[$86 >> 3] + $84;
 $92 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $94 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$94 >> 3] = +HEAPF64[$94 >> 3] + $92;
 if (HEAP32[$stat_cos >> 2] | 0) $104 = HEAP32[$stat_cos >> 2] | 0; else $104 = (HEAP32[$stat_sin >> 2] | 0) != 0 ? HEAP32[$stat_sin >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $104;
 $105 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $105 | 0;
}
function _gsl_sf_airy_Ai_deriv_e($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $105 = 0, $109 = 0, $2 = 0, $20 = 0.0, $26 = 0.0, $3 = 0, $32 = 0.0, $34 = 0, $43 = 0.0, $6 = 0.0, $64 = 0.0, $73 = 0.0, $75 = 0, $92 = 0.0, $a = 0, $arg = 0, $c = 0, $p = 0, $result_aps = 0, $result_c1 = 0, $result_c2 = 0, $stat_a = 0, $stat_e = 0, $status_ap = 0, $x3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 128 | 0;
 $3 = sp + 124 | 0;
 $a = sp + 88 | 0;
 $p = sp + 72 | 0;
 $status_ap = sp + 120 | 0;
 $c = sp + 64 | 0;
 $x3 = sp + 56 | 0;
 $result_c1 = sp + 40 | 0;
 $result_c2 = sp + 24 | 0;
 $result_aps = sp + 8 | 0;
 $arg = sp;
 $stat_a = sp + 116 | 0;
 $stat_e = sp + 112 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAP32[$status_ap >> 2] = _airy_deriv_mod_phase($6, HEAP32[$2 >> 2] | 0, $a, $p) | 0;
  HEAPF64[$c >> 3] = +Math_cos(+(+HEAPF64[$p >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$a >> 3] * +HEAPF64[$c >> 3];
  $20 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3] * +HEAPF64[$p + 8 >> 3]));
  $26 = $20 + +Math_abs(+(+HEAPF64[$c >> 3] * +HEAPF64[$a + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $26;
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $34 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] + $32;
  HEAP32[$0 >> 2] = HEAP32[$status_ap >> 2];
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 $43 = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 if ($6 < 1.0) {
  HEAPF64[$x3 >> 3] = $43;
  _cheb_eval_mode_e66(6e3, +HEAPF64[$x3 >> 3], HEAP32[$2 >> 2] | 0, $result_c1) | 0;
  _cheb_eval_mode_e66(5904, +HEAPF64[$x3 >> 3], HEAP32[$2 >> 2] | 0, $result_c2) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c1 >> 3] + .125) - +HEAPF64[$result_c2 >> 3] - .25;
  $64 = +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$result_c1 + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $64 + +HEAPF64[$result_c2 + 8 >> 3];
  $73 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $75 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$75 >> 3] = +HEAPF64[$75 >> 3] + $73;
  HEAP32[$0 >> 2] = 0;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 if (!($43 < 1129107.343026012)) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(4296, 4312, 734, 15);
  HEAP32[$0 >> 2] = 15;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 HEAPF64[$arg >> 3] = +HEAPF64[$1 >> 3] * -2.0 * +Math_sqrt(+(+HEAPF64[$1 >> 3])) / 3.0;
 HEAP32[$stat_a >> 2] = _gsl_sf_airy_Ai_deriv_scaled_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result_aps) | 0;
 $92 = +Math_abs(+(+HEAPF64[$arg >> 3] * 2.220446049250313e-16)) * 1.5;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$arg >> 3], $92, +HEAPF64[$result_aps >> 3], +HEAPF64[$result_aps + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) $105 = HEAP32[$stat_e >> 2] | 0; else $105 = (HEAP32[$stat_a >> 2] | 0) != 0 ? HEAP32[$stat_a >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $105;
 $109 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $109 | 0;
}
function _ran_set748($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $25 = 0, $j = 0, $ss = 0, $state = 0, $t = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832 | 0;
 $0 = sp + 816 | 0;
 $1 = sp + 812 | 0;
 $state = sp + 808 | 0;
 $x = sp + 12 | 0;
 $j = sp + 8 | 0;
 $t = sp + 4 | 0;
 $ss = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$ss >> 2] = (HEAP32[$1 >> 2] | 0) + 2 & 1073741822;
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= 100) break;
  HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[$ss >> 2];
  HEAP32[$ss >> 2] = HEAP32[$ss >> 2] << 1;
  if ((HEAP32[$ss >> 2] | 0) >= 1073741824) HEAP32[$ss >> 2] = (HEAP32[$ss >> 2] | 0) - 1073741822;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= 199) break;
  HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] = 0;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 $25 = $x + 4 | 0;
 HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
 HEAP32[$ss >> 2] = HEAP32[$1 >> 2] & 1073741823;
 HEAP32[$t >> 2] = 69;
 while (1) {
  if (!(HEAP32[$t >> 2] | 0)) break;
  HEAP32[$j >> 2] = 99;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) <= 0) break;
   HEAP32[$x + ((HEAP32[$j >> 2] | 0) + (HEAP32[$j >> 2] | 0) << 2) >> 2] = HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2];
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
  }
  HEAP32[$j >> 2] = 198;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) <= 63) break;
   HEAP32[$x + (199 - (HEAP32[$j >> 2] | 0) << 2) >> 2] = HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] & 1073741822;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) - 2;
  }
  HEAP32[$j >> 2] = 198;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) < 100) break;
   if (HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] & 1) {
    HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 63 << 2) >> 2] = (HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 63 << 2) >> 2] | 0) - (HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] | 0) & 1073741823;
    HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] = (HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] | 0) - (HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] | 0) & 1073741823;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
  }
  if (HEAP32[$ss >> 2] & 1) {
   HEAP32[$j >> 2] = 100;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) <= 0) break;
    HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 1 << 2) >> 2];
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
   }
   HEAP32[$x >> 2] = HEAP32[$x + 400 >> 2];
   if (HEAP32[$x + 400 >> 2] & 1) HEAP32[$x + 148 >> 2] = (HEAP32[$x + 148 >> 2] | 0) - (HEAP32[$x + 400 >> 2] | 0) & 1073741823;
  }
  if (HEAP32[$ss >> 2] | 0) {
   HEAP32[$ss >> 2] = HEAP32[$ss >> 2] >> 1;
   continue;
  } else {
   HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) + -1;
   continue;
  }
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = 0;
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= 37) break;
  HEAP32[(HEAP32[$state >> 2] | 0) + 8040 + ((HEAP32[$j >> 2] | 0) + 100 - 37 << 2) >> 2] = HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= 100) break;
  HEAP32[(HEAP32[$state >> 2] | 0) + 8040 + ((HEAP32[$j >> 2] | 0) - 37 << 2) >> 2] = HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gsl_sf_bessel_K_scaled_steed_temme_CF2($nu, $x, $K_nu, $K_nup1, $Kp_nu) {
 $nu = +$nu;
 $x = +$x;
 $K_nu = $K_nu | 0;
 $K_nup1 = $K_nup1 | 0;
 $Kp_nu = $Kp_nu | 0;
 var $0 = 0, $1 = 0, $122 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $93 = 0.0, $Qi = 0, $a1 = 0, $ai = 0, $bi = 0, $ci = 0, $delhi = 0, $dels = 0, $di = 0, $hi = 0, $i = 0, $qi = 0, $qip1 = 0, $s = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 140 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 136 | 0;
 $4 = sp + 132 | 0;
 $5 = sp + 128 | 0;
 $i = sp + 120 | 0;
 $bi = sp + 96 | 0;
 $di = sp + 88 | 0;
 $delhi = sp + 80 | 0;
 $hi = sp + 72 | 0;
 $qi = sp + 64 | 0;
 $qip1 = sp + 56 | 0;
 $ai = sp + 48 | 0;
 $a1 = sp + 40 | 0;
 $ci = sp + 32 | 0;
 $Qi = sp + 24 | 0;
 $s = sp + 16 | 0;
 $dels = sp + 8 | 0;
 $tmp = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $K_nu;
 HEAP32[$4 >> 2] = $K_nup1;
 HEAP32[$5 >> 2] = $Kp_nu;
 HEAP32[sp + 124 >> 2] = 1e4;
 HEAP32[$i >> 2] = 1;
 HEAPF64[$bi >> 3] = (+HEAPF64[$2 >> 3] + 1.0) * 2.0;
 HEAPF64[$di >> 3] = 1.0 / +HEAPF64[$bi >> 3];
 HEAPF64[$delhi >> 3] = +HEAPF64[$di >> 3];
 HEAPF64[$hi >> 3] = +HEAPF64[$di >> 3];
 HEAPF64[$qi >> 3] = 0.0;
 HEAPF64[$qip1 >> 3] = 1.0;
 HEAPF64[$ai >> 3] = -(.25 - +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 HEAPF64[$a1 >> 3] = +HEAPF64[$ai >> 3];
 HEAPF64[$ci >> 3] = -+HEAPF64[$ai >> 3];
 HEAPF64[$Qi >> 3] = -+HEAPF64[$ai >> 3];
 HEAPF64[$s >> 3] = +HEAPF64[$Qi >> 3] * +HEAPF64[$delhi >> 3] + 1.0;
 HEAP32[$i >> 2] = 2;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > 1e4) break;
  HEAPF64[$ai >> 3] = +HEAPF64[$ai >> 3] - +((HEAP32[$i >> 2] | 0) - 1 | 0) * 2.0;
  HEAPF64[$ci >> 3] = -+HEAPF64[$ai >> 3] * +HEAPF64[$ci >> 3] / +(HEAP32[$i >> 2] | 0);
  HEAPF64[$tmp >> 3] = (+HEAPF64[$qi >> 3] - +HEAPF64[$bi >> 3] * +HEAPF64[$qip1 >> 3]) / +HEAPF64[$ai >> 3];
  HEAPF64[$qi >> 3] = +HEAPF64[$qip1 >> 3];
  HEAPF64[$qip1 >> 3] = +HEAPF64[$tmp >> 3];
  HEAPF64[$Qi >> 3] = +HEAPF64[$Qi >> 3] + +HEAPF64[$ci >> 3] * +HEAPF64[$qip1 >> 3];
  HEAPF64[$bi >> 3] = +HEAPF64[$bi >> 3] + 2.0;
  HEAPF64[$di >> 3] = 1.0 / (+HEAPF64[$bi >> 3] + +HEAPF64[$ai >> 3] * +HEAPF64[$di >> 3]);
  HEAPF64[$delhi >> 3] = (+HEAPF64[$bi >> 3] * +HEAPF64[$di >> 3] - 1.0) * +HEAPF64[$delhi >> 3];
  HEAPF64[$hi >> 3] = +HEAPF64[$hi >> 3] + +HEAPF64[$delhi >> 3];
  HEAPF64[$dels >> 3] = +HEAPF64[$Qi >> 3] * +HEAPF64[$delhi >> 3];
  HEAPF64[$s >> 3] = +HEAPF64[$s >> 3] + +HEAPF64[$dels >> 3];
  if (+Math_abs(+(+HEAPF64[$dels >> 3] / +HEAPF64[$s >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$hi >> 3] = +HEAPF64[$hi >> 3] * -+HEAPF64[$a1 >> 3];
 $93 = +Math_sqrt(+(3.141592653589793 / (+HEAPF64[$2 >> 3] * 2.0)));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = $93 / +HEAPF64[$s >> 3];
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3] * (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] + .5 - +HEAPF64[$hi >> 3]) / +HEAPF64[$2 >> 3];
 HEAPF64[HEAP32[$5 >> 2] >> 3] = -+HEAPF64[HEAP32[$4 >> 2] >> 3] + +HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3] * +HEAPF64[HEAP32[$3 >> 2] >> 3];
 if ((HEAP32[$i >> 2] | 0) == 1e4) {
  _gsl_error(10696, 10680, 772, 11);
  HEAP32[$0 >> 2] = 11;
  $122 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $122 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 return 0;
}
function _gsl_sf_synchrotron_1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $103 = 0, $2 = 0, $68 = 0.0, $70 = 0, $82 = 0.0, $88 = 0.0, $97 = 0.0, $cf = 0, $px = 0, $px11 = 0, $result_c1 = 0, $result_c13 = 0, $result_c2 = 0, $t = 0, $t2 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 120 | 0;
 $z = sp + 104 | 0;
 $cf = sp + 96 | 0;
 $px = sp + 80 | 0;
 $px11 = sp + 72 | 0;
 $t = sp + 64 | 0;
 $result_c1 = sp + 48 | 0;
 $result_c2 = sp + 32 | 0;
 $t2 = sp + 16 | 0;
 $result_c13 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(59560, 59576, 187, 1);
  HEAP32[$0 >> 2] = 1;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.2146848510894035e-8) {
  HEAPF64[$z >> 3] = +Math_pow(+$10, .3333333333333333);
  HEAPF64[$cf >> 3] = 1.0 - +HEAPF64[$z >> 3] * .843812762813205 * +HEAPF64[$z >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$z >> 3] * 2.1495282415344787 * +HEAPF64[$cf >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 if ($10 <= 4.0) {
  HEAPF64[sp + 88 >> 3] = 1.8137993642342178;
  HEAPF64[$px >> 3] = +Math_pow(+(+HEAPF64[$1 >> 3]), .3333333333333333);
  HEAPF64[$px11 >> 3] = +_gsl_sf_pow_int(+HEAPF64[$px >> 3], 11);
  HEAPF64[$t >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 8.0 - 1.0;
  _cheb_eval_e618(60576, +HEAPF64[$t >> 3], $result_c1) | 0;
  _cheb_eval_e618(60440, +HEAPF64[$t >> 3], $result_c2) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$px >> 3] * +HEAPF64[$result_c1 >> 3] - +HEAPF64[$px11 >> 3] * +HEAPF64[$result_c2 >> 3] - +HEAPF64[$1 >> 3] * 1.8137993642342178;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$px >> 3] * +HEAPF64[$result_c1 + 8 >> 3] + +HEAPF64[$px11 >> 3] * +HEAPF64[$result_c2 + 8 >> 3] + +HEAPF64[$1 >> 3] * 1.8137993642342178 * 2.220446049250313e-16;
  $68 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $70 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$70 >> 3] = +HEAPF64[$70 >> 3] + $68;
  HEAP32[$0 >> 2] = 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 809.5959068940161) {
  HEAPF64[sp + 24 >> 3] = .22579135264472744;
  HEAPF64[$t2 >> 3] = (12.0 - +HEAPF64[$1 >> 3]) / (+HEAPF64[$1 >> 3] + 4.0);
  _cheb_eval_e618(60312, +HEAPF64[$t2 >> 3], $result_c13) | 0;
  $82 = +Math_sqrt(+(+HEAPF64[$1 >> 3]));
  $88 = $82 * +HEAPF64[$result_c13 >> 3] * +Math_exp(+(.22579135264472744 - +HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $88;
  $97 = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 4.440892098500626e-16 * (+Math_abs(+(.22579135264472744 - +HEAPF64[$1 >> 3])) + 1.0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $97;
  HEAP32[$0 >> 2] = 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(59592, 59576, 223, 15);
  HEAP32[$0 >> 2] = 15;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 return 0;
}
function _gsl_sf_fermi_dirac_3half_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $30 = 0.0, $48 = 0.0, $52 = 0.0, $56 = 0.0, $64 = 0.0, $72 = 0.0, $94 = 0.0, $99 = 0, $c = 0, $ex = 0, $n = 0, $rat = 0, $sum = 0, $t = 0, $t1 = 0, $t2 = 0, $term = 0, $x52 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 92 | 0;
 $ex = sp + 72 | 0;
 $term = sp + 64 | 0;
 $sum = sp + 56 | 0;
 $n = sp + 88 | 0;
 $rat = sp + 48 | 0;
 $t = sp + 40 | 0;
 $t1 = sp + 32 | 0;
 $x52 = sp + 24 | 0;
 $t2 = sp + 16 | 0;
 $c = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(33376, 33392, 1524, 15);
  HEAP32[$0 >> 2] = 15;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAPF64[$ex >> 3] = +Math_exp(+$10);
  HEAPF64[$term >> 3] = +HEAPF64[$ex >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$term >> 3];
  HEAP32[$n >> 2] = 2;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) >= 100) break;
   HEAPF64[$rat >> 3] = (+(HEAP32[$n >> 2] | 0) - 1.0) / +(HEAP32[$n >> 2] | 0);
   $30 = -+HEAPF64[$ex >> 3] * +HEAPF64[$rat >> 3] * +HEAPF64[$rat >> 3] * +Math_sqrt(+(+HEAPF64[$rat >> 3]));
   HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * $30;
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
   if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sum >> 3];
  $48 = +Math_abs(+(+HEAPF64[$sum >> 3])) * 2.0 * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $48;
  HEAP32[$0 >> 2] = 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $52 = +HEAPF64[$1 >> 3];
 if ($10 < 1.0) {
  HEAP32[$0 >> 2] = _cheb_eval_e351(34608, $52, HEAP32[$2 >> 2] | 0) | 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $56 = +HEAPF64[$1 >> 3];
 if ($52 < 4.0) {
  HEAPF64[$t >> 3] = ($56 - 1.0) * .6666666666666666 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(34416, +HEAPF64[$t >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $64 = +HEAPF64[$1 >> 3];
 if ($56 < 10.0) {
  HEAPF64[$t1 >> 3] = ($64 - 4.0) * .3333333333333333 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(34208, +HEAPF64[$t1 >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $72 = +HEAPF64[$1 >> 3];
 if ($64 < 30.0) {
  HEAPF64[$x52 >> 3] = $72 * +HEAPF64[$1 >> 3] * +Math_sqrt(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$t2 >> 3] = +HEAPF64[$1 >> 3] * .1 - 2.0;
  _cheb_eval_e351(34008, +HEAPF64[$t2 >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] * +HEAPF64[$x52 >> 3];
  $94 = +HEAPF64[$c + 8 >> 3] * +HEAPF64[$x52 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 5.551115123125783e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $94;
  HEAP32[$0 >> 2] = 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 } else {
  HEAP32[$0 >> 2] = _fd_asymp(1.5, $72, HEAP32[$2 >> 2] | 0) | 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 return 0;
}
function _gsl_sf_fermi_dirac_half_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $28 = 0.0, $46 = 0.0, $50 = 0.0, $54 = 0.0, $62 = 0.0, $70 = 0.0, $90 = 0.0, $95 = 0, $c = 0, $ex = 0, $n = 0, $rat = 0, $sum = 0, $t = 0, $t1 = 0, $t2 = 0, $term = 0, $x32 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 92 | 0;
 $ex = sp + 72 | 0;
 $term = sp + 64 | 0;
 $sum = sp + 56 | 0;
 $n = sp + 88 | 0;
 $rat = sp + 48 | 0;
 $t = sp + 40 | 0;
 $t1 = sp + 32 | 0;
 $x32 = sp + 24 | 0;
 $t2 = sp + 16 | 0;
 $c = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(33376, 33392, 1476, 15);
  HEAP32[$0 >> 2] = 15;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAPF64[$ex >> 3] = +Math_exp(+$10);
  HEAPF64[$term >> 3] = +HEAPF64[$ex >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$term >> 3];
  HEAP32[$n >> 2] = 2;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) >= 100) break;
   HEAPF64[$rat >> 3] = (+(HEAP32[$n >> 2] | 0) - 1.0) / +(HEAP32[$n >> 2] | 0);
   $28 = -+HEAPF64[$ex >> 3] * +HEAPF64[$rat >> 3] * +Math_sqrt(+(+HEAPF64[$rat >> 3]));
   HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * $28;
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
   if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sum >> 3];
  $46 = +Math_abs(+(+HEAPF64[$sum >> 3])) * 2.0 * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $46;
  HEAP32[$0 >> 2] = 0;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 $50 = +HEAPF64[$1 >> 3];
 if ($10 < 1.0) {
  HEAP32[$0 >> 2] = _cheb_eval_e351(35504, $50, HEAP32[$2 >> 2] | 0) | 0;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 $54 = +HEAPF64[$1 >> 3];
 if ($50 < 4.0) {
  HEAPF64[$t >> 3] = ($54 - 1.0) * .6666666666666666 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(35288, +HEAPF64[$t >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 $62 = +HEAPF64[$1 >> 3];
 if ($54 < 10.0) {
  HEAPF64[$t1 >> 3] = ($62 - 4.0) * .3333333333333333 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(35096, +HEAPF64[$t1 >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 $70 = +HEAPF64[$1 >> 3];
 if ($62 < 30.0) {
  HEAPF64[$x32 >> 3] = $70 * +Math_sqrt(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$t2 >> 3] = +HEAPF64[$1 >> 3] * .1 - 2.0;
  _cheb_eval_e351(34880, +HEAPF64[$t2 >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] * +HEAPF64[$x32 >> 3];
  $90 = +HEAPF64[$c + 8 >> 3] * +HEAPF64[$x32 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 3.3306690738754696e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $90;
  HEAP32[$0 >> 2] = 0;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 } else {
  HEAP32[$0 >> 2] = _fd_asymp(.5, $70, HEAP32[$2 >> 2] | 0) | 0;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 return 0;
}
function _series_2_c($r, $x, $y, $sum_re, $sum_im) {
 $r = +$r;
 $x = +$x;
 $y = +$y;
 $sum_re = $sum_re | 0;
 $sum_im = $sum_im | 0;
 var $0 = 0, $1 = 0, $115 = 0.0, $126 = 0.0, $2 = 0, $3 = 0, $4 = 0, $alpha = 0, $beta = 0, $ck = 0, $ck_tmp = 0, $cos_theta = 0, $di = 0, $dr = 0, $imag_sum = 0, $k = 0, $kmax = 0, $real_sum = 0, $rk = 0, $sin_theta = 0, $sk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 132 | 0;
 $4 = sp + 128 | 0;
 $cos_theta = sp + 88 | 0;
 $sin_theta = sp + 80 | 0;
 $alpha = sp + 72 | 0;
 $beta = sp + 64 | 0;
 $ck = sp + 56 | 0;
 $sk = sp + 48 | 0;
 $rk = sp + 40 | 0;
 $real_sum = sp + 32 | 0;
 $imag_sum = sp + 24 | 0;
 $kmax = sp + 124 | 0;
 $k = sp + 120 | 0;
 $dr = sp + 16 | 0;
 $di = sp + 8 | 0;
 $ck_tmp = sp;
 HEAPF64[$0 >> 3] = $r;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $sum_re;
 HEAP32[$4 >> 2] = $sum_im;
 HEAPF64[$cos_theta >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$0 >> 3];
 HEAPF64[$sin_theta >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$0 >> 3];
 HEAPF64[$alpha >> 3] = 1.0 - +HEAPF64[$cos_theta >> 3];
 HEAPF64[$beta >> 3] = +HEAPF64[$sin_theta >> 3];
 HEAPF64[$ck >> 3] = +HEAPF64[$cos_theta >> 3];
 HEAPF64[$sk >> 3] = +HEAPF64[$sin_theta >> 3];
 HEAPF64[$rk >> 3] = +HEAPF64[$0 >> 3];
 HEAPF64[$real_sum >> 3] = +HEAPF64[$0 >> 3] * .5 * +HEAPF64[$ck >> 3];
 HEAPF64[$imag_sum >> 3] = +HEAPF64[$0 >> 3] * .5 * +HEAPF64[$sk >> 3];
 HEAP32[$kmax >> 2] = 30 + ~~(18.0 / -+Math_log(+(+HEAPF64[$0 >> 3])));
 HEAP32[$k >> 2] = 2;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$kmax >> 2] | 0)) {
   label = 5;
   break;
  }
  HEAPF64[$ck_tmp >> 3] = +HEAPF64[$ck >> 3];
  HEAPF64[$ck >> 3] = +HEAPF64[$ck >> 3] - (+HEAPF64[$alpha >> 3] * +HEAPF64[$ck >> 3] + +HEAPF64[$beta >> 3] * +HEAPF64[$sk >> 3]);
  HEAPF64[$sk >> 3] = +HEAPF64[$sk >> 3] - (+HEAPF64[$alpha >> 3] * +HEAPF64[$sk >> 3] - +HEAPF64[$beta >> 3] * +HEAPF64[$ck_tmp >> 3]);
  HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] * +HEAPF64[$0 >> 3];
  HEAPF64[$dr >> 3] = +HEAPF64[$rk >> 3] / (+(HEAP32[$k >> 2] | 0) * +(HEAP32[$k >> 2] | 0) * (+(HEAP32[$k >> 2] | 0) + 1.0)) * +HEAPF64[$ck >> 3];
  HEAPF64[$di >> 3] = +HEAPF64[$rk >> 3] / (+(HEAP32[$k >> 2] | 0) * +(HEAP32[$k >> 2] | 0) * (+(HEAP32[$k >> 2] | 0) + 1.0)) * +HEAPF64[$sk >> 3];
  HEAPF64[$real_sum >> 3] = +HEAPF64[$real_sum >> 3] + +HEAPF64[$dr >> 3];
  HEAPF64[$imag_sum >> 3] = +HEAPF64[$imag_sum >> 3] + +HEAPF64[$di >> 3];
  if (+Math_abs(+((+HEAPF64[$dr >> 3] * +HEAPF64[$dr >> 3] + +HEAPF64[$di >> 3] * +HEAPF64[$di >> 3]) / (+HEAPF64[$real_sum >> 3] * +HEAPF64[$real_sum >> 3] + +HEAPF64[$imag_sum >> 3] * +HEAPF64[$imag_sum >> 3]))) < 4.930380657631324e-32) {
   label = 5;
   break;
  }
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 if ((label | 0) == 5) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$real_sum >> 3];
  $115 = +(HEAP32[$kmax >> 2] | 0) * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$real_sum >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $115;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$imag_sum >> 3];
  $126 = +(HEAP32[$kmax >> 2] | 0) * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$imag_sum >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $126;
  STACKTOP = sp;
  return 0;
 }
 return 0;
}
function _gsl_sf_exp_mult_e($x, $y, $result) {
 $x = +$x;
 $y = +$y;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $102 = 0, $2 = 0, $28 = 0.0, $3 = 0, $32 = 0.0, $65 = 0.0, $75 = 0.0, $80 = 0.0, $86 = 0.0, $97 = 0.0, $99 = 0, $M = 0, $N = 0, $a = 0, $ay = 0, $b = 0, $berr = 0, $ex = 0, $lnr = 0, $ly = 0, $sy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 96 | 0;
 $ay = sp + 72 | 0;
 $ex = sp + 64 | 0;
 $ly = sp + 56 | 0;
 $lnr = sp + 48 | 0;
 $sy = sp + 40 | 0;
 $M = sp + 32 | 0;
 $N = sp + 24 | 0;
 $a = sp + 16 | 0;
 $b = sp + 8 | 0;
 $berr = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$ay >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 354.891356446692 & +HEAPF64[$1 >> 3] > -354.19820926613204) if (+HEAPF64[$ay >> 3] < 1.0726246343954077e+154 & +HEAPF64[$ay >> 3] > 1.7900017754880496e-154) {
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$ex >> 3];
  $28 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 2.0) * 2.220446049250313e-16;
  $32 = $28 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $32;
  HEAP32[$0 >> 2] = 0;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 HEAPF64[$ly >> 3] = +Math_log(+(+HEAPF64[$ay >> 3]));
 HEAPF64[$lnr >> 3] = +HEAPF64[$1 >> 3] + +HEAPF64[$ly >> 3];
 if (+HEAPF64[$lnr >> 3] > 709.772712893384) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31008, 31024, 162, 16);
  HEAP32[$0 >> 2] = 16;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 if (+HEAPF64[$lnr >> 3] < -708.3864185322641) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(31032, 31024, 165, 15);
  HEAP32[$0 >> 2] = 15;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 } else {
  HEAPF64[$sy >> 3] = +((+HEAPF64[$2 >> 3] >= 0.0 ? 1 : -1) | 0);
  HEAPF64[$M >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$N >> 3] = +Math_floor(+(+HEAPF64[$ly >> 3]));
  HEAPF64[$a >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$M >> 3];
  HEAPF64[$b >> 3] = +HEAPF64[$ly >> 3] - +HEAPF64[$N >> 3];
  $65 = +Math_abs(+(+HEAPF64[$ly >> 3]));
  HEAPF64[$berr >> 3] = ($65 + +Math_abs(+(+HEAPF64[$N >> 3]))) * 4.440892098500626e-16;
  $75 = +HEAPF64[$sy >> 3] * +Math_exp(+(+HEAPF64[$M >> 3] + +HEAPF64[$N >> 3]));
  $80 = $75 * +Math_exp(+(+HEAPF64[$a >> 3] + +HEAPF64[$b >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $80;
  $86 = +HEAPF64[$berr >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $86;
  $97 = (+HEAPF64[$M >> 3] + +HEAPF64[$N >> 3] + 1.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  $99 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$99 >> 3] = +HEAPF64[$99 >> 3] + $97;
  HEAP32[$0 >> 2] = 0;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 return 0;
}
function _dilogc_series_1($r, $x, $y, $real_result, $imag_result) {
 $r = +$r;
 $x = +$x;
 $y = +$y;
 $real_result = $real_result | 0;
 $imag_result = $imag_result | 0;
 var $0 = 0, $1 = 0, $105 = 0.0, $116 = 0.0, $2 = 0, $3 = 0, $4 = 0, $alpha = 0, $beta = 0, $ck = 0, $ck_tmp = 0, $cos_theta = 0, $di = 0, $dr = 0, $imag_sum = 0, $k = 0, $kmax = 0, $real_sum = 0, $rk = 0, $sin_theta = 0, $sk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 132 | 0;
 $4 = sp + 128 | 0;
 $cos_theta = sp + 88 | 0;
 $sin_theta = sp + 80 | 0;
 $alpha = sp + 72 | 0;
 $beta = sp + 64 | 0;
 $ck = sp + 56 | 0;
 $sk = sp + 48 | 0;
 $rk = sp + 40 | 0;
 $real_sum = sp + 32 | 0;
 $imag_sum = sp + 24 | 0;
 $kmax = sp + 124 | 0;
 $k = sp + 120 | 0;
 $dr = sp + 16 | 0;
 $di = sp + 8 | 0;
 $ck_tmp = sp;
 HEAPF64[$0 >> 3] = $r;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $real_result;
 HEAP32[$4 >> 2] = $imag_result;
 HEAPF64[$cos_theta >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$0 >> 3];
 HEAPF64[$sin_theta >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$0 >> 3];
 HEAPF64[$alpha >> 3] = 1.0 - +HEAPF64[$cos_theta >> 3];
 HEAPF64[$beta >> 3] = +HEAPF64[$sin_theta >> 3];
 HEAPF64[$ck >> 3] = +HEAPF64[$cos_theta >> 3];
 HEAPF64[$sk >> 3] = +HEAPF64[$sin_theta >> 3];
 HEAPF64[$rk >> 3] = +HEAPF64[$0 >> 3];
 HEAPF64[$real_sum >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$ck >> 3];
 HEAPF64[$imag_sum >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$sk >> 3];
 HEAP32[$kmax >> 2] = 50 + ~~(22.0 / -+Math_log(+(+HEAPF64[$0 >> 3])));
 HEAP32[$k >> 2] = 2;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$kmax >> 2] | 0)) {
   label = 5;
   break;
  }
  HEAPF64[$ck_tmp >> 3] = +HEAPF64[$ck >> 3];
  HEAPF64[$ck >> 3] = +HEAPF64[$ck >> 3] - (+HEAPF64[$alpha >> 3] * +HEAPF64[$ck >> 3] + +HEAPF64[$beta >> 3] * +HEAPF64[$sk >> 3]);
  HEAPF64[$sk >> 3] = +HEAPF64[$sk >> 3] - (+HEAPF64[$alpha >> 3] * +HEAPF64[$sk >> 3] - +HEAPF64[$beta >> 3] * +HEAPF64[$ck_tmp >> 3]);
  HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] * +HEAPF64[$0 >> 3];
  HEAPF64[$dr >> 3] = +HEAPF64[$rk >> 3] / (+(HEAP32[$k >> 2] | 0) * +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$ck >> 3];
  HEAPF64[$di >> 3] = +HEAPF64[$rk >> 3] / (+(HEAP32[$k >> 2] | 0) * +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$sk >> 3];
  HEAPF64[$real_sum >> 3] = +HEAPF64[$real_sum >> 3] + +HEAPF64[$dr >> 3];
  HEAPF64[$imag_sum >> 3] = +HEAPF64[$imag_sum >> 3] + +HEAPF64[$di >> 3];
  if (+Math_abs(+((+HEAPF64[$dr >> 3] * +HEAPF64[$dr >> 3] + +HEAPF64[$di >> 3] * +HEAPF64[$di >> 3]) / (+HEAPF64[$real_sum >> 3] * +HEAPF64[$real_sum >> 3] + +HEAPF64[$imag_sum >> 3] * +HEAPF64[$imag_sum >> 3]))) < 4.930380657631324e-32) {
   label = 5;
   break;
  }
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 if ((label | 0) == 5) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$real_sum >> 3];
  $105 = +(HEAP32[$kmax >> 2] | 0) * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$real_sum >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $105;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$imag_sum >> 3];
  $116 = +(HEAP32[$kmax >> 2] | 0) * 2.0 * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$imag_sum >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $116;
  STACKTOP = sp;
  return 0;
 }
 return 0;
}
function _gsl_sf_fermi_dirac_mhalf_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $26 = 0.0, $44 = 0.0, $48 = 0.0, $52 = 0.0, $60 = 0.0, $68 = 0.0, $86 = 0.0, $91 = 0, $c = 0, $ex = 0, $n = 0, $rat = 0, $rtx = 0, $sum = 0, $t = 0, $t1 = 0, $t2 = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 92 | 0;
 $ex = sp + 72 | 0;
 $term = sp + 64 | 0;
 $sum = sp + 56 | 0;
 $n = sp + 88 | 0;
 $rat = sp + 48 | 0;
 $t = sp + 40 | 0;
 $t1 = sp + 32 | 0;
 $rtx = sp + 24 | 0;
 $t2 = sp + 16 | 0;
 $c = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(33376, 33392, 1428, 15);
  HEAP32[$0 >> 2] = 15;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAPF64[$ex >> 3] = +Math_exp(+$10);
  HEAPF64[$term >> 3] = +HEAPF64[$ex >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$term >> 3];
  HEAP32[$n >> 2] = 2;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) >= 200) break;
   HEAPF64[$rat >> 3] = (+(HEAP32[$n >> 2] | 0) - 1.0) / +(HEAP32[$n >> 2] | 0);
   $26 = -+HEAPF64[$ex >> 3] * +Math_sqrt(+(+HEAPF64[$rat >> 3]));
   HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * $26;
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
   if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sum >> 3];
  $44 = +Math_abs(+(+HEAPF64[$sum >> 3])) * 2.0 * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $44;
  HEAP32[$0 >> 2] = 0;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 $48 = +HEAPF64[$1 >> 3];
 if ($10 < 1.0) {
  HEAP32[$0 >> 2] = _cheb_eval_e351(36392, $48, HEAP32[$2 >> 2] | 0) | 0;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 $52 = +HEAPF64[$1 >> 3];
 if ($48 < 4.0) {
  HEAPF64[$t >> 3] = ($52 - 1.0) * .6666666666666666 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(36200, +HEAPF64[$t >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 $60 = +HEAPF64[$1 >> 3];
 if ($52 < 10.0) {
  HEAPF64[$t1 >> 3] = ($60 - 4.0) * .3333333333333333 - 1.0;
  HEAP32[$0 >> 2] = _cheb_eval_e351(36008, +HEAPF64[$t1 >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 $68 = +HEAPF64[$1 >> 3];
 if ($60 < 30.0) {
  HEAPF64[$rtx >> 3] = +Math_sqrt(+$68);
  HEAPF64[$t2 >> 3] = +HEAPF64[$1 >> 3] * .1 - 2.0;
  _cheb_eval_e351(35776, +HEAPF64[$t2 >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] * +HEAPF64[$rtx >> 3];
  $86 = +HEAPF64[$c + 8 >> 3] * +HEAPF64[$rtx >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 1.1102230246251565e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $86;
  HEAP32[$0 >> 2] = 0;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 } else {
  HEAP32[$0 >> 2] = _fd_asymp(-.5, $68, HEAP32[$2 >> 2] | 0) | 0;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_J1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $101 = 0, $102 = 0, $2 = 0, $24 = 0.0, $38 = 0.0, $62 = 0.0, $66 = 0.0, $69 = 0.0, $76 = 0.0, $86 = 0.0, $88 = 0, $ampl = 0, $c = 0, $ca = 0, $ct = 0, $sp = 0, $sqrty = 0, $stat_ca = 0, $stat_ct = 0, $stat_sp = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 116 | 0;
 $y = sp + 88 | 0;
 $c = sp + 72 | 0;
 $z = sp + 64 | 0;
 $ca = sp + 48 | 0;
 $ct = sp + 32 | 0;
 $sp = sp + 16 | 0;
 $stat_ca = sp + 112 | 0;
 $stat_ct = sp + 108 | 0;
 $stat_sp = sp + 104 | 0;
 $sqrty = sp + 8 | 0;
 $ampl = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$y >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$y >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 if (+HEAPF64[$y >> 3] < 4.450147717014403e-308) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(12432, 12448, 86, 15);
  HEAP32[$0 >> 2] = 15;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 if (+HEAPF64[$y >> 3] < 4.2146848510894035e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * .5;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 $24 = +HEAPF64[$y >> 3];
 if (+HEAPF64[$y >> 3] < 4.0) {
  _cheb_eval_e104(12592, .125 * $24 * +HEAPF64[$y >> 3] - 1.0, $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$c >> 3] + .25);
  $38 = +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$c + 8 >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $38;
  HEAP32[$0 >> 2] = 0;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 HEAPF64[$z >> 3] = 32.0 / ($24 * +HEAPF64[$y >> 3]) - 1.0;
 HEAP32[$stat_ca >> 2] = _cheb_eval_e104(15360, +HEAPF64[$z >> 3], $ca) | 0;
 HEAP32[$stat_ct >> 2] = _cheb_eval_e104(15584, +HEAPF64[$z >> 3], $ct) | 0;
 HEAP32[$stat_sp >> 2] = _gsl_sf_bessel_sin_pi4_e(+HEAPF64[$y >> 3], +HEAPF64[$ct >> 3] / +HEAPF64[$y >> 3], $sp) | 0;
 HEAPF64[$sqrty >> 3] = +Math_sqrt(+(+HEAPF64[$y >> 3]));
 HEAPF64[$ampl >> 3] = (+HEAPF64[$ca >> 3] + .75) / +HEAPF64[$sqrty >> 3];
 $62 = +HEAPF64[$ampl >> 3];
 if (+HEAPF64[$1 >> 3] < 0.0) $66 = -$62; else $66 = $62;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = $66 * +HEAPF64[$sp >> 3];
 $69 = +Math_abs(+(+HEAPF64[$sp >> 3]));
 $76 = +Math_abs(+(+HEAPF64[$ampl >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $69 * +HEAPF64[$ca + 8 >> 3] / +HEAPF64[$sqrty >> 3] + $76 * +HEAPF64[$sp + 8 >> 3];
 $86 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
 $88 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$88 >> 3] = +HEAPF64[$88 >> 3] + $86;
 do if (HEAP32[$stat_ca >> 2] | 0) $101 = HEAP32[$stat_ca >> 2] | 0; else if (HEAP32[$stat_ct >> 2] | 0) {
  $101 = HEAP32[$stat_ct >> 2] | 0;
  break;
 } else {
  $101 = (HEAP32[$stat_sp >> 2] | 0) != 0 ? HEAP32[$stat_sp >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $101;
 $102 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $102 | 0;
}
function _gsl_sf_bessel_Y0_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $20 = 0.0, $30 = 0.0, $63 = 0.0, $70 = 0.0, $80 = 0.0, $82 = 0, $95 = 0, $99 = 0, $J0 = 0, $ampl = 0, $c = 0, $c1 = 0, $c2 = 0, $sp = 0, $sqrtx = 0, $stat_J0 = 0, $stat_c1 = 0, $stat_c2 = 0, $stat_sp = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 148 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 144 | 0;
 $J0 = sp + 88 | 0;
 $c = sp + 72 | 0;
 $stat_J0 = sp + 140 | 0;
 $z = sp + 64 | 0;
 $c1 = sp + 48 | 0;
 $c2 = sp + 32 | 0;
 $sp = sp + 16 | 0;
 $stat_c1 = sp + 136 | 0;
 $stat_c2 = sp + 132 | 0;
 $stat_sp = sp + 128 | 0;
 $sqrtx = sp + 8 | 0;
 $ampl = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 112 >> 3] = .6366197723675814;
 HEAPF64[sp + 104 >> 3] = 4503599627370496.0;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(14160, 14176, 80, 1);
  HEAP32[$0 >> 2] = 1;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.0) {
  HEAP32[$stat_J0 >> 2] = _gsl_sf_bessel_J0_e($10, $J0) | 0;
  _cheb_eval_e139(14344, +HEAPF64[$1 >> 3] * .125 * +HEAPF64[$1 >> 3] - 1.0, $c) | 0;
  $20 = (+Math_log(+(+HEAPF64[$1 >> 3])) + -.6931471805599453) * .6366197723675814;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $20 * +HEAPF64[$J0 >> 3] + .375 + +HEAPF64[$c >> 3];
  $30 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $30 + +HEAPF64[$c + 8 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_J0 >> 2];
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 if (!($10 < 4503599627370496.0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(14192, 14176, 110, 15);
  HEAP32[$0 >> 2] = 15;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 HEAPF64[$z >> 3] = 32.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - 1.0;
 HEAP32[$stat_c1 >> 2] = _cheb_eval_e139(14936, +HEAPF64[$z >> 3], $c1) | 0;
 HEAP32[$stat_c2 >> 2] = _cheb_eval_e139(15160, +HEAPF64[$z >> 3], $c2) | 0;
 HEAP32[$stat_sp >> 2] = _gsl_sf_bessel_sin_pi4_e(+HEAPF64[$1 >> 3], +HEAPF64[$c2 >> 3] / +HEAPF64[$1 >> 3], $sp) | 0;
 HEAPF64[$sqrtx >> 3] = +Math_sqrt(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$ampl >> 3] = (+HEAPF64[$c1 >> 3] + .75) / +HEAPF64[$sqrtx >> 3];
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ampl >> 3] * +HEAPF64[$sp >> 3];
 $63 = +Math_abs(+(+HEAPF64[$sp >> 3]));
 $70 = +Math_abs(+(+HEAPF64[$ampl >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $63 * +HEAPF64[$c1 + 8 >> 3] / +HEAPF64[$sqrtx >> 3] + $70 * +HEAPF64[$sp + 8 >> 3];
 $80 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $82 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$82 >> 3] = +HEAPF64[$82 >> 3] + $80;
 do if (HEAP32[$stat_sp >> 2] | 0) $95 = HEAP32[$stat_sp >> 2] | 0; else if (HEAP32[$stat_c1 >> 2] | 0) {
  $95 = HEAP32[$stat_c1 >> 2] | 0;
  break;
 } else {
  $95 = (HEAP32[$stat_c2 >> 2] | 0) != 0 ? HEAP32[$stat_c2 >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $95;
 $99 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $99 | 0;
}
function _gsl_cdf_gamma_Qinv($Q, $a, $b) {
 $Q = +$Q;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $10 = 0.0, $105 = 0.0, $112 = 0.0, $12 = 0.0, $19 = 0.0, $2 = 0, $23 = 0.0, $3 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $41 = 0.0, $43 = 0.0, $53 = 0, $62 = 0.0, $72 = 0.0, $87 = 0.0, $dQ = 0, $lambda = 0, $n = 0, $phi = 0, $step = 0, $step0 = 0, $step1 = 0, $x = 0, $x0 = 0, $x01 = 0, $x02 = 0, $xg = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 88 | 0;
 $x = sp + 80 | 0;
 $x0 = sp + 72 | 0;
 $x01 = sp + 64 | 0;
 $xg = sp + 56 | 0;
 $x02 = sp + 48 | 0;
 $lambda = sp + 40 | 0;
 $dQ = sp + 32 | 0;
 $phi = sp + 24 | 0;
 $n = sp + 120 | 0;
 $step0 = sp + 16 | 0;
 $step1 = sp + 8 | 0;
 $step = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $112 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$112;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $112 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$112;
 }
 $10 = +HEAPF64[$1 >> 3];
 do if (+HEAPF64[$1 >> 3] < .05) {
  $12 = -+Math_log(+$10);
  HEAPF64[$x0 >> 3] = $12 + +_gsl_sf_lngamma(+HEAPF64[$2 >> 3]);
  HEAPF64[$x >> 3] = +HEAPF64[$x0 >> 3];
 } else {
  if ($10 > .95) {
   $19 = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3]);
   $23 = $19 + +_log1p(+-+HEAPF64[$1 >> 3]);
   HEAPF64[$x01 >> 3] = +Math_exp(+($23 / +HEAPF64[$2 >> 3]));
   HEAPF64[$x >> 3] = +HEAPF64[$x01 >> 3];
   break;
  }
  HEAPF64[$xg >> 3] = +_gsl_cdf_ugaussian_Qinv(+HEAPF64[$1 >> 3]);
  $34 = +HEAPF64[$xg >> 3] < +Math_sqrt(+(+HEAPF64[$2 >> 3])) * -.5;
  $35 = +HEAPF64[$2 >> 3];
  if ($34) $41 = $35; else {
   $36 = +Math_sqrt(+$35);
   $41 = $36 * +HEAPF64[$xg >> 3] + +HEAPF64[$2 >> 3];
  }
  HEAPF64[$x02 >> 3] = $41;
  HEAPF64[$x >> 3] = +HEAPF64[$x02 >> 3];
 } while (0);
 HEAP32[$n >> 2] = 0;
 do {
  $43 = +HEAPF64[$1 >> 3];
  HEAPF64[$dQ >> 3] = $43 - +_gsl_cdf_gamma_Q(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3], 1.0);
  HEAPF64[$phi >> 3] = +_gsl_ran_gamma_pdf(+HEAPF64[$x >> 3], +HEAPF64[$2 >> 3], 1.0);
  if (+HEAPF64[$dQ >> 3] == 0.0) break;
  $53 = HEAP32[$n >> 2] | 0;
  HEAP32[$n >> 2] = $53 + 1;
  if ($53 >>> 0 > 32) break;
  $62 = +Math_abs(+(+HEAPF64[$dQ >> 3] / +HEAPF64[$x >> 3])) * 2.0;
  if ($62 > +HEAPF64[$phi >> 3]) $72 = +Math_abs(+(+HEAPF64[$dQ >> 3] / +HEAPF64[$x >> 3])) * 2.0; else $72 = +HEAPF64[$phi >> 3];
  HEAPF64[$lambda >> 3] = -+HEAPF64[$dQ >> 3] / $72;
  HEAPF64[$step0 >> 3] = +HEAPF64[$lambda >> 3];
  HEAPF64[$step1 >> 3] = -((+HEAPF64[$2 >> 3] - 1.0) / +HEAPF64[$x >> 3] - 1.0) * +HEAPF64[$lambda >> 3] * +HEAPF64[$lambda >> 3] / 4.0;
  HEAPF64[$step >> 3] = +HEAPF64[$step0 >> 3];
  $87 = +Math_abs(+(+HEAPF64[$step1 >> 3]));
  if ($87 < +Math_abs(+(+HEAPF64[$step0 >> 3])) * .5) HEAPF64[$step >> 3] = +HEAPF64[$step >> 3] + +HEAPF64[$step1 >> 3];
  if (+HEAPF64[$x >> 3] + +HEAPF64[$step >> 3] > 0.0) HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] + +HEAPF64[$step >> 3]; else HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] / 2.0;
  $105 = +Math_abs(+(+HEAPF64[$step0 >> 3]));
 } while ($105 > +HEAPF64[$x >> 3] * 1.0e-10);
 HEAPF64[$0 >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$x >> 3];
 $112 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$112;
}
function _gsl_sf_bessel_K1_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $104 = 0.0, $106 = 0, $109 = 0, $15 = 0.0, $2 = 0, $44 = 0.0, $55 = 0.0, $57 = 0, $63 = 0.0, $82 = 0.0, $84 = 0, $I1 = 0, $c = 0, $c1 = 0, $c3 = 0, $ex = 0, $lx = 0, $stat_I1 = 0, $sx = 0, $sx2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 108 | 0;
 $lx = sp + 88 | 0;
 $ex = sp + 80 | 0;
 $stat_I1 = sp + 104 | 0;
 $I1 = sp + 64 | 0;
 $c = sp + 48 | 0;
 $sx = sp + 40 | 0;
 $c1 = sp + 24 | 0;
 $sx2 = sp + 16 | 0;
 $c3 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(13304, 13320, 136, 1);
  HEAP32[$0 >> 2] = 1;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 4.450147717014403e-308) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(13336, 13320, 139, 16);
  HEAP32[$0 >> 2] = 16;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] <= 2.0) {
  HEAPF64[$lx >> 3] = +Math_log(+$15);
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3]));
  _cheb_eval_e122(13824, +HEAPF64[$1 >> 3] * .5 * +HEAPF64[$1 >> 3] - 1.0, $c) | 0;
  HEAP32[$stat_I1 >> 2] = _gsl_sf_bessel_I1_e(+HEAPF64[$1 >> 3], $I1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ex >> 3] * ((+HEAPF64[$lx >> 3] - .6931471805599453) * +HEAPF64[$I1 >> 3] + (+HEAPF64[$c >> 3] + .75) / +HEAPF64[$1 >> 3]);
  $44 = +Math_abs(+(+HEAPF64[$lx >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ex >> 3] * (+HEAPF64[$c + 8 >> 3] / +HEAPF64[$1 >> 3] + $44 * +HEAPF64[$I1 + 8 >> 3]);
  $55 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $57 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$57 >> 3] = +HEAPF64[$57 >> 3] + $55;
  HEAP32[$0 >> 2] = HEAP32[$stat_I1 >> 2];
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 $63 = +Math_sqrt(+(+HEAPF64[$1 >> 3]));
 if ($15 <= 8.0) {
  HEAPF64[$sx >> 3] = $63;
  _cheb_eval_e122(13704, (16.0 / +HEAPF64[$1 >> 3] - 5.0) / 3.0, $c1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$c1 >> 3] + 1.25) / +HEAPF64[$sx >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c1 + 8 >> 3] / +HEAPF64[$sx >> 3];
  $82 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $84 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$84 >> 3] = +HEAPF64[$84 >> 3] + $82;
  HEAP32[$0 >> 2] = 0;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 } else {
  HEAPF64[$sx2 >> 3] = $63;
  _cheb_eval_e122(13536, 16.0 / +HEAPF64[$1 >> 3] - 1.0, $c3) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$c3 >> 3] + 1.25) / +HEAPF64[$sx2 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c3 + 8 >> 3] / +HEAPF64[$sx2 >> 3];
  $104 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $106 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$106 >> 3] = +HEAPF64[$106 >> 3] + $104;
  HEAP32[$0 >> 2] = 0;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 return 0;
}
function _gsl_sf_legendre_Pl_deriv_array($lmax, $x, $result_array, $result_deriv_array) {
 $lmax = $lmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 $result_deriv_array = $result_deriv_array | 0;
 var $0 = 0, $1 = 0, $139 = 0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $61 = 0.0, $diff_a = 0, $diff_b = 0, $ell = 0, $pre = 0, $pre1 = 0, $sgn = 0, $stat_array = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 60 | 0;
 $4 = sp + 56 | 0;
 $stat_array = sp + 52 | 0;
 $ell = sp + 48 | 0;
 $pre = sp + 32 | 0;
 $sgn = sp + 24 | 0;
 $pre1 = sp + 16 | 0;
 $diff_a = sp + 8 | 0;
 $diff_b = sp;
 HEAP32[$1 >> 2] = $lmax;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result_array;
 HEAP32[$4 >> 2] = $result_deriv_array;
 HEAP32[$stat_array >> 2] = _gsl_sf_legendre_Pl_array(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[$1 >> 2] | 0) >= 0) HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
 if ((HEAP32[$1 >> 2] | 0) >= 1) HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 1.0;
 if (HEAP32[$stat_array >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$stat_array >> 2];
  $139 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $139 | 0;
 }
 $20 = +Math_abs(+(+HEAPF64[$2 >> 3] - 1.0));
 L11 : do if ($20 * (+(HEAP32[$1 >> 2] | 0) + 1.0) * (+(HEAP32[$1 >> 2] | 0) + 1.0) < 1.4901161193847656e-8) {
  HEAP32[$ell >> 2] = 2;
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break L11;
   HEAPF64[$pre >> 3] = +(HEAP32[$ell >> 2] | 0) * .5 * (+(HEAP32[$ell >> 2] | 0) + 1.0);
   HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ell >> 2] << 3) >> 3] = +HEAPF64[$pre >> 3] * (1.0 - (1.0 - +HEAPF64[$2 >> 3]) * .25 * (+(HEAP32[$ell >> 2] | 0) + 2.0) * (+(HEAP32[$ell >> 2] | 0) - 1.0));
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
  }
 } else {
  $61 = +Math_abs(+(+HEAPF64[$2 >> 3] + 1.0));
  if ($61 * (+(HEAP32[$1 >> 2] | 0) + 1.0) * (+(HEAP32[$1 >> 2] | 0) + 1.0) < 1.4901161193847656e-8) {
   HEAP32[$ell >> 2] = 2;
   while (1) {
    if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break L11;
    HEAPF64[$sgn >> 3] = (HEAP32[$ell >> 2] & 1 | 0) != 0 ? 1.0 : -1.0;
    HEAPF64[$pre1 >> 3] = +HEAPF64[$sgn >> 3] * .5 * +(HEAP32[$ell >> 2] | 0) * (+(HEAP32[$ell >> 2] | 0) + 1.0);
    HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ell >> 2] << 3) >> 3] = +HEAPF64[$pre1 >> 3] * (1.0 - (+HEAPF64[$2 >> 3] + 1.0) * .25 * (+(HEAP32[$ell >> 2] | 0) + 2.0) * (+(HEAP32[$ell >> 2] | 0) - 1.0));
    HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
   }
  } else {
   HEAPF64[$diff_a >> 3] = +HEAPF64[$2 >> 3] + 1.0;
   HEAPF64[$diff_b >> 3] = 1.0 - +HEAPF64[$2 >> 3];
   HEAP32[$ell >> 2] = 2;
   while (1) {
    if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break L11;
    HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ell >> 2] << 3) >> 3] = +(0 - (HEAP32[$ell >> 2] | 0) | 0) * (+HEAPF64[$2 >> 3] * +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$ell >> 2] << 3) >> 3] - +HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - 1 << 3) >> 3]) / (+HEAPF64[$diff_a >> 3] * +HEAPF64[$diff_b >> 3]);
    HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
   }
  }
 } while (0);
 HEAP32[$0 >> 2] = 0;
 $139 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $139 | 0;
}
function _ran_set760($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $21 = 0, $j = 0, $ss = 0, $state = 0, $t = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832 | 0;
 $0 = sp + 816 | 0;
 $1 = sp + 812 | 0;
 $state = sp + 808 | 0;
 $x = sp + 12 | 0;
 $j = sp + 8 | 0;
 $t = sp + 4 | 0;
 $ss = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 314159;
 HEAP32[$ss >> 2] = (HEAP32[$1 >> 2] | 0) + 2 & 1073741822;
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= 100) break;
  HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[$ss >> 2];
  HEAP32[$ss >> 2] = HEAP32[$ss >> 2] << 1;
  if ((HEAP32[$ss >> 2] | 0) >= 1073741824) HEAP32[$ss >> 2] = (HEAP32[$ss >> 2] | 0) - 1073741822;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 $21 = $x + 4 | 0;
 HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1;
 HEAP32[$ss >> 2] = HEAP32[$1 >> 2] & 1073741823;
 HEAP32[$t >> 2] = 69;
 while (1) {
  if (!(HEAP32[$t >> 2] | 0)) break;
  HEAP32[$j >> 2] = 99;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) <= 0) break;
   HEAP32[$x + ((HEAP32[$j >> 2] | 0) + (HEAP32[$j >> 2] | 0) << 2) >> 2] = HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2];
   HEAP32[$x + ((HEAP32[$j >> 2] | 0) + (HEAP32[$j >> 2] | 0) - 1 << 2) >> 2] = 0;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
  }
  HEAP32[$j >> 2] = 198;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) < 100) break;
   HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 63 << 2) >> 2] = (HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 63 << 2) >> 2] | 0) - (HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] | 0) & 1073741823;
   HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] = (HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] | 0) - (HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] | 0) & 1073741823;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
  }
  if (HEAP32[$ss >> 2] & 1) {
   HEAP32[$j >> 2] = 100;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) <= 0) break;
    HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[$x + ((HEAP32[$j >> 2] | 0) - 1 << 2) >> 2];
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
   }
   HEAP32[$x >> 2] = HEAP32[$x + 400 >> 2];
   HEAP32[$x + 148 >> 2] = (HEAP32[$x + 148 >> 2] | 0) - (HEAP32[$x + 400 >> 2] | 0) & 1073741823;
  }
  if (HEAP32[$ss >> 2] | 0) {
   HEAP32[$ss >> 2] = HEAP32[$ss >> 2] >> 1;
   continue;
  } else {
   HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) + -1;
   continue;
  }
 }
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= 37) break;
  HEAP32[(HEAP32[$state >> 2] | 0) + 4040 + ((HEAP32[$j >> 2] | 0) + 100 - 37 << 2) >> 2] = HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= 100) break;
  HEAP32[(HEAP32[$state >> 2] | 0) + 4040 + ((HEAP32[$j >> 2] | 0) - 37 << 2) >> 2] = HEAP32[$x + (HEAP32[$j >> 2] << 2) >> 2];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= 10) break;
  _ran_array763($x, 199, (HEAP32[$state >> 2] | 0) + 4040 | 0);
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = 0;
 STACKTOP = sp;
 return;
}
function _hyperg_1F1_beps_bgt0($eps, $b, $x, $result) {
 $eps = +$eps;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $110 = 0.0, $123 = 0, $128 = 0, $2 = 0, $3 = 0, $4 = 0, $70 = 0.0, $75 = 0.0, $85 = 0.0, $87 = 0, $93 = 0.0, $95 = 0, $Kummer_1F1 = 0, $a = 0, $exab = 0, $f = 0, $stat_K = 0, $stat_e = 0, $stat_e1 = 0, $v = 0, $v2 = 0, $v3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 72 | 0;
 $4 = sp + 108 | 0;
 $a = sp + 64 | 0;
 $exab = sp + 48 | 0;
 $stat_e = sp + 104 | 0;
 $v2 = sp + 40 | 0;
 $v3 = sp + 32 | 0;
 $v = sp + 24 | 0;
 $f = sp + 16 | 0;
 $Kummer_1F1 = sp;
 $stat_K = sp + 100 | 0;
 $stat_e1 = sp + 96 | 0;
 HEAPF64[$1 >> 3] = $eps;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] > +Math_abs(+(+HEAPF64[$3 >> 3]))) if (+Math_abs(+(+HEAPF64[$1 >> 3])) < 1.4901161193847656e-8) {
  HEAPF64[$a >> 3] = +HEAPF64[$2 >> 3] + +HEAPF64[$1 >> 3];
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_e(+HEAPF64[$a >> 3] * +HEAPF64[$3 >> 3] / +HEAPF64[$2 >> 3], $exab) | 0;
  HEAPF64[$v2 >> 3] = +HEAPF64[$a >> 3] / (+HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] + 1.0));
  HEAPF64[$v3 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$2 >> 3] - +HEAPF64[$a >> 3] * 2.0) / (+HEAPF64[$2 >> 3] * 3.0 * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] + 1.0) * (+HEAPF64[$2 >> 3] + 2.0));
  HEAPF64[$v >> 3] = +HEAPF64[$v2 >> 3] + +HEAPF64[$v3 >> 3] * +HEAPF64[$3 >> 3];
  HEAPF64[$f >> 3] = 1.0 - +HEAPF64[$1 >> 3] * +HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3] * +HEAPF64[$v >> 3];
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$exab >> 3] * +HEAPF64[$f >> 3];
  $70 = +HEAPF64[$exab + 8 >> 3] * +Math_abs(+(+HEAPF64[$f >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $70;
  $75 = +Math_abs(+(+HEAPF64[$exab >> 3])) * 2.220446049250313e-16;
  $85 = $75 * (+Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3] * +HEAPF64[$v >> 3])) + 1.0);
  $87 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$87 >> 3] = +HEAPF64[$87 >> 3] + $85;
  $93 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 8.881784197001252e-16;
  $95 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$95 >> 3] = +HEAPF64[$95 >> 3] + $93;
  HEAP32[$0 >> 2] = HEAP32[$stat_e >> 2];
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 HEAP32[$stat_K >> 2] = _hyperg_1F1_small_a_bgt0(-+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], -+HEAPF64[$3 >> 3], $Kummer_1F1) | 0;
 if (!(+HEAPF64[$Kummer_1F1 >> 3] != 0.0)) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_K >> 2];
  $128 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 $110 = +Math_abs(+(+HEAPF64[$3 >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_e1 >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$3 >> 3], $110, +HEAPF64[$Kummer_1F1 >> 3], +HEAPF64[$Kummer_1F1 + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 if (HEAP32[$stat_e1 >> 2] | 0) $123 = HEAP32[$stat_e1 >> 2] | 0; else $123 = (HEAP32[$stat_K >> 2] | 0) != 0 ? HEAP32[$stat_K >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $123;
 $128 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $128 | 0;
}
function _gsl_sf_dawson_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $32 = 0.0, $34 = 0, $38 = 0.0, $57 = 0.0, $59 = 0, $63 = 0.0, $82 = 0.0, $84 = 0, $99 = 0, $result_c = 0, $result_c1 = 0, $result_c2 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 92 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 88 | 0;
 $y = sp + 48 | 0;
 $result_c = sp + 32 | 0;
 $result_c1 = sp + 16 | 0;
 $result_c2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 72 >> 3] = 1.825392246246338e-8;
 HEAPF64[sp + 64 >> 3] = 47453132.81212577;
 HEAPF64[sp + 56 >> 3] = 1.7976931348623158e+307;
 HEAPF64[$y >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$y >> 3] < 1.825392246246338e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $13 = +HEAPF64[$y >> 3];
 if (+HEAPF64[$y >> 3] < 1.0) {
  _cheb_eval_e260(28e3, 2.0 * $13 * +HEAPF64[$y >> 3] - 1.0, $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c >> 3] + .75);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$result_c + 8 >> 3];
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $34 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] + $32;
  HEAP32[$0 >> 2] = 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $38 = +HEAPF64[$y >> 3];
 if ($13 < 4.0) {
  _cheb_eval_e260(27800, .125 * $38 * +HEAPF64[$y >> 3] - 1.0, $result_c1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c1 >> 3] + .25);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$result_c1 + 8 >> 3];
  $57 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $59 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$59 >> 3] = +HEAPF64[$59 >> 3] + $57;
  HEAP32[$0 >> 2] = 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $63 = +HEAPF64[$y >> 3];
 if ($38 < 47453132.81212577) {
  _cheb_eval_e260(27408, 32.0 / ($63 * +HEAPF64[$y >> 3]) - 1.0, $result_c2) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$result_c2 >> 3] + .5) / +HEAPF64[$1 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_c2 + 8 >> 3] / +HEAPF64[$y >> 3];
  $82 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $84 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$84 >> 3] = +HEAPF64[$84 >> 3] + $82;
  HEAP32[$0 >> 2] = 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 if ($63 < 1.7976931348623158e+307) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = .5 / +HEAPF64[$1 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 4.440892098500626e-16;
  HEAP32[$0 >> 2] = 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(26744, 26760, 269, 15);
  HEAP32[$0 >> 2] = 15;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 return 0;
}
function _laguerre_n_cp($n, $a, $x, $result) {
 $n = $n | 0;
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $70 = 0.0, $97 = 0, $98 = 0, $k = 0, $lg1 = 0, $lg2 = 0, $lnfact = 0, $lnpre_err = 0, $lnpre_val = 0, $poly_1F1_err = 0, $poly_1F1_val = 0, $r = 0, $stat_e = 0, $stat_f = 0, $stat_g1 = 0, $stat_g2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 156 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 112 | 0;
 $4 = sp + 148 | 0;
 $lnfact = sp + 96 | 0;
 $lg1 = sp + 80 | 0;
 $lg2 = sp + 64 | 0;
 $stat_f = sp + 144 | 0;
 $stat_g1 = sp + 140 | 0;
 $stat_g2 = sp + 136 | 0;
 $poly_1F1_val = sp + 40 | 0;
 $poly_1F1_err = sp + 32 | 0;
 $stat_e = sp + 132 | 0;
 $k = sp + 128 | 0;
 $lnpre_val = sp + 24 | 0;
 $lnpre_err = sp + 16 | 0;
 $t = sp + 8 | 0;
 $r = sp;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$stat_f >> 2] = _gsl_sf_lnfact_e(HEAP32[$1 >> 2] | 0, $lnfact) | 0;
 HEAP32[$stat_g1 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3] + 1.0 + +(HEAP32[$1 >> 2] | 0), $lg1, sp + 56 | 0) | 0;
 HEAP32[$stat_g2 >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3] + 1.0, $lg2, sp + 48 | 0) | 0;
 HEAPF64[$poly_1F1_val >> 3] = 1.0;
 HEAPF64[$poly_1F1_err >> 3] = 0.0;
 HEAPF64[$lnpre_val >> 3] = +HEAPF64[$lg1 >> 3] - +HEAPF64[$lg2 >> 3] - +HEAPF64[$lnfact >> 3];
 HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lg1 + 8 >> 3] + +HEAPF64[$lg2 + 8 >> 3] + +HEAPF64[$lnfact + 8 >> 3] + +Math_abs(+(+HEAPF64[$lnpre_val >> 3])) * 4.440892098500626e-16;
 HEAP32[$k >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) < 0) break;
  HEAPF64[$t >> 3] = +(0 - (HEAP32[$1 >> 2] | 0) + (HEAP32[$k >> 2] | 0) | 0) / (+HEAPF64[$2 >> 3] + 1.0 + +(HEAP32[$k >> 2] | 0)) * (+HEAPF64[$3 >> 3] / +((HEAP32[$k >> 2] | 0) + 1 | 0));
  HEAPF64[$r >> 3] = +HEAPF64[$t >> 3] + 1.0 / +HEAPF64[$poly_1F1_val >> 3];
  if (+HEAPF64[$r >> 3] > 1.6179238213760842e+308 / +HEAPF64[$poly_1F1_val >> 3]) {
   label = 4;
   break;
  }
  HEAPF64[$poly_1F1_val >> 3] = +HEAPF64[$t >> 3] * +HEAPF64[$poly_1F1_val >> 3] + 1.0;
  $70 = +Math_abs(+(+HEAPF64[$t >> 3]));
  HEAPF64[$poly_1F1_err >> 3] = +HEAPF64[$poly_1F1_err >> 3] + ($70 * +HEAPF64[$poly_1F1_err >> 3] + 2.220446049250313e-16);
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + -1;
 }
 if ((label | 0) == 4) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = inf;
  HEAP32[$0 >> 2] = 16;
  $98 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $98 | 0;
 }
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], +HEAPF64[$poly_1F1_val >> 3], +HEAPF64[$poly_1F1_err >> 3], HEAP32[$4 >> 2] | 0) | 0;
 do if (HEAP32[$stat_e >> 2] | 0) $97 = HEAP32[$stat_e >> 2] | 0; else {
  if (HEAP32[$stat_f >> 2] | 0) {
   $97 = HEAP32[$stat_f >> 2] | 0;
   break;
  }
  if (HEAP32[$stat_g1 >> 2] | 0) {
   $97 = HEAP32[$stat_g1 >> 2] | 0;
   break;
  } else {
   $97 = (HEAP32[$stat_g2 >> 2] | 0) != 0 ? HEAP32[$stat_g2 >> 2] | 0 : 0;
   break;
  }
 } while (0);
 HEAP32[$0 >> 2] = $97;
 $98 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $98 | 0;
}
function _gsl_sf_bessel_Jn_array($nmin, $nmax, $x, $result_array) {
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $2 = 0, $23 = 0, $3 = 0, $4 = 0, $50 = 0, $54 = 0, $90 = 0, $Jn = 0, $Jnm1 = 0, $Jnp1 = 0, $n = 0, $n1 = 0, $n2 = 0, $r_Jn = 0, $r_Jnp1 = 0, $stat = 0, $stat_n = 0, $stat_np1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 88 | 0;
 $n = sp + 84 | 0;
 $n1 = sp + 80 | 0;
 $r_Jnp1 = sp + 40 | 0;
 $r_Jn = sp + 24 | 0;
 $stat_np1 = sp + 76 | 0;
 $stat_n = sp + 72 | 0;
 $stat = sp + 68 | 0;
 $Jnp1 = sp + 16 | 0;
 $Jn = sp + 8 | 0;
 $Jnm1 = sp;
 $n2 = sp + 64 | 0;
 HEAP32[$1 >> 2] = $nmin;
 HEAP32[$2 >> 2] = $nmax;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) {
  $23 = HEAP32[$2 >> 2] | 0;
  if (+HEAPF64[$3 >> 3] == 0.0) {
   HEAP32[$n1 >> 2] = $23;
   while (1) {
    if ((HEAP32[$n1 >> 2] | 0) < (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n1 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = 0.0;
    HEAP32[$n1 >> 2] = (HEAP32[$n1 >> 2] | 0) + -1;
   }
   if (!(HEAP32[$1 >> 2] | 0)) HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
   HEAP32[$0 >> 2] = 0;
   $90 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $90 | 0;
  }
  HEAP32[$stat_np1 >> 2] = _gsl_sf_bessel_Jn_e($23 + 1 | 0, +HEAPF64[$3 >> 3], $r_Jnp1) | 0;
  HEAP32[$stat_n >> 2] = _gsl_sf_bessel_Jn_e(HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], $r_Jn) | 0;
  if (HEAP32[$stat_np1 >> 2] | 0) $50 = HEAP32[$stat_np1 >> 2] | 0; else $50 = (HEAP32[$stat_n >> 2] | 0) != 0 ? HEAP32[$stat_n >> 2] | 0 : 0;
  HEAP32[$stat >> 2] = $50;
  HEAPF64[$Jnp1 >> 3] = +HEAPF64[$r_Jnp1 >> 3];
  HEAPF64[$Jn >> 3] = +HEAPF64[$r_Jn >> 3];
  $54 = (HEAP32[$stat >> 2] | 0) == 0;
  HEAP32[$n2 >> 2] = HEAP32[$2 >> 2];
  L19 : do if ($54) while (1) {
   if ((HEAP32[$n2 >> 2] | 0) < (HEAP32[$1 >> 2] | 0)) break L19;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = +HEAPF64[$Jn >> 3];
   HEAPF64[$Jnm1 >> 3] = -+HEAPF64[$Jnp1 >> 3] + +(HEAP32[$n2 >> 2] | 0) * 2.0 / +HEAPF64[$3 >> 3] * +HEAPF64[$Jn >> 3];
   HEAPF64[$Jnp1 >> 3] = +HEAPF64[$Jn >> 3];
   HEAPF64[$Jn >> 3] = +HEAPF64[$Jnm1 >> 3];
   HEAP32[$n2 >> 2] = (HEAP32[$n2 >> 2] | 0) + -1;
  } else while (1) {
   if ((HEAP32[$n2 >> 2] | 0) < (HEAP32[$1 >> 2] | 0)) break L19;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = 0.0;
   HEAP32[$n2 >> 2] = (HEAP32[$n2 >> 2] | 0) + -1;
  } while (0);
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $90 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $90 | 0;
 }
 HEAP32[$n >> 2] = HEAP32[$2 >> 2];
 while (1) {
  if ((HEAP32[$n >> 2] | 0) < (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = 0.0;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + -1;
 }
 _gsl_error(12624, 12640, 152, 1);
 HEAP32[$0 >> 2] = 1;
 $90 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $90 | 0;
}
function _cmrg_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $1 = 0, $114 = 0, $128 = 0, $130 = 0, $55 = 0, $h1 = 0, $h2 = 0, $h3 = 0, $h31 = 0, $p1 = 0, $p2 = 0, $p3 = 0, $p32 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 36 | 0;
 $state = sp + 32 | 0;
 $h3 = sp + 28 | 0;
 $p3 = sp + 24 | 0;
 $h2 = sp + 20 | 0;
 $p2 = sp + 16 | 0;
 $h31 = sp + 12 | 0;
 $p32 = sp + 8 | 0;
 $h1 = sp + 4 | 0;
 $p1 = sp;
 HEAP32[$1 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$1 >> 2];
 HEAP32[$h3 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] | 0) / 11714 | 0;
 HEAP32[$p3 >> 2] = (((HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] | 0) - ((HEAP32[$h3 >> 2] | 0) * 11714 | 0) | 0) * 183326 | 0) - ((HEAP32[$h3 >> 2] | 0) * 2883 | 0);
 HEAP32[$h2 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) / 33921 | 0;
 HEAP32[$p2 >> 2] = (((HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) - ((HEAP32[$h2 >> 2] | 0) * 33921 | 0) | 0) * 63308 | 0) - ((HEAP32[$h2 >> 2] | 0) * 12979 | 0);
 if ((HEAP32[$p3 >> 2] | 0) < 0) HEAP32[$p3 >> 2] = (HEAP32[$p3 >> 2] | 0) + 2147483647;
 if ((HEAP32[$p2 >> 2] | 0) < 0) HEAP32[$p2 >> 2] = (HEAP32[$p2 >> 2] | 0) + 2147483647;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[$p2 >> 2] | 0) - (HEAP32[$p3 >> 2] | 0);
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) < 0) {
  $55 = HEAP32[$state >> 2] | 0;
  HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 2147483647;
 }
 HEAP32[$h31 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 20 >> 2] | 0) / 3976 | 0;
 HEAP32[$p32 >> 2] = (((HEAP32[(HEAP32[$state >> 2] | 0) + 20 >> 2] | 0) - ((HEAP32[$h31 >> 2] | 0) * 3976 | 0) | 0) * 539608 | 0) - ((HEAP32[$h31 >> 2] | 0) * 2071 | 0);
 HEAP32[$h1 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0) / 24919 | 0;
 HEAP32[$p1 >> 2] = (((HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0) - ((HEAP32[$h1 >> 2] | 0) * 24919 | 0) | 0) * 86098 | 0) - ((HEAP32[$h1 >> 2] | 0) * 7417 | 0);
 if ((HEAP32[$p32 >> 2] | 0) < 0) HEAP32[$p32 >> 2] = (HEAP32[$p32 >> 2] | 0) + 2145483479;
 if ((HEAP32[$p1 >> 2] | 0) < 0) HEAP32[$p1 >> 2] = (HEAP32[$p1 >> 2] | 0) + 2145483479;
 HEAP32[(HEAP32[$state >> 2] | 0) + 20 >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 16 >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] = (HEAP32[$p1 >> 2] | 0) - (HEAP32[$p32 >> 2] | 0);
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0) < 0) {
  $114 = (HEAP32[$state >> 2] | 0) + 12 | 0;
  HEAP32[$114 >> 2] = (HEAP32[$114 >> 2] | 0) + 2145483479;
 }
 $128 = (HEAP32[HEAP32[$state >> 2] >> 2] | 0) - (HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0) | 0;
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) < (HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[$0 >> 2] = $128 + 2147483647;
  $130 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $130 | 0;
 } else {
  HEAP32[$0 >> 2] = $128;
  $130 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $130 | 0;
 }
 return 0;
}
function _gsl_sf_synchrotron_2_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $28 = 0.0, $61 = 0.0, $63 = 0, $74 = 0.0, $78 = 0.0, $89 = 0.0, $95 = 0, $cf = 0, $cheb1 = 0, $cheb12 = 0, $cheb2 = 0, $px = 0, $px5 = 0, $t = 0, $t1 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 112 | 0;
 $z = sp + 96 | 0;
 $cf = sp + 88 | 0;
 $px = sp + 80 | 0;
 $px5 = sp + 72 | 0;
 $t = sp + 64 | 0;
 $cheb1 = sp + 48 | 0;
 $cheb2 = sp + 32 | 0;
 $t1 = sp + 16 | 0;
 $cheb12 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(59560, 59576, 233, 1);
  HEAP32[$0 >> 2] = 1;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 4.2146848510894035e-8) {
  HEAPF64[$z >> 3] = +Math_pow(+$10, .3333333333333333);
  HEAPF64[$cf >> 3] = 1.0 - +HEAPF64[$z >> 3] * 1.17767156510235 * +HEAPF64[$1 >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$z >> 3] * 1.0747641207672394 * +HEAPF64[$cf >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 4.440892098500626e-16;
  HEAP32[$0 >> 2] = 0;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 $28 = +HEAPF64[$1 >> 3];
 if ($10 <= 4.0) {
  HEAPF64[$px >> 3] = +Math_pow(+$28, .3333333333333333);
  HEAPF64[$px5 >> 3] = +_gsl_sf_pow_int(+HEAPF64[$px >> 3], 5);
  HEAPF64[$t >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 8.0 - 1.0;
  _cheb_eval_e618(60096, +HEAPF64[$t >> 3], $cheb1) | 0;
  _cheb_eval_e618(59960, +HEAPF64[$t >> 3], $cheb2) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$px >> 3] * +HEAPF64[$cheb1 >> 3] - +HEAPF64[$px5 >> 3] * +HEAPF64[$cheb2 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$px >> 3] * +HEAPF64[$cheb1 + 8 >> 3] + +HEAPF64[$px5 >> 3] * +HEAPF64[$cheb2 + 8 >> 3];
  $61 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $63 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$63 >> 3] = +HEAPF64[$63 >> 3] + $61;
  HEAP32[$0 >> 2] = 0;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 if ($28 < 809.5959068940161) {
  HEAPF64[sp + 24 >> 3] = .22579135264472744;
  HEAPF64[$t1 >> 3] = (10.0 - +HEAPF64[$1 >> 3]) / (+HEAPF64[$1 >> 3] + 2.0);
  _cheb_eval_e618(59824, +HEAPF64[$t1 >> 3], $cheb12) | 0;
  $74 = +Math_sqrt(+(+HEAPF64[$1 >> 3]));
  $78 = $74 * +Math_exp(+(.22579135264472744 - +HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $78 * +HEAPF64[$cheb12 >> 3];
  $89 = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16 * (+Math_abs(+(.22579135264472744 - +HEAPF64[$1 >> 3])) + 1.0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $89;
  HEAP32[$0 >> 2] = 0;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(59592, 59576, 269, 15);
  HEAP32[$0 >> 2] = 15;
  $95 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $95 | 0;
 }
 return 0;
}
function _gsl_sf_zeta_e($s, $result) {
 $s = +$s;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $104 = 0, $2 = 0, $22 = 0.0, $41 = 0.0, $62 = 0.0, $73 = 0.0, $78 = 0, $84 = 0.0, $88 = 0.0, $90 = 0, $fs = 0, $g = 0, $n = 0, $p = 0, $sin_term = 0, $stat_g = 0, $stat_zoms = 0, $zeta_one_minus_s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 76 | 0;
 $zeta_one_minus_s = sp + 40 | 0;
 $stat_zoms = sp + 72 | 0;
 $sin_term = sp + 32 | 0;
 $n = sp + 68 | 0;
 $fs = sp + 24 | 0;
 $p = sp + 16 | 0;
 $g = sp;
 $stat_g = sp + 64 | 0;
 HEAPF64[$1 >> 3] = $s;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(62256, 62272, 781, 1);
  HEAP32[$0 >> 2] = 1;
  $104 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $104 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] >= 0.0) {
  HEAP32[$0 >> 2] = _riemann_zeta_sgt0($10, HEAP32[$2 >> 2] | 0) | 0;
  $104 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $104 | 0;
 }
 HEAP32[$stat_zoms >> 2] = _riemann_zeta1ms_slt0($10, $zeta_one_minus_s) | 0;
 if (+_fmod(+(+HEAPF64[$1 >> 3]), 2.0) == 0.0) $22 = 0.0; else $22 = +Math_sin(+(+_fmod(+(+HEAPF64[$1 >> 3]), 4.0) * 1.5707963267948966)) / 3.141592653589793;
 HEAPF64[$sin_term >> 3] = $22;
 if (+HEAPF64[$sin_term >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $104 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $104 | 0;
 }
 if (!(+HEAPF64[$1 >> 3] > -170.0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(62296, 62272, 847, 16);
  HEAP32[$0 >> 2] = 16;
  $104 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $104 | 0;
 }
 HEAP32[$n >> 2] = ~~+Math_floor(+(-+HEAPF64[$1 >> 3] / 10.0));
 HEAPF64[$fs >> 3] = +HEAPF64[$1 >> 3] + +(HEAP32[$n >> 2] | 0) * 10.0;
 $41 = +Math_pow(6.283185307179586, +(+HEAPF64[$fs >> 3]));
 HEAPF64[$p >> 3] = $41 / +HEAPF64[62432 + (HEAP32[$n >> 2] << 3) >> 3];
 HEAP32[$stat_g >> 2] = _gsl_sf_gamma_e(1.0 - +HEAPF64[$1 >> 3], $g) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$p >> 3] * +HEAPF64[$g >> 3] * +HEAPF64[$sin_term >> 3] * +HEAPF64[$zeta_one_minus_s >> 3];
 $62 = +Math_abs(+(+HEAPF64[$p >> 3] * +HEAPF64[$g >> 3] * +HEAPF64[$sin_term >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $62 * +HEAPF64[$zeta_one_minus_s + 8 >> 3];
 $73 = +Math_abs(+(+HEAPF64[$p >> 3] * +HEAPF64[$sin_term >> 3] * +HEAPF64[$zeta_one_minus_s >> 3]));
 $78 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$78 >> 3] = +HEAPF64[$78 >> 3] + $73 * +HEAPF64[$g + 8 >> 3];
 $84 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 2.0) * 2.220446049250313e-16;
 $88 = $84 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
 $90 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$90 >> 3] = +HEAPF64[$90 >> 3] + $88;
 if (HEAP32[$stat_g >> 2] | 0) $100 = HEAP32[$stat_g >> 2] | 0; else $100 = (HEAP32[$stat_zoms >> 2] | 0) != 0 ? HEAP32[$stat_zoms >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $100;
 $104 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $104 | 0;
}
function _gsl_sf_hyperg_2F0_series_e($a, $b, $x, $n_trunc, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $n_trunc = $n_trunc | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $33 = 0.0, $4 = 0, $5 = 0, $80 = 0, $abs_del = 0, $abs_u = 0, $an = 0, $bn = 0, $del = 0, $last_abs_del = 0, $max_abs_del = 0, $n = 0, $sum = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $an = sp + 72 | 0;
 $bn = sp + 64 | 0;
 $n = sp + 56 | 0;
 $sum = sp + 48 | 0;
 $del = sp + 40 | 0;
 $abs_del = sp + 32 | 0;
 $max_abs_del = sp + 24 | 0;
 $last_abs_del = sp + 16 | 0;
 $u = sp + 8 | 0;
 $abs_u = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $n_trunc;
 HEAP32[$5 >> 2] = $result;
 HEAP32[sp + 104 >> 2] = 2e3;
 HEAPF64[$an >> 3] = +HEAPF64[$1 >> 3];
 HEAPF64[$bn >> 3] = +HEAPF64[$2 >> 3];
 HEAPF64[$n >> 3] = 1.0;
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$del >> 3] = 1.0;
 HEAPF64[$abs_del >> 3] = 1.0;
 HEAPF64[$max_abs_del >> 3] = 1.0;
 HEAPF64[$last_abs_del >> 3] = 1.0;
 while (1) {
  if (!(+HEAPF64[$abs_del >> 3] / +Math_abs(+(+HEAPF64[$sum >> 3])) > 2.220446049250313e-16)) break;
  if (!(+HEAPF64[$n >> 3] < 2.0e3)) break;
  HEAPF64[$u >> 3] = +HEAPF64[$an >> 3] * +HEAPF64[$bn >> 3] / +HEAPF64[$n >> 3] * +HEAPF64[$3 >> 3];
  HEAPF64[$abs_u >> 3] = +Math_abs(+(+HEAPF64[$u >> 3]));
  if (+HEAPF64[$abs_u >> 3] > 1.0) if (+HEAPF64[$max_abs_del >> 3] > 1.7976931348623157e+308 / +HEAPF64[$abs_u >> 3]) {
   label = 6;
   break;
  }
  HEAPF64[$del >> 3] = +HEAPF64[$del >> 3] * +HEAPF64[$u >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$del >> 3];
  HEAPF64[$abs_del >> 3] = +Math_abs(+(+HEAPF64[$del >> 3]));
  if (+HEAPF64[$abs_del >> 3] > +HEAPF64[$last_abs_del >> 3]) break;
  HEAPF64[$last_abs_del >> 3] = +HEAPF64[$abs_del >> 3];
  HEAPF64[$max_abs_del >> 3] = +HEAPF64[$abs_del >> 3] > +HEAPF64[$max_abs_del >> 3] ? +HEAPF64[$abs_del >> 3] : +HEAPF64[$max_abs_del >> 3];
  HEAPF64[$an >> 3] = +HEAPF64[$an >> 3] + 1.0;
  HEAPF64[$bn >> 3] = +HEAPF64[$bn >> 3] + 1.0;
  HEAPF64[$n >> 3] = +HEAPF64[$n >> 3] + 1.0;
  if (+HEAPF64[$an >> 3] == 0.0) break;
  if (+HEAPF64[$bn >> 3] == 0.0) break;
  if ((HEAP32[$4 >> 2] | 0) < 0) continue;
  if (+HEAPF64[$n >> 3] >= +(HEAP32[$4 >> 2] | 0)) break;
 }
 if ((label | 0) == 6) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sum >> 3];
  $33 = +Math_abs(+(+HEAPF64[$sum >> 3]));
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $33;
  _gsl_error(51552, 51488, 263, 16);
  HEAP32[$0 >> 2] = 16;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sum >> 3];
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = +HEAPF64[$n >> 3] * 2.220446049250313e-16 + +HEAPF64[$abs_del >> 3];
 if (+HEAPF64[$n >> 3] >= 2.0e3) {
  _gsl_error(51568, 51488, 288, 11);
  HEAP32[$0 >> 2] = 11;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 return 0;
}
function _coulomb_CF1($lambda, $eta, $x, $fcl_sign, $result, $count) {
 $lambda = +$lambda;
 $eta = +$eta;
 $x = +$x;
 $fcl_sign = $fcl_sign | 0;
 $result = $result | 0;
 $count = $count | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $81 = 0, $90 = 0, $C = 0, $D = 0, $F = 0, $df = 0, $ek = 0, $pk = 0, $pk1 = 0, $px = 0, $rk2 = 0, $tk = 0, $x_inv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 148 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 112 | 0;
 $4 = sp + 144 | 0;
 $5 = sp + 140 | 0;
 $6 = sp + 136 | 0;
 $x_inv = sp + 80 | 0;
 $px = sp + 72 | 0;
 $pk = sp + 64 | 0;
 $F = sp + 56 | 0;
 $D = sp + 48 | 0;
 $C = sp + 40 | 0;
 $df = sp + 32 | 0;
 $pk1 = sp + 24 | 0;
 $ek = sp + 16 | 0;
 $rk2 = sp + 8 | 0;
 $tk = sp;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $eta;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $fcl_sign;
 HEAP32[$5 >> 2] = $result;
 HEAP32[$6 >> 2] = $count;
 HEAPF64[sp + 104 >> 3] = 1.0e-30;
 HEAPF64[sp + 96 >> 3] = 1.0e5;
 HEAPF64[sp + 88 >> 3] = 4.440892098500626e-16;
 HEAPF64[$x_inv >> 3] = 1.0 / +HEAPF64[$3 >> 3];
 HEAPF64[$px >> 3] = +HEAPF64[$1 >> 3] + 1.0 + 1.0e5;
 HEAPF64[$pk >> 3] = +HEAPF64[$1 >> 3] + 1.0;
 HEAPF64[$F >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$pk >> 3] + +HEAPF64[$pk >> 3] * +HEAPF64[$x_inv >> 3];
 HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
 HEAP32[HEAP32[$6 >> 2] >> 2] = 0;
 if (+Math_abs(+(+HEAPF64[$F >> 3])) < 1.0e-30) HEAPF64[$F >> 3] = 1.0e-30;
 HEAPF64[$D >> 3] = 0.0;
 HEAPF64[$C >> 3] = +HEAPF64[$F >> 3];
 while (1) {
  HEAPF64[$pk1 >> 3] = +HEAPF64[$pk >> 3] + 1.0;
  HEAPF64[$ek >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$pk >> 3];
  HEAPF64[$rk2 >> 3] = +HEAPF64[$ek >> 3] * +HEAPF64[$ek >> 3] + 1.0;
  HEAPF64[$tk >> 3] = (+HEAPF64[$pk >> 3] + +HEAPF64[$pk1 >> 3]) * (+HEAPF64[$x_inv >> 3] + +HEAPF64[$ek >> 3] / +HEAPF64[$pk1 >> 3]);
  HEAPF64[$D >> 3] = +HEAPF64[$tk >> 3] - +HEAPF64[$rk2 >> 3] * +HEAPF64[$D >> 3];
  HEAPF64[$C >> 3] = +HEAPF64[$tk >> 3] - +HEAPF64[$rk2 >> 3] / +HEAPF64[$C >> 3];
  if (+Math_abs(+(+HEAPF64[$C >> 3])) < 1.0e-30) HEAPF64[$C >> 3] = 1.0e-30;
  if (+Math_abs(+(+HEAPF64[$D >> 3])) < 1.0e-30) HEAPF64[$D >> 3] = 1.0e-30;
  HEAPF64[$D >> 3] = 1.0 / +HEAPF64[$D >> 3];
  HEAPF64[$df >> 3] = +HEAPF64[$D >> 3] * +HEAPF64[$C >> 3];
  HEAPF64[$F >> 3] = +HEAPF64[$F >> 3] * +HEAPF64[$df >> 3];
  if (+HEAPF64[$D >> 3] < 0.0) HEAPF64[HEAP32[$4 >> 2] >> 3] = -+HEAPF64[HEAP32[$4 >> 2] >> 3];
  HEAPF64[$pk >> 3] = +HEAPF64[$pk1 >> 3];
  if (+HEAPF64[$pk >> 3] > +HEAPF64[$px >> 3]) {
   label = 11;
   break;
  }
  $81 = HEAP32[$6 >> 2] | 0;
  HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + 1;
  if (!(+Math_abs(+(+HEAPF64[$df >> 3] - 1.0)) > 4.440892098500626e-16)) {
   label = 13;
   break;
  }
 }
 if ((label | 0) == 11) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$F >> 3];
  _gsl_error(26256, 26240, 639, 10);
  HEAP32[$0 >> 2] = 10;
  $90 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $90 | 0;
 } else if ((label | 0) == 13) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$F >> 3];
  HEAP32[$0 >> 2] = 0;
  $90 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $90 | 0;
 }
 return 0;
}
function _gsl_ran_gaussian_ziggurat($r, $sigma) {
 $r = $r | 0;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $18 = 0, $28 = 0, $29 = 0, $33 = 0, $90 = 0.0, $U1 = 0, $U11 = 0, $U2 = 0, $i = 0, $j = 0, $k = 0, $k1 = 0, $k2 = 0, $offset = 0, $range = 0, $sign = 0, $x = 0, $y = 0, $y0 = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 56 | 0;
 $i = sp + 92 | 0;
 $j = sp + 88 | 0;
 $sign = sp + 84 | 0;
 $x = sp + 48 | 0;
 $y = sp + 40 | 0;
 $range = sp + 80 | 0;
 $offset = sp + 76 | 0;
 $k = sp + 72 | 0;
 $k1 = sp + 68 | 0;
 $k2 = sp + 64 | 0;
 $y0 = sp + 32 | 0;
 $y1 = sp + 24 | 0;
 $U1 = sp + 16 | 0;
 $U11 = sp + 8 | 0;
 $U2 = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $sigma;
 HEAP32[$range >> 2] = (HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[$offset >> 2] = HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 8 >> 2];
 while (1) {
  do if ((HEAP32[$range >> 2] | 0) >>> 0 >= 4294967295) {
   $18 = _gsl_rng_get(HEAP32[$0 >> 2] | 0) | 0;
   HEAP32[$k >> 2] = $18 - (HEAP32[$offset >> 2] | 0);
   HEAP32[$i >> 2] = HEAP32[$k >> 2] & 255;
   HEAP32[$j >> 2] = (HEAP32[$k >> 2] | 0) >>> 8 & 16777215;
  } else {
   $28 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$range >> 2] | 0) >>> 0 >= 16777215) {
    $29 = _gsl_rng_get($28) | 0;
    HEAP32[$k1 >> 2] = $29 - (HEAP32[$offset >> 2] | 0);
    $33 = _gsl_rng_get(HEAP32[$0 >> 2] | 0) | 0;
    HEAP32[$k2 >> 2] = $33 - (HEAP32[$offset >> 2] | 0);
    HEAP32[$i >> 2] = HEAP32[$k1 >> 2] & 255;
    HEAP32[$j >> 2] = HEAP32[$k2 >> 2] & 16777215;
    break;
   } else {
    HEAP32[$i >> 2] = _gsl_rng_uniform_int($28, 256) | 0;
    HEAP32[$j >> 2] = _gsl_rng_uniform_int(HEAP32[$0 >> 2] | 0, 16777216) | 0;
    break;
   }
  } while (0);
  HEAP32[$sign >> 2] = (HEAP32[$i >> 2] & 128 | 0) != 0 ? 1 : -1;
  HEAP32[$i >> 2] = HEAP32[$i >> 2] & 127;
  HEAPF64[$x >> 3] = +((HEAP32[$j >> 2] | 0) >>> 0) * +HEAPF64[66104 + (HEAP32[$i >> 2] << 3) >> 3];
  if ((HEAP32[$j >> 2] | 0) >>> 0 < (HEAP32[67128 + (HEAP32[$i >> 2] << 2) >> 2] | 0) >>> 0) {
   label = 12;
   break;
  }
  if ((HEAP32[$i >> 2] | 0) >>> 0 < 127) {
   HEAPF64[$y0 >> 3] = +HEAPF64[67640 + (HEAP32[$i >> 2] << 3) >> 3];
   HEAPF64[$y1 >> 3] = +HEAPF64[67640 + ((HEAP32[$i >> 2] | 0) + 1 << 3) >> 3];
   HEAPF64[$U1 >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0);
   HEAPF64[$y >> 3] = +HEAPF64[$y1 >> 3] + (+HEAPF64[$y0 >> 3] - +HEAPF64[$y1 >> 3]) * +HEAPF64[$U1 >> 3];
  } else {
   HEAPF64[$U11 >> 3] = 1.0 - +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0);
   HEAPF64[$U2 >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0);
   HEAPF64[$x >> 3] = 3.44428647676 - +Math_log(+(+HEAPF64[$U11 >> 3])) / 3.44428647676;
   $90 = +Math_exp(+((+HEAPF64[$x >> 3] - 1.72214323838) * -3.44428647676));
   HEAPF64[$y >> 3] = $90 * +HEAPF64[$U2 >> 3];
  }
  if (+HEAPF64[$y >> 3] < +Math_exp(+(+HEAPF64[$x >> 3] * -.5 * +HEAPF64[$x >> 3]))) {
   label = 12;
   break;
  }
 }
 if ((label | 0) == 12) {
  STACKTOP = sp;
  return +(+(HEAP32[$sign >> 2] | 0) * +HEAPF64[$1 >> 3] * +HEAPF64[$x >> 3]);
 }
 return 0.0;
}
function _gsl_sf_bessel_y1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $44 = 0.0, $65 = 0.0, $71 = 0.0, $77 = 0.0, $85 = 0.0, $87 = 0, $97 = 0, $98 = 0, $cos_result = 0, $cx = 0, $sin_result = 0, $stat_cos = 0, $stat_sin = 0, $sum = 0, $sx = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 128 | 0;
 $y = sp + 104 | 0;
 $sum = sp + 48 | 0;
 $cos_result = sp + 32 | 0;
 $sin_result = sp + 16 | 0;
 $stat_cos = sp + 124 | 0;
 $stat_sin = sp + 120 | 0;
 $cx = sp + 8 | 0;
 $sx = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(19840, 19856, 103, 1);
  HEAP32[$0 >> 2] = 1;
  $98 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $98 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 7.458340731200208e-155) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(19872, 19856, 106, 16);
  HEAP32[$0 >> 2] = 16;
  $98 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $98 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .25) {
  HEAPF64[$y >> 3] = $15 * +HEAPF64[$1 >> 3];
  HEAPF64[sp + 96 >> 3] = .5;
  HEAPF64[sp + 88 >> 3] = -.125;
  HEAPF64[sp + 80 >> 3] = .006944444444444444;
  HEAPF64[sp + 72 >> 3] = -.00017361111111111112;
  HEAPF64[sp + 64 >> 3] = 248015873015873.0e-20;
  HEAPF64[sp + 56 >> 3] = -2.296443268665491e-8;
  HEAPF64[$sum >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * -2.296443268665491e-8 + 248015873015873.0e-20) + -.00017361111111111112) + .006944444444444444) + -.125) + .5) + 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$sum >> 3] / +HEAPF64[$y >> 3];
  $44 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $44;
  HEAP32[$0 >> 2] = 0;
  $98 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $98 | 0;
 }
 HEAP32[$stat_cos >> 2] = _gsl_sf_cos_e($15, $cos_result) | 0;
 HEAP32[$stat_sin >> 2] = _gsl_sf_sin_e(+HEAPF64[$1 >> 3], $sin_result) | 0;
 HEAPF64[$cx >> 3] = +HEAPF64[$cos_result >> 3];
 HEAPF64[$sx >> 3] = +HEAPF64[$sin_result >> 3];
 HEAPF64[HEAP32[$2 >> 2] >> 3] = -(+HEAPF64[$cx >> 3] / +HEAPF64[$1 >> 3] + +HEAPF64[$sx >> 3]) / +HEAPF64[$1 >> 3];
 $65 = +Math_abs(+(+HEAPF64[$cos_result + 8 >> 3] / +HEAPF64[$1 >> 3]));
 $71 = ($65 + +HEAPF64[$sin_result + 8 >> 3]) / +Math_abs(+(+HEAPF64[$1 >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $71;
 $77 = +Math_abs(+(+HEAPF64[$sx >> 3] / +HEAPF64[$1 >> 3]));
 $85 = ($77 + +Math_abs(+(+HEAPF64[$cx >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3])))) * 2.220446049250313e-16;
 $87 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$87 >> 3] = +HEAPF64[$87 >> 3] + $85;
 if (HEAP32[$stat_cos >> 2] | 0) $97 = HEAP32[$stat_cos >> 2] | 0; else $97 = (HEAP32[$stat_sin >> 2] | 0) != 0 ? HEAP32[$stat_sin >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $97;
 $98 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $98 | 0;
}
function _gsl_sf_taylorcoeff_e($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $18 = 0.0, $2 = 0, $3 = 0, $32 = 0.0, $77 = 0, $k = 0, $ln_test = 0, $log2pi = 0, $product = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 36 | 0;
 $log2pi = sp + 16 | 0;
 $ln_test = sp + 8 | 0;
 $product = sp;
 $k = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] < 0.0)) if ((HEAP32[$1 >> 2] | 0) >= 0) {
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $77 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  }
  $18 = +HEAPF64[$2 >> 3];
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = $18;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $77 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  }
  if ($18 == 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $77 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  }
  HEAPF64[$log2pi >> 3] = 1.8378770664093453;
  $32 = +(HEAP32[$1 >> 2] | 0) * (+Math_log(+(+HEAPF64[$2 >> 3])) + 1.0) + 1.0;
  HEAPF64[$ln_test >> 3] = $32 - (+(HEAP32[$1 >> 2] | 0) + .5) * +Math_log(+(+(HEAP32[$1 >> 2] | 0) + 1.0)) + .9189385332046727;
  if (+HEAPF64[$ln_test >> 3] < -707.3964185322641) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
   _gsl_error(38456, 38400, 1454, 15);
   HEAP32[$0 >> 2] = 15;
   $77 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  }
  if (+HEAPF64[$ln_test >> 3] > 708.782712893384) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
   _gsl_error(38472, 38400, 1457, 16);
   HEAP32[$0 >> 2] = 16;
   $77 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  }
  HEAPF64[$product >> 3] = 1.0;
  HEAP32[$k >> 2] = 1;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$product >> 3] = +HEAPF64[$product >> 3] * (+HEAPF64[$2 >> 3] / +(HEAP32[$k >> 2] | 0));
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$product >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +(HEAP32[$1 >> 2] | 0) * 2.220446049250313e-16 * +HEAPF64[$product >> 3];
  if (+Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(38456, 38400, 1467, 15);
   HEAP32[$0 >> 2] = 15;
   $77 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $77 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  }
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(38384, 38400, 1432, 1);
 HEAP32[$0 >> 2] = 1;
 $77 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $77 | 0;
}
function _hyperg_zaU_asymp($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $101 = 0, $2 = 0, $24 = 0, $3 = 0, $33 = 0, $4 = 0, $75 = 0.0, $88 = 0.0, $91 = 0.0, $93 = 0, $ap = 0, $ap_neg_int = 0, $apn = 0, $bp = 0, $bp_neg_int = 0, $bpn = 0, $mxi = 0, $n = 0, $nmax = 0, $rintap = 0, $rintbp = 0, $sum = 0, $sum_err = 0, $tn = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 132 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 128 | 0;
 $ap = sp + 88 | 0;
 $bp = sp + 80 | 0;
 $rintap = sp + 72 | 0;
 $rintbp = sp + 64 | 0;
 $ap_neg_int = sp + 124 | 0;
 $bp_neg_int = sp + 120 | 0;
 $mxi = sp + 56 | 0;
 $nmax = sp + 48 | 0;
 $tn = sp + 40 | 0;
 $sum = sp + 32 | 0;
 $n = sp + 24 | 0;
 $sum_err = sp + 16 | 0;
 $apn = sp + 8 | 0;
 $bpn = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$ap >> 3] = +HEAPF64[$1 >> 3];
 HEAPF64[$bp >> 3] = +HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3];
 HEAPF64[$rintap >> 3] = +Math_floor(+(+HEAPF64[$ap >> 3] + .5));
 HEAPF64[$rintbp >> 3] = +Math_floor(+(+HEAPF64[$bp >> 3] + .5));
 if (+HEAPF64[$ap >> 3] < 0.0) $24 = +Math_abs(+(+HEAPF64[$ap >> 3] - +HEAPF64[$rintap >> 3])) < 2.220446049250313e-13; else $24 = 0;
 HEAP32[$ap_neg_int >> 2] = $24 & 1;
 if (+HEAPF64[$bp >> 3] < 0.0) $33 = +Math_abs(+(+HEAPF64[$bp >> 3] - +HEAPF64[$rintbp >> 3])) < 2.220446049250313e-13; else $33 = 0;
 HEAP32[$bp_neg_int >> 2] = $33 & 1;
 if (!(HEAP32[$ap_neg_int >> 2] | 0)) if (!(HEAP32[$bp_neg_int >> 2] | 0)) {
  HEAP32[$0 >> 2] = _d9chu(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $101 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $101 | 0;
 }
 HEAPF64[$mxi >> 3] = -1.0 / +HEAPF64[$3 >> 3];
 HEAPF64[$nmax >> 3] = +(0 - ~~((+HEAPF64[$ap >> 3] < +HEAPF64[$bp >> 3] ? +HEAPF64[$ap >> 3] : +HEAPF64[$bp >> 3]) - .1) | 0);
 HEAPF64[$tn >> 3] = 1.0;
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$n >> 3] = 1.0;
 HEAPF64[$sum_err >> 3] = 0.0;
 while (1) {
  if (!(+HEAPF64[$n >> 3] <= +HEAPF64[$nmax >> 3])) break;
  HEAPF64[$apn >> 3] = +HEAPF64[$ap >> 3] + +HEAPF64[$n >> 3] - 1.0;
  HEAPF64[$bpn >> 3] = +HEAPF64[$bp >> 3] + +HEAPF64[$n >> 3] - 1.0;
  HEAPF64[$tn >> 3] = +HEAPF64[$tn >> 3] * +HEAPF64[$apn >> 3] / +HEAPF64[$n >> 3] * +HEAPF64[$mxi >> 3] * +HEAPF64[$bpn >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$tn >> 3];
  $75 = +Math_abs(+(+HEAPF64[$tn >> 3])) * 4.440892098500626e-16;
  HEAPF64[$sum_err >> 3] = +HEAPF64[$sum_err >> 3] + $75;
  HEAPF64[$n >> 3] = +HEAPF64[$n >> 3] + 1.0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sum >> 3];
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$sum_err >> 3];
 $88 = (+Math_abs(+(+HEAPF64[$nmax >> 3])) + 1.0) * 4.440892098500626e-16;
 $91 = $88 * +Math_abs(+(+HEAPF64[$sum >> 3]));
 $93 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$93 >> 3] = +HEAPF64[$93 >> 3] + $91;
 HEAP32[$0 >> 2] = 0;
 $101 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $101 | 0;
}
function _gamma_inc_D($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $102 = 0.0, $106 = 0.0, $108 = 0, $11 = 0.0, $111 = 0, $17 = 0.0, $2 = 0, $22 = 0.0, $26 = 0.0, $3 = 0, $33 = 0.0, $34 = 0.0, $43 = 0.0, $56 = 0.0, $57 = 0, $64 = 0.0, $78 = 0.0, $82 = 0.0, $86 = 0.0, $93 = 0.0, $95 = 0, $gstar = 0, $lg = 0, $ln_term = 0, $ln_u = 0, $lnr = 0, $mu = 0, $term1 = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 104 | 0;
 $lnr = sp + 80 | 0;
 $lg = sp + 64 | 0;
 $gstar = sp + 48 | 0;
 $ln_term = sp + 32 | 0;
 $term1 = sp + 24 | 0;
 $u = sp + 16 | 0;
 $ln_u = sp + 8 | 0;
 $mu = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < 10.0) {
  _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3] + 1.0, $lg) | 0;
  $11 = +HEAPF64[$1 >> 3] * +Math_log(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$lnr >> 3] = $11 - +HEAPF64[$2 >> 3] - +HEAPF64[$lg >> 3];
  $17 = +Math_exp(+(+HEAPF64[$lnr >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $17;
  $22 = (+Math_abs(+(+HEAPF64[$lnr >> 3])) + 1.0) * 4.440892098500626e-16;
  $26 = $22 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $26;
  HEAP32[$0 >> 2] = 0;
  $111 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $111 | 0;
 }
 $33 = +HEAPF64[$2 >> 3];
 $34 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$2 >> 3] < +HEAPF64[$1 >> 3] * .5) {
  HEAPF64[$u >> 3] = $33 / $34;
  HEAPF64[$ln_u >> 3] = +Math_log(+(+HEAPF64[$u >> 3]));
  HEAPF64[$ln_term >> 3] = +HEAPF64[$ln_u >> 3] - +HEAPF64[$u >> 3] + 1.0;
  $43 = +Math_abs(+(+HEAPF64[$ln_u >> 3]));
  HEAPF64[$ln_term + 8 >> 3] = ($43 + +Math_abs(+(+HEAPF64[$u >> 3])) + 1.0) * 2.220446049250313e-16;
 } else {
  HEAPF64[$mu >> 3] = ($33 - $34) / +HEAPF64[$1 >> 3];
  _gsl_sf_log_1plusx_mx_e(+HEAPF64[$mu >> 3], $ln_term) | 0;
  $56 = +Math_abs(+(+HEAPF64[$mu >> 3])) * 2.220446049250313e-16;
  $57 = $ln_term + 8 | 0;
  HEAPF64[$57 >> 3] = +HEAPF64[$57 >> 3] + $56;
 }
 _gsl_sf_gammastar_e(+HEAPF64[$1 >> 3], $gstar) | 0;
 $64 = +Math_exp(+(+HEAPF64[$1 >> 3] * +HEAPF64[$ln_term >> 3]));
 HEAPF64[$term1 >> 3] = $64 / +Math_sqrt(+(+HEAPF64[$1 >> 3] * 6.283185307179586));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$term1 >> 3] / +HEAPF64[$gstar >> 3];
 $78 = (+Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$ln_term >> 3])) + 1.0) * 4.440892098500626e-16;
 $82 = $78 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $82;
 $86 = +Math_abs(+(+HEAPF64[$1 >> 3]));
 $93 = $86 * +HEAPF64[$ln_term + 8 >> 3] * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 $95 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$95 >> 3] = +HEAPF64[$95 >> 3] + $93;
 $102 = +HEAPF64[$gstar + 8 >> 3] / +Math_abs(+(+HEAPF64[$gstar >> 3]));
 $106 = $102 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 $108 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$108 >> 3] = +HEAPF64[$108 >> 3] + $106;
 HEAP32[$0 >> 2] = 0;
 $111 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $111 | 0;
}
function _gsl_sf_airy_Ai_scaled_e($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0, $2 = 0, $21 = 0.0, $27 = 0.0, $3 = 0, $33 = 0.0, $35 = 0, $45 = 0, $47 = 0.0, $6 = 0.0, $71 = 0.0, $77 = 0.0, $79 = 0, $89 = 0, $94 = 0, $cos_result = 0, $mod = 0, $result_c0 = 0, $result_c1 = 0, $scale = 0, $stat_cos = 0, $stat_mp = 0, $theta = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 116 | 0;
 $3 = sp + 112 | 0;
 $mod = sp + 80 | 0;
 $theta = sp + 64 | 0;
 $cos_result = sp + 48 | 0;
 $stat_mp = sp + 108 | 0;
 $stat_cos = sp + 104 | 0;
 $z = sp + 40 | 0;
 $result_c0 = sp + 24 | 0;
 $result_c1 = sp + 8 | 0;
 $scale = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 $6 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -1.0) {
  HEAP32[$stat_mp >> 2] = _airy_mod_phase($6, HEAP32[$2 >> 2] | 0, $mod, $theta) | 0;
  HEAP32[$stat_cos >> 2] = _gsl_sf_cos_err_e(+HEAPF64[$theta >> 3], +HEAPF64[$theta + 8 >> 3], $cos_result) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$mod >> 3] * +HEAPF64[$cos_result >> 3];
  $21 = +Math_abs(+(+HEAPF64[$mod >> 3] * +HEAPF64[$cos_result + 8 >> 3]));
  $27 = $21 + +Math_abs(+(+HEAPF64[$cos_result >> 3] * +HEAPF64[$mod + 8 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $27;
  $33 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $35 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$35 >> 3] = +HEAPF64[$35 >> 3] + $33;
  if (HEAP32[$stat_mp >> 2] | 0) $45 = HEAP32[$stat_mp >> 2] | 0; else $45 = (HEAP32[$stat_cos >> 2] | 0) != 0 ? HEAP32[$stat_cos >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $45;
  $100 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 }
 $47 = +HEAPF64[$1 >> 3];
 if (!($6 <= 1.0)) {
  HEAP32[$0 >> 2] = _airy_aie($47, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  $100 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 }
 HEAPF64[$z >> 3] = $47 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 _cheb_eval_mode_e(3008, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c0) | 0;
 _cheb_eval_mode_e(2904, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_c1) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$result_c0 >> 3] - +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c1 >> 3] + .25) + .375;
 $71 = +HEAPF64[$result_c0 + 8 >> 3] + +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$result_c1 + 8 >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $71;
 $77 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
 $79 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$79 >> 3] = +HEAPF64[$79 >> 3] + $77;
 if (+HEAPF64[$1 >> 3] > 0.0) {
  HEAPF64[$scale >> 3] = +Math_exp(+(+Math_sqrt(+(+HEAPF64[$z >> 3])) * .6666666666666666));
  $89 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$89 >> 3] = +HEAPF64[$89 >> 3] * +HEAPF64[$scale >> 3];
  $94 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$94 >> 3] = +HEAPF64[$94 >> 3] * +HEAPF64[$scale >> 3];
 }
 HEAP32[$0 >> 2] = 0;
 $100 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $100 | 0;
}
function _fd_nint($j, $x, $result) {
 $j = $j | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $107 = 0.0, $110 = 0, $2 = 0, $3 = 0, $57 = 0.0, $a = 0, $f = 0, $i = 0, $k = 0, $n = 0, $p = 0, $qcoeff = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 $0 = sp + 860 | 0;
 $1 = sp + 856 | 0;
 $2 = sp + 832 | 0;
 $3 = sp + 852 | 0;
 $qcoeff = sp + 24 | 0;
 $a = sp + 16 | 0;
 $p = sp + 8 | 0;
 $f = sp;
 $i = sp + 848 | 0;
 $k = sp + 844 | 0;
 $n = sp + 840 | 0;
 HEAP32[$1 >> 2] = $j;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >= -1) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(36424, 33392, 862, 7);
  HEAP32[$0 >> 2] = 7;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) < -101) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(36424, 33392, 867, 24);
  HEAP32[$0 >> 2] = 24;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 }
 HEAP32[$n >> 2] = 0 - ((HEAP32[$1 >> 2] | 0) + 1);
 HEAPF64[$qcoeff + 8 >> 3] = 1.0;
 HEAP32[$k >> 2] = 2;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n >> 2] | 0)) break;
  HEAPF64[$qcoeff + (HEAP32[$k >> 2] << 3) >> 3] = -+HEAPF64[$qcoeff + ((HEAP32[$k >> 2] | 0) - 1 << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$k >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) < 2) break;
   HEAPF64[$qcoeff + (HEAP32[$i >> 2] << 3) >> 3] = +(HEAP32[$i >> 2] | 0) * +HEAPF64[$qcoeff + (HEAP32[$i >> 2] << 3) >> 3] - +((HEAP32[$k >> 2] | 0) - ((HEAP32[$i >> 2] | 0) - 1) | 0) * +HEAPF64[$qcoeff + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 $57 = +HEAPF64[$2 >> 3];
 L17 : do if (+HEAPF64[$2 >> 3] >= 0.0) {
  HEAPF64[$a >> 3] = +Math_exp(+-$57);
  HEAPF64[$f >> 3] = +HEAPF64[$qcoeff + 8 >> 3];
  HEAP32[$i >> 2] = 2;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) > (HEAP32[$n >> 2] | 0)) break L17;
   HEAPF64[$f >> 3] = +HEAPF64[$f >> 3] * +HEAPF64[$a >> 3] + +HEAPF64[$qcoeff + (HEAP32[$i >> 2] << 3) >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } else {
  HEAPF64[$a >> 3] = +Math_exp(+$57);
  HEAPF64[$f >> 3] = +HEAPF64[$qcoeff + (HEAP32[$n >> 2] << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$n >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) < 1) break L17;
   HEAPF64[$f >> 3] = +HEAPF64[$f >> 3] * +HEAPF64[$a >> 3] + +HEAPF64[$qcoeff + (HEAP32[$i >> 2] << 3) >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
 } while (0);
 HEAPF64[$p >> 3] = +_gsl_sf_pow_int(+HEAPF64[$a >> 3] + 1.0, HEAP32[$1 >> 2] | 0);
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$f >> 3] * +HEAPF64[$a >> 3] * +HEAPF64[$p >> 3];
 $107 = +Math_abs(+(+HEAPF64[$f >> 3] * +HEAPF64[$a >> 3] * +HEAPF64[$p >> 3])) * 6.661338147750939e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $107;
 HEAP32[$0 >> 2] = 0;
 $110 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $110 | 0;
}
function _gsl_sf_beta_e($x, $y, $result) {
 $x = +$x;
 $y = +$y;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $102 = 0, $2 = 0, $29 = 0.0, $3 = 0, $38 = 0.0, $40 = 0, $50 = 0.0, $55 = 0, $61 = 0.0, $63 = 0, $94 = 0, $gx = 0, $gxy = 0, $gy = 0, $lb = 0, $sgn = 0, $stat_lb = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 96 | 0;
 $gx = sp + 56 | 0;
 $gy = sp + 40 | 0;
 $gxy = sp + 24 | 0;
 $lb = sp + 8 | 0;
 $sgn = sp;
 $stat_lb = sp + 92 | 0;
 $status = sp + 88 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] > 0.0) if (+HEAPF64[$2 >> 3] > 0.0) if (+HEAPF64[$1 >> 3] < 50.0) if (+HEAPF64[$2 >> 3] < 50.0) {
  _gsl_sf_gamma_e(+HEAPF64[$1 >> 3], $gx) | 0;
  _gsl_sf_gamma_e(+HEAPF64[$2 >> 3], $gy) | 0;
  _gsl_sf_gamma_e(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3], $gxy) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$gx >> 3] * +HEAPF64[$gy >> 3] / +HEAPF64[$gxy >> 3];
  $29 = +HEAPF64[$gx + 8 >> 3] * +Math_abs(+(+HEAPF64[$gy >> 3] / +HEAPF64[$gxy >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $29;
  $38 = +HEAPF64[$gy + 8 >> 3] * +Math_abs(+(+HEAPF64[$gx >> 3] / +HEAPF64[$gxy >> 3]));
  $40 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$40 >> 3] = +HEAPF64[$40 >> 3] + $38;
  $50 = +Math_abs(+(+HEAPF64[$gx >> 3] * +HEAPF64[$gy >> 3] / (+HEAPF64[$gxy >> 3] * +HEAPF64[$gxy >> 3])));
  $55 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$55 >> 3] = +HEAPF64[$55 >> 3] + $50 * +HEAPF64[$gxy + 8 >> 3];
  $61 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $63 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$63 >> 3] = +HEAPF64[$63 >> 3] + $61;
  HEAP32[$0 >> 2] = 0;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 if (!(+_isnegint(+HEAPF64[$1 >> 3]) != 0.0)) if (!(+_isnegint(+HEAPF64[$2 >> 3]) != 0.0)) {
  if (+_isnegint(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) != 0.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $102 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $102 | 0;
  }
  HEAP32[$stat_lb >> 2] = _gsl_sf_lnbeta_sgn_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $lb, $sgn) | 0;
  if (!(HEAP32[$stat_lb >> 2] | 0)) {
   HEAP32[$status >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lb >> 3], +HEAPF64[$lb + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $94 = HEAP32[$3 >> 2] | 0;
   HEAPF64[$94 >> 3] = +HEAPF64[$94 >> 3] * +HEAPF64[$sgn >> 3];
   HEAP32[$0 >> 2] = HEAP32[$status >> 2];
   $102 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $102 | 0;
  } else {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = HEAP32[$stat_lb >> 2];
   $102 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $102 | 0;
  }
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(25840, 25856, 134, 1);
 HEAP32[$0 >> 2] = 1;
 $102 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $102 | 0;
}
function _airy_deriv_mod_phase($x, $mode, $ampl, $phi) {
 $x = +$x;
 $mode = $mode | 0;
 $ampl = $ampl | 0;
 $phi = $phi | 0;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $63 = 0.0, $67 = 0.0, $7 = 0.0, $74 = 0.0, $86 = 0.0, $93 = 0.0, $96 = 0, $a = 0, $p = 0, $result_a = 0, $result_p = 0, $sqx = 0, $x32 = 0, $z = 0, $z1 = 0, $z2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 112 | 0;
 $3 = sp + 108 | 0;
 $4 = sp + 104 | 0;
 $result_a = sp + 72 | 0;
 $result_p = sp + 56 | 0;
 $a = sp + 48 | 0;
 $p = sp + 40 | 0;
 $sqx = sp + 32 | 0;
 $x32 = sp + 24 | 0;
 $z = sp + 16 | 0;
 $z1 = sp + 8 | 0;
 $z2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $ampl;
 HEAP32[$4 >> 2] = $phi;
 HEAPF64[sp + 88 >> 3] = 2.356194490192345;
 $7 = +HEAPF64[$1 >> 3];
 do if (+HEAPF64[$1 >> 3] <= -4.0) {
  HEAPF64[$z >> 3] = 128.0 / ($7 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) + 1.0;
  _cheb_eval_mode_e66(7352, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_a) | 0;
  _cheb_eval_mode_e66(7192, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_p) | 0;
 } else {
  $19 = +HEAPF64[$1 >> 3];
  if ($7 <= -2.0) {
   HEAPF64[$z1 >> 3] = (128.0 / ($19 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) + 9.0) / 7.0;
   _cheb_eval_mode_e66(7040, +HEAPF64[$z1 >> 3], HEAP32[$2 >> 2] | 0, $result_a) | 0;
   _cheb_eval_mode_e66(6816, +HEAPF64[$z1 >> 3], HEAP32[$2 >> 2] | 0, $result_p) | 0;
   break;
  }
  if ($19 <= -1.0) {
   HEAPF64[$z2 >> 3] = (16.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) + 9.0) / 7.0;
   _cheb_eval_mode_e66(6608, +HEAPF64[$z2 >> 3], HEAP32[$2 >> 2] | 0, $result_a) | 0;
   _cheb_eval_mode_e66(6312, +HEAPF64[$z2 >> 3], HEAP32[$2 >> 2] | 0, $result_p) | 0;
   break;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(6032, 4312, 617, 1);
  HEAP32[$0 >> 2] = 1;
  $96 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $96 | 0;
 } while (0);
 HEAPF64[$a >> 3] = +HEAPF64[$result_a >> 3] + .3125;
 HEAPF64[$p >> 3] = +HEAPF64[$result_p >> 3] + -.625;
 HEAPF64[$sqx >> 3] = +Math_sqrt(+-+HEAPF64[$1 >> 3]);
 HEAPF64[$x32 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$sqx >> 3];
 $63 = +Math_sqrt(+(+HEAPF64[$a >> 3] * +HEAPF64[$sqx >> 3]));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = $63;
 $67 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 $74 = $67 * (+Math_abs(+(+HEAPF64[$result_a + 8 >> 3] / +HEAPF64[$result_a >> 3])) + 2.220446049250313e-16);
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $74;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = 2.356194490192345 - +HEAPF64[$1 >> 3] * +HEAPF64[$sqx >> 3] * +HEAPF64[$p >> 3];
 $86 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
 $93 = $86 * (+Math_abs(+(+HEAPF64[$result_p + 8 >> 3] / +HEAPF64[$result_p >> 3])) + 2.220446049250313e-16);
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $93;
 HEAP32[$0 >> 2] = 0;
 $96 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $96 | 0;
}
function _gsl_ran_exppow($r, $a, $b) {
 $r = $r | 0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $103 = 0.0, $2 = 0, $22 = 0.0, $3 = 0, $31 = 0.0, $42 = 0.0, $45 = 0.0, $47 = 0.0, $56 = 0.0, $79 = 0.0, $82 = 0.0, $97 = 0.0, $B = 0, $B5 = 0, $h = 0, $h3 = 0, $u = 0, $u1 = 0, $u4 = 0, $v = 0, $x = 0, $x2 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 88 | 0;
 $u = sp + 80 | 0;
 $v = sp + 72 | 0;
 $z = sp + 64 | 0;
 $x = sp + 56 | 0;
 $h = sp + 48 | 0;
 $u1 = sp + 40 | 0;
 $B = sp + 32 | 0;
 $x2 = sp + 24 | 0;
 $h3 = sp + 16 | 0;
 $u4 = sp + 8 | 0;
 $B5 = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$3 >> 3] < 1.0 | +HEAPF64[$3 >> 3] > 4.0) {
  HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
  HEAPF64[$v >> 3] = +_gsl_ran_gamma(HEAP32[$1 >> 2] | 0, 1.0 / +HEAPF64[$3 >> 3], 1.0);
  HEAPF64[$z >> 3] = +HEAPF64[$2 >> 3] * +Math_pow(+(+HEAPF64[$v >> 3]), +(1.0 / +HEAPF64[$3 >> 3]));
  $22 = +HEAPF64[$z >> 3];
  if (+HEAPF64[$u >> 3] > .5) {
   HEAPF64[$0 >> 3] = $22;
   $103 = +HEAPF64[$0 >> 3];
   STACKTOP = sp;
   return +$103;
  } else {
   HEAPF64[$0 >> 3] = -$22;
   $103 = +HEAPF64[$0 >> 3];
   STACKTOP = sp;
   return +$103;
  }
 }
 if (+HEAPF64[$3 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = +_gsl_ran_laplace(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3]);
  $103 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$103;
 }
 $31 = +HEAPF64[$3 >> 3];
 if (+HEAPF64[$3 >> 3] < 2.0) {
  HEAPF64[$B >> 3] = +Math_pow(+(1.0 / $31), +(1.0 / +HEAPF64[$3 >> 3]));
  do {
   HEAPF64[$x >> 3] = +_gsl_ran_laplace(HEAP32[$1 >> 2] | 0, +HEAPF64[$B >> 3]);
   HEAPF64[$u1 >> 3] = +_gsl_rng_uniform_pos(HEAP32[$1 >> 2] | 0);
   $42 = +Math_abs(+(+HEAPF64[$x >> 3]));
   $45 = -+Math_pow(+$42, +(+HEAPF64[$3 >> 3]));
   $47 = +Math_abs(+(+HEAPF64[$x >> 3]));
   HEAPF64[$h >> 3] = $45 + $47 / +HEAPF64[$B >> 3] - 1.0 + 1.0 / +HEAPF64[$3 >> 3];
   $56 = +Math_log(+(+HEAPF64[$u1 >> 3]));
  } while ($56 > +HEAPF64[$h >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$x >> 3];
  $103 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$103;
 }
 if ($31 == 2.0) {
  HEAPF64[$0 >> 3] = +_gsl_ran_gaussian(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3] / +Math_sqrt(2.0));
  $103 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$103;
 }
 HEAPF64[$B5 >> 3] = +Math_pow(+(1.0 / +HEAPF64[$3 >> 3]), +(1.0 / +HEAPF64[$3 >> 3]));
 do {
  HEAPF64[$x2 >> 3] = +_gsl_ran_gaussian(HEAP32[$1 >> 2] | 0, +HEAPF64[$B5 >> 3]);
  HEAPF64[$u4 >> 3] = +_gsl_rng_uniform_pos(HEAP32[$1 >> 2] | 0);
  $79 = +Math_abs(+(+HEAPF64[$x2 >> 3]));
  $82 = -+Math_pow(+$79, +(+HEAPF64[$3 >> 3]));
  HEAPF64[$h3 >> 3] = $82 + +HEAPF64[$x2 >> 3] * +HEAPF64[$x2 >> 3] / (+HEAPF64[$B5 >> 3] * 2.0 * +HEAPF64[$B5 >> 3]) + 1.0 / +HEAPF64[$3 >> 3] - .5;
  $97 = +Math_log(+(+HEAPF64[$u4 >> 3]));
 } while ($97 > +HEAPF64[$h3 >> 3]);
 HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$x2 >> 3];
 $103 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$103;
}
function _gsl_sf_coulomb_wave_F_array($lam_min, $kmax, $eta, $x, $fc_array, $F_exp) {
 $lam_min = +$lam_min;
 $kmax = $kmax | 0;
 $eta = +$eta;
 $x = +$x;
 $fc_array = $fc_array | 0;
 $F_exp = $F_exp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $79 = 0, $F = 0, $Fp = 0, $el = 0, $f_0 = 0, $fc_lm1 = 0, $fcl = 0, $fpl = 0, $k = 0, $k1 = 0, $lam = 0, $lam_max = 0, $rl = 0, $sl = 0, $stat_FG = 0, $x_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $0 = sp + 208 | 0;
 $1 = sp + 176 | 0;
 $2 = sp + 204 | 0;
 $3 = sp + 168 | 0;
 $4 = sp + 160 | 0;
 $5 = sp + 200 | 0;
 $6 = sp + 196 | 0;
 $k = sp + 192 | 0;
 $f_0 = sp + 144 | 0;
 $x_inv = sp + 136 | 0;
 $lam_max = sp + 128 | 0;
 $F = sp + 112 | 0;
 $Fp = sp + 96 | 0;
 $stat_FG = sp + 188 | 0;
 $fcl = sp + 48 | 0;
 $fpl = sp + 40 | 0;
 $lam = sp + 32 | 0;
 $k1 = sp + 184 | 0;
 $el = sp + 24 | 0;
 $rl = sp + 16 | 0;
 $sl = sp + 8 | 0;
 $fc_lm1 = sp;
 HEAPF64[$1 >> 3] = $lam_min;
 HEAP32[$2 >> 2] = $kmax;
 HEAPF64[$3 >> 3] = $eta;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $fc_array;
 HEAP32[$6 >> 2] = $F_exp;
 if (!(+HEAPF64[$4 >> 3] == 0.0)) {
  HEAPF64[$x_inv >> 3] = 1.0 / +HEAPF64[$4 >> 3];
  HEAPF64[$lam_max >> 3] = +HEAPF64[$1 >> 3] + +(HEAP32[$2 >> 2] | 0);
  HEAP32[$stat_FG >> 2] = _gsl_sf_coulomb_wave_FG_e(+HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], +HEAPF64[$lam_max >> 3], 0, $F, $Fp, sp + 80 | 0, sp + 64 | 0, HEAP32[$6 >> 2] | 0, sp + 56 | 0) | 0;
  HEAPF64[$fcl >> 3] = +HEAPF64[$F >> 3];
  HEAPF64[$fpl >> 3] = +HEAPF64[$Fp >> 3];
  HEAPF64[$lam >> 3] = +HEAPF64[$lam_max >> 3];
  HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$2 >> 2] << 3) >> 3] = +HEAPF64[$F >> 3];
  HEAP32[$k1 >> 2] = (HEAP32[$2 >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[$k1 >> 2] | 0) < 0) break;
   HEAPF64[$el >> 3] = +HEAPF64[$3 >> 3] / +HEAPF64[$lam >> 3];
   HEAPF64[$rl >> 3] = +_hypot(1.0, +(+HEAPF64[$el >> 3]));
   HEAPF64[$sl >> 3] = +HEAPF64[$el >> 3] + +HEAPF64[$lam >> 3] * +HEAPF64[$x_inv >> 3];
   HEAPF64[$fc_lm1 >> 3] = (+HEAPF64[$fcl >> 3] * +HEAPF64[$sl >> 3] + +HEAPF64[$fpl >> 3]) / +HEAPF64[$rl >> 3];
   HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$k1 >> 2] << 3) >> 3] = +HEAPF64[$fc_lm1 >> 3];
   HEAPF64[$fpl >> 3] = +HEAPF64[$fc_lm1 >> 3] * +HEAPF64[$sl >> 3] - +HEAPF64[$fcl >> 3] * +HEAPF64[$rl >> 3];
   HEAPF64[$fcl >> 3] = +HEAPF64[$fc_lm1 >> 3];
   HEAPF64[$lam >> 3] = +HEAPF64[$lam >> 3] - 1.0;
   HEAP32[$k1 >> 2] = (HEAP32[$k1 >> 2] | 0) + -1;
  }
  HEAP32[$0 >> 2] = HEAP32[$stat_FG >> 2];
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$2 >> 2] | 0)) break;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = 0.0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  _CLeta(0.0, +HEAPF64[$3 >> 3], $f_0) | 0;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$f_0 >> 3];
 }
 HEAP32[$0 >> 2] = 0;
 $79 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $79 | 0;
}
function _hyperg_1F1_asymp_posx($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $33 = 0.0, $37 = 0.0, $4 = 0, $40 = 0.0, $83 = 0, $91 = 0, $F = 0, $lg_a = 0, $lg_b = 0, $ln_pre_err = 0, $ln_pre_val = 0, $ln_term_err = 0, $ln_term_val = 0, $lnx = 0, $sgn_a = 0, $sgn_b = 0, $stat_F = 0, $stat_a = 0, $stat_b = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 148 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 112 | 0;
 $3 = sp + 104 | 0;
 $4 = sp + 144 | 0;
 $lg_b = sp + 88 | 0;
 $lg_a = sp + 72 | 0;
 $sgn_b = sp + 64 | 0;
 $sgn_a = sp + 56 | 0;
 $stat_b = sp + 140 | 0;
 $stat_a = sp + 136 | 0;
 $F = sp + 40 | 0;
 $stat_F = sp + 132 | 0;
 $lnx = sp + 32 | 0;
 $ln_term_val = sp + 24 | 0;
 $ln_term_err = sp + 16 | 0;
 $ln_pre_val = sp + 8 | 0;
 $ln_pre_err = sp;
 $stat_e = sp + 128 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$stat_b >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3], $lg_b, $sgn_b) | 0;
 HEAP32[$stat_a >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$1 >> 3], $lg_a, $sgn_a) | 0;
 if (!(HEAP32[$stat_a >> 2] | 0)) if (!(HEAP32[$stat_b >> 2] | 0)) {
  HEAP32[$stat_F >> 2] = _gsl_sf_hyperg_2F0_series_e(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3], 1.0 - +HEAPF64[$1 >> 3], 1.0 / +HEAPF64[$3 >> 3], -1, $F) | 0;
  if (!(HEAP32[$stat_F >> 2] | 0)) if (+HEAPF64[$F >> 3] != 0.0) {
   HEAPF64[$lnx >> 3] = +Math_log(+(+HEAPF64[$3 >> 3]));
   HEAPF64[$ln_term_val >> 3] = (+HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3]) * +HEAPF64[$lnx >> 3];
   $33 = +Math_abs(+(+HEAPF64[$1 >> 3]));
   $37 = ($33 + +Math_abs(+(+HEAPF64[$2 >> 3]))) * 4.440892098500626e-16;
   $40 = $37 * +Math_abs(+(+HEAPF64[$lnx >> 3]));
   HEAPF64[$ln_term_err >> 3] = $40 + +Math_abs(+(+HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3])) * 4.440892098500626e-16;
   HEAPF64[$ln_pre_val >> 3] = +HEAPF64[$lg_b >> 3] - +HEAPF64[$lg_a >> 3] + +HEAPF64[$ln_term_val >> 3] + +HEAPF64[$3 >> 3];
   HEAPF64[$ln_pre_err >> 3] = +HEAPF64[$lg_b + 8 >> 3] + +HEAPF64[$lg_a + 8 >> 3] + +HEAPF64[$ln_term_err >> 3] + +Math_abs(+(+HEAPF64[$3 >> 3])) * 4.440892098500626e-16;
   HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_pre_val >> 3], +HEAPF64[$ln_pre_err >> 3], +HEAPF64[$sgn_a >> 3] * +HEAPF64[$sgn_b >> 3] * +HEAPF64[$F >> 3], +HEAPF64[$F + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
   if (HEAP32[$stat_e >> 2] | 0) $83 = HEAP32[$stat_e >> 2] | 0; else $83 = (HEAP32[$stat_F >> 2] | 0) != 0 ? HEAP32[$stat_F >> 2] | 0 : 0;
   HEAP32[$0 >> 2] = $83;
   $91 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $91 | 0;
  }
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_F >> 2];
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(51664, 51680, 118, 1);
 HEAP32[$0 >> 2] = 1;
 $91 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $91 | 0;
}
function _gsl_sf_conicalP_xgt1_neg_mu_largetau_e($mu, $tau, $x, $acosh_x, $result, $ln_multiplier) {
 $mu = +$mu;
 $tau = +$tau;
 $x = +$x;
 $acosh_x = +$acosh_x;
 $result = $result | 0;
 $ln_multiplier = $ln_multiplier | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $47 = 0.0, $5 = 0, $6 = 0, $84 = 0.0, $90 = 0, $J_mu = 0, $J_mum1 = 0, $J_mup1 = 0, $arg = 0, $ln_pre = 0, $ln_xi_pre = 0, $lnshxi = 0, $stat_e = 0, $sum = 0, $sumA = 0, $sumB = 0, $xi = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 156 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 128 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 152 | 0;
 $6 = sp + 148 | 0;
 $xi = sp + 104 | 0;
 $ln_xi_pre = sp + 96 | 0;
 $ln_pre = sp + 88 | 0;
 $sumA = sp + 80 | 0;
 $sumB = sp + 72 | 0;
 $sum = sp + 64 | 0;
 $arg = sp + 56 | 0;
 $J_mup1 = sp + 40 | 0;
 $J_mu = sp + 24 | 0;
 $J_mum1 = sp + 16 | 0;
 $lnshxi = sp;
 $stat_e = sp + 144 | 0;
 HEAPF64[$1 >> 3] = $mu;
 HEAPF64[$2 >> 3] = $tau;
 HEAPF64[$3 >> 3] = $x;
 HEAPF64[$4 >> 3] = $acosh_x;
 HEAP32[$5 >> 2] = $result;
 HEAP32[$6 >> 2] = $ln_multiplier;
 HEAPF64[$xi >> 3] = +HEAPF64[$4 >> 3];
 $10 = +HEAPF64[$xi >> 3];
 if (+HEAPF64[$xi >> 3] < .0001220703125) HEAPF64[$ln_xi_pre >> 3] = -$10 * +HEAPF64[$xi >> 3] / 6.0; else {
  _gsl_sf_lnsinh_e($10, $lnshxi) | 0;
  $16 = +Math_log(+(+HEAPF64[$xi >> 3]));
  HEAPF64[$ln_xi_pre >> 3] = $16 - +HEAPF64[$lnshxi >> 3];
 }
 HEAPF64[$ln_pre >> 3] = +HEAPF64[$ln_xi_pre >> 3] * .5 - +HEAPF64[$1 >> 3] * +Math_log(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$arg >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$xi >> 3];
 _gsl_sf_bessel_Jnu_e(+HEAPF64[$1 >> 3] + 1.0, +HEAPF64[$arg >> 3], $J_mup1) | 0;
 _gsl_sf_bessel_Jnu_e(+HEAPF64[$1 >> 3], +HEAPF64[$arg >> 3], $J_mu) | 0;
 HEAPF64[$J_mum1 >> 3] = -+HEAPF64[$J_mup1 >> 3] + +HEAPF64[$1 >> 3] * 2.0 / +HEAPF64[$arg >> 3] * +HEAPF64[$J_mu >> 3];
 $47 = +_olver_A1_xi(-+HEAPF64[$1 >> 3], +HEAPF64[$xi >> 3], +HEAPF64[$3 >> 3]);
 HEAPF64[$sumA >> 3] = 1.0 - $47 / (+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3]);
 HEAPF64[$sumB >> 3] = +_olver_B0_xi(-+HEAPF64[$1 >> 3], +HEAPF64[$xi >> 3]);
 HEAPF64[$sum >> 3] = +HEAPF64[$J_mu >> 3] * +HEAPF64[$sumA >> 3] - +HEAPF64[$xi >> 3] / +HEAPF64[$2 >> 3] * +HEAPF64[$J_mum1 >> 3] * +HEAPF64[$sumB >> 3];
 if (+HEAPF64[$sum >> 3] == 0.0) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $90 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $90 | 0;
 }
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_e(+HEAPF64[$ln_pre >> 3], +HEAPF64[$sum >> 3], HEAP32[$5 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) {
  HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sum >> 3];
  $84 = +Math_abs(+(+HEAPF64[$sum >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $84;
  HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$ln_pre >> 3];
 } else HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
 HEAP32[$0 >> 2] = 0;
 $90 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $90 | 0;
}
function _gsl_sf_Ci_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $101 = 0, $102 = 0, $2 = 0, $26 = 0.0, $35 = 0.0, $37 = 0, $56 = 0.0, $63 = 0.0, $65 = 0, $72 = 0.0, $74 = 0, $81 = 0.0, $83 = 0, $89 = 0.0, $91 = 0, $cos_result = 0, $f = 0, $g = 0, $lx = 0, $result_c = 0, $sin_result = 0, $stat_cos = 0, $stat_sin = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 112 | 0;
 $lx = sp + 88 | 0;
 $y = sp + 80 | 0;
 $result_c = sp + 64 | 0;
 $sin_result = sp + 48 | 0;
 $cos_result = sp + 32 | 0;
 $stat_sin = sp + 108 | 0;
 $stat_cos = sp + 104 | 0;
 $f = sp + 16 | 0;
 $g = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(58256, 58272, 359, 1);
  HEAP32[$0 >> 2] = 1;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] <= 4.0) {
  HEAPF64[$lx >> 3] = +Math_log(+$10);
  HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] - 8.0) * .125;
  _cheb_eval_e612(58440, +HEAPF64[$y >> 3], $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$lx >> 3] - .5 + +HEAPF64[$result_c >> 3];
  $26 = (+Math_abs(+(+HEAPF64[$lx >> 3])) + .5) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $26 + +HEAPF64[$result_c + 8 >> 3];
  $35 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $37 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$37 >> 3] = +HEAPF64[$37 >> 3] + $35;
  HEAP32[$0 >> 2] = 0;
  $102 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 HEAP32[$stat_sin >> 2] = _gsl_sf_sin_e($10, $sin_result) | 0;
 HEAP32[$stat_cos >> 2] = _gsl_sf_cos_e(+HEAPF64[$1 >> 3], $cos_result) | 0;
 _fg_asymp(+HEAPF64[$1 >> 3], $f, $g);
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$f >> 3] * +HEAPF64[$sin_result >> 3] - +HEAPF64[$g >> 3] * +HEAPF64[$cos_result >> 3];
 $56 = +Math_abs(+(+HEAPF64[$f + 8 >> 3] * +HEAPF64[$sin_result >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $56;
 $63 = +Math_abs(+(+HEAPF64[$g + 8 >> 3] * +HEAPF64[$cos_result >> 3]));
 $65 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$65 >> 3] = +HEAPF64[$65 >> 3] + $63;
 $72 = +Math_abs(+(+HEAPF64[$f >> 3] * +HEAPF64[$sin_result + 8 >> 3]));
 $74 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$74 >> 3] = +HEAPF64[$74 >> 3] + $72;
 $81 = +Math_abs(+(+HEAPF64[$g >> 3] * +HEAPF64[$cos_result + 8 >> 3]));
 $83 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$83 >> 3] = +HEAPF64[$83 >> 3] + $81;
 $89 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $91 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$91 >> 3] = +HEAPF64[$91 >> 3] + $89;
 if (HEAP32[$stat_sin >> 2] | 0) $101 = HEAP32[$stat_sin >> 2] | 0; else $101 = (HEAP32[$stat_cos >> 2] | 0) != 0 ? HEAP32[$stat_cos >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $101;
 $102 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $102 | 0;
}
function _dilogc_unitdisk($x, $y, $real_dl, $imag_dl) {
 $x = +$x;
 $y = +$y;
 $real_dl = $real_dl | 0;
 $imag_dl = $imag_dl | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $51 = 0.0, $57 = 0.0, $59 = 0, $80 = 0.0, $86 = 0.0, $88 = 0, $98 = 0, $argomz = 0, $argz = 0, $lnomz = 0, $lnz = 0, $r = 0, $r_tmp = 0, $result_im_tmp = 0, $result_re_tmp = 0, $stat_dilog = 0, $x_tmp = 0, $y_tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 116 | 0;
 $r = sp + 88 | 0;
 $x_tmp = sp + 80 | 0;
 $y_tmp = sp + 72 | 0;
 $r_tmp = sp + 64 | 0;
 $result_re_tmp = sp + 48 | 0;
 $result_im_tmp = sp + 32 | 0;
 $stat_dilog = sp + 112 | 0;
 $lnz = sp + 24 | 0;
 $lnomz = sp + 16 | 0;
 $argz = sp + 8 | 0;
 $argomz = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $real_dl;
 HEAP32[$4 >> 2] = $imag_dl;
 HEAPF64[$r >> 3] = +_hypot(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[$2 >> 3]));
 if (+HEAPF64[$1 >> 3] > .732) {
  HEAPF64[$x_tmp >> 3] = 1.0 - +HEAPF64[$1 >> 3];
  HEAPF64[$y_tmp >> 3] = -+HEAPF64[$2 >> 3];
  HEAPF64[$r_tmp >> 3] = +_hypot(+(+HEAPF64[$x_tmp >> 3]), +(+HEAPF64[$y_tmp >> 3]));
  HEAP32[$stat_dilog >> 2] = _dilogc_fundamental(+HEAPF64[$r_tmp >> 3], +HEAPF64[$x_tmp >> 3], +HEAPF64[$y_tmp >> 3], $result_re_tmp, $result_im_tmp) | 0;
  HEAPF64[$lnz >> 3] = +Math_log(+(+HEAPF64[$r >> 3]));
  HEAPF64[$lnomz >> 3] = +Math_log(+(+HEAPF64[$r_tmp >> 3]));
  HEAPF64[$argz >> 3] = +Math_atan2(+(+HEAPF64[$2 >> 3]), +(+HEAPF64[$1 >> 3]));
  HEAPF64[$argomz >> 3] = +Math_atan2(+(+HEAPF64[$y_tmp >> 3]), +(+HEAPF64[$x_tmp >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[$result_re_tmp >> 3] + 1.6449340668482264 - +HEAPF64[$lnz >> 3] * +HEAPF64[$lnomz >> 3] + +HEAPF64[$argz >> 3] * +HEAPF64[$argomz >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_re_tmp + 8 >> 3];
  $51 = +Math_abs(+(+HEAPF64[$lnz >> 3] * +HEAPF64[$lnomz >> 3])) + 1.6449340668482264;
  $57 = ($51 + +Math_abs(+(+HEAPF64[$argz >> 3] * +HEAPF64[$argomz >> 3]))) * 4.440892098500626e-16;
  $59 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$59 >> 3] = +HEAPF64[$59 >> 3] + $57;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = -+HEAPF64[$result_im_tmp >> 3] - +HEAPF64[$argz >> 3] * +HEAPF64[$lnomz >> 3] - +HEAPF64[$argomz >> 3] * +HEAPF64[$lnz >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_im_tmp + 8 >> 3];
  $80 = +Math_abs(+(+HEAPF64[$argz >> 3] * +HEAPF64[$lnomz >> 3]));
  $86 = ($80 + +Math_abs(+(+HEAPF64[$argomz >> 3] * +HEAPF64[$lnz >> 3]))) * 4.440892098500626e-16;
  $88 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$88 >> 3] = +HEAPF64[$88 >> 3] + $86;
  HEAP32[$0 >> 2] = HEAP32[$stat_dilog >> 2];
  $98 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $98 | 0;
 } else {
  HEAP32[$0 >> 2] = _dilogc_fundamental(+HEAPF64[$r >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  $98 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $98 | 0;
 }
 return 0;
}
function _bessel_kl_scaled_small_x($l, $x, $result) {
 $l = $l | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $38 = 0.0, $79 = 0, $85 = 0.0, $89 = 0, $delta = 0, $den = 0, $ex = 0, $i = 0, $ineg_term = 0, $ipos_term = 0, $lmax = 0, $num_fact = 0, $sgn = 0, $stat_df = 0, $stat_il = 0, $sum = 0, $t = 0, $t_coeff = 0, $t_power = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 136 | 0;
 $1 = sp + 132 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 128 | 0;
 $num_fact = sp + 88 | 0;
 $den = sp + 80 | 0;
 $stat_df = sp + 124 | 0;
 $lmax = sp + 120 | 0;
 $ipos_term = sp + 64 | 0;
 $ineg_term = sp + 56 | 0;
 $sgn = sp + 48 | 0;
 $ex = sp + 40 | 0;
 $t = sp + 32 | 0;
 $sum = sp + 24 | 0;
 $t_coeff = sp + 16 | 0;
 $t_power = sp + 8 | 0;
 $delta = sp;
 $stat_il = sp + 116 | 0;
 $i = sp + 112 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$den >> 3] = +_gsl_sf_pow_int(+HEAPF64[$2 >> 3], (HEAP32[$1 >> 2] | 0) + 1 | 0);
 HEAP32[$stat_df >> 2] = _gsl_sf_doublefact_e((HEAP32[$1 >> 2] << 1) - 1 | 0, $num_fact) | 0;
 if (!(HEAP32[$stat_df >> 2] | 0)) if (!(+HEAPF64[$den >> 3] == 0.0)) {
  HEAP32[$lmax >> 2] = 50;
  HEAPF64[$sgn >> 3] = (HEAP32[$1 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0;
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$t >> 3] = +HEAPF64[$2 >> 3] * .5 * +HEAPF64[$2 >> 3];
  HEAPF64[$sum >> 3] = 1.0;
  HEAPF64[$t_coeff >> 3] = 1.0;
  HEAPF64[$t_power >> 3] = 1.0;
  HEAP32[$i >> 2] = 1;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= 50) break;
   $38 = +(Math_imul(HEAP32[$i >> 2] | 0, ((HEAP32[$i >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 1) - 1 | 0) | 0);
   HEAPF64[$t_coeff >> 3] = +HEAPF64[$t_coeff >> 3] / $38;
   HEAPF64[$t_power >> 3] = +HEAPF64[$t_power >> 3] * +HEAPF64[$t >> 3];
   HEAPF64[$delta >> 3] = +HEAPF64[$t_power >> 3] * +HEAPF64[$t_coeff >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$delta >> 3];
   if (+Math_abs(+(+HEAPF64[$delta >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$stat_il >> 2] = _gsl_sf_bessel_il_scaled_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $ipos_term) | 0;
  HEAPF64[$ineg_term >> 3] = +HEAPF64[$sgn >> 3] * +HEAPF64[$num_fact >> 3] / +HEAPF64[$den >> 3] * +HEAPF64[$sum >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[$sgn >> 3] * .5 * 3.141592653589793 * (+HEAPF64[$ex >> 3] * +HEAPF64[$ipos_term >> 3] - +HEAPF64[$ineg_term >> 3]);
  $79 = HEAP32[$3 >> 2] | 0;
  HEAPF64[$79 >> 3] = +HEAPF64[$79 >> 3] * +HEAPF64[$ex >> 3];
  $85 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $85;
  HEAP32[$0 >> 2] = HEAP32[$stat_il >> 2];
  $89 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $89 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
 _gsl_error(16080, 16048, 48, 16);
 HEAP32[$0 >> 2] = 16;
 $89 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $89 | 0;
}
function _gsl_sf_bessel_K0_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $103 = 0, $2 = 0, $35 = 0.0, $48 = 0.0, $50 = 0, $56 = 0.0, $75 = 0.0, $77 = 0, $98 = 0.0, $I0 = 0, $c = 0, $c1 = 0, $c3 = 0, $ex = 0, $lx = 0, $stat_I0 = 0, $sx = 0, $sx2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 108 | 0;
 $lx = sp + 88 | 0;
 $ex = sp + 80 | 0;
 $stat_I0 = sp + 104 | 0;
 $I0 = sp + 64 | 0;
 $c = sp + 48 | 0;
 $sx = sp + 40 | 0;
 $c1 = sp + 24 | 0;
 $sx2 = sp + 16 | 0;
 $c3 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(12768, 12784, 135, 1);
  HEAP32[$0 >> 2] = 1;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] <= 2.0) {
  HEAPF64[$lx >> 3] = +Math_log(+$10);
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3]));
  _cheb_eval_e116(13272, +HEAPF64[$1 >> 3] * .5 * +HEAPF64[$1 >> 3] - 1.0, $c) | 0;
  HEAP32[$stat_I0 >> 2] = _gsl_sf_bessel_I0_e(+HEAPF64[$1 >> 3], $I0) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ex >> 3] * ((-+HEAPF64[$lx >> 3] + .6931471805599453) * +HEAPF64[$I0 >> 3] - .25 + +HEAPF64[$c >> 3]);
  $35 = +Math_abs(+(+HEAPF64[$lx >> 3])) + .6931471805599453;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ex >> 3] * ($35 * +HEAPF64[$I0 + 8 >> 3] + +HEAPF64[$c + 8 >> 3]);
  $48 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $50 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$50 >> 3] = +HEAPF64[$50 >> 3] + $48;
  HEAP32[$0 >> 2] = HEAP32[$stat_I0 >> 2];
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 $56 = +Math_sqrt(+(+HEAPF64[$1 >> 3]));
 if ($10 <= 8.0) {
  HEAPF64[$sx >> 3] = $56;
  _cheb_eval_e116(13152, (16.0 / +HEAPF64[$1 >> 3] - 5.0) / 3.0, $c1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$c1 >> 3] + 1.25) / +HEAPF64[$sx >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c1 + 8 >> 3] / +HEAPF64[$sx >> 3];
  $75 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $77 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$77 >> 3] = +HEAPF64[$77 >> 3] + $75;
  HEAP32[$0 >> 2] = 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 } else {
  HEAPF64[$sx2 >> 3] = $56;
  _cheb_eval_e116(12984, 16.0 / +HEAPF64[$1 >> 3] - 1.0, $c3) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$c3 >> 3] + 1.25) / +HEAPF64[$sx2 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$c3 + 8 >> 3] + 2.220446049250313e-16) / +HEAPF64[$sx2 >> 3];
  $98 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $100 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$100 >> 3] = +HEAPF64[$100 >> 3] + $98;
  HEAP32[$0 >> 2] = 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_I0_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $104 = 0.0, $106 = 0, $109 = 0, $17 = 0.0, $2 = 0, $33 = 0.0, $43 = 0.0, $56 = 0.0, $66 = 0, $7 = 0.0, $72 = 0.0, $74 = 0, $88 = 0.0, $98 = 0, $c = 0, $c1 = 0, $c3 = 0, $ey = 0, $sy = 0, $sy2 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 92 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 88 | 0;
 $y = sp + 72 | 0;
 $ey = sp + 64 | 0;
 $c = sp + 48 | 0;
 $sy = sp + 40 | 0;
 $c1 = sp + 24 | 0;
 $sy2 = sp + 16 | 0;
 $c3 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$y >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 $7 = +HEAPF64[$y >> 3];
 if (+HEAPF64[$y >> 3] < 2.9802322387695312e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - $7;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$y >> 3] * .5 * +HEAPF64[$y >> 3];
  HEAP32[$0 >> 2] = 0;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 $17 = +HEAPF64[$y >> 3];
 if ($7 <= 3.0) {
  HEAPF64[$ey >> 3] = +Math_exp(+-$17);
  _cheb_eval_e82(11312, +HEAPF64[$y >> 3] * +HEAPF64[$y >> 3] / 4.5 - 1.0, $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ey >> 3] * (+HEAPF64[$c >> 3] + 2.75);
  $33 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $33 + +HEAPF64[$ey >> 3] * +HEAPF64[$c + 8 >> 3];
  HEAP32[$0 >> 2] = 0;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 $43 = +Math_sqrt(+(+HEAPF64[$y >> 3]));
 if ($17 <= 8.0) {
  HEAPF64[$sy >> 3] = $43;
  _cheb_eval_e82(11184, (48.0 / +HEAPF64[$y >> 3] - 11.0) / 5.0, $c1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$c1 >> 3] + .375) / +HEAPF64[$sy >> 3];
  $56 = (+Math_abs(+(+HEAPF64[$c1 >> 3])) + .375) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $56 / +HEAPF64[$sy >> 3];
  $66 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$66 >> 3] = +HEAPF64[$66 >> 3] + +HEAPF64[$c1 + 8 >> 3] / +HEAPF64[$sy >> 3];
  $72 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $74 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$74 >> 3] = +HEAPF64[$74 >> 3] + $72;
  HEAP32[$0 >> 2] = 0;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 } else {
  HEAPF64[$sy2 >> 3] = $43;
  _cheb_eval_e82(10984, 16.0 / +HEAPF64[$y >> 3] - 1.0, $c3) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$c3 >> 3] + .375) / +HEAPF64[$sy2 >> 3];
  $88 = (+Math_abs(+(+HEAPF64[$c3 >> 3])) + .375) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $88 / +HEAPF64[$sy2 >> 3];
  $98 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$98 >> 3] = +HEAPF64[$98 >> 3] + +HEAPF64[$c3 + 8 >> 3] / +HEAPF64[$sy2 >> 3];
  $104 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $106 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$106 >> 3] = +HEAPF64[$106 >> 3] + $104;
  HEAP32[$0 >> 2] = 0;
  $109 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $109 | 0;
 }
 return 0;
}
function _gsl_sf_hyperg_2F1_conj_e($aR, $aI, $c, $x, $result) {
 $aR = +$aR;
 $aI = +$aI;
 $c = +$c;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $76 = 0, $ax = 0, $c_neg_integer = 0, $rintc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 52 | 0;
 $ax = sp + 8 | 0;
 $rintc = sp;
 $c_neg_integer = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $aR;
 HEAPF64[$2 >> 3] = $aI;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$4 >> 3]));
 HEAPF64[$rintc >> 3] = +Math_floor(+(+HEAPF64[$3 >> 3] + .5));
 if (+HEAPF64[$3 >> 3] < 0.0) $19 = +Math_abs(+(+HEAPF64[$3 >> 3] - +HEAPF64[$rintc >> 3])) < 2.220446049250313e-13; else $19 = 0;
 HEAP32[$c_neg_integer >> 2] = $19 & 1;
 HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
 if (!(+HEAPF64[$ax >> 3] >= 1.0)) if (!(HEAP32[$c_neg_integer >> 2] | 0)) if (!(+HEAPF64[$3 >> 3] == 0.0)) {
  if (+HEAPF64[$ax >> 3] < .25) if (+Math_abs(+(+HEAPF64[$1 >> 3])) < 20.0) {
   if (!(+Math_abs(+(+HEAPF64[$2 >> 3])) < 20.0)) label = 10;
  } else label = 10; else label = 10;
  do if ((label | 0) == 10) {
   if (+HEAPF64[$3 >> 3] > 0.0) if (+HEAPF64[$4 >> 3] > 0.0) break;
   if (+Math_abs(+(+HEAPF64[$1 >> 3])) < 10.0) if (+Math_abs(+(+HEAPF64[$2 >> 3])) < 10.0) {
    $58 = +HEAPF64[$1 >> 3];
    $59 = +HEAPF64[$2 >> 3];
    $60 = +HEAPF64[$3 >> 3];
    $61 = +HEAPF64[$4 >> 3];
    $62 = HEAP32[$5 >> 2] | 0;
    if (+HEAPF64[$4 >> 3] < -.25) {
     HEAP32[$0 >> 2] = _hyperg_2F1_conj_luke($58, $59, $60, $61, $62) | 0;
     $76 = HEAP32[$0 >> 2] | 0;
     STACKTOP = sp;
     return $76 | 0;
    } else {
     HEAP32[$0 >> 2] = _hyperg_2F1_conj_series($58, $59, $60, $61, $62) | 0;
     $76 = HEAP32[$0 >> 2] | 0;
     STACKTOP = sp;
     return $76 | 0;
    }
   }
   if (+HEAPF64[$4 >> 3] < 0.0) {
    HEAP32[$0 >> 2] = _hyperg_2F1_conj_luke(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
    $76 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $76 | 0;
   } else {
    HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
    _gsl_error(51912, 51896, 799, 24);
    HEAP32[$0 >> 2] = 24;
    $76 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $76 | 0;
   }
  } while (0);
  HEAP32[$0 >> 2] = _hyperg_2F1_conj_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0) | 0;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(51880, 51896, 773, 1);
 HEAP32[$0 >> 2] = 1;
 $76 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $76 | 0;
}
function _gsl_sf_gamma_inc_e($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $26 = 0.0, $3 = 0, $31 = 0, $32 = 0.0, $47 = 0, $76 = 0.0, $79 = 0.0, $83 = 0, $alpha = 0, $da = 0, $fa = 0, $g_da = 0, $gax = 0, $shift = 0, $stat_g_da = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 76 | 0;
 $fa = sp + 48 | 0;
 $da = sp + 40 | 0;
 $g_da = sp + 24 | 0;
 $stat_g_da = sp + 72 | 0;
 $alpha = sp + 16 | 0;
 $gax = sp + 8 | 0;
 $shift = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] < 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(50960, 50976, 649, 1);
  HEAP32[$0 >> 2] = 1;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 $11 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAP32[$0 >> 2] = _gsl_sf_gamma_e($11, HEAP32[$3 >> 2] | 0) | 0;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 if ($11 == 0.0) {
  HEAP32[$0 >> 2] = _gsl_sf_expint_E1_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 if (+HEAPF64[$1 >> 3] > 0.0) {
  HEAP32[$0 >> 2] = _gamma_inc_a_gt_0(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 $26 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$2 >> 3] > .25) {
  HEAP32[$0 >> 2] = _gamma_inc_CF($26, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 $31 = +Math_abs(+$26) < .5;
 $32 = +HEAPF64[$1 >> 3];
 if ($31) {
  HEAP32[$0 >> 2] = _gamma_inc_series($32, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 HEAPF64[$fa >> 3] = +Math_floor(+$32);
 HEAPF64[$da >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$fa >> 3];
 if (+HEAPF64[$da >> 3] > 0.0) $47 = _gamma_inc_a_gt_0(+HEAPF64[$da >> 3], +HEAPF64[$2 >> 3], $g_da) | 0; else $47 = _gsl_sf_expint_E1_e(+HEAPF64[$2 >> 3], $g_da) | 0;
 HEAP32[$stat_g_da >> 2] = $47;
 HEAPF64[$alpha >> 3] = +HEAPF64[$da >> 3];
 HEAPF64[$gax >> 3] = +HEAPF64[$g_da >> 3];
 do {
  HEAPF64[$shift >> 3] = +Math_exp(+(-+HEAPF64[$2 >> 3] + (+HEAPF64[$alpha >> 3] - 1.0) * +Math_log(+(+HEAPF64[$2 >> 3]))));
  HEAPF64[$gax >> 3] = (+HEAPF64[$gax >> 3] - +HEAPF64[$shift >> 3]) / (+HEAPF64[$alpha >> 3] - 1.0);
  HEAPF64[$alpha >> 3] = +HEAPF64[$alpha >> 3] - 1.0;
 } while (+HEAPF64[$alpha >> 3] > +HEAPF64[$1 >> 3]);
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$gax >> 3];
 $76 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0) * 2.0 * 2.220446049250313e-16;
 $79 = $76 * +Math_abs(+(+HEAPF64[$gax >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $79;
 HEAP32[$0 >> 2] = HEAP32[$stat_g_da >> 2];
 $83 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $83 | 0;
}
function _gsl_sf_atanint_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $100 = 0, $2 = 0, $41 = 0.0, $43 = 0, $58 = 0.0, $73 = 0.0, $79 = 0.0, $81 = 0, $87 = 0.0, $97 = 0.0, $ax = 0, $result_c = 0, $result_c2 = 0, $sgn = 0, $t = 0, $t1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 76 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 72 | 0;
 $ax = sp + 56 | 0;
 $sgn = sp + 48 | 0;
 $t = sp + 40 | 0;
 $result_c = sp + 24 | 0;
 $t1 = sp + 16 | 0;
 $result_c2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$sgn >> 3] = +((+HEAPF64[$1 >> 3] >= 0.0 ? 1 : -1) | 0);
 if (+HEAPF64[$ax >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $100 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 }
 if (+HEAPF64[$ax >> 3] < 7.450580596923828e-9) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $100 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 }
 if (+HEAPF64[$ax >> 3] <= 1.0) {
  HEAPF64[$t >> 3] = (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] - .5) * 2.0;
  _cheb_eval_e(10632, +HEAPF64[$t >> 3], $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$result_c >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$result_c + 8 >> 3];
  $41 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  $43 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$43 >> 3] = +HEAPF64[$43 >> 3] + $41;
  HEAP32[$0 >> 2] = 0;
  $100 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 }
 if (+HEAPF64[$ax >> 3] < 67108864.0) {
  HEAPF64[$t1 >> 3] = (1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - .5) * 2.0;
  _cheb_eval_e(10632, +HEAPF64[$t1 >> 3], $result_c2) | 0;
  $58 = +Math_log(+(+HEAPF64[$ax >> 3])) * 1.5707963267948966;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sgn >> 3] * ($58 + +HEAPF64[$result_c2 >> 3] / +HEAPF64[$ax >> 3]);
  $73 = +HEAPF64[$result_c2 + 8 >> 3] / +HEAPF64[$ax >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $73;
  $79 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  $81 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$81 >> 3] = +HEAPF64[$81 >> 3] + $79;
  HEAP32[$0 >> 2] = 0;
  $100 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 } else {
  $87 = +Math_log(+(+HEAPF64[$ax >> 3])) * 1.5707963267948966;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sgn >> 3] * ($87 + 1.0 / +HEAPF64[$ax >> 3]);
  $97 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16)) * 2.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $97;
  HEAP32[$0 >> 2] = 0;
  $100 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 }
 return 0;
}
function _gsl_sf_gamma_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $31 = 0.0, $34 = 0.0, $48 = 0.0, $5 = 0.0, $52 = 0.0, $58 = 0.0, $60 = 0, $80 = 0, $83 = 0, $f_x = 0, $g = 0, $lng = 0, $rint_x = 0, $sgn = 0, $sgn_gamma = 0, $sin_term = 0, $stat_e = 0, $stat_lng = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 88 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 84 | 0;
 $rint_x = sp + 80 | 0;
 $f_x = sp + 56 | 0;
 $sgn_gamma = sp + 48 | 0;
 $sin_term = sp + 40 | 0;
 $g = sp + 24 | 0;
 $lng = sp + 8 | 0;
 $sgn = sp;
 $stat_lng = sp + 76 | 0;
 $stat_e = sp + 72 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $5 = +HEAPF64[$1 >> 3];
 if (!(+HEAPF64[$1 >> 3] < .5)) {
  HEAP32[$0 >> 2] = _gamma_xgthalf($5, HEAP32[$2 >> 2] | 0) | 0;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 HEAP32[$rint_x >> 2] = ~~+Math_floor(+($5 + .5));
 HEAPF64[$f_x >> 3] = +HEAPF64[$1 >> 3] - +(HEAP32[$rint_x >> 2] | 0);
 HEAPF64[$sgn_gamma >> 3] = (HEAP32[$rint_x >> 2] & 1 | 0) != 0 ^ 1 ? 1.0 : -1.0;
 HEAPF64[$sin_term >> 3] = +HEAPF64[$sgn_gamma >> 3] * +Math_sin(+(+HEAPF64[$f_x >> 3] * 3.141592653589793)) / 3.141592653589793;
 if (+HEAPF64[$sin_term >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(38384, 38400, 1264, 1);
  HEAP32[$0 >> 2] = 1;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 $31 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] > -169.0) {
  _gamma_xgthalf(1.0 - $31, $g) | 0;
  $34 = +Math_abs(+(+HEAPF64[$sin_term >> 3]));
  if ($34 * +HEAPF64[$g >> 3] * 2.2250738585072014e-308 < 1.0) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 / (+HEAPF64[$sin_term >> 3] * +HEAPF64[$g >> 3]);
   $48 = +Math_abs(+(+HEAPF64[$g + 8 >> 3] / +HEAPF64[$g >> 3]));
   $52 = $48 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $52;
   $58 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
   $60 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
   HEAPF64[$60 >> 3] = +HEAPF64[$60 >> 3] + $58;
   HEAP32[$0 >> 2] = 0;
   $83 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $83 | 0;
  } else {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
   _gsl_error(38456, 38400, 1276, 15);
   HEAP32[$0 >> 2] = 15;
   $83 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $83 | 0;
  }
 } else {
  HEAP32[$stat_lng >> 2] = _gsl_sf_lngamma_sgn_e($31, $lng, $sgn) | 0;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lng >> 3], +HEAPF64[$lng + 8 >> 3], +HEAPF64[$sgn >> 3], 0.0, HEAP32[$2 >> 2] | 0) | 0;
  if (HEAP32[$stat_e >> 2] | 0) $80 = HEAP32[$stat_e >> 2] | 0; else $80 = (HEAP32[$stat_lng >> 2] | 0) != 0 ? HEAP32[$stat_lng >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $80;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 return 0;
}
function _gsl_sf_log_erfc_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $57 = 0.0, $61 = 0.0, $62 = 0.0, $67 = 0.0, $7 = 0.0, $71 = 0.0, $77 = 0.0, $83 = 0.0, $85 = 0, $88 = 0, $result_erfc = 0, $series = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 140 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 136 | 0;
 $y = sp + 120 | 0;
 $series = sp + 16 | 0;
 $result_erfc = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $7 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] < .02460783300575925) {
  HEAPF64[$y >> 3] = $7 / 1.772453850905516;
  HEAPF64[sp + 112 >> 3] = .28613578213673563;
  HEAPF64[sp + 104 >> 3] = -.09439510239319526;
  HEAPF64[sp + 96 >> 3] = -.001829764677455021;
  HEAPF64[sp + 88 >> 3] = .02629651521057465;
  HEAPF64[sp + 80 >> 3] = -.01621575378835404;
  HEAPF64[sp + 72 >> 3] = .00125993961762116;
  HEAPF64[sp + 64 >> 3] = .00556964649138;
  HEAPF64[sp + 56 >> 3] = -.0045563339802;
  HEAPF64[sp + 48 >> 3] = .0009461589032;
  HEAPF64[sp + 40 >> 3] = .0013200243174;
  HEAPF64[sp + 32 >> 3] = -.00142906;
  HEAPF64[sp + 24 >> 3] = 48204.0e-8;
  HEAPF64[$series >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * 48204.0e-8 + -.00142906) + .0013200243174) + .0009461589032) + -.0045563339802) + .00556964649138) + .00125993961762116;
  HEAPF64[$series >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * +HEAPF64[$series >> 3] + -.01621575378835404) + .02629651521057465) + -.001829764677455021) + -.09439510239319526) + .28613578213673563) + 1.0) + 1.0);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$series >> 3] * -2.0;
  $57 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $57;
  HEAP32[$0 >> 2] = 0;
  $88 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 }
 $61 = +HEAPF64[$1 >> 3];
 if ($7 > 8.0) {
  $62 = +_log_erfc8($61);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $62;
  $67 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $67;
  HEAP32[$0 >> 2] = 0;
  $88 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 } else {
  _gsl_sf_erfc_e($61, $result_erfc) | 0;
  $71 = +Math_log(+(+HEAPF64[$result_erfc >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $71;
  $77 = +Math_abs(+(+HEAPF64[$result_erfc + 8 >> 3] / +HEAPF64[$result_erfc >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $77;
  $83 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $85 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$85 >> 3] = +HEAPF64[$85 >> 3] + $83;
  HEAP32[$0 >> 2] = 0;
  $88 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 }
 return 0;
}
function _legendre_H3d_CF1_ser($ell, $lambda, $coth_eta, $result) {
 $ell = $ell | 0;
 $lambda = +$lambda;
 $coth_eta = +$coth_eta;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $103 = 0.0, $105 = 0, $110 = 0, $2 = 0, $3 = 0, $4 = 0, $72 = 0.0, $89 = 0.0, $9 = 0.0, $95 = 0.0, $97 = 0, $ak = 0, $k = 0, $l1k = 0, $pre = 0, $rhok = 0, $sum = 0, $sum_err = 0, $tk = 0, $tlk = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 92 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 88 | 0;
 $pre = sp + 56 | 0;
 $tk = sp + 48 | 0;
 $sum = sp + 40 | 0;
 $rhok = sp + 32 | 0;
 $sum_err = sp + 24 | 0;
 $k = sp + 80 | 0;
 $tlk = sp + 16 | 0;
 $l1k = sp + 8 | 0;
 $ak = sp;
 HEAP32[$1 >> 2] = $ell;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $coth_eta;
 HEAP32[$4 >> 2] = $result;
 $9 = +_hypot(+(+HEAPF64[$2 >> 3]), +(+(HEAP32[$1 >> 2] | 0) + 1.0));
 HEAPF64[$pre >> 3] = $9 / ((+(HEAP32[$1 >> 2] | 0) * 2.0 + 3.0) * +HEAPF64[$3 >> 3]);
 HEAP32[sp + 84 >> 2] = 2e4;
 HEAPF64[$tk >> 3] = 1.0;
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$rhok >> 3] = 0.0;
 HEAPF64[$sum_err >> 3] = 0.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 2e4) break;
  HEAPF64[$tlk >> 3] = +(HEAP32[$1 >> 2] | 0) * 2.0 + 1.0 + +(HEAP32[$k >> 2] | 0) * 2.0;
  HEAPF64[$l1k >> 3] = +(HEAP32[$1 >> 2] | 0) + 1.0 + +(HEAP32[$k >> 2] | 0);
  HEAPF64[$ak >> 3] = -(+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] + +HEAPF64[$l1k >> 3] * +HEAPF64[$l1k >> 3]) / (+HEAPF64[$tlk >> 3] * (+HEAPF64[$tlk >> 3] + 2.0) * +HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3]);
  HEAPF64[$rhok >> 3] = -+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) / (+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) + 1.0);
  HEAPF64[$tk >> 3] = +HEAPF64[$tk >> 3] * +HEAPF64[$rhok >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$tk >> 3];
  $72 = +(HEAP32[$k >> 2] | 0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$tk >> 3]));
  HEAPF64[$sum_err >> 3] = +HEAPF64[$sum_err >> 3] + $72;
  if (+Math_abs(+(+HEAPF64[$tk >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$sum >> 3];
 $89 = +Math_abs(+(+HEAPF64[$pre >> 3] * +HEAPF64[$tk >> 3]));
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $89;
 $95 = +Math_abs(+(+HEAPF64[$pre >> 3] * +HEAPF64[$sum_err >> 3]));
 $97 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$97 >> 3] = +HEAPF64[$97 >> 3] + $95;
 $103 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 8.881784197001252e-16;
 $105 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$105 >> 3] = +HEAPF64[$105 >> 3] + $103;
 if ((HEAP32[$k >> 2] | 0) >= 2e4) {
  _gsl_error(52984, 52808, 238, 11);
  HEAP32[$0 >> 2] = 11;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $110 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $110 | 0;
 }
 return 0;
}
function _fg_asymp($x, $f, $g) {
 $x = +$x;
 $f = $f | 0;
 $g = $g | 0;
 var $0 = 0, $1 = 0, $103 = 0.0, $109 = 0.0, $2 = 0, $34 = 0.0, $45 = 0.0, $74 = 0.0, $85 = 0.0, $93 = 0.0, $99 = 0.0, $result_c1 = 0, $result_c11 = 0, $result_c2 = 0, $result_c22 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 116 | 0;
 $2 = sp + 112 | 0;
 $x2 = sp + 64 | 0;
 $result_c1 = sp + 48 | 0;
 $result_c2 = sp + 32 | 0;
 $result_c11 = sp + 16 | 0;
 $result_c22 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $f;
 HEAP32[$2 >> 2] = $g;
 HEAPF64[sp + 96 >> 3] = 67108864.0;
 HEAPF64[sp + 88 >> 3] = 4.49423283715579e+307;
 HEAPF64[sp + 80 >> 3] = 6.703903964971299e+153;
 HEAPF64[sp + 72 >> 3] = 7.07106781187;
 HEAPF64[$x2 >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 if (+HEAPF64[$0 >> 3] <= 7.07106781187) {
  _cheb_eval_e612(59400, (1.0 / +HEAPF64[$x2 >> 3] - .04125) / .02125, $result_c1) | 0;
  _cheb_eval_e612(59208, (1.0 / +HEAPF64[$x2 >> 3] - .04125) / .02125, $result_c2) | 0;
  HEAPF64[HEAP32[$1 >> 2] >> 3] = (+HEAPF64[$result_c1 >> 3] + 1.0) / +HEAPF64[$0 >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$result_c2 >> 3] + 1.0) / +HEAPF64[$x2 >> 3];
  $34 = +HEAPF64[$result_c1 + 8 >> 3] / +HEAPF64[$0 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $34;
  $45 = +HEAPF64[$result_c2 + 8 >> 3] / +HEAPF64[$x2 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $45;
  STACKTOP = sp;
  return;
 }
 if (+HEAPF64[$0 >> 3] <= 67108864.0) {
  _cheb_eval_e612(59008, 100.0 / +HEAPF64[$x2 >> 3] - 1.0, $result_c11) | 0;
  _cheb_eval_e612(58744, 100.0 / +HEAPF64[$x2 >> 3] - 1.0, $result_c22) | 0;
  HEAPF64[HEAP32[$1 >> 2] >> 3] = (+HEAPF64[$result_c11 >> 3] + 1.0) / +HEAPF64[$0 >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$result_c22 >> 3] + 1.0) / +HEAPF64[$x2 >> 3];
  $74 = +HEAPF64[$result_c11 + 8 >> 3] / +HEAPF64[$0 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $74;
  $85 = +HEAPF64[$result_c22 + 8 >> 3] / +HEAPF64[$x2 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $85;
  STACKTOP = sp;
  return;
 }
 if (+HEAPF64[$0 >> 3] < 4.49423283715579e+307) $93 = 1.0 / +HEAPF64[$0 >> 3]; else $93 = 0.0;
 HEAPF64[HEAP32[$1 >> 2] >> 3] = $93;
 if (+HEAPF64[$0 >> 3] < 6.703903964971299e+153) $99 = 1.0 / +HEAPF64[$x2 >> 3]; else $99 = 0.0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = $99;
 $103 = +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $103;
 $109 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $109;
 STACKTOP = sp;
 return;
}
function _gamma_inc_Q_asymp_unif($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $122 = 0.0, $132 = 0.0, $134 = 0, $2 = 0, $98 = 0.0, $R = 0, $c0 = 0, $c1 = 0, $eps = 0, $erfc = 0, $eta = 0, $lam = 0, $ln_term = 0, $rt_term = 0, $rta = 0, $stat_ln = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 116 | 0;
 $rta = sp + 88 | 0;
 $eps = sp + 80 | 0;
 $ln_term = sp + 64 | 0;
 $stat_ln = sp + 112 | 0;
 $eta = sp + 56 | 0;
 $erfc = sp + 40 | 0;
 $R = sp + 32 | 0;
 $c0 = sp + 24 | 0;
 $c1 = sp + 16 | 0;
 $rt_term = sp + 8 | 0;
 $lam = sp;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$rta >> 3] = +Math_sqrt(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$eps >> 3] = (+HEAPF64[$1 >> 3] - +HEAPF64[$0 >> 3]) / +HEAPF64[$0 >> 3];
 HEAP32[$stat_ln >> 2] = _gsl_sf_log_1plusx_mx_e(+HEAPF64[$eps >> 3], $ln_term) | 0;
 HEAPF64[$eta >> 3] = +((+HEAPF64[$eps >> 3] >= 0.0 ? 1 : -1) | 0) * +Math_sqrt(+(+HEAPF64[$ln_term >> 3] * -2.0));
 _gsl_sf_erfc_e(+HEAPF64[$eta >> 3] * +HEAPF64[$rta >> 3] / 1.4142135623730951, $erfc) | 0;
 if (+Math_abs(+(+HEAPF64[$eps >> 3])) < .000740095979741405) {
  HEAPF64[$c0 >> 3] = +HEAPF64[$eps >> 3] * (.08333333333333333 - +HEAPF64[$eps >> 3] * (.04259259259259259 - +HEAPF64[$eps >> 3] * (.027237654320987653 - +HEAPF64[$eps >> 3] * 589.0 / 30240.0))) + -.3333333333333333;
  HEAPF64[$c1 >> 3] = -.001851851851851852 - +HEAPF64[$eps >> 3] / 288.0;
 } else {
  HEAPF64[$rt_term >> 3] = +Math_sqrt(+(+HEAPF64[$ln_term >> 3] * -2.0 / (+HEAPF64[$eps >> 3] * +HEAPF64[$eps >> 3])));
  HEAPF64[$lam >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$0 >> 3];
  HEAPF64[$c0 >> 3] = (1.0 - 1.0 / +HEAPF64[$rt_term >> 3]) / +HEAPF64[$eps >> 3];
  HEAPF64[$c1 >> 3] = -(+HEAPF64[$eta >> 3] * +HEAPF64[$eta >> 3] * +HEAPF64[$eta >> 3] * (+HEAPF64[$lam >> 3] * +HEAPF64[$lam >> 3] + +HEAPF64[$lam >> 3] * 10.0 + 1.0) - +HEAPF64[$eps >> 3] * 12.0 * +HEAPF64[$eps >> 3] * +HEAPF64[$eps >> 3]) / (+HEAPF64[$eta >> 3] * 12.0 * +HEAPF64[$eta >> 3] * +HEAPF64[$eta >> 3] * +HEAPF64[$eps >> 3] * +HEAPF64[$eps >> 3] * +HEAPF64[$eps >> 3]);
 }
 $98 = +Math_exp(+(+HEAPF64[$0 >> 3] * -.5 * +HEAPF64[$eta >> 3] * +HEAPF64[$eta >> 3]));
 HEAPF64[$R >> 3] = $98 / (+HEAPF64[$rta >> 3] * 2.5066282746310007) * (+HEAPF64[$c0 >> 3] + +HEAPF64[$c1 >> 3] / +HEAPF64[$0 >> 3]);
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$erfc >> 3] * .5 + +HEAPF64[$R >> 3];
 $122 = +Math_abs(+(+HEAPF64[$R >> 3] * .5 * +HEAPF64[$0 >> 3] * +HEAPF64[$eta >> 3] * +HEAPF64[$eta >> 3])) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $122 + +HEAPF64[$erfc + 8 >> 3] * .5;
 $132 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $134 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$134 >> 3] = +HEAPF64[$134 >> 3] + $132;
 STACKTOP = sp;
 return HEAP32[$stat_ln >> 2] | 0;
}
function _gsl_sf_bessel_Ynu_asympx_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $35 = 0.0, $47 = 0.0, $56 = 0.0, $58 = 0, $63 = 0, $65 = 0.0, $68 = 0, $75 = 0.0, $77 = 0, $87 = 0, $alpha = 0, $ampl = 0, $beta = 0, $cos_alpha = 0, $cos_chi = 0, $sin_alpha = 0, $sin_chi = 0, $sin_term = 0, $sin_term_mag = 0, $stat_a = 0, $stat_t = 0, $theta = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 88 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 104 | 0;
 $ampl = sp + 72 | 0;
 $theta = sp + 64 | 0;
 $alpha = sp + 56 | 0;
 $beta = sp + 48 | 0;
 $stat_a = sp + 100 | 0;
 $stat_t = sp + 96 | 0;
 $sin_alpha = sp + 40 | 0;
 $cos_alpha = sp + 32 | 0;
 $sin_chi = sp + 24 | 0;
 $cos_chi = sp + 16 | 0;
 $sin_term = sp + 8 | 0;
 $sin_term_mag = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$alpha >> 3] = +HEAPF64[$1 >> 3];
 HEAPF64[$beta >> 3] = +HEAPF64[$0 >> 3] * -.5 * 3.141592653589793;
 HEAP32[$stat_a >> 2] = _gsl_sf_bessel_asymp_Mnu_e(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], $ampl) | 0;
 HEAP32[$stat_t >> 2] = _gsl_sf_bessel_asymp_thetanu_corr_e(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], $theta) | 0;
 HEAPF64[$sin_alpha >> 3] = +Math_sin(+(+HEAPF64[$alpha >> 3]));
 HEAPF64[$cos_alpha >> 3] = +Math_cos(+(+HEAPF64[$alpha >> 3]));
 HEAPF64[$sin_chi >> 3] = +Math_sin(+(+HEAPF64[$beta >> 3] + +HEAPF64[$theta >> 3]));
 HEAPF64[$cos_chi >> 3] = +Math_cos(+(+HEAPF64[$beta >> 3] + +HEAPF64[$theta >> 3]));
 HEAPF64[$sin_term >> 3] = +HEAPF64[$sin_alpha >> 3] * +HEAPF64[$cos_chi >> 3] + +HEAPF64[$sin_chi >> 3] * +HEAPF64[$cos_alpha >> 3];
 $35 = +Math_abs(+(+HEAPF64[$sin_alpha >> 3] * +HEAPF64[$cos_chi >> 3]));
 HEAPF64[$sin_term_mag >> 3] = $35 + +Math_abs(+(+HEAPF64[$sin_chi >> 3] * +HEAPF64[$cos_alpha >> 3]));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ampl >> 3] * +HEAPF64[$sin_term >> 3];
 $47 = +Math_abs(+(+HEAPF64[$ampl >> 3])) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $47 * +HEAPF64[$sin_term_mag >> 3];
 $56 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.0 * 2.220446049250313e-16;
 $58 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$58 >> 3] = +HEAPF64[$58 >> 3] + $56;
 $63 = +Math_abs(+(+HEAPF64[$alpha >> 3])) > 4503599627370496.0;
 $65 = +Math_abs(+(+HEAPF64[$alpha >> 3]));
 if ($63) {
  $68 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$68 >> 3] = +HEAPF64[$68 >> 3] * .5 * $65;
 } else if ($65 > 67108864.0) {
  $75 = +Math_abs(+(+HEAPF64[$alpha >> 3])) * 256.0 * 1.4901161193847656e-8;
  $77 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$77 >> 3] = +HEAPF64[$77 >> 3] * $75;
 }
 if (HEAP32[$stat_t >> 2] | 0) {
  $87 = HEAP32[$stat_t >> 2] | 0;
  STACKTOP = sp;
  return $87 | 0;
 } else {
  $87 = (HEAP32[$stat_a >> 2] | 0) != 0 ? HEAP32[$stat_a >> 2] | 0 : 0;
  STACKTOP = sp;
  return $87 | 0;
 }
 return 0;
}
function _gsl_ran_hypergeometric($r, $n1, $n2, $t) {
 $r = $r | 0;
 $n1 = $n1 | 0;
 $n2 = $n2 | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $76 = 0, $a = 0, $b = 0, $i = 0, $k = 0, $n = 0, $u = 0, $u1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $n = sp + 32 | 0;
 $i = sp + 28 | 0;
 $a = sp + 24 | 0;
 $b = sp + 20 | 0;
 $k = sp + 16 | 0;
 $u = sp + 8 | 0;
 $u1 = sp;
 HEAP32[$1 >> 2] = $r;
 HEAP32[$2 >> 2] = $n1;
 HEAP32[$3 >> 2] = $n2;
 HEAP32[$4 >> 2] = $t;
 HEAP32[$n >> 2] = (HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0);
 HEAP32[$i >> 2] = 0;
 HEAP32[$a >> 2] = HEAP32[$2 >> 2];
 HEAP32[$b >> 2] = (HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0);
 HEAP32[$k >> 2] = 0;
 if ((HEAP32[$4 >> 2] | 0) >>> 0 > (HEAP32[$n >> 2] | 0) >>> 0) HEAP32[$4 >> 2] = HEAP32[$n >> 2];
 $19 = (HEAP32[$4 >> 2] | 0) >>> 0 < (((HEAP32[$n >> 2] | 0) >>> 0) / 2 | 0) >>> 0;
 HEAP32[$i >> 2] = 0;
 if ($19) {
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) {
    label = 10;
    break;
   }
   HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
   if (+((HEAP32[$b >> 2] | 0) >>> 0) * +HEAPF64[$u >> 3] < +((HEAP32[$a >> 2] | 0) >>> 0)) {
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    if ((HEAP32[$k >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
     label = 7;
     break;
    }
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + -1;
   }
   HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + -1;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  if ((label | 0) == 7) {
   HEAP32[$0 >> 2] = HEAP32[$k >> 2];
   $76 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $76 | 0;
  } else if ((label | 0) == 10) {
   HEAP32[$0 >> 2] = HEAP32[$k >> 2];
   $76 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $76 | 0;
  }
 } else {
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= ((HEAP32[$n >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) >>> 0) {
    label = 17;
    break;
   }
   HEAPF64[$u1 >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
   if (+((HEAP32[$b >> 2] | 0) >>> 0) * +HEAPF64[$u1 >> 3] < +((HEAP32[$a >> 2] | 0) >>> 0)) {
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    if ((HEAP32[$k >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
     label = 14;
     break;
    }
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + -1;
   }
   HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + -1;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  if ((label | 0) == 14) {
   HEAP32[$0 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$k >> 2] | 0);
   $76 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $76 | 0;
  } else if ((label | 0) == 17) {
   HEAP32[$0 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$k >> 2] | 0);
   $76 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $76 | 0;
  }
 }
 return 0;
}
function _gsl_sf_laguerre_3_e($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $105 = 0.0, $110 = 0.0, $122 = 0.0, $124 = 0, $127 = 0, $2 = 0, $21 = 0.0, $27 = 0.0, $29 = 0, $3 = 0, $43 = 0.0, $89 = 0.0, $96 = 0.0, $c0 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $x2_6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 56 | 0;
 $x2_6 = sp + 32 | 0;
 $c0 = sp + 24 | 0;
 $c1 = sp + 16 | 0;
 $c2 = sp + 8 | 0;
 $c3 = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == -2.0) {
  HEAPF64[$x2_6 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / 6.0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$x2_6 >> 3] * (3.0 - +HEAPF64[$2 >> 3]);
  $21 = +HEAPF64[$x2_6 >> 3] * (+Math_abs(+(+HEAPF64[$2 >> 3])) + 3.0) * 2.0 * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $21;
  $27 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $29 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$29 >> 3] = +HEAPF64[$29 >> 3] + $27;
  HEAP32[$0 >> 2] = 0;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 if (+HEAPF64[$1 >> 3] == -3.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / 6.0;
  $43 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $43;
  HEAP32[$0 >> 2] = 0;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 } else {
  HEAPF64[$c0 >> 3] = (+HEAPF64[$1 >> 3] + 3.0) * (+HEAPF64[$1 >> 3] + 2.0) * (+HEAPF64[$1 >> 3] + 1.0) / 6.0;
  HEAPF64[$c1 >> 3] = -+HEAPF64[$c0 >> 3] * 3.0 / (+HEAPF64[$1 >> 3] + 1.0);
  HEAPF64[$c2 >> 3] = -1.0 / (+HEAPF64[$1 >> 3] + 2.0);
  HEAPF64[$c3 >> 3] = -1.0 / ((+HEAPF64[$1 >> 3] + 3.0) * 3.0);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$c0 >> 3] + +HEAPF64[$c1 >> 3] * +HEAPF64[$2 >> 3] * (+HEAPF64[$c2 >> 3] * +HEAPF64[$2 >> 3] * (+HEAPF64[$c3 >> 3] * +HEAPF64[$2 >> 3] + 1.0) + 1.0);
  $89 = +Math_abs(+(+HEAPF64[$c3 >> 3] * +HEAPF64[$2 >> 3])) * 2.0 + 1.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $89;
  $96 = +Math_abs(+(+HEAPF64[$c2 >> 3] * +HEAPF64[$2 >> 3])) * 2.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $96 * +HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] + 1.0;
  $105 = +Math_abs(+(+HEAPF64[$c0 >> 3]));
  $110 = +Math_abs(+(+HEAPF64[$c1 >> 3] * +HEAPF64[$2 >> 3])) * 2.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = ($105 + $110 * +HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3]) * 4.440892098500626e-16;
  $122 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $124 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$124 >> 3] = +HEAPF64[$124 >> 3] + $122;
  HEAP32[$0 >> 2] = 0;
  $127 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_I1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $43 = 0.0, $45 = 0, $66 = 0.0, $72 = 0.0, $74 = 0, $80 = 0, $I1_scaled = 0, $c = 0, $ey = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 76 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 72 | 0;
 $y = sp + 40 | 0;
 $c = sp + 24 | 0;
 $ey = sp + 16 | 0;
 $I1_scaled = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 56 >> 3] = 4.450147717014403e-308;
 HEAPF64[sp + 48 >> 3] = 4.2146848510894035e-8;
 HEAPF64[$y >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$y >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 if (+HEAPF64[$y >> 3] < 4.450147717014403e-308) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(11344, 11360, 217, 15);
  HEAP32[$0 >> 2] = 15;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 if (+HEAPF64[$y >> 3] < 4.2146848510894035e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * .5;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 $24 = +HEAPF64[$y >> 3];
 if (+HEAPF64[$y >> 3] <= 3.0) {
  _cheb_eval_e88(11960, $24 * +HEAPF64[$y >> 3] / 4.5 - 1.0, $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$c >> 3] + .875);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$c + 8 >> 3];
  $43 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $45 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$45 >> 3] = +HEAPF64[$45 >> 3] + $43;
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 if ($24 < 709.782712893384) {
  HEAPF64[$ey >> 3] = +Math_exp(+(+HEAPF64[$y >> 3]));
  _gsl_sf_bessel_I1_scaled_e(+HEAPF64[$1 >> 3], $I1_scaled) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ey >> 3] * +HEAPF64[$I1_scaled >> 3];
  $66 = +HEAPF64[$ey >> 3] * +HEAPF64[$I1_scaled + 8 >> 3] + +HEAPF64[$y >> 3] * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $66;
  $72 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $74 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$74 >> 3] = +HEAPF64[$74 >> 3] + $72;
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(11376, 11360, 242, 16);
  HEAP32[$0 >> 2] = 16;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 return 0;
}
function _dilogc_series_2($r, $x, $y, $real_dl, $imag_dl) {
 $r = +$r;
 $x = +$x;
 $y = +$y;
 $real_dl = $real_dl | 0;
 $imag_dl = $imag_dl | 0;
 var $0 = 0, $1 = 0, $102 = 0, $103 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $75 = 0.0, $80 = 0.0, $87 = 0.0, $92 = 0.0, $ln_omz_r = 0, $ln_omz_theta = 0, $r_x = 0, $r_y = 0, $stat_log = 0, $stat_s3 = 0, $sum_im = 0, $sum_re = 0, $t_x = 0, $t_y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 136 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 132 | 0;
 $5 = sp + 128 | 0;
 $sum_re = sp + 80 | 0;
 $sum_im = sp + 64 | 0;
 $stat_s3 = sp + 124 | 0;
 $ln_omz_r = sp + 48 | 0;
 $ln_omz_theta = sp + 32 | 0;
 $stat_log = sp + 120 | 0;
 $t_x = sp + 24 | 0;
 $t_y = sp + 16 | 0;
 $r_x = sp + 8 | 0;
 $r_y = sp;
 HEAPF64[$1 >> 3] = $r;
 HEAPF64[$2 >> 3] = $x;
 HEAPF64[$3 >> 3] = $y;
 HEAP32[$4 >> 2] = $real_dl;
 HEAP32[$5 >> 2] = $imag_dl;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $103 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 HEAP32[$stat_s3 >> 2] = _series_2_c(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $sum_re, $sum_im) | 0;
 HEAP32[$stat_log >> 2] = _gsl_sf_complex_log_e(1.0 - +HEAPF64[$2 >> 3], -+HEAPF64[$3 >> 3], $ln_omz_r, $ln_omz_theta) | 0;
 HEAPF64[$t_x >> 3] = (+HEAPF64[$ln_omz_r >> 3] * +HEAPF64[$2 >> 3] + +HEAPF64[$ln_omz_theta >> 3] * +HEAPF64[$3 >> 3]) / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 HEAPF64[$t_y >> 3] = (-+HEAPF64[$ln_omz_r >> 3] * +HEAPF64[$3 >> 3] + +HEAPF64[$ln_omz_theta >> 3] * +HEAPF64[$2 >> 3]) / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
 HEAPF64[$r_x >> 3] = (1.0 - +HEAPF64[$2 >> 3]) * +HEAPF64[$t_x >> 3] + +HEAPF64[$3 >> 3] * +HEAPF64[$t_y >> 3];
 HEAPF64[$r_y >> 3] = (1.0 - +HEAPF64[$2 >> 3]) * +HEAPF64[$t_y >> 3] - +HEAPF64[$3 >> 3] * +HEAPF64[$t_x >> 3];
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sum_re >> 3] + +HEAPF64[$r_x >> 3] + 1.0;
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sum_im >> 3] + +HEAPF64[$r_y >> 3];
 $75 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
 $80 = +HEAPF64[$sum_re + 8 >> 3] + ($75 + +Math_abs(+(+HEAPF64[$r_x >> 3]))) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $80;
 $87 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3]));
 $92 = +HEAPF64[$sum_im + 8 >> 3] + ($87 + +Math_abs(+(+HEAPF64[$r_y >> 3]))) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $92;
 if (HEAP32[$stat_s3 >> 2] | 0) $102 = HEAP32[$stat_s3 >> 2] | 0; else $102 = (HEAP32[$stat_log >> 2] | 0) != 0 ? HEAP32[$stat_log >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $102;
 $103 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $103 | 0;
}
function _gsl_sf_bessel_Knu_scaled_e10_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $22 = 0.0, $23 = 0.0, $29 = 0.0, $3 = 0, $74 = 0.0, $80 = 0, $K_mu = 0, $K_mup1 = 0, $K_nu = 0, $K_num1 = 0, $K_nup1 = 0, $Kp_mu = 0, $N = 0, $e10 = 0, $factor = 0, $mu = 0, $n = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 100 | 0;
 $N = sp + 96 | 0;
 $mu = sp + 64 | 0;
 $K_mu = sp + 56 | 0;
 $K_mup1 = sp + 48 | 0;
 $Kp_mu = sp + 40 | 0;
 $K_nu = sp + 32 | 0;
 $K_nup1 = sp + 24 | 0;
 $K_num1 = sp + 16 | 0;
 $n = sp + 92 | 0;
 $e10 = sp + 88 | 0;
 $p = sp + 8 | 0;
 $factor = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] <= 0.0)) if (!(+HEAPF64[$1 >> 3] < 0.0)) {
  HEAP32[$N >> 2] = ~~(+HEAPF64[$1 >> 3] + .5);
  HEAPF64[$mu >> 3] = +HEAPF64[$1 >> 3] - +(HEAP32[$N >> 2] | 0);
  HEAP32[$e10 >> 2] = 0;
  $22 = +HEAPF64[$mu >> 3];
  $23 = +HEAPF64[$2 >> 3];
  if (+HEAPF64[$2 >> 3] < 2.0) _gsl_sf_bessel_K_scaled_temme($22, $23, $K_mu, $K_mup1, $Kp_mu) | 0; else _gsl_sf_bessel_K_scaled_steed_temme_CF2($22, $23, $K_mu, $K_mup1, $Kp_mu) | 0;
  HEAPF64[$K_nu >> 3] = +HEAPF64[$K_mu >> 3];
  HEAPF64[$K_nup1 >> 3] = +HEAPF64[$K_mup1 >> 3];
  HEAP32[$n >> 2] = 0;
  while (1) {
   $29 = +HEAPF64[$K_nu >> 3];
   if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$N >> 2] | 0)) break;
   HEAPF64[$K_num1 >> 3] = $29;
   HEAPF64[$K_nu >> 3] = +HEAPF64[$K_nup1 >> 3];
   if (+Math_abs(+(+HEAPF64[$K_nu >> 3])) > 1.3407807929942596e+154) {
    HEAPF64[$p >> 3] = +Math_floor(+(+Math_log(+(+Math_abs(+(+HEAPF64[$K_nu >> 3])))) / 2.302585092994046));
    HEAPF64[$factor >> 3] = +Math_pow(10.0, +(+HEAPF64[$p >> 3]));
    HEAPF64[$K_num1 >> 3] = +HEAPF64[$K_num1 >> 3] / +HEAPF64[$factor >> 3];
    HEAPF64[$K_nu >> 3] = +HEAPF64[$K_nu >> 3] / +HEAPF64[$factor >> 3];
    HEAP32[$e10 >> 2] = ~~(+(HEAP32[$e10 >> 2] | 0) + +HEAPF64[$p >> 3]);
   }
   HEAPF64[$K_nup1 >> 3] = (+HEAPF64[$mu >> 3] + +(HEAP32[$n >> 2] | 0) + 1.0) * 2.0 / +HEAPF64[$2 >> 3] * +HEAPF64[$K_nu >> 3] + +HEAPF64[$K_num1 >> 3];
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $29;
  $74 = (+(HEAP32[$N >> 2] | 0) + 4.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $74;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = HEAP32[$e10 >> 2];
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = 0;
 _gsl_error(14e3, 14016, 58, 1);
 HEAP32[$0 >> 2] = 1;
 $80 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $80 | 0;
}
function _gsl_sf_hyperg_U_int_e10_e($a, $b, $x, $result) {
 $a = $a | 0;
 $b = $b | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $55 = 0.0, $63 = 0.0, $85 = 0, $86 = 0, $U = 0, $ap = 0, $bp = 0, $ln_pre_err = 0, $ln_pre_val = 0, $ln_x = 0, $stat_U = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 72 | 0;
 $U = sp + 24 | 0;
 $ln_x = sp + 16 | 0;
 $ap = sp + 68 | 0;
 $bp = sp + 64 | 0;
 $stat_e = sp + 60 | 0;
 $stat_U = sp + 56 | 0;
 $ln_pre_val = sp + 8 | 0;
 $ln_pre_err = sp;
 HEAP32[$1 >> 2] = $a;
 HEAP32[$2 >> 2] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (+HEAPF64[$3 >> 3] == 0.0) if ((HEAP32[$2 >> 2] | 0) >= 1) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(52152, 52168, 1628, 1);
  HEAP32[$0 >> 2] = 1;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAP32[$0 >> 2] = _hyperg_U_int_origin(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 if (+HEAPF64[$3 >> 3] < 0.0) {
  HEAP32[$0 >> 2] = _hyperg_U_int_negx(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) >= 1) {
  HEAP32[$0 >> 2] = _hyperg_U_int_bge1(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 HEAPF64[$ln_x >> 3] = +Math_log(+(+HEAPF64[$3 >> 3]));
 HEAP32[$ap >> 2] = 1 + (HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0);
 HEAP32[$bp >> 2] = 2 - (HEAP32[$2 >> 2] | 0);
 HEAP32[$stat_U >> 2] = _hyperg_U_int_bge1(HEAP32[$ap >> 2] | 0, HEAP32[$bp >> 2] | 0, +HEAPF64[$3 >> 3], $U) | 0;
 HEAPF64[$ln_pre_val >> 3] = (1.0 - +(HEAP32[$2 >> 2] | 0)) * +HEAPF64[$ln_x >> 3];
 $55 = (+Math_abs(+(+(HEAP32[$2 >> 2] | 0))) + 1.0) * 4.440892098500626e-16;
 HEAPF64[$ln_pre_err >> 3] = $55 * +Math_abs(+(+HEAPF64[$ln_x >> 3]));
 $63 = +Math_abs(+(1.0 - +(HEAP32[$2 >> 2] | 0))) * 4.440892098500626e-16;
 HEAPF64[$ln_pre_err >> 3] = +HEAPF64[$ln_pre_err >> 3] + $63;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e10_e(+HEAPF64[$ln_pre_val >> 3] + +(HEAP32[$U + 16 >> 2] | 0) * 2.302585092994046, +HEAPF64[$ln_pre_err >> 3], +HEAPF64[$U >> 3], +HEAPF64[$U + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) $85 = HEAP32[$stat_e >> 2] | 0; else $85 = (HEAP32[$stat_U >> 2] | 0) != 0 ? HEAP32[$stat_U >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $85;
 $86 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $86 | 0;
}
function _gsl_sf_erfc_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $41 = 0.0, $6 = 0.0, $74 = 0.0, $83 = 0.0, $85 = 0, $95 = 0.0, $97 = 0, $ax = 0, $c = 0, $c2 = 0, $c4 = 0, $e_err = 0, $e_val = 0, $ex2 = 0, $exterm = 0, $t = 0, $t1 = 0, $t3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 120 | 0;
 $ax = sp + 104 | 0;
 $e_val = sp + 96 | 0;
 $e_err = sp + 88 | 0;
 $t = sp + 80 | 0;
 $c = sp + 64 | 0;
 $ex2 = sp + 56 | 0;
 $t1 = sp + 48 | 0;
 $c2 = sp + 32 | 0;
 $exterm = sp + 24 | 0;
 $t3 = sp + 16 | 0;
 $c4 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$0 >> 3]));
 $6 = +HEAPF64[$ax >> 3];
 do if (+HEAPF64[$ax >> 3] <= 1.0) {
  HEAPF64[$t >> 3] = 2.0 * $6 - 1.0;
  _cheb_eval_e300(30976, +HEAPF64[$t >> 3], $c) | 0;
  HEAPF64[$e_val >> 3] = +HEAPF64[$c >> 3];
  HEAPF64[$e_err >> 3] = +HEAPF64[$c + 8 >> 3];
 } else {
  if ($6 <= 5.0) {
   HEAPF64[$ex2 >> 3] = +Math_exp(+(-+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]));
   HEAPF64[$t1 >> 3] = (+HEAPF64[$ax >> 3] - 3.0) * .5;
   _cheb_eval_e300(30784, +HEAPF64[$t1 >> 3], $c2) | 0;
   HEAPF64[$e_val >> 3] = +HEAPF64[$ex2 >> 3] * +HEAPF64[$c2 >> 3];
   HEAPF64[$e_err >> 3] = +HEAPF64[$ex2 >> 3] * (+HEAPF64[$c2 + 8 >> 3] + +Math_abs(+(+HEAPF64[$0 >> 3])) * 2.0 * 2.220446049250313e-16);
   break;
  }
  if (+HEAPF64[$ax >> 3] < 10.0) {
   $41 = +Math_exp(+(-+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]));
   HEAPF64[$exterm >> 3] = $41 / +HEAPF64[$ax >> 3];
   HEAPF64[$t3 >> 3] = (+HEAPF64[$ax >> 3] * 2.0 - 15.0) / 5.0;
   _cheb_eval_e300(30552, +HEAPF64[$t3 >> 3], $c4) | 0;
   HEAPF64[$e_val >> 3] = +HEAPF64[$exterm >> 3] * +HEAPF64[$c4 >> 3];
   HEAPF64[$e_err >> 3] = +HEAPF64[$exterm >> 3] * (+HEAPF64[$c4 + 8 >> 3] + +Math_abs(+(+HEAPF64[$0 >> 3])) * 2.0 * 2.220446049250313e-16 + 2.220446049250313e-16);
   break;
  } else {
   HEAPF64[$e_val >> 3] = +_erfc8(+HEAPF64[$ax >> 3]);
   HEAPF64[$e_err >> 3] = (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] + 1.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[$e_val >> 3]));
   break;
  }
 } while (0);
 $74 = +HEAPF64[$e_val >> 3];
 if (+HEAPF64[$0 >> 3] < 0.0) {
  HEAPF64[HEAP32[$1 >> 2] >> 3] = 2.0 - $74;
  HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = +HEAPF64[$e_err >> 3];
  $83 = +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 4.440892098500626e-16;
  $85 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
  HEAPF64[$85 >> 3] = +HEAPF64[$85 >> 3] + $83;
  STACKTOP = sp;
  return 0;
 } else {
  HEAPF64[HEAP32[$1 >> 2] >> 3] = $74;
  HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = +HEAPF64[$e_err >> 3];
  $95 = +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 4.440892098500626e-16;
  $97 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
  HEAPF64[$97 >> 3] = +HEAPF64[$97 >> 3] + $95;
  STACKTOP = sp;
  return 0;
 }
 return 0;
}
function _conicalP_negmu_xgt1_CF1($mu, $ell, $tau, $x, $result) {
 $mu = +$mu;
 $ell = $ell | 0;
 $tau = +$tau;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $104 = 0.0, $106 = 0, $111 = 0, $13 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $92 = 0.0, $99 = 0.0, $ak = 0, $gamma = 0, $k = 0, $l1k = 0, $pre = 0, $rhok = 0, $sum = 0, $tk = 0, $tlk = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 100 | 0;
 $3 = sp + 72 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 96 | 0;
 $gamma = sp + 56 | 0;
 $pre = sp + 48 | 0;
 $tk = sp + 40 | 0;
 $sum = sp + 32 | 0;
 $rhok = sp + 24 | 0;
 $k = sp + 88 | 0;
 $tlk = sp + 16 | 0;
 $l1k = sp + 8 | 0;
 $ak = sp;
 HEAPF64[$1 >> 3] = $mu;
 HEAP32[$2 >> 2] = $ell;
 HEAPF64[$3 >> 3] = $tau;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $result;
 HEAP32[sp + 92 >> 2] = 2e4;
 HEAPF64[$gamma >> 3] = 1.0 - 1.0 / (+HEAPF64[$4 >> 3] * +HEAPF64[$4 >> 3]);
 $13 = +Math_sqrt(+(+HEAPF64[$4 >> 3] - 1.0));
 $17 = $13 * +Math_sqrt(+(+HEAPF64[$4 >> 3] + 1.0));
 HEAPF64[$pre >> 3] = $17 / (+HEAPF64[$4 >> 3] * (+(HEAP32[$2 >> 2] | 0) + +HEAPF64[$1 >> 3] + 1.0) * 2.0);
 HEAPF64[$tk >> 3] = 1.0;
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$rhok >> 3] = 0.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 2e4) break;
  HEAPF64[$tlk >> 3] = (+(HEAP32[$2 >> 2] | 0) + +HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] | 0)) * 2.0;
  HEAPF64[$l1k >> 3] = +(HEAP32[$2 >> 2] | 0) + +HEAPF64[$1 >> 3] - .5 + 1.0 + +(HEAP32[$k >> 2] | 0);
  HEAPF64[$ak >> 3] = -(+HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3] + +HEAPF64[$l1k >> 3] * +HEAPF64[$l1k >> 3]) / (+HEAPF64[$tlk >> 3] * (+HEAPF64[$tlk >> 3] + 2.0)) * +HEAPF64[$gamma >> 3];
  HEAPF64[$rhok >> 3] = -+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) / (+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) + 1.0);
  HEAPF64[$tk >> 3] = +HEAPF64[$tk >> 3] * +HEAPF64[$rhok >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$tk >> 3];
  if (+Math_abs(+(+HEAPF64[$tk >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$sum >> 3];
 $92 = +Math_abs(+(+HEAPF64[$pre >> 3] * +HEAPF64[$tk >> 3]));
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $92;
 $99 = (+Math_sqrt(+(+(HEAP32[$k >> 2] | 0))) + 1.0) * 4.440892098500626e-16;
 $104 = $99 * +Math_abs(+(+HEAPF64[$pre >> 3] * +HEAPF64[$sum >> 3]));
 $106 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$106 >> 3] = +HEAPF64[$106 >> 3] + $104;
 if ((HEAP32[$k >> 2] | 0) >= 2e4) {
  _gsl_error(53488, 53184, 147, 11);
  HEAP32[$0 >> 2] = 11;
  $111 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $111 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $111 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $111 | 0;
 }
 return 0;
}
function _hyperg_1F1_large2bm4a($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $51 = 0.0, $54 = 0.0, $78 = 0.0, $96 = 0, $cos2th = 0, $eta = 0, $lg_b = 0, $lnpre_err = 0, $lnpre_val = 0, $pre_h = 0, $s1 = 0, $s2 = 0, $ser_err = 0, $ser_val = 0, $sin2th = 0, $stat_e = 0, $stat_lg = 0, $t1 = 0, $t2 = 0, $th = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 136 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 152 | 0;
 $eta = sp + 112 | 0;
 $cos2th = sp + 104 | 0;
 $sin2th = sp + 96 | 0;
 $th = sp + 88 | 0;
 $pre_h = sp + 80 | 0;
 $lg_b = sp + 64 | 0;
 $stat_lg = sp + 148 | 0;
 $t1 = sp + 56 | 0;
 $t2 = sp + 48 | 0;
 $lnpre_val = sp + 40 | 0;
 $lnpre_err = sp + 32 | 0;
 $s1 = sp + 24 | 0;
 $s2 = sp + 16 | 0;
 $ser_val = sp + 8 | 0;
 $ser_err = sp;
 $stat_e = sp + 144 | 0;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $b;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$eta >> 3] = +HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[$0 >> 3] * 4.0;
 HEAPF64[$cos2th >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$eta >> 3];
 HEAPF64[$sin2th >> 3] = 1.0 - +HEAPF64[$cos2th >> 3];
 HEAPF64[$th >> 3] = +Math_acos(+(+Math_sqrt(+(+HEAPF64[$cos2th >> 3]))));
 HEAPF64[$pre_h >> 3] = +HEAPF64[$eta >> 3] * 2.4674011002723395 * +HEAPF64[$eta >> 3] * +HEAPF64[$cos2th >> 3] * +HEAPF64[$sin2th >> 3];
 HEAP32[$stat_lg >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3], $lg_b) | 0;
 HEAPF64[$t1 >> 3] = (1.0 - +HEAPF64[$1 >> 3]) * .5 * +Math_log(+(+HEAPF64[$2 >> 3] * .25 * +HEAPF64[$eta >> 3]));
 HEAPF64[$t2 >> 3] = +Math_log(+(+HEAPF64[$pre_h >> 3])) * .25;
 HEAPF64[$lnpre_val >> 3] = +HEAPF64[$lg_b >> 3] + +HEAPF64[$2 >> 3] * .5 + +HEAPF64[$t1 >> 3] - +HEAPF64[$t2 >> 3];
 $51 = +Math_abs(+(+HEAPF64[$2 >> 3] * .5));
 $54 = $51 + +Math_abs(+(+HEAPF64[$t1 >> 3]));
 HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lg_b + 8 >> 3] + ($54 + +Math_abs(+(+HEAPF64[$t2 >> 3]))) * 4.440892098500626e-16;
 HEAPF64[$s1 >> 3] = +Math_sin(+(+HEAPF64[$0 >> 3] * 3.141592653589793));
 HEAPF64[$s2 >> 3] = +Math_sin(+(+HEAPF64[$eta >> 3] * .25 * (+HEAPF64[$th >> 3] * 2.0 - +Math_sin(+(+HEAPF64[$th >> 3] * 2.0))) + .7853981633974483));
 HEAPF64[$ser_val >> 3] = +HEAPF64[$s1 >> 3] + +HEAPF64[$s2 >> 3];
 $78 = +Math_abs(+(+HEAPF64[$s1 >> 3]));
 HEAPF64[$ser_err >> 3] = ($78 + +Math_abs(+(+HEAPF64[$s2 >> 3]))) * 4.440892098500626e-16;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], +HEAPF64[$ser_val >> 3], +HEAPF64[$ser_err >> 3], HEAP32[$3 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) {
  $96 = HEAP32[$stat_e >> 2] | 0;
  STACKTOP = sp;
  return $96 | 0;
 } else {
  $96 = (HEAP32[$stat_lg >> 2] | 0) != 0 ? HEAP32[$stat_lg >> 2] | 0 : 0;
  STACKTOP = sp;
  return $96 | 0;
 }
 return 0;
}
function _gsl_sf_legendre_H3d_0_e($lambda, $eta, $result) {
 $lambda = +$lambda;
 $eta = +$eta;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $25 = 0.0, $3 = 0, $38 = 0.0, $43 = 0.0, $47 = 0.0, $52 = 0, $58 = 0.0, $60 = 0, $74 = 0.0, $79 = 0.0, $83 = 0.0, $88 = 0, $94 = 0.0, $96 = 0, $99 = 0, $f = 0, $f1 = 0, $lam_eta = 0, $s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 56 | 0;
 $lam_eta = sp + 32 | 0;
 $s = sp + 16 | 0;
 $f = sp + 8 | 0;
 $f1 = sp;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $eta;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] < 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(52792, 52808, 253, 1);
  HEAP32[$0 >> 2] = 1;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 if (!(+HEAPF64[$2 >> 3] == 0.0)) if (!(+HEAPF64[$1 >> 3] == 0.0)) {
  HEAPF64[$lam_eta >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3];
  _gsl_sf_sin_err_e(+HEAPF64[$lam_eta >> 3], +Math_abs(+(+HEAPF64[$lam_eta >> 3])) * 4.440892098500626e-16, $s) | 0;
  $25 = +HEAPF64[$1 >> 3];
  if (+HEAPF64[$2 >> 3] > 18.021826694558577) {
   HEAPF64[$f >> 3] = 2.0 / $25 * +Math_exp(+-+HEAPF64[$2 >> 3]);
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$f >> 3] * +HEAPF64[$s >> 3];
   $38 = +Math_abs(+(+HEAPF64[$f >> 3] * +HEAPF64[$s >> 3]));
   $43 = $38 * (+Math_abs(+(+HEAPF64[$2 >> 3])) + 1.0) * 2.220446049250313e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $43;
   $47 = +Math_abs(+(+HEAPF64[$f >> 3]));
   $52 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$52 >> 3] = +HEAPF64[$52 >> 3] + $47 * +HEAPF64[$s + 8 >> 3];
   $58 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $60 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$60 >> 3] = +HEAPF64[$60 >> 3] + $58;
  } else {
   HEAPF64[$f1 >> 3] = 1.0 / ($25 * +_sinh(+(+HEAPF64[$2 >> 3])));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$f1 >> 3] * +HEAPF64[$s >> 3];
   $74 = +Math_abs(+(+HEAPF64[$f1 >> 3] * +HEAPF64[$s >> 3]));
   $79 = $74 * (+Math_abs(+(+HEAPF64[$2 >> 3])) + 1.0) * 2.220446049250313e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $79;
   $83 = +Math_abs(+(+HEAPF64[$f1 >> 3]));
   $88 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$88 >> 3] = +HEAPF64[$88 >> 3] + $83 * +HEAPF64[$s + 8 >> 3];
   $94 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $96 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$96 >> 3] = +HEAPF64[$96 >> 3] + $94;
  }
  HEAP32[$0 >> 2] = 0;
  $99 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $99 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAP32[$0 >> 2] = 0;
 $99 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $99 | 0;
}
function _gsl_sf_psi_1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $18 = 0.0, $2 = 0, $52 = 0, $61 = 0, $86 = 0, $M = 0, $d = 0, $fx = 0, $m = 0, $r = 0, $sin_px = 0, $stat_psi = 0, $stat_psi1 = 0, $sum = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 76 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 72 | 0;
 $M = sp + 68 | 0;
 $fx = sp + 40 | 0;
 $sum = sp + 32 | 0;
 $m = sp + 64 | 0;
 $stat_psi = sp + 60 | 0;
 $sin_px = sp + 24 | 0;
 $d = sp + 16 | 0;
 $r = sp;
 $stat_psi1 = sp + 56 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == 0.0 | +HEAPF64[$1 >> 3] == -1.0 | +HEAPF64[$1 >> 3] == -2.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(55568, 55584, 727, 1);
  HEAP32[$0 >> 2] = 1;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 $14 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] > 0.0) {
  HEAP32[$0 >> 2] = _psi_n_xg0(1, $14, HEAP32[$2 >> 2] | 0) | 0;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 $18 = +HEAPF64[$1 >> 3];
 if (!($14 > -5.0)) {
  HEAPF64[$sin_px >> 3] = +Math_sin(+(3.141592653589793 * $18));
  HEAPF64[$d >> 3] = 9.869604401089358 / (+HEAPF64[$sin_px >> 3] * +HEAPF64[$sin_px >> 3]);
  HEAP32[$stat_psi1 >> 2] = _psi_n_xg0(1, 1.0 - +HEAPF64[$1 >> 3], $r) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3] - +HEAPF64[$r >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$r + 8 >> 3] + +HEAPF64[$d >> 3] * 4.440892098500626e-16;
  HEAP32[$0 >> 2] = HEAP32[$stat_psi1 >> 2];
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 HEAP32[$M >> 2] = ~~-+Math_floor(+$18);
 HEAPF64[$fx >> 3] = +HEAPF64[$1 >> 3] + +(HEAP32[$M >> 2] | 0);
 HEAPF64[$sum >> 3] = 0.0;
 if (+HEAPF64[$fx >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(55568, 55584, 742, 1);
  HEAP32[$0 >> 2] = 1;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 HEAP32[$m >> 2] = 0;
 while (1) {
  if ((HEAP32[$m >> 2] | 0) >= (HEAP32[$M >> 2] | 0)) break;
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + 1.0 / ((+HEAPF64[$1 >> 3] + +(HEAP32[$m >> 2] | 0)) * (+HEAPF64[$1 >> 3] + +(HEAP32[$m >> 2] | 0)));
  HEAP32[$m >> 2] = (HEAP32[$m >> 2] | 0) + 1;
 }
 HEAP32[$stat_psi >> 2] = _psi_n_xg0(1, +HEAPF64[$fx >> 3], HEAP32[$2 >> 2] | 0) | 0;
 $52 = HEAP32[$2 >> 2] | 0;
 HEAPF64[$52 >> 3] = +HEAPF64[$52 >> 3] + +HEAPF64[$sum >> 3];
 $61 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$61 >> 3] = +HEAPF64[$61 >> 3] + +(HEAP32[$M >> 2] | 0) * 2.220446049250313e-16 * +HEAPF64[$sum >> 3];
 HEAP32[$0 >> 2] = HEAP32[$stat_psi >> 2];
 $86 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $86 | 0;
}
function _gsl_sf_bessel_Ynu_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $25 = 0.0, $26 = 0.0, $3 = 0, $56 = 0.0, $61 = 0.0, $68 = 0.0, $73 = 0.0, $75 = 0, $79 = 0, $J_mu = 0, $J_mup1 = 0, $N = 0, $Y_mu = 0, $Y_mup1 = 0, $Yn = 0, $Ynm1 = 0, $Ynp1 = 0, $mu = 0, $n = 0, $stat_mu = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 128 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 124 | 0;
 $N = sp + 120 | 0;
 $mu = sp + 88 | 0;
 $Y_mu = sp + 72 | 0;
 $Y_mup1 = sp + 56 | 0;
 $stat_mu = sp + 116 | 0;
 $Ynm1 = sp + 48 | 0;
 $Yn = sp + 40 | 0;
 $Ynp1 = sp + 32 | 0;
 $n = sp + 112 | 0;
 $J_mu = sp + 16 | 0;
 $J_mup1 = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] <= 0.0)) if (!(+HEAPF64[$1 >> 3] < 0.0)) {
  $13 = +HEAPF64[$1 >> 3];
  if (+HEAPF64[$1 >> 3] > 50.0) {
   HEAP32[$0 >> 2] = _gsl_sf_bessel_Ynu_asymp_Olver_e($13, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   $79 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $79 | 0;
  }
  HEAP32[$N >> 2] = ~~($13 + .5);
  HEAPF64[$mu >> 3] = +HEAPF64[$1 >> 3] - +(HEAP32[$N >> 2] | 0);
  $25 = +HEAPF64[$mu >> 3];
  $26 = +HEAPF64[$2 >> 3];
  if (+HEAPF64[$2 >> 3] < 2.0) HEAP32[$stat_mu >> 2] = _gsl_sf_bessel_Y_temme($25, $26, $Y_mu, $Y_mup1) | 0; else HEAP32[$stat_mu >> 2] = _gsl_sf_bessel_JY_mu_restricted($25, $26, $J_mu, $J_mup1, $Y_mu, $Y_mup1) | 0;
  HEAPF64[$Ynm1 >> 3] = +HEAPF64[$Y_mu >> 3];
  HEAPF64[$Yn >> 3] = +HEAPF64[$Y_mup1 >> 3];
  HEAP32[$n >> 2] = 1;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) > (HEAP32[$N >> 2] | 0)) break;
   HEAPF64[$Ynp1 >> 3] = (+HEAPF64[$mu >> 3] + +(HEAP32[$n >> 2] | 0)) * 2.0 / +HEAPF64[$2 >> 3] * +HEAPF64[$Yn >> 3] - +HEAPF64[$Ynm1 >> 3];
   HEAPF64[$Ynm1 >> 3] = +HEAPF64[$Yn >> 3];
   HEAPF64[$Yn >> 3] = +HEAPF64[$Ynp1 >> 3];
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$Ynm1 >> 3];
  $56 = (+(HEAP32[$N >> 2] | 0) + 1.0) * +Math_abs(+(+HEAPF64[$Ynm1 >> 3]));
  $61 = +Math_abs(+(+HEAPF64[$Y_mu + 8 >> 3] / +HEAPF64[$Y_mu >> 3]));
  $68 = $56 * ($61 + +Math_abs(+(+HEAPF64[$Y_mup1 + 8 >> 3] / +HEAPF64[$Y_mup1 >> 3])));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $68;
  $73 = +Math_abs(+(+HEAPF64[$Ynm1 >> 3])) * 4.440892098500626e-16;
  $75 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$75 >> 3] = +HEAPF64[$75 >> 3] + $73;
  HEAP32[$0 >> 2] = HEAP32[$stat_mu >> 2];
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(14696, 14712, 73, 1);
 HEAP32[$0 >> 2] = 1;
 $79 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $79 | 0;
}
function _gsl_sf_bessel_Yn_array($nmin, $nmax, $x, $result_array) {
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $38 = 0, $4 = 0, $41 = 0, $79 = 0, $Yn = 0, $Ynm1 = 0, $Ynp1 = 0, $j = 0, $n = 0, $r_Yn = 0, $r_Ynm1 = 0, $stat = 0, $stat_n = 0, $stat_nm1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 92 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 84 | 0;
 $j = sp + 80 | 0;
 $r_Ynm1 = sp + 40 | 0;
 $r_Yn = sp + 24 | 0;
 $stat_nm1 = sp + 76 | 0;
 $stat_n = sp + 72 | 0;
 $Ynp1 = sp + 16 | 0;
 $Yn = sp + 8 | 0;
 $Ynm1 = sp;
 $n = sp + 68 | 0;
 $stat = sp + 64 | 0;
 HEAP32[$1 >> 2] = $nmin;
 HEAP32[$2 >> 2] = $nmax;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) if (!(+HEAPF64[$3 >> 3] <= 0.0)) {
  HEAP32[$stat_nm1 >> 2] = _gsl_sf_bessel_Yn_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$3 >> 3], $r_Ynm1) | 0;
  HEAP32[$stat_n >> 2] = _gsl_sf_bessel_Yn_e((HEAP32[$1 >> 2] | 0) + 1 | 0, +HEAPF64[$3 >> 3], $r_Yn) | 0;
  HEAPF64[$Yn >> 3] = +HEAPF64[$r_Yn >> 3];
  HEAPF64[$Ynm1 >> 3] = +HEAPF64[$r_Ynm1 >> 3];
  if (HEAP32[$stat_nm1 >> 2] | 0) $38 = HEAP32[$stat_nm1 >> 2] | 0; else $38 = (HEAP32[$stat_n >> 2] | 0) != 0 ? HEAP32[$stat_n >> 2] | 0 : 0;
  HEAP32[$stat >> 2] = $38;
  $41 = HEAP32[$1 >> 2] | 0;
  L9 : do if (!(HEAP32[$stat >> 2] | 0)) {
   HEAP32[$n >> 2] = $41 + 1;
   while (1) {
    if ((HEAP32[$n >> 2] | 0) > ((HEAP32[$2 >> 2] | 0) + 1 | 0)) break L9;
    HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n >> 2] | 0) - (HEAP32[$1 >> 2] | 0) - 1 << 3) >> 3] = +HEAPF64[$Ynm1 >> 3];
    HEAPF64[$Ynp1 >> 3] = -+HEAPF64[$Ynm1 >> 3] + +(HEAP32[$n >> 2] | 0) * 2.0 / +HEAPF64[$3 >> 3] * +HEAPF64[$Yn >> 3];
    HEAPF64[$Ynm1 >> 3] = +HEAPF64[$Yn >> 3];
    HEAPF64[$Yn >> 3] = +HEAPF64[$Ynp1 >> 3];
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
   }
  } else {
   HEAP32[$n >> 2] = $41;
   while (1) {
    if ((HEAP32[$n >> 2] | 0) > (HEAP32[$2 >> 2] | 0)) break L9;
    HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$n >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 3) >> 3] = 0.0;
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) > ((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0)) break;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3] = 0.0;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 _gsl_error(14648, 14632, 176, 1);
 HEAP32[$0 >> 2] = 1;
 $79 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $79 | 0;
}
function _gsl_sf_bessel_Jnu_asympx_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $106 = 0.0, $111 = 0.0, $115 = 0.0, $119 = 0.0, $2 = 0, $32 = 0.0, $34 = 0.0, $62 = 0.0, $P = 0, $Q = 0, $c = 0, $chi = 0, $convP = 0, $convQ = 0, $k = 0, $mu = 0, $pre = 0, $s = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 96 | 0;
 $mu = sp + 64 | 0;
 $chi = sp + 56 | 0;
 $P = sp + 48 | 0;
 $Q = sp + 40 | 0;
 $k = sp + 32 | 0;
 $t = sp + 24 | 0;
 $convP = sp + 92 | 0;
 $convQ = sp + 88 | 0;
 $pre = sp + 16 | 0;
 $c = sp + 8 | 0;
 $s = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$mu >> 3] = +HEAPF64[$0 >> 3] * 4.0 * +HEAPF64[$0 >> 3];
 HEAPF64[$chi >> 3] = +HEAPF64[$1 >> 3] - (+HEAPF64[$0 >> 3] * .5 + .25) * 3.141592653589793;
 HEAPF64[$P >> 3] = 0.0;
 HEAPF64[$Q >> 3] = 0.0;
 HEAPF64[$k >> 3] = 0.0;
 HEAPF64[$t >> 3] = 1.0;
 do {
  if (+HEAPF64[$k >> 3] == 0.0) $32 = 1.0; else $32 = -(+HEAPF64[$mu >> 3] - (+HEAPF64[$k >> 3] * 2.0 - 1.0) * (+HEAPF64[$k >> 3] * 2.0 - 1.0)) / (+HEAPF64[$k >> 3] * +HEAPF64[$1 >> 3] * 8.0);
  HEAPF64[$t >> 3] = +HEAPF64[$t >> 3] * $32;
  $34 = +Math_abs(+(+HEAPF64[$t >> 3]));
  HEAP32[$convP >> 2] = $34 < +Math_abs(+(+HEAPF64[$P >> 3])) * 2.220446049250313e-16 & 1;
  HEAPF64[$P >> 3] = +HEAPF64[$P >> 3] + +HEAPF64[$t >> 3];
  HEAPF64[$k >> 3] = +HEAPF64[$k >> 3] + 1.0;
  HEAPF64[$t >> 3] = +HEAPF64[$t >> 3] * ((+HEAPF64[$mu >> 3] - (+HEAPF64[$k >> 3] * 2.0 - 1.0) * (+HEAPF64[$k >> 3] * 2.0 - 1.0)) / (+HEAPF64[$k >> 3] * +HEAPF64[$1 >> 3] * 8.0));
  $62 = +Math_abs(+(+HEAPF64[$t >> 3]));
  HEAP32[$convQ >> 2] = $62 < +Math_abs(+(+HEAPF64[$Q >> 3])) * 2.220446049250313e-16 & 1;
  HEAPF64[$Q >> 3] = +HEAPF64[$Q >> 3] + +HEAPF64[$t >> 3];
  if (HEAP32[$convP >> 2] | 0) if (HEAP32[$convQ >> 2] | 0) if (+HEAPF64[$k >> 3] > +HEAPF64[$0 >> 3] / 2.0) break;
  HEAPF64[$k >> 3] = +HEAPF64[$k >> 3] + 1.0;
 } while (+HEAPF64[$k >> 3] < 1.0e3);
 HEAPF64[$pre >> 3] = +Math_sqrt(+(2.0 / (+HEAPF64[$1 >> 3] * 3.141592653589793)));
 HEAPF64[$c >> 3] = +Math_cos(+(+HEAPF64[$chi >> 3]));
 HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$chi >> 3]));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$pre >> 3] * (+HEAPF64[$c >> 3] * +HEAPF64[$P >> 3] - +HEAPF64[$s >> 3] * +HEAPF64[$Q >> 3]);
 $106 = +Math_abs(+(+HEAPF64[$c >> 3] * +HEAPF64[$P >> 3]));
 $111 = $106 + +Math_abs(+(+HEAPF64[$s >> 3] * +HEAPF64[$Q >> 3]));
 $115 = +HEAPF64[$pre >> 3] * 2.220446049250313e-16 * ($111 + +Math_abs(+(+HEAPF64[$t >> 3])));
 $119 = $115 * (+Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0);
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $119;
 STACKTOP = sp;
 return 0;
}
function _rk_step($nu, $x, $dx, $Jp, $J) {
 $nu = +$nu;
 $x = +$x;
 $dx = +$dx;
 $Jp = $Jp | 0;
 $J = $J | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $p_0 = 0, $p_1 = 0, $p_2 = 0, $p_3 = 0, $p_4 = 0, $u_0 = 0, $u_1 = 0, $u_2 = 0, $u_3 = 0, $u_4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 108 | 0;
 $4 = sp + 104 | 0;
 $p_0 = sp + 72 | 0;
 $u_0 = sp + 64 | 0;
 $p_1 = sp + 56 | 0;
 $u_1 = sp + 48 | 0;
 $p_2 = sp + 40 | 0;
 $u_2 = sp + 32 | 0;
 $p_3 = sp + 24 | 0;
 $u_3 = sp + 16 | 0;
 $p_4 = sp + 8 | 0;
 $u_4 = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $dx;
 HEAP32[$3 >> 2] = $Jp;
 HEAP32[$4 >> 2] = $J;
 HEAPF64[$p_0 >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3];
 HEAPF64[$u_0 >> 3] = +HEAPF64[HEAP32[$4 >> 2] >> 3];
 HEAPF64[$p_1 >> 3] = +HEAPF64[$2 >> 3] * (-+HEAPF64[$p_0 >> 3] / +HEAPF64[$1 >> 3] + (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - 1.0) * +HEAPF64[$u_0 >> 3]);
 HEAPF64[$u_1 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$p_0 >> 3];
 HEAPF64[$p_2 >> 3] = +HEAPF64[$2 >> 3] * (-(+HEAPF64[$p_0 >> 3] + +HEAPF64[$p_1 >> 3] * .5) / (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] * .5) + (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] / ((+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] * .5) * (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] * .5)) - 1.0) * (+HEAPF64[$u_0 >> 3] + +HEAPF64[$u_1 >> 3] * .5));
 HEAPF64[$u_2 >> 3] = +HEAPF64[$2 >> 3] * (+HEAPF64[$p_0 >> 3] + +HEAPF64[$p_1 >> 3] * .5);
 HEAPF64[$p_3 >> 3] = +HEAPF64[$2 >> 3] * (-(+HEAPF64[$p_0 >> 3] + +HEAPF64[$p_2 >> 3] * .5) / (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] * .5) + (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] / ((+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] * .5) * (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] * .5)) - 1.0) * (+HEAPF64[$u_0 >> 3] + +HEAPF64[$u_2 >> 3] * .5));
 HEAPF64[$u_3 >> 3] = +HEAPF64[$2 >> 3] * (+HEAPF64[$p_0 >> 3] + +HEAPF64[$p_2 >> 3] * .5);
 HEAPF64[$p_4 >> 3] = +HEAPF64[$2 >> 3] * (-(+HEAPF64[$p_0 >> 3] + +HEAPF64[$p_3 >> 3]) / (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) + (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] / ((+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3]) * (+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3])) - 1.0) * (+HEAPF64[$u_0 >> 3] + +HEAPF64[$u_3 >> 3]));
 HEAPF64[$u_4 >> 3] = +HEAPF64[$2 >> 3] * (+HEAPF64[$p_0 >> 3] + +HEAPF64[$p_3 >> 3]);
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$p_0 >> 3] + +HEAPF64[$p_1 >> 3] / 6.0 + +HEAPF64[$p_2 >> 3] / 3.0 + +HEAPF64[$p_3 >> 3] / 3.0 + +HEAPF64[$p_4 >> 3] / 6.0;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$u_0 >> 3] + +HEAPF64[$u_1 >> 3] / 6.0 + +HEAPF64[$u_2 >> 3] / 3.0 + +HEAPF64[$u_3 >> 3] / 3.0 + +HEAPF64[$u_4 >> 3] / 6.0;
 STACKTOP = sp;
 return 0;
}
function _hyperg_1F1_asymp_negx($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $31 = 0.0, $4 = 0, $66 = 0, $74 = 0, $F = 0, $lg_b = 0, $lg_bma = 0, $ln_pre_err = 0, $ln_pre_val = 0, $ln_term_err = 0, $ln_term_val = 0, $sgn_b = 0, $sgn_bma = 0, $stat_F = 0, $stat_b = 0, $stat_bma = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 140 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 136 | 0;
 $lg_b = sp + 80 | 0;
 $lg_bma = sp + 64 | 0;
 $sgn_b = sp + 56 | 0;
 $sgn_bma = sp + 48 | 0;
 $stat_b = sp + 132 | 0;
 $stat_bma = sp + 128 | 0;
 $F = sp + 32 | 0;
 $stat_F = sp + 124 | 0;
 $ln_term_val = sp + 24 | 0;
 $ln_term_err = sp + 16 | 0;
 $ln_pre_val = sp + 8 | 0;
 $ln_pre_err = sp;
 $stat_e = sp + 120 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$stat_b >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3], $lg_b, $sgn_b) | 0;
 HEAP32[$stat_bma >> 2] = _gsl_sf_lngamma_sgn_e(+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3], $lg_bma, $sgn_bma) | 0;
 if (!(HEAP32[$stat_b >> 2] | 0)) if (!(HEAP32[$stat_bma >> 2] | 0)) {
  HEAP32[$stat_F >> 2] = _gsl_sf_hyperg_2F0_series_e(+HEAPF64[$1 >> 3], +HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3], -1.0 / +HEAPF64[$3 >> 3], -1, $F) | 0;
  if (!(+HEAPF64[$F >> 3] != 0.0)) {
   HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = HEAP32[$stat_F >> 2];
   $74 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $74 | 0;
  }
  HEAPF64[$ln_term_val >> 3] = +HEAPF64[$1 >> 3] * +Math_log(+-+HEAPF64[$3 >> 3]);
  $31 = +Math_abs(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$ln_term_err >> 3] = ($31 + +Math_abs(+(+HEAPF64[$ln_term_val >> 3]))) * 4.440892098500626e-16;
  HEAPF64[$ln_pre_val >> 3] = +HEAPF64[$lg_b >> 3] - +HEAPF64[$lg_bma >> 3] - +HEAPF64[$ln_term_val >> 3];
  HEAPF64[$ln_pre_err >> 3] = +HEAPF64[$lg_b + 8 >> 3] + +HEAPF64[$lg_bma + 8 >> 3] + +HEAPF64[$ln_term_err >> 3];
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_pre_val >> 3], +HEAPF64[$ln_pre_err >> 3], +HEAPF64[$sgn_bma >> 3] * +HEAPF64[$sgn_b >> 3] * +HEAPF64[$F >> 3], +HEAPF64[$F + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  if (HEAP32[$stat_e >> 2] | 0) $66 = HEAP32[$stat_e >> 2] | 0; else $66 = (HEAP32[$stat_F >> 2] | 0) != 0 ? HEAP32[$stat_F >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $66;
  $74 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $74 | 0;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(51664, 51680, 75, 1);
 HEAP32[$0 >> 2] = 1;
 $74 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $74 | 0;
}
function _gsl_sf_eta_e($s, $result) {
 $s = +$s;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0.0, $2 = 0, $35 = 0.0, $56 = 0.0, $62 = 0.0, $68 = 0.0, $70 = 0, $83 = 0, $84 = 0, $c0 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $del = 0, $p = 0, $stat_m = 0, $stat_p = 0, $stat_z = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 100 | 0;
 $del = sp + 72 | 0;
 $c0 = sp + 64 | 0;
 $c1 = sp + 56 | 0;
 $c2 = sp + 48 | 0;
 $c3 = sp + 40 | 0;
 $c4 = sp + 32 | 0;
 $z = sp + 16 | 0;
 $p = sp;
 $stat_z = sp + 96 | 0;
 $stat_p = sp + 92 | 0;
 $stat_m = sp + 88 | 0;
 HEAPF64[$1 >> 3] = $s;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] > 100.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $84 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $84 | 0;
 }
 $11 = +Math_abs(+(+HEAPF64[$1 >> 3] - 1.0)) < .00740095979741405;
 $12 = +HEAPF64[$1 >> 3];
 if ($11) {
  HEAPF64[$del >> 3] = $12 - 1.0;
  HEAPF64[$c0 >> 3] = .6931471805599453;
  HEAPF64[$c1 >> 3] = .15986890374243098;
  HEAPF64[$c2 >> 3] = -.0326862962794493;
  HEAPF64[$c3 >> 3] = .001568991705415515;
  HEAPF64[$c4 >> 3] = .0007498724211204754;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c0 >> 3] + +HEAPF64[$del >> 3] * (+HEAPF64[$c1 >> 3] + +HEAPF64[$del >> 3] * (+HEAPF64[$c2 >> 3] + +HEAPF64[$del >> 3] * (+HEAPF64[$c3 >> 3] + +HEAPF64[$del >> 3] * +HEAPF64[$c4 >> 3])));
  $35 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $35;
  HEAP32[$0 >> 2] = 0;
  $84 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $84 | 0;
 }
 HEAP32[$stat_z >> 2] = _gsl_sf_zeta_e($12, $z) | 0;
 HEAP32[$stat_p >> 2] = _gsl_sf_exp_e((1.0 - +HEAPF64[$1 >> 3]) * .6931471805599453, $p) | 0;
 HEAP32[$stat_m >> 2] = _gsl_sf_multiply_e(1.0 - +HEAPF64[$p >> 3], +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0) | 0;
 $56 = +Math_abs(+(+HEAPF64[$p + 8 >> 3] * (1.0 - +HEAPF64[$1 >> 3]) * .6931471805599453 * +HEAPF64[$z >> 3]));
 $62 = $56 + +HEAPF64[$z + 8 >> 3] * +Math_abs(+(+HEAPF64[$p >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $62;
 $68 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $70 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$70 >> 3] = +HEAPF64[$70 >> 3] + $68;
 do if (HEAP32[$stat_m >> 2] | 0) $83 = HEAP32[$stat_m >> 2] | 0; else if (HEAP32[$stat_p >> 2] | 0) {
  $83 = HEAP32[$stat_p >> 2] | 0;
  break;
 } else {
  $83 = (HEAP32[$stat_z >> 2] | 0) != 0 ? HEAP32[$stat_z >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $83;
 $84 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $84 | 0;
}
function _backward_recurse_c($aa, $qq, $xx, $ff, $gx, $even_odd, $ni) {
 $aa = +$aa;
 $qq = +$qq;
 $xx = +$xx;
 $ff = $ff | 0;
 $gx = $gx | 0;
 $even_odd = $even_odd | 0;
 $ni = $ni | 0;
 var $0 = 0, $1 = 0, $14 = 0, $2 = 0, $25 = 0.0, $3 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $64 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $g1 = 0, $ii = 0, $nn = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $ii = sp + 36 | 0;
 $nn = sp + 32 | 0;
 $g1 = sp;
 HEAPF64[$0 >> 3] = $aa;
 HEAPF64[$1 >> 3] = $qq;
 HEAPF64[$2 >> 3] = $xx;
 HEAP32[$3 >> 2] = $ff;
 HEAP32[$4 >> 2] = $gx;
 HEAP32[$5 >> 2] = $even_odd;
 HEAP32[$6 >> 2] = $ni;
 HEAPF64[$g1 >> 3] = +HEAPF64[HEAP32[$4 >> 2] >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] << 3) >> 3] = +HEAPF64[$2 >> 3];
 $14 = (HEAP32[$5 >> 2] | 0) == 0;
 HEAP32[$ii >> 2] = 0;
 if (!$14) {
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
   HEAP32[$nn >> 2] = 100 - (HEAP32[$ii >> 2] | 0) - 1;
   $64 = +(Math_imul((HEAP32[$nn >> 2] << 1) + 1 | 0, (HEAP32[$nn >> 2] << 1) + 1 | 0) | 0);
   HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3] = -1.0 / (($64 - +HEAPF64[$0 >> 3]) / +HEAPF64[$1 >> 3] + +HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) << 3) >> 3]);
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  $85 = HEAP32[$3 >> 2] | 0;
  $86 = +HEAPF64[$85 >> 3];
  $87 = +HEAPF64[$g1 >> 3];
  $88 = $86 - $87;
  $89 = HEAP32[$4 >> 2] | 0;
  HEAPF64[$89 >> 3] = $88;
  STACKTOP = sp;
  return;
 }
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
  HEAP32[$nn >> 2] = 100 - (HEAP32[$ii >> 2] | 0) - 1;
  $25 = +(Math_imul(HEAP32[$nn >> 2] << 2, HEAP32[$nn >> 2] | 0) | 0);
  HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3] = -1.0 / (($25 - +HEAPF64[$0 >> 3]) / +HEAPF64[$1 >> 3] + +HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) << 3) >> 3]);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 if ((HEAP32[$6 >> 2] | 0) != 99) {
  $85 = HEAP32[$3 >> 2] | 0;
  $86 = +HEAPF64[$85 >> 3];
  $87 = +HEAPF64[$g1 >> 3];
  $88 = $86 - $87;
  $89 = HEAP32[$4 >> 2] | 0;
  HEAPF64[$89 >> 3] = $88;
  STACKTOP = sp;
  return;
 }
 $48 = HEAP32[$3 >> 2] | 0;
 HEAPF64[$48 >> 3] = +HEAPF64[$48 >> 3] * 2.0;
 $85 = HEAP32[$3 >> 2] | 0;
 $86 = +HEAPF64[$85 >> 3];
 $87 = +HEAPF64[$g1 >> 3];
 $88 = $86 - $87;
 $89 = HEAP32[$4 >> 2] | 0;
 HEAPF64[$89 >> 3] = $88;
 STACKTOP = sp;
 return;
}
function _hyperg_0F1_bessel_I($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $46 = 0.0, $55 = 0.0, $60 = 0, $70 = 0, $88 = 0.0, $92 = 0, $I = 0, $I2 = 0, $K = 0, $anu = 0, $ex = 0, $ex1 = 0, $s = 0, $stat_I = 0, $stat_I3 = 0, $stat_K = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 108 | 0;
 $anu = sp + 72 | 0;
 $s = sp + 64 | 0;
 $ex = sp + 56 | 0;
 $I = sp + 40 | 0;
 $K = sp + 24 | 0;
 $stat_I = sp + 104 | 0;
 $stat_K = sp + 100 | 0;
 $ex1 = sp + 16 | 0;
 $I2 = sp;
 $stat_I3 = sp + 96 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] > 709.782712893384) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(51648, 51592, 45, 16);
  HEAP32[$0 >> 2] = 16;
  $92 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $92 | 0;
 }
 if (!(+HEAPF64[$1 >> 3] < 0.0)) {
  HEAPF64[$ex1 >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3]));
  HEAP32[$stat_I3 >> 2] = _gsl_sf_bessel_Inu_scaled_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $I2) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$ex1 >> 3] * +HEAPF64[$I2 >> 3];
  $88 = +HEAPF64[$ex1 >> 3] * +HEAPF64[$I2 + 8 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $88;
  HEAP32[$0 >> 2] = HEAP32[$stat_I3 >> 2];
  $92 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $92 | 0;
 }
 HEAPF64[$anu >> 3] = -+HEAPF64[$1 >> 3];
 HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$anu >> 3] * 3.141592653589793)) * .6366197723675814;
 HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3]));
 HEAP32[$stat_I >> 2] = _gsl_sf_bessel_Inu_scaled_e(+HEAPF64[$anu >> 3], +HEAPF64[$2 >> 3], $I) | 0;
 HEAP32[$stat_K >> 2] = _gsl_sf_bessel_Knu_scaled_e(+HEAPF64[$anu >> 3], +HEAPF64[$2 >> 3], $K) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$ex >> 3] * +HEAPF64[$I >> 3] + +HEAPF64[$s >> 3] * (+HEAPF64[$K >> 3] / +HEAPF64[$ex >> 3]);
 $46 = +HEAPF64[$ex >> 3] * +HEAPF64[$I + 8 >> 3] + +Math_abs(+(+HEAPF64[$s >> 3] * +HEAPF64[$K + 8 >> 3] / +HEAPF64[$ex >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $46;
 $55 = +Math_abs(+(+HEAPF64[$s >> 3] * (+HEAPF64[$K >> 3] / +HEAPF64[$ex >> 3]))) * 2.220446049250313e-16;
 $60 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$60 >> 3] = +HEAPF64[$60 >> 3] + $55 * +HEAPF64[$anu >> 3] * 3.141592653589793;
 if (HEAP32[$stat_K >> 2] | 0) $70 = HEAP32[$stat_K >> 2] | 0; else $70 = (HEAP32[$stat_I >> 2] | 0) != 0 ? HEAP32[$stat_I >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $70;
 $92 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $92 | 0;
}
function _gsl_sf_eta_int_e($n, $result) {
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0, $17 = 0.0, $2 = 0, $27 = 0, $37 = 0.0, $60 = 0.0, $66 = 0.0, $72 = 0.0, $74 = 0, $87 = 0, $88 = 0, $p = 0, $stat_m = 0, $stat_p = 0, $stat_z = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 44 | 0;
 $z = sp + 16 | 0;
 $p = sp;
 $stat_z = sp + 40 | 0;
 $stat_p = sp + 36 | 0;
 $stat_m = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) > 100) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $88 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 }
 $10 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) >= 0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[63784 + ($10 << 3) >> 3];
  $17 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $17;
  HEAP32[$0 >> 2] = 0;
  $88 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 }
 if (!($10 & 1)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $88 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 }
 $27 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) > -99) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[64592 + (((0 - ($27 + 1) | 0) / 2 | 0) << 3) >> 3];
  $37 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $37;
  HEAP32[$0 >> 2] = 0;
  $88 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 }
 HEAP32[$stat_z >> 2] = _gsl_sf_zeta_int_e($27, $z) | 0;
 HEAP32[$stat_p >> 2] = _gsl_sf_exp_e((1.0 - +(HEAP32[$1 >> 2] | 0)) * .6931471805599453, $p) | 0;
 HEAP32[$stat_m >> 2] = _gsl_sf_multiply_e(-+HEAPF64[$p >> 3], +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0) | 0;
 $60 = +Math_abs(+(+HEAPF64[$p + 8 >> 3] * (1.0 - +(HEAP32[$1 >> 2] | 0)) * .6931471805599453 * +HEAPF64[$z >> 3]));
 $66 = $60 + +HEAPF64[$z + 8 >> 3] * +Math_abs(+(+HEAPF64[$p >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $66;
 $72 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $74 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$74 >> 3] = +HEAPF64[$74 >> 3] + $72;
 do if (HEAP32[$stat_m >> 2] | 0) $87 = HEAP32[$stat_m >> 2] | 0; else if (HEAP32[$stat_p >> 2] | 0) {
  $87 = HEAP32[$stat_p >> 2] | 0;
  break;
 } else {
  $87 = (HEAP32[$stat_z >> 2] | 0) != 0 ? HEAP32[$stat_z >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $87;
 $88 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $88 | 0;
}
function _gsl_sf_gammainv_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $47 = 0.0, $51 = 0.0, $57 = 0.0, $59 = 0, $66 = 0, $g = 0, $lng = 0, $sgn = 0, $stat_g = 0, $stat_lng = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 56 | 0;
 $lng = sp + 24 | 0;
 $sgn = sp + 16 | 0;
 $stat_lng = sp + 52 | 0;
 $g = sp;
 $stat_g = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) if (+HEAPF64[$1 >> 3] == +Math_floor(+(+HEAPF64[$1 >> 3]))) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $66 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 $14 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .5) {
  HEAP32[$stat_lng >> 2] = _gsl_sf_lngamma_sgn_e($14, $lng, $sgn) | 0;
  if ((HEAP32[$stat_lng >> 2] | 0) == 1) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $66 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $66 | 0;
  }
  if (HEAP32[$stat_lng >> 2] | 0) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = HEAP32[$stat_lng >> 2];
   $66 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $66 | 0;
  } else {
   HEAP32[$0 >> 2] = _gsl_sf_exp_mult_err_e(-+HEAPF64[$lng >> 3], +HEAPF64[$lng + 8 >> 3], +HEAPF64[$sgn >> 3], 0.0, HEAP32[$2 >> 2] | 0) | 0;
   $66 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $66 | 0;
  }
 } else {
  HEAP32[$stat_g >> 2] = _gamma_xgthalf($14, $g) | 0;
  if ((HEAP32[$stat_g >> 2] | 0) == 16) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
   _gsl_error(38456, 38400, 1379, 15);
   HEAP32[$0 >> 2] = 15;
   $66 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $66 | 0;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 / +HEAPF64[$g >> 3];
  $47 = +Math_abs(+(+HEAPF64[$g + 8 >> 3] / +HEAPF64[$g >> 3]));
  $51 = $47 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $51;
  $57 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $59 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$59 >> 3] = +HEAPF64[$59 >> 3] + $57;
  if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(38456, 38400, 1385, 15);
   HEAP32[$0 >> 2] = 15;
   $66 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $66 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $66 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $66 | 0;
  }
 }
 return 0;
}
function _lngamma_lanczos_complex($zr, $zi, $yr, $yi) {
 $zr = +$zr;
 $zi = +$zi;
 $yr = $yr | 0;
 $yi = $yi | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $72 = 0.0, $78 = 0.0, $9 = 0.0, $90 = 0, $Ag_i = 0, $Ag_r = 0, $I = 0, $R = 0, $a = 0, $k = 0, $log1_i = 0, $log1_r = 0, $logAg_i = 0, $logAg_r = 0, $yi_tmp_err = 0, $yi_tmp_val = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $0 = sp + 128 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 144 | 0;
 $3 = sp + 140 | 0;
 $k = sp + 136 | 0;
 $log1_r = sp + 104 | 0;
 $log1_i = sp + 88 | 0;
 $logAg_r = sp + 72 | 0;
 $logAg_i = sp + 56 | 0;
 $Ag_r = sp + 48 | 0;
 $Ag_i = sp + 40 | 0;
 $yi_tmp_val = sp + 32 | 0;
 $yi_tmp_err = sp + 24 | 0;
 $R = sp + 16 | 0;
 $I = sp + 8 | 0;
 $a = sp;
 HEAPF64[$0 >> 3] = $zr;
 HEAPF64[$1 >> 3] = $zi;
 HEAP32[$2 >> 2] = $yr;
 HEAP32[$3 >> 2] = $yi;
 HEAPF64[$0 >> 3] = +HEAPF64[$0 >> 3] - 1.0;
 HEAPF64[$Ag_r >> 3] = +HEAPF64[6265];
 HEAPF64[$Ag_i >> 3] = 0.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  $9 = +HEAPF64[$0 >> 3];
  if ((HEAP32[$k >> 2] | 0) > 8) break;
  HEAPF64[$R >> 3] = $9 + +(HEAP32[$k >> 2] | 0);
  HEAPF64[$I >> 3] = +HEAPF64[$1 >> 3];
  HEAPF64[$a >> 3] = +HEAPF64[50120 + (HEAP32[$k >> 2] << 3) >> 3] / (+HEAPF64[$R >> 3] * +HEAPF64[$R >> 3] + +HEAPF64[$I >> 3] * +HEAPF64[$I >> 3]);
  HEAPF64[$Ag_r >> 3] = +HEAPF64[$Ag_r >> 3] + +HEAPF64[$a >> 3] * +HEAPF64[$R >> 3];
  HEAPF64[$Ag_i >> 3] = +HEAPF64[$Ag_i >> 3] - +HEAPF64[$a >> 3] * +HEAPF64[$I >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 _gsl_sf_complex_log_e($9 + 7.5, +HEAPF64[$1 >> 3], $log1_r, $log1_i) | 0;
 _gsl_sf_complex_log_e(+HEAPF64[$Ag_r >> 3], +HEAPF64[$Ag_i >> 3], $logAg_r, $logAg_i) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$0 >> 3] + .5) * +HEAPF64[$log1_r >> 3] - +HEAPF64[$1 >> 3] * +HEAPF64[$log1_i >> 3] - (+HEAPF64[$0 >> 3] + 7.5) + .9189385332046728 + +HEAPF64[$logAg_r >> 3];
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$log1_r >> 3] + (+HEAPF64[$0 >> 3] + .5) * +HEAPF64[$log1_i >> 3] - +HEAPF64[$1 >> 3] + +HEAPF64[$logAg_i >> 3];
 $72 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 8.881784197001252e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $72;
 $78 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 8.881784197001252e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $78;
 HEAPF64[$yi_tmp_val >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3];
 HEAPF64[$yi_tmp_err >> 3] = +HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3];
 _gsl_sf_angle_restrict_symm_err_e(+HEAPF64[$yi_tmp_val >> 3], HEAP32[$3 >> 2] | 0) | 0;
 $90 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$90 >> 3] = +HEAPF64[$90 >> 3] + +HEAPF64[$yi_tmp_err >> 3];
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_bessel_jl_array($lmax, $x, $result_array) {
 $lmax = $lmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $70 = 0, $71 = 0, $ell = 0, $j = 0, $j1 = 0, $jell = 0, $jellm1 = 0, $jellp1 = 0, $r_jell = 0, $r_jellp1 = 0, $stat_0 = 0, $stat_1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 92 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 84 | 0;
 $j = sp + 80 | 0;
 $j1 = sp + 76 | 0;
 $r_jellp1 = sp + 40 | 0;
 $r_jell = sp + 24 | 0;
 $stat_0 = sp + 72 | 0;
 $stat_1 = sp + 68 | 0;
 $jellp1 = sp + 16 | 0;
 $jell = sp + 8 | 0;
 $jellm1 = sp;
 $ell = sp + 64 | 0;
 HEAP32[$1 >> 2] = $lmax;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result_array;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] < 0.0)) {
  if (+HEAPF64[$2 >> 3] == 0.0) {
   HEAP32[$j1 >> 2] = 1;
   while (1) {
    if ((HEAP32[$j1 >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$j1 >> 2] << 3) >> 3] = 0.0;
    HEAP32[$j1 >> 2] = (HEAP32[$j1 >> 2] | 0) + 1;
   }
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
   HEAP32[$0 >> 2] = 0;
   $71 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $71 | 0;
  }
  HEAP32[$stat_0 >> 2] = _gsl_sf_bessel_jl_e((HEAP32[$1 >> 2] | 0) + 1 | 0, +HEAPF64[$2 >> 3], $r_jellp1) | 0;
  HEAP32[$stat_1 >> 2] = _gsl_sf_bessel_jl_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $r_jell) | 0;
  HEAPF64[$jellp1 >> 3] = +HEAPF64[$r_jellp1 >> 3];
  HEAPF64[$jell >> 3] = +HEAPF64[$r_jell >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3] = +HEAPF64[$jell >> 3];
  HEAP32[$ell >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) < 1) break;
   HEAPF64[$jellm1 >> 3] = -+HEAPF64[$jellp1 >> 3] + +((HEAP32[$ell >> 2] << 1) + 1 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$jell >> 3];
   HEAPF64[$jellp1 >> 3] = +HEAPF64[$jell >> 3];
   HEAPF64[$jell >> 3] = +HEAPF64[$jellm1 >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) - 1 << 3) >> 3] = +HEAPF64[$jellm1 >> 3];
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + -1;
  }
  if (HEAP32[$stat_0 >> 2] | 0) $70 = HEAP32[$stat_0 >> 2] | 0; else $70 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $70;
  $71 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3] = 0.0;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 _gsl_error(15888, 15856, 254, 1);
 HEAP32[$0 >> 2] = 1;
 $71 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $71 | 0;
}
function _gsl_sf_ellint_D_e($phi, $k, $n, $mode, $result) {
 $phi = +$phi;
 $k = +$k;
 $n = +$n;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $43 = 0.0, $5 = 0, $50 = 0.0, $63 = 0, $68 = 0.0, $73 = 0, $83 = 0, $84 = 0, $nc = 0, $phi_red = 0, $rd = 0, $rd1 = 0, $rdstatus = 0, $sin2_phi = 0, $sin3_phi = 0, $sin_phi = 0, $status = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 128 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $4 = sp + 124 | 0;
 $5 = sp + 120 | 0;
 $nc = sp + 80 | 0;
 $phi_red = sp + 72 | 0;
 $sin_phi = sp + 64 | 0;
 $sin2_phi = sp + 56 | 0;
 $sin3_phi = sp + 48 | 0;
 $x = sp + 40 | 0;
 $y = sp + 32 | 0;
 $rd = sp + 16 | 0;
 $status = sp + 116 | 0;
 $rd1 = sp;
 $rdstatus = sp + 112 | 0;
 HEAPF64[$1 >> 3] = $phi;
 HEAPF64[$2 >> 3] = $k;
 HEAPF64[sp + 88 >> 3] = $n;
 HEAP32[$4 >> 2] = $mode;
 HEAP32[$5 >> 2] = $result;
 HEAPF64[$nc >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] / 3.141592653589793 + .5));
 HEAPF64[$phi_red >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$nc >> 3] * 3.141592653589793;
 HEAPF64[$1 >> 3] = +HEAPF64[$phi_red >> 3];
 HEAPF64[$sin_phi >> 3] = +Math_sin(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$sin2_phi >> 3] = +HEAPF64[$sin_phi >> 3] * +HEAPF64[$sin_phi >> 3];
 HEAPF64[$sin3_phi >> 3] = +HEAPF64[$sin2_phi >> 3] * +HEAPF64[$sin_phi >> 3];
 HEAPF64[$x >> 3] = 1.0 - +HEAPF64[$sin2_phi >> 3];
 HEAPF64[$y >> 3] = 1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$sin2_phi >> 3];
 HEAP32[$status >> 2] = _gsl_sf_ellint_RD_e(+HEAPF64[$x >> 3], +HEAPF64[$y >> 3], 1.0, HEAP32[$4 >> 2] | 0, $rd) | 0;
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$sin3_phi >> 3] / 3.0 * +HEAPF64[$rd >> 3];
 $43 = +Math_abs(+(+HEAPF64[HEAP32[$5 >> 2] >> 3])) * 2.220446049250313e-16;
 $50 = $43 + +Math_abs(+(+HEAPF64[$sin3_phi >> 3] / 3.0 * +HEAPF64[$rd + 8 >> 3]));
 HEAPF64[(HEAP32[$5 >> 2] | 0) + 8 >> 3] = $50;
 if (+HEAPF64[$nc >> 3] == 0.0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $84 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $84 | 0;
 }
 HEAP32[$rdstatus >> 2] = _gsl_sf_ellint_Dcomp_e(+HEAPF64[$2 >> 3], HEAP32[$4 >> 2] | 0, $rd1) | 0;
 $63 = HEAP32[$5 >> 2] | 0;
 HEAPF64[$63 >> 3] = +HEAPF64[$63 >> 3] + +HEAPF64[$nc >> 3] * 2.0 * +HEAPF64[$rd1 >> 3];
 $68 = +Math_abs(+(+HEAPF64[$nc >> 3])) * 2.0;
 $73 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAPF64[$73 >> 3] = +HEAPF64[$73 >> 3] + $68 * +HEAPF64[$rd1 + 8 >> 3];
 if (HEAP32[$status >> 2] | 0) $83 = HEAP32[$status >> 2] | 0; else $83 = (HEAP32[$rdstatus >> 2] | 0) != 0 ? HEAP32[$rdstatus >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $83;
 $84 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $84 | 0;
}
function _hyperg_U_small_ab($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $17 = 0.0, $2 = 0, $23 = 0.0, $25 = 0, $3 = 0, $35 = 0.0, $4 = 0, $42 = 0.0, $67 = 0.0, $70 = 0.0, $74 = 0, $80 = 0.0, $82 = 0, $91 = 0, $asymp = 0, $p = 0, $stat_asymp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 52 | 0;
 $p = sp + 16 | 0;
 $asymp = sp;
 $stat_asymp = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == -1.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = -+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3];
  $13 = +Math_abs(+(+HEAPF64[$2 >> 3]));
  $17 = ($13 + +Math_abs(+(+HEAPF64[$3 >> 3]))) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $17;
  $23 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $25 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$25 >> 3] = +HEAPF64[$25 >> 3] + $23;
  HEAP32[$0 >> 2] = 0;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 $35 = +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$1 >> 3]))), 1.0);
 $42 = $35 * +_GSL_MAX_DBL(+(+Math_abs(+(+HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3]))), 1.0);
 if ($42 < +Math_abs(+(+HEAPF64[$3 >> 3])) * .99) {
  HEAPF64[$p >> 3] = +Math_pow(+(+HEAPF64[$3 >> 3]), +-+HEAPF64[$1 >> 3]);
  HEAP32[$stat_asymp >> 2] = _hyperg_zaU_asymp(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $asymp) | 0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$asymp >> 3] * +HEAPF64[$p >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$asymp + 8 >> 3] * +HEAPF64[$p >> 3];
  $67 = +Math_abs(+(+HEAPF64[$asymp >> 3])) * 2.220446049250313e-16;
  $70 = $67 * +Math_abs(+(+HEAPF64[$1 >> 3]));
  $74 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$74 >> 3] = +HEAPF64[$74 >> 3] + $70 * +HEAPF64[$p >> 3];
  $80 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $82 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$82 >> 3] = +HEAPF64[$82 >> 3] + $80;
  HEAP32[$0 >> 2] = HEAP32[$stat_asymp >> 2];
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 } else {
  HEAP32[$0 >> 2] = _hyperg_U_series(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $91 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 return 0;
}
function _gsl_ran_landau($r) {
 $r = $r | 0;
 var $0 = 0, $128 = 0.0, $15 = 0, $32 = 0, $70 = 0.0, $99 = 0.0, $I = 0, $RANLAN = 0, $U = 0, $V = 0, $X = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 36 | 0;
 $X = sp + 24 | 0;
 $U = sp + 16 | 0;
 $V = sp + 8 | 0;
 $RANLAN = sp;
 $I = sp + 32 | 0;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$X >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0);
 HEAPF64[$U >> 3] = +HEAPF64[$X >> 3] * 1.0e3;
 HEAP32[$I >> 2] = ~~+HEAPF64[$U >> 3];
 HEAPF64[$U >> 3] = +HEAPF64[$U >> 3] - +(HEAP32[$I >> 2] | 0);
 $15 = HEAP32[$I >> 2] | 0;
 if ((HEAP32[$I >> 2] | 0) >= 70 & (HEAP32[$I >> 2] | 0) <= 800) {
  HEAPF64[$RANLAN >> 3] = +HEAPF64[69184 + ($15 << 3) >> 3] + +HEAPF64[$U >> 3] * (+HEAPF64[69184 + ((HEAP32[$I >> 2] | 0) + 1 << 3) >> 3] - +HEAPF64[69184 + (HEAP32[$I >> 2] << 3) >> 3]);
  $128 = +HEAPF64[$RANLAN >> 3];
  STACKTOP = sp;
  return +$128;
 }
 $32 = HEAP32[$I >> 2] | 0;
 if (($15 | 0) >= 7 & (HEAP32[$I >> 2] | 0) <= 980) {
  HEAPF64[$RANLAN >> 3] = +HEAPF64[69184 + ($32 << 3) >> 3] + +HEAPF64[$U >> 3] * (+HEAPF64[69184 + ((HEAP32[$I >> 2] | 0) + 1 << 3) >> 3] - +HEAPF64[69184 + (HEAP32[$I >> 2] << 3) >> 3] - (1.0 - +HEAPF64[$U >> 3]) * .25 * (+HEAPF64[69184 + ((HEAP32[$I >> 2] | 0) + 2 << 3) >> 3] - +HEAPF64[69184 + ((HEAP32[$I >> 2] | 0) + 1 << 3) >> 3] - +HEAPF64[69184 + (HEAP32[$I >> 2] << 3) >> 3] + +HEAPF64[69184 + ((HEAP32[$I >> 2] | 0) - 1 << 3) >> 3]));
  $128 = +HEAPF64[$RANLAN >> 3];
  STACKTOP = sp;
  return +$128;
 }
 $70 = +HEAPF64[$X >> 3];
 if (($32 | 0) < 7) {
  HEAPF64[$V >> 3] = +Math_log(+$70);
  HEAPF64[$U >> 3] = 1.0 / +HEAPF64[$V >> 3];
  HEAPF64[$RANLAN >> 3] = ((+HEAPF64[$U >> 3] * 17.0854528 + 34.5213058) * +HEAPF64[$U >> 3] + .9985895) / ((+HEAPF64[$U >> 3] * 4.01244582 + 34.1760202) * +HEAPF64[$U >> 3] + 1.0) * (-+Math_log(+(-.91893853 - +HEAPF64[$V >> 3])) - 1.0);
  $128 = +HEAPF64[$RANLAN >> 3];
  STACKTOP = sp;
  return +$128;
 }
 HEAPF64[$U >> 3] = 1.0 - $70;
 HEAPF64[$V >> 3] = +HEAPF64[$U >> 3] * +HEAPF64[$U >> 3];
 $99 = +HEAPF64[$U >> 3];
 if (+HEAPF64[$X >> 3] <= .999) {
  HEAPF64[$RANLAN >> 3] = (263.991156 * $99 + 1.00060006 + +HEAPF64[$V >> 3] * 4373.20068) / ((+HEAPF64[$U >> 3] * 257.368075 + 1.0 + +HEAPF64[$V >> 3] * 3414.48018) * +HEAPF64[$U >> 3]);
  $128 = +HEAPF64[$RANLAN >> 3];
  STACKTOP = sp;
  return +$128;
 } else {
  HEAPF64[$RANLAN >> 3] = (6075.14119 * $99 + 1.00001538 + +HEAPF64[$V >> 3] * 734266.409) / ((+HEAPF64[$U >> 3] * 6065.11919 + 1.0 + +HEAPF64[$V >> 3] * 694021.044) * +HEAPF64[$U >> 3]);
  $128 = +HEAPF64[$RANLAN >> 3];
  STACKTOP = sp;
  return +$128;
 }
 return 0.0;
}
function _gsl_sf_bessel_K1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $39 = 0.0, $49 = 0.0, $51 = 0, $65 = 0.0, $68 = 0.0, $84 = 0, $85 = 0, $I1 = 0, $K1_scaled = 0, $c = 0, $lx = 0, $stat_I1 = 0, $stat_K1 = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 76 | 0;
 $lx = sp + 48 | 0;
 $stat_I1 = sp + 72 | 0;
 $I1 = sp + 32 | 0;
 $c = sp + 16 | 0;
 $K1_scaled = sp;
 $stat_K1 = sp + 68 | 0;
 $stat_e = sp + 64 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(13304, 13320, 180, 1);
  HEAP32[$0 >> 2] = 1;
  $85 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $85 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 4.450147717014403e-308) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(13336, 13320, 183, 16);
  HEAP32[$0 >> 2] = 16;
  $85 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $85 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] <= 2.0) {
  HEAPF64[$lx >> 3] = +Math_log(+$15);
  _cheb_eval_e122(13824, +HEAPF64[$1 >> 3] * .5 * +HEAPF64[$1 >> 3] - 1.0, $c) | 0;
  HEAP32[$stat_I1 >> 2] = _gsl_sf_bessel_I1_e(+HEAPF64[$1 >> 3], $I1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$lx >> 3] - .6931471805599453) * +HEAPF64[$I1 >> 3] + (+HEAPF64[$c >> 3] + .75) / +HEAPF64[$1 >> 3];
  $39 = +Math_abs(+(+HEAPF64[$lx >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$c + 8 >> 3] / +HEAPF64[$1 >> 3] + $39 * +HEAPF64[$I1 + 8 >> 3];
  $49 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $51 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$51 >> 3] = +HEAPF64[$51 >> 3] + $49;
  HEAP32[$0 >> 2] = HEAP32[$stat_I1 >> 2];
  $85 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $85 | 0;
 }
 HEAP32[$stat_K1 >> 2] = _gsl_sf_bessel_K1_scaled_e($15, $K1_scaled) | 0;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(-+HEAPF64[$1 >> 3], 0.0, +HEAPF64[$K1_scaled >> 3], +HEAPF64[$K1_scaled + 8 >> 3], HEAP32[$2 >> 2] | 0) | 0;
 $65 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
 $68 = +Math_abs(+(+HEAPF64[$1 >> 3])) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $65 * ($68 + +HEAPF64[$K1_scaled + 8 >> 3] / +HEAPF64[$K1_scaled >> 3]);
 if (HEAP32[$stat_e >> 2] | 0) $84 = HEAP32[$stat_e >> 2] | 0; else $84 = (HEAP32[$stat_K1 >> 2] | 0) != 0 ? HEAP32[$stat_K1 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $84;
 $85 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $85 | 0;
}
function _gsl_sf_multiply_e($x, $y, $result) {
 $x = +$x;
 $y = +$y;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $30 = 0.0, $34 = 0.0, $39 = 0.0, $52 = 0.0, $57 = 0.0, $67 = 0, $ax = 0, $ay = 0, $f = 0, $max = 0, $min = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 56 | 0;
 $ax = sp + 32 | 0;
 $ay = sp + 24 | 0;
 $f = sp + 16 | 0;
 $min = sp + 8 | 0;
 $max = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$ay >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 if (!(+HEAPF64[$1 >> 3] == 0.0)) if (!(+HEAPF64[$2 >> 3] == 0.0)) {
  if (+HEAPF64[$ax >> 3] <= 1.0) {
   if (!(+HEAPF64[$ay >> 3] >= 1.0)) label = 6;
  } else label = 6;
  do if ((label | 0) == 6) {
   if (+HEAPF64[$ay >> 3] <= 1.0) if (+HEAPF64[$ax >> 3] >= 1.0) break;
   HEAPF64[$f >> 3] = .9999999999999996;
   $34 = +Math_abs(+(+HEAPF64[$1 >> 3]));
   HEAPF64[$min >> 3] = +_GSL_MIN_DBL(+$34, +(+Math_abs(+(+HEAPF64[$2 >> 3]))));
   $39 = +Math_abs(+(+HEAPF64[$1 >> 3]));
   HEAPF64[$max >> 3] = +_GSL_MAX_DBL(+$39, +(+Math_abs(+(+HEAPF64[$2 >> 3]))));
   if (!(+HEAPF64[$max >> 3] < 1.2067027136948336e+154)) if (!(+HEAPF64[$min >> 3] < 1.797693134862315e+308 / +HEAPF64[$max >> 3])) {
    HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
    HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
    _gsl_error(29360, 29344, 61, 16);
    HEAP32[$0 >> 2] = 16;
    $67 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $67 | 0;
   }
   $52 = +_gsl_coerce_double(+(+HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3]));
   HEAPF64[HEAP32[$3 >> 2] >> 3] = $52;
   $57 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $57;
   if (+Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) < 2.2250738585072014e-308) {
    _gsl_error(29328, 29344, 57, 15);
    HEAP32[$0 >> 2] = 15;
    $67 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $67 | 0;
   } else {
    HEAP32[$0 >> 2] = 0;
    $67 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $67 | 0;
   }
  } while (0);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3];
  $30 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $30;
  HEAP32[$0 >> 2] = 0;
  $67 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
 HEAP32[$0 >> 2] = 0;
 $67 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $67 | 0;
}
function _gsl_sf_log_1plusx_mx_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $44 = 0.0, $49 = 0, $50 = 0.0, $79 = 0.0, $83 = 0.0, $86 = 0, $c = 0, $lterm = 0, $t = 0, $t1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 124 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 120 | 0;
 $t = sp + 32 | 0;
 $t1 = sp + 24 | 0;
 $c = sp + 8 | 0;
 $lterm = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= -1.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(53872, 53888, 209, 1);
  HEAP32[$0 >> 2] = 1;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 if (+Math_abs(+(+HEAPF64[$1 >> 3])) < .000740095979741405) {
  HEAPF64[sp + 104 >> 3] = -.5;
  HEAPF64[sp + 96 >> 3] = .3333333333333333;
  HEAPF64[sp + 88 >> 3] = -.25;
  HEAPF64[sp + 80 >> 3] = .2;
  HEAPF64[sp + 72 >> 3] = -.16666666666666666;
  HEAPF64[sp + 64 >> 3] = .14285714285714285;
  HEAPF64[sp + 56 >> 3] = -.125;
  HEAPF64[sp + 48 >> 3] = .1111111111111111;
  HEAPF64[sp + 40 >> 3] = -.1;
  HEAPF64[$t >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * -.1 + .1111111111111111) + -.125) + .14285714285714285) + -.16666666666666666;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * +HEAPF64[$t >> 3] + .2) + -.25) + .3333333333333333) + -.5);
  $44 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $44;
  HEAP32[$0 >> 2] = 0;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 $49 = +Math_abs(+(+HEAPF64[$1 >> 3])) < .5;
 $50 = +HEAPF64[$1 >> 3];
 if ($49) {
  HEAPF64[$t1 >> 3] = (8.0 * $50 + 1.0) * .5 / (+HEAPF64[$1 >> 3] + 2.0);
  _cheb_eval_e519(54192, +HEAPF64[$t1 >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$c >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$c + 8 >> 3];
  HEAP32[$0 >> 2] = 0;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 } else {
  HEAPF64[$lterm >> 3] = +Math_log(+(1.0 + $50));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$lterm >> 3] - +HEAPF64[$1 >> 3];
  $79 = +Math_abs(+(+HEAPF64[$lterm >> 3]));
  $83 = ($79 + +Math_abs(+(+HEAPF64[$1 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $83;
  HEAP32[$0 >> 2] = 0;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_i2_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $37 = 0.0, $50 = 0.0, $81 = 0.0, $84 = 0, $ax = 0, $ex = 0, $pre = 0, $sum = 0, $x2 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 96 | 0;
 $ax = sp + 80 | 0;
 $y = sp + 72 | 0;
 $sum = sp + 24 | 0;
 $pre = sp + 16 | 0;
 $ex = sp + 8 | 0;
 $x2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $84 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $84 | 0;
 }
 if (+HEAPF64[$ax >> 3] < 5.966672584960166e-154) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(15616, 15632, 148, 15);
  HEAP32[$0 >> 2] = 15;
  $84 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $84 | 0;
 }
 if (+HEAPF64[$ax >> 3] < .25) {
  HEAPF64[$y >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[sp + 64 >> 3] = .07142857142857142;
  HEAPF64[sp + 56 >> 3] = .001984126984126984;
  HEAPF64[sp + 48 >> 3] = 30062530062530064.0e-21;
  HEAPF64[sp + 40 >> 3] = 2.8906278906278904e-7;
  HEAPF64[sp + 32 >> 3] = 1.9270852604185937e-9;
  HEAPF64[$sum >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * 1.9270852604185937e-9 + 2.8906278906278904e-7) + 30062530062530064.0e-21) + .001984126984126984) + .07142857142857142) + 1.0;
  $37 = +Math_exp(+-+HEAPF64[$ax >> 3]);
  HEAPF64[$pre >> 3] = $37 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 15.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$sum >> 3];
  $50 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $50;
  HEAP32[$0 >> 2] = 0;
  $84 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $84 | 0;
 } else {
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$ax >> 3] * -2.0));
  HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = ((+HEAPF64[$x2 >> 3] + 3.0) * (1.0 - +HEAPF64[$ex >> 3]) - +HEAPF64[$ax >> 3] * 3.0 * (+HEAPF64[$ex >> 3] + 1.0)) * .5 / (+HEAPF64[$ax >> 3] * +HEAPF64[$ax >> 3] * +HEAPF64[$ax >> 3]);
  $81 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $81;
  HEAP32[$0 >> 2] = 0;
  $84 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $84 | 0;
 }
 return 0;
}
function _fd_whiz($term, $iterm, $qnum, $qden, $result, $s) {
 $term = +$term;
 $iterm = $iterm | 0;
 $qnum = $qnum | 0;
 $qden = $qden | 0;
 $result = $result | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $c = 0, $factor = 0, $j = 0, $ratio = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 36 | 0;
 $factor = sp + 16 | 0;
 $ratio = sp + 8 | 0;
 $j = sp + 32 | 0;
 $c = sp;
 HEAPF64[$0 >> 3] = $term;
 HEAP32[$1 >> 2] = $iterm;
 HEAP32[$2 >> 2] = $qnum;
 HEAP32[$3 >> 2] = $qden;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$5 >> 2] = $s;
 if (!(HEAP32[$1 >> 2] | 0)) HEAPF64[HEAP32[$5 >> 2] >> 3] = 0.0;
 $10 = HEAP32[$5 >> 2] | 0;
 HEAPF64[$10 >> 3] = +HEAPF64[$10 >> 3] + +HEAPF64[$0 >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3] = 1.0 / (+HEAPF64[$0 >> 3] * (+(HEAP32[$1 >> 2] | 0) + 1.0) * (+(HEAP32[$1 >> 2] | 0) + 1.0));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3] = +HEAPF64[HEAP32[$5 >> 2] >> 3] * +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3];
 if ((HEAP32[$1 >> 2] | 0) <= 0) {
  $92 = HEAP32[$2 >> 2] | 0;
  $93 = +HEAPF64[$92 >> 3];
  $94 = HEAP32[$3 >> 2] | 0;
  $95 = +HEAPF64[$94 >> 3];
  $96 = $93 / $95;
  $97 = HEAP32[$4 >> 2] | 0;
  HEAPF64[$97 >> 3] = $96;
  STACKTOP = sp;
  return 0;
 }
 HEAPF64[$factor >> 3] = 1.0;
 HEAPF64[$ratio >> 3] = +(HEAP32[$1 >> 2] | 0) / (+(HEAP32[$1 >> 2] | 0) + 1.0);
 HEAP32[$j >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) < 0) break;
  HEAPF64[$c >> 3] = +HEAPF64[$factor >> 3] * (+(HEAP32[$j >> 2] | 0) + 1.0) / (+(HEAP32[$1 >> 2] | 0) + 1.0);
  HEAPF64[$factor >> 3] = +HEAPF64[$factor >> 3] * +HEAPF64[$ratio >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3] = +HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) + 1 << 3) >> 3] - +HEAPF64[$c >> 3] * +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3] = +HEAPF64[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) + 1 << 3) >> 3] - +HEAPF64[$c >> 3] * +HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 $92 = HEAP32[$2 >> 2] | 0;
 $93 = +HEAPF64[$92 >> 3];
 $94 = HEAP32[$3 >> 2] | 0;
 $95 = +HEAPF64[$94 >> 3];
 $96 = $93 / $95;
 $97 = HEAP32[$4 >> 2] | 0;
 HEAPF64[$97 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _ran_dirichlet_small($r, $K, $alpha, $theta) {
 $r = $r | 0;
 $K = $K | 0;
 $alpha = $alpha | 0;
 $theta = $theta | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $36 = 0.0, $48 = 0.0, $56 = 0.0, $79 = 0, $9 = 0.0, $i = 0, $norm = 0, $u = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $i = sp + 24 | 0;
 $norm = sp + 16 | 0;
 $umax = sp + 8 | 0;
 $u = sp;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $K;
 HEAP32[$2 >> 2] = $alpha;
 HEAP32[$3 >> 2] = $theta;
 HEAPF64[$norm >> 3] = 0.0;
 HEAPF64[$umax >> 3] = 0.0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  $9 = +Math_log(+(+_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0)));
  HEAPF64[$u >> 3] = $9 / +HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] = +HEAPF64[$u >> 3];
  if (+HEAPF64[$u >> 3] > +HEAPF64[$umax >> 3]) label = 5; else if (!(HEAP32[$i >> 2] | 0)) label = 5;
  if ((label | 0) == 5) {
   label = 0;
   HEAPF64[$umax >> 3] = +HEAPF64[$u >> 3];
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  $36 = +Math_exp(+(+HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] - +HEAPF64[$umax >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] = $36;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  $48 = +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3];
  $56 = $48 * +_gsl_ran_gamma(HEAP32[$0 >> 2] | 0, +HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] + 1.0, 1.0);
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] = $56;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  $79 = (HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) | 0;
  HEAPF64[$79 >> 3] = +HEAPF64[$79 >> 3] / +HEAPF64[$norm >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _airy_mod_phase($x, $mode, $mod, $phase) {
 $x = +$x;
 $mode = $mode | 0;
 $mod = $mod | 0;
 $phase = $phase | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $47 = 0.0, $51 = 0.0, $58 = 0.0, $7 = 0.0, $70 = 0.0, $77 = 0.0, $80 = 0, $m = 0, $p = 0, $result_m = 0, $result_p = 0, $sqx = 0, $z = 0, $z1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 92 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 84 | 0;
 $4 = sp + 80 | 0;
 $result_m = sp + 56 | 0;
 $result_p = sp + 40 | 0;
 $m = sp + 32 | 0;
 $p = sp + 24 | 0;
 $sqx = sp + 16 | 0;
 $z = sp + 8 | 0;
 $z1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $mod;
 HEAP32[$4 >> 2] = $phase;
 $7 = +HEAPF64[$1 >> 3];
 do if (+HEAPF64[$1 >> 3] < -2.0) {
  HEAPF64[$z >> 3] = 16.0 / ($7 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) + 1.0;
  _cheb_eval_mode_e(4264, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_m) | 0;
  _cheb_eval_mode_e(3936, +HEAPF64[$z >> 3], HEAP32[$2 >> 2] | 0, $result_p) | 0;
 } else {
  if ($7 <= -1.0) {
   HEAPF64[$z1 >> 3] = (16.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) + 9.0) / 7.0;
   _cheb_eval_mode_e(3616, +HEAPF64[$z1 >> 3], HEAP32[$2 >> 2] | 0, $result_m) | 0;
   _cheb_eval_mode_e(3320, +HEAPF64[$z1 >> 3], HEAP32[$2 >> 2] | 0, $result_p) | 0;
   break;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(3040, 1408, 265, 1);
  HEAP32[$0 >> 2] = 1;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 } while (0);
 HEAPF64[$m >> 3] = +HEAPF64[$result_m >> 3] + .3125;
 HEAPF64[$p >> 3] = +HEAPF64[$result_p >> 3] + -.625;
 HEAPF64[$sqx >> 3] = +Math_sqrt(+-+HEAPF64[$1 >> 3]);
 $47 = +Math_sqrt(+(+HEAPF64[$m >> 3] / +HEAPF64[$sqx >> 3]));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = $47;
 $51 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 $58 = $51 * (+Math_abs(+(+HEAPF64[$result_m + 8 >> 3] / +HEAPF64[$result_m >> 3])) + 2.220446049250313e-16);
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $58;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = .7853981633974483 - +HEAPF64[$1 >> 3] * +HEAPF64[$sqx >> 3] * +HEAPF64[$p >> 3];
 $70 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3]));
 $77 = $70 * (+Math_abs(+(+HEAPF64[$result_p + 8 >> 3] / +HEAPF64[$result_p >> 3])) + 2.220446049250313e-16);
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $77;
 HEAP32[$0 >> 2] = 0;
 $80 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $80 | 0;
}
function _gsl_sf_Shi_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $33 = 0.0, $35 = 0, $57 = 0.0, $59 = 0, $70 = 0, $ax = 0, $result_E1 = 0, $result_Ei = 0, $result_c = 0, $status_E1 = 0, $status_Ei = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 80 | 0;
 $ax = sp + 48 | 0;
 $result_c = sp + 32 | 0;
 $result_Ei = sp + 16 | 0;
 $result_E1 = sp;
 $status_Ei = sp + 76 | 0;
 $status_E1 = sp + 72 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 56 >> 3] = 1.4901161193847656e-8;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$ax >> 3] < 1.4901161193847656e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 $13 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$ax >> 3] <= .375) {
  _cheb_eval_e605(58224, 128.0 * $13 * +HEAPF64[$1 >> 3] / 9.0 - 1.0, $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c >> 3] + 1.0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$result_c + 8 >> 3];
  $33 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $35 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$35 >> 3] = +HEAPF64[$35 >> 3] + $33;
  HEAP32[$0 >> 2] = 0;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 HEAP32[$status_Ei >> 2] = _gsl_sf_expint_Ei_e($13, $result_Ei) | 0;
 HEAP32[$status_E1 >> 2] = _gsl_sf_expint_E1_e(+HEAPF64[$1 >> 3], $result_E1) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$result_Ei >> 3] + +HEAPF64[$result_E1 >> 3]) * .5;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$result_Ei + 8 >> 3] + +HEAPF64[$result_E1 + 8 >> 3]) * .5;
 $57 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $59 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$59 >> 3] = +HEAPF64[$59 >> 3] + $57;
 if ((HEAP32[$status_Ei >> 2] | 0) == 15) if ((HEAP32[$status_E1 >> 2] | 0) == 15) {
  _gsl_error(58048, 58064, 88, 15);
  HEAP32[$0 >> 2] = 15;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 if ((HEAP32[$status_Ei >> 2] | 0) != 16) if ((HEAP32[$status_E1 >> 2] | 0) != 16) {
  HEAP32[$0 >> 2] = 0;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 _gsl_error(58072, 58064, 91, 16);
 HEAP32[$0 >> 2] = 16;
 $70 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $70 | 0;
}
function _gsl_sf_complex_cos_e($zr, $zi, $czr, $czi) {
 $zr = +$zr;
 $zi = +$zi;
 $czr = $czr | 0;
 $czi = $czi | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $18 = 0.0, $2 = 0, $25 = 0.0, $3 = 0, $31 = 0.0, $4 = 0, $49 = 0.0, $55 = 0.0, $62 = 0.0, $68 = 0.0, $7 = 0, $77 = 0, $8 = 0.0, $ch = 0, $ch_m1 = 0, $ex = 0, $sh = 0, $sh1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 60 | 0;
 $4 = sp + 56 | 0;
 $ch_m1 = sp + 32 | 0;
 $sh = sp + 24 | 0;
 $ex = sp + 16 | 0;
 $ch = sp + 8 | 0;
 $sh1 = sp;
 HEAPF64[$1 >> 3] = $zr;
 HEAPF64[$2 >> 3] = $zi;
 HEAP32[$3 >> 2] = $czr;
 HEAP32[$4 >> 2] = $czi;
 $7 = +Math_abs(+(+HEAPF64[$2 >> 3])) < 1.0;
 $8 = +HEAPF64[$2 >> 3];
 if ($7) {
  _sinh_series($8, $sh) | 0;
  _cosh_m1_series(+HEAPF64[$2 >> 3], $ch_m1) | 0;
  $11 = +Math_cos(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $11 * (+HEAPF64[$ch_m1 >> 3] + 1.0);
  $18 = -+Math_sin(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $18 * +HEAPF64[$sh >> 3];
  $25 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $25;
  $31 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $31;
  HEAP32[$0 >> 2] = 0;
  $77 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $77 | 0;
 }
 if (+Math_abs(+$8) < 709.782712893384) {
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$ch >> 3] = (+HEAPF64[$ex >> 3] + 1.0 / +HEAPF64[$ex >> 3]) * .5;
  HEAPF64[$sh1 >> 3] = (+HEAPF64[$ex >> 3] - 1.0 / +HEAPF64[$ex >> 3]) * .5;
  $49 = +Math_cos(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $49 * +HEAPF64[$ch >> 3];
  $55 = -+Math_sin(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $55 * +HEAPF64[$sh1 >> 3];
  $62 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $62;
  $68 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $68;
  HEAP32[$0 >> 2] = 0;
  $77 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $77 | 0;
 } else {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(61520, 61536, 402, 16);
  HEAP32[$0 >> 2] = 16;
  $77 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $77 | 0;
 }
 return 0;
}
function _gsl_sf_complex_sin_e($zr, $zi, $szr, $szi) {
 $zr = +$zr;
 $zi = +$zi;
 $szr = $szr | 0;
 $szi = $szi | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $17 = 0.0, $2 = 0, $24 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $48 = 0.0, $53 = 0.0, $60 = 0.0, $66 = 0.0, $7 = 0, $75 = 0, $8 = 0.0, $ch = 0, $ch_m1 = 0, $ex = 0, $sh = 0, $sh1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 60 | 0;
 $4 = sp + 56 | 0;
 $ch_m1 = sp + 32 | 0;
 $sh = sp + 24 | 0;
 $ex = sp + 16 | 0;
 $ch = sp + 8 | 0;
 $sh1 = sp;
 HEAPF64[$1 >> 3] = $zr;
 HEAPF64[$2 >> 3] = $zi;
 HEAP32[$3 >> 2] = $szr;
 HEAP32[$4 >> 2] = $szi;
 $7 = +Math_abs(+(+HEAPF64[$2 >> 3])) < 1.0;
 $8 = +HEAPF64[$2 >> 3];
 if ($7) {
  _sinh_series($8, $sh) | 0;
  _cosh_m1_series(+HEAPF64[$2 >> 3], $ch_m1) | 0;
  $11 = +Math_sin(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $11 * (+HEAPF64[$ch_m1 >> 3] + 1.0);
  $17 = +Math_cos(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $17 * +HEAPF64[$sh >> 3];
  $24 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $24;
  $30 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $30;
  HEAP32[$0 >> 2] = 0;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 if (+Math_abs(+$8) < 709.782712893384) {
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$ch >> 3] = (+HEAPF64[$ex >> 3] + 1.0 / +HEAPF64[$ex >> 3]) * .5;
  HEAPF64[$sh1 >> 3] = (+HEAPF64[$ex >> 3] - 1.0 / +HEAPF64[$ex >> 3]) * .5;
  $48 = +Math_sin(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $48 * +HEAPF64[$ch >> 3];
  $53 = +Math_cos(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $53 * +HEAPF64[$sh1 >> 3];
  $60 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $60;
  $66 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $66;
  HEAP32[$0 >> 2] = 0;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 } else {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(61520, 61536, 369, 16);
  HEAP32[$0 >> 2] = 16;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 return 0;
}
function _gsl_sf_lngamma_complex_e($zr, $zi, $lnr, $arg) {
 $zr = +$zr;
 $zi = +$zi;
 $lnr = $lnr | 0;
 $arg = $arg | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $35 = 0.0, $4 = 0, $52 = 0.0, $64 = 0, $7 = 0.0, $75 = 0, $a = 0, $b = 0, $lnsin_i = 0, $lnsin_r = 0, $stat_l = 0, $stat_r = 0, $stat_s = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 112 | 0;
 $4 = sp + 108 | 0;
 $x = sp + 72 | 0;
 $y = sp + 64 | 0;
 $a = sp + 48 | 0;
 $b = sp + 32 | 0;
 $lnsin_r = sp + 16 | 0;
 $lnsin_i = sp;
 $stat_l = sp + 104 | 0;
 $stat_s = sp + 100 | 0;
 $stat_r = sp + 96 | 0;
 HEAPF64[$1 >> 3] = $zr;
 HEAPF64[$2 >> 3] = $zi;
 HEAP32[$3 >> 2] = $lnr;
 HEAP32[$4 >> 2] = $arg;
 $7 = +HEAPF64[$1 >> 3];
 if (!(+HEAPF64[$1 >> 3] <= .5)) {
  HEAP32[$0 >> 2] = _lngamma_lanczos_complex($7, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 HEAPF64[$x >> 3] = 1.0 - $7;
 HEAPF64[$y >> 3] = -+HEAPF64[$2 >> 3];
 HEAP32[$stat_l >> 2] = _lngamma_lanczos_complex(+HEAPF64[$x >> 3], +HEAPF64[$y >> 3], $a, $b) | 0;
 HEAP32[$stat_s >> 2] = _gsl_sf_complex_logsin_e(+HEAPF64[$1 >> 3] * 3.141592653589793, +HEAPF64[$2 >> 3] * 3.141592653589793, $lnsin_r, $lnsin_i) | 0;
 if (HEAP32[$stat_s >> 2] | 0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(38384, 38400, 1417, 1);
  HEAP32[$0 >> 2] = 1;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.1447298858494002 - +HEAPF64[$lnsin_r >> 3] - +HEAPF64[$a >> 3];
 $35 = +HEAPF64[$lnsin_r + 8 >> 3] + +HEAPF64[$a + 8 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $35;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = -+HEAPF64[$lnsin_i >> 3] - +HEAPF64[$b >> 3];
 $52 = +HEAPF64[$lnsin_i + 8 >> 3] + +HEAPF64[$b + 8 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $52;
 HEAP32[$stat_r >> 2] = _gsl_sf_angle_restrict_symm_e(HEAP32[$4 >> 2] | 0) | 0;
 if (HEAP32[$stat_r >> 2] | 0) $64 = HEAP32[$stat_r >> 2] | 0; else $64 = (HEAP32[$stat_l >> 2] | 0) != 0 ? HEAP32[$stat_l >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $64;
 $75 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $75 | 0;
}
function _gsl_sf_log_1plusx_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $45 = 0.0, $50 = 0, $51 = 0.0, $67 = 0.0, $71 = 0.0, $76 = 0.0, $79 = 0, $c = 0, $t = 0, $t1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 116 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 112 | 0;
 $t = sp + 24 | 0;
 $t1 = sp + 16 | 0;
 $c = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= -1.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(53872, 53888, 170, 1);
  HEAP32[$0 >> 2] = 1;
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 if (+Math_abs(+(+HEAPF64[$1 >> 3])) < .002460783300575925) {
  HEAPF64[sp + 96 >> 3] = -.5;
  HEAPF64[sp + 88 >> 3] = .3333333333333333;
  HEAPF64[sp + 80 >> 3] = -.25;
  HEAPF64[sp + 72 >> 3] = .2;
  HEAPF64[sp + 64 >> 3] = -.16666666666666666;
  HEAPF64[sp + 56 >> 3] = .14285714285714285;
  HEAPF64[sp + 48 >> 3] = -.125;
  HEAPF64[sp + 40 >> 3] = .1111111111111111;
  HEAPF64[sp + 32 >> 3] = -.1;
  HEAPF64[$t >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * -.1 + .1111111111111111) + -.125) + .14285714285714285) + -.16666666666666666;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * +HEAPF64[$t >> 3] + .2) + -.25) + .3333333333333333) + -.5) + 1.0);
  $45 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $45;
  HEAP32[$0 >> 2] = 0;
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 $50 = +Math_abs(+(+HEAPF64[$1 >> 3])) < .5;
 $51 = +HEAPF64[$1 >> 3];
 if ($50) {
  HEAPF64[$t1 >> 3] = (8.0 * $51 + 1.0) * .5 / (+HEAPF64[$1 >> 3] + 2.0);
  _cheb_eval_e519(54392, +HEAPF64[$t1 >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$c >> 3];
  $67 = +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$c + 8 >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $67;
  HEAP32[$0 >> 2] = 0;
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 } else {
  $71 = +Math_log(+(1.0 + $51));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $71;
  $76 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $76;
  HEAP32[$0 >> 2] = 0;
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 return 0;
}
function _ran2_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $delta = 0, $h1 = 0, $h2 = 0, $j = 0, $state = 0, $t1 = 0, $t2 = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 36 | 0;
 $state = sp + 32 | 0;
 $x = sp + 28 | 0;
 $y = sp + 24 | 0;
 $h1 = sp + 20 | 0;
 $t1 = sp + 16 | 0;
 $h2 = sp + 12 | 0;
 $t2 = sp + 8 | 0;
 $j = sp + 4 | 0;
 $delta = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$y >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2];
 HEAP32[$h1 >> 2] = ((HEAP32[$x >> 2] | 0) >>> 0) / 53668 | 0;
 HEAP32[$t1 >> 2] = (((HEAP32[$x >> 2] | 0) - ((HEAP32[$h1 >> 2] | 0) * 53668 | 0) | 0) * 40014 | 0) - ((HEAP32[$h1 >> 2] | 0) * 12211 | 0);
 HEAP32[$h2 >> 2] = ((HEAP32[$y >> 2] | 0) >>> 0) / 52774 | 0;
 HEAP32[$t2 >> 2] = (((HEAP32[$y >> 2] | 0) - ((HEAP32[$h2 >> 2] | 0) * 52774 | 0) | 0) * 40692 | 0) - ((HEAP32[$h2 >> 2] | 0) * 3791 | 0);
 if ((HEAP32[$t1 >> 2] | 0) < 0) HEAP32[$t1 >> 2] = (HEAP32[$t1 >> 2] | 0) + 2147483563;
 if ((HEAP32[$t2 >> 2] | 0) < 0) HEAP32[$t2 >> 2] = (HEAP32[$t2 >> 2] | 0) + 2147483399;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$t1 >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = HEAP32[$t2 >> 2];
 HEAP32[$j >> 2] = ((HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] | 0) >>> 0) / 67108862 | 0;
 HEAP32[$delta >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 12 + (HEAP32[$j >> 2] << 2) >> 2] | 0) - (HEAP32[$t2 >> 2] | 0);
 if ((HEAP32[$delta >> 2] | 0) >= 1) {
  $55 = HEAP32[$delta >> 2] | 0;
  $56 = HEAP32[$state >> 2] | 0;
  $57 = $56 + 8 | 0;
  HEAP32[$57 >> 2] = $55;
  $58 = HEAP32[$t1 >> 2] | 0;
  $59 = HEAP32[$j >> 2] | 0;
  $60 = HEAP32[$state >> 2] | 0;
  $61 = $60 + 12 | 0;
  $62 = $61 + ($59 << 2) | 0;
  HEAP32[$62 >> 2] = $58;
  $63 = HEAP32[$state >> 2] | 0;
  $64 = $63 + 8 | 0;
  $65 = HEAP32[$64 >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 }
 HEAP32[$delta >> 2] = (HEAP32[$delta >> 2] | 0) + 2147483562;
 $55 = HEAP32[$delta >> 2] | 0;
 $56 = HEAP32[$state >> 2] | 0;
 $57 = $56 + 8 | 0;
 HEAP32[$57 >> 2] = $55;
 $58 = HEAP32[$t1 >> 2] | 0;
 $59 = HEAP32[$j >> 2] | 0;
 $60 = HEAP32[$state >> 2] | 0;
 $61 = $60 + 12 | 0;
 $62 = $61 + ($59 << 2) | 0;
 HEAP32[$62 >> 2] = $58;
 $63 = HEAP32[$state >> 2] | 0;
 $64 = $63 + 8 | 0;
 $65 = HEAP32[$64 >> 2] | 0;
 STACKTOP = sp;
 return $65 | 0;
}
function _gsl_ran_levy_skew($r, $c, $alpha, $beta) {
 $r = $r | 0;
 $c = +$c;
 $alpha = +$alpha;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $100 = 0.0, $2 = 0, $20 = 0.0, $26 = 0.0, $3 = 0, $32 = 0.0, $4 = 0, $56 = 0.0, $7 = 0, $74 = 0.0, $76 = 0.0, $80 = 0.0, $88 = 0.0, $B = 0, $S = 0, $V = 0, $W = 0, $X = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $V = sp + 40 | 0;
 $W = sp + 32 | 0;
 $X = sp + 24 | 0;
 $t = sp + 16 | 0;
 $B = sp + 8 | 0;
 $S = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $c;
 HEAPF64[$3 >> 3] = $alpha;
 HEAPF64[$4 >> 3] = $beta;
 $7 = HEAP32[$1 >> 2] | 0;
 if (+HEAPF64[$4 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = +_gsl_ran_levy($7, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3]);
  $100 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$100;
 }
 HEAPF64[$V >> 3] = (+_gsl_rng_uniform_pos($7) - .5) * 3.141592653589793;
 do HEAPF64[$W >> 3] = +_gsl_ran_exponential(HEAP32[$1 >> 2] | 0, 1.0); while (+HEAPF64[$W >> 3] == 0.0);
 $20 = +HEAPF64[$4 >> 3];
 if (+HEAPF64[$3 >> 3] == 1.0) {
  $26 = ($20 * +HEAPF64[$V >> 3] + 1.5707963267948966) * +Math_tan(+(+HEAPF64[$V >> 3]));
  $32 = +HEAPF64[$W >> 3] * 1.5707963267948966 * +Math_cos(+(+HEAPF64[$V >> 3]));
  HEAPF64[$X >> 3] = ($26 - +HEAPF64[$4 >> 3] * +Math_log(+($32 / (+HEAPF64[$4 >> 3] * +HEAPF64[$V >> 3] + 1.5707963267948966)))) / 1.5707963267948966;
  HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3] * (+HEAPF64[$X >> 3] + +HEAPF64[$4 >> 3] * +Math_log(+(+HEAPF64[$2 >> 3])) / 1.5707963267948966);
  $100 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$100;
 } else {
  HEAPF64[$t >> 3] = $20 * +Math_tan(+(+HEAPF64[$3 >> 3] * 1.5707963267948966));
  $56 = +Math_atan(+(+HEAPF64[$t >> 3]));
  HEAPF64[$B >> 3] = $56 / +HEAPF64[$3 >> 3];
  HEAPF64[$S >> 3] = +Math_pow(+(+HEAPF64[$t >> 3] * +HEAPF64[$t >> 3] + 1.0), +(1.0 / (+HEAPF64[$3 >> 3] * 2.0)));
  $74 = +HEAPF64[$S >> 3] * +Math_sin(+(+HEAPF64[$3 >> 3] * (+HEAPF64[$V >> 3] + +HEAPF64[$B >> 3])));
  $76 = +Math_cos(+(+HEAPF64[$V >> 3]));
  $80 = $74 / +Math_pow(+$76, +(1.0 / +HEAPF64[$3 >> 3]));
  $88 = +Math_cos(+(+HEAPF64[$V >> 3] - +HEAPF64[$3 >> 3] * (+HEAPF64[$V >> 3] + +HEAPF64[$B >> 3])));
  HEAPF64[$X >> 3] = $80 * +Math_pow(+($88 / +HEAPF64[$W >> 3]), +((1.0 - +HEAPF64[$3 >> 3]) / +HEAPF64[$3 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$X >> 3];
  $100 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$100;
 }
 return 0.0;
}
function _mt_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $119 = 0, $k = 0, $kk = 0, $mt = 0, $state = 0, $y = 0, $y1 = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $state = sp + 24 | 0;
 $k = sp + 20 | 0;
 $mt = sp + 16 | 0;
 $kk = sp + 12 | 0;
 $y = sp + 8 | 0;
 $y1 = sp + 4 | 0;
 $y2 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$mt >> 2] = HEAP32[$state >> 2];
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 2496 >> 2] | 0) >= 624) {
  HEAP32[$kk >> 2] = 0;
  while (1) {
   if ((HEAP32[$kk >> 2] | 0) >= 227) break;
   HEAP32[$y >> 2] = HEAP32[(HEAP32[$mt >> 2] | 0) + (HEAP32[$kk >> 2] << 2) >> 2] & -2147483648 | HEAP32[(HEAP32[$mt >> 2] | 0) + ((HEAP32[$kk >> 2] | 0) + 1 << 2) >> 2] & 2147483647;
   HEAP32[(HEAP32[$mt >> 2] | 0) + (HEAP32[$kk >> 2] << 2) >> 2] = HEAP32[(HEAP32[$mt >> 2] | 0) + ((HEAP32[$kk >> 2] | 0) + 397 << 2) >> 2] ^ (HEAP32[$y >> 2] | 0) >>> 1 ^ ((HEAP32[$y >> 2] & 1 | 0) != 0 ? -1727483681 : 0);
   HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
  }
  while (1) {
   if ((HEAP32[$kk >> 2] | 0) >= 623) break;
   HEAP32[$y1 >> 2] = HEAP32[(HEAP32[$mt >> 2] | 0) + (HEAP32[$kk >> 2] << 2) >> 2] & -2147483648 | HEAP32[(HEAP32[$mt >> 2] | 0) + ((HEAP32[$kk >> 2] | 0) + 1 << 2) >> 2] & 2147483647;
   HEAP32[(HEAP32[$mt >> 2] | 0) + (HEAP32[$kk >> 2] << 2) >> 2] = HEAP32[(HEAP32[$mt >> 2] | 0) + ((HEAP32[$kk >> 2] | 0) + -227 << 2) >> 2] ^ (HEAP32[$y1 >> 2] | 0) >>> 1 ^ ((HEAP32[$y1 >> 2] & 1 | 0) != 0 ? -1727483681 : 0);
   HEAP32[$kk >> 2] = (HEAP32[$kk >> 2] | 0) + 1;
  }
  HEAP32[$y2 >> 2] = HEAP32[(HEAP32[$mt >> 2] | 0) + 2492 >> 2] & -2147483648 | HEAP32[HEAP32[$mt >> 2] >> 2] & 2147483647;
  HEAP32[(HEAP32[$mt >> 2] | 0) + 2492 >> 2] = HEAP32[(HEAP32[$mt >> 2] | 0) + 1584 >> 2] ^ (HEAP32[$y2 >> 2] | 0) >>> 1 ^ ((HEAP32[$y2 >> 2] & 1 | 0) != 0 ? -1727483681 : 0);
  HEAP32[(HEAP32[$state >> 2] | 0) + 2496 >> 2] = 0;
 }
 HEAP32[$k >> 2] = HEAP32[(HEAP32[$mt >> 2] | 0) + (HEAP32[(HEAP32[$state >> 2] | 0) + 2496 >> 2] << 2) >> 2];
 HEAP32[$k >> 2] = HEAP32[$k >> 2] ^ (HEAP32[$k >> 2] | 0) >>> 11;
 HEAP32[$k >> 2] = HEAP32[$k >> 2] ^ HEAP32[$k >> 2] << 7 & -1658038656;
 HEAP32[$k >> 2] = HEAP32[$k >> 2] ^ HEAP32[$k >> 2] << 15 & -272236544;
 HEAP32[$k >> 2] = HEAP32[$k >> 2] ^ (HEAP32[$k >> 2] | 0) >>> 18;
 $119 = (HEAP32[$state >> 2] | 0) + 2496 | 0;
 HEAP32[$119 >> 2] = (HEAP32[$119 >> 2] | 0) + 1;
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}
function _gsl_sf_bessel_J0_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $46 = 0.0, $53 = 0.0, $63 = 0.0, $65 = 0, $78 = 0, $79 = 0, $ampl = 0, $ca = 0, $cp = 0, $ct = 0, $sqrty = 0, $stat_ca = 0, $stat_cp = 0, $stat_ct = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 100 | 0;
 $y = sp + 72 | 0;
 $z = sp + 64 | 0;
 $ca = sp + 48 | 0;
 $ct = sp + 32 | 0;
 $cp = sp + 16 | 0;
 $stat_ca = sp + 96 | 0;
 $stat_ct = sp + 92 | 0;
 $stat_cp = sp + 88 | 0;
 $sqrty = sp + 8 | 0;
 $ampl = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$y >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$y >> 3] < 2.9802322387695312e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$y >> 3];
  HEAP32[$0 >> 2] = 0;
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 $15 = +HEAPF64[$y >> 3];
 if (+HEAPF64[$y >> 3] <= 4.0) {
  HEAP32[$0 >> 2] = _cheb_eval_e100(12400, .125 * $15 * +HEAPF64[$y >> 3] - 1.0, HEAP32[$2 >> 2] | 0) | 0;
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 HEAPF64[$z >> 3] = 32.0 / ($15 * +HEAPF64[$y >> 3]) - 1.0;
 HEAP32[$stat_ca >> 2] = _cheb_eval_e100(14936, +HEAPF64[$z >> 3], $ca) | 0;
 HEAP32[$stat_ct >> 2] = _cheb_eval_e100(15160, +HEAPF64[$z >> 3], $ct) | 0;
 HEAP32[$stat_cp >> 2] = _gsl_sf_bessel_cos_pi4_e(+HEAPF64[$y >> 3], +HEAPF64[$ct >> 3] / +HEAPF64[$y >> 3], $cp) | 0;
 HEAPF64[$sqrty >> 3] = +Math_sqrt(+(+HEAPF64[$y >> 3]));
 HEAPF64[$ampl >> 3] = (+HEAPF64[$ca >> 3] + .75) / +HEAPF64[$sqrty >> 3];
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ampl >> 3] * +HEAPF64[$cp >> 3];
 $46 = +Math_abs(+(+HEAPF64[$cp >> 3]));
 $53 = +Math_abs(+(+HEAPF64[$ampl >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $46 * +HEAPF64[$ca + 8 >> 3] / +HEAPF64[$sqrty >> 3] + $53 * +HEAPF64[$cp + 8 >> 3];
 $63 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
 $65 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$65 >> 3] = +HEAPF64[$65 >> 3] + $63;
 do if (HEAP32[$stat_ca >> 2] | 0) $78 = HEAP32[$stat_ca >> 2] | 0; else if (HEAP32[$stat_ct >> 2] | 0) {
  $78 = HEAP32[$stat_ct >> 2] | 0;
  break;
 } else {
  $78 = (HEAP32[$stat_cp >> 2] | 0) != 0 ? HEAP32[$stat_cp >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $78;
 $79 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $79 | 0;
}
function _gsl_sf_bessel_i1_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $17 = 0.0, $2 = 0, $48 = 0.0, $69 = 0.0, $78 = 0, $ax = 0, $eax = 0, $ex = 0, $sum = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 92 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 88 | 0;
 $ax = sp + 72 | 0;
 $eax = sp + 64 | 0;
 $y = sp + 56 | 0;
 $sum = sp + 8 | 0;
 $ex = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $78 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 }
 if (+HEAPF64[$ax >> 3] < 6.675221575521604e-308) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(15616, 15632, 111, 15);
  HEAP32[$0 >> 2] = 15;
  $78 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 }
 $17 = +HEAPF64[$ax >> 3];
 if (+HEAPF64[$ax >> 3] < .25) {
  HEAPF64[$eax >> 3] = +Math_exp(+-$17);
  HEAPF64[$y >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[sp + 48 >> 3] = .1;
  HEAPF64[sp + 40 >> 3] = .0035714285714285713;
  HEAPF64[sp + 32 >> 3] = 6613756613756614.0e-20;
  HEAPF64[sp + 24 >> 3] = 7.515632515632515e-7;
  HEAPF64[sp + 16 >> 3] = 5.7812557812557815e-9;
  HEAPF64[$sum >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * 5.7812557812557815e-9 + 7.515632515632515e-7) + 6613756613756614.0e-20) + .0035714285714285713) + .1) + 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$eax >> 3] * +HEAPF64[$1 >> 3] / 3.0 * +HEAPF64[$sum >> 3];
  $48 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $48;
  HEAP32[$0 >> 2] = 0;
  $78 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 }
 HEAPF64[$ex >> 3] = +Math_exp(+(-2.0 * $17));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$ax >> 3] * (+HEAPF64[$ex >> 3] + 1.0) - (1.0 - +HEAPF64[$ex >> 3])) * .5 / (+HEAPF64[$ax >> 3] * +HEAPF64[$ax >> 3]);
 $69 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $69;
 if (+HEAPF64[$1 >> 3] < 0.0) HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[HEAP32[$2 >> 2] >> 3];
 HEAP32[$0 >> 2] = 0;
 $78 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $78 | 0;
}
function _gsl_sf_ellint_F_e($phi, $k, $mode, $result) {
 $phi = +$phi;
 $k = +$k;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $38 = 0.0, $4 = 0, $44 = 0.0, $57 = 0, $62 = 0.0, $67 = 0, $77 = 0, $78 = 0, $nc = 0, $phi_red = 0, $rf = 0, $rk = 0, $rkstatus = 0, $sin2_phi = 0, $sin_phi = 0, $status = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 108 | 0;
 $4 = sp + 104 | 0;
 $nc = sp + 72 | 0;
 $phi_red = sp + 64 | 0;
 $sin_phi = sp + 56 | 0;
 $sin2_phi = sp + 48 | 0;
 $x = sp + 40 | 0;
 $y = sp + 32 | 0;
 $rf = sp + 16 | 0;
 $status = sp + 100 | 0;
 $rk = sp;
 $rkstatus = sp + 96 | 0;
 HEAPF64[$1 >> 3] = $phi;
 HEAPF64[$2 >> 3] = $k;
 HEAP32[$3 >> 2] = $mode;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$nc >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] / 3.141592653589793 + .5));
 HEAPF64[$phi_red >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$nc >> 3] * 3.141592653589793;
 HEAPF64[$1 >> 3] = +HEAPF64[$phi_red >> 3];
 HEAPF64[$sin_phi >> 3] = +Math_sin(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$sin2_phi >> 3] = +HEAPF64[$sin_phi >> 3] * +HEAPF64[$sin_phi >> 3];
 HEAPF64[$x >> 3] = 1.0 - +HEAPF64[$sin2_phi >> 3];
 HEAPF64[$y >> 3] = 1.0 - +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$sin2_phi >> 3];
 HEAP32[$status >> 2] = _gsl_sf_ellint_RF_e(+HEAPF64[$x >> 3], +HEAPF64[$y >> 3], 1.0, HEAP32[$3 >> 2] | 0, $rf) | 0;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sin_phi >> 3] * +HEAPF64[$rf >> 3];
 $38 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 2.220446049250313e-16;
 $44 = $38 + +Math_abs(+(+HEAPF64[$sin_phi >> 3] * +HEAPF64[$rf + 8 >> 3]));
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $44;
 if (+HEAPF64[$nc >> 3] == 0.0) {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $78 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 }
 HEAP32[$rkstatus >> 2] = _gsl_sf_ellint_Kcomp_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, $rk) | 0;
 $57 = HEAP32[$4 >> 2] | 0;
 HEAPF64[$57 >> 3] = +HEAPF64[$57 >> 3] + +HEAPF64[$nc >> 3] * 2.0 * +HEAPF64[$rk >> 3];
 $62 = +Math_abs(+(+HEAPF64[$nc >> 3])) * 2.0;
 $67 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$67 >> 3] = +HEAPF64[$67 >> 3] + $62 * +HEAPF64[$rk + 8 >> 3];
 if (HEAP32[$status >> 2] | 0) $77 = HEAP32[$status >> 2] | 0; else $77 = (HEAP32[$rkstatus >> 2] | 0) != 0 ? HEAP32[$rkstatus >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $77;
 $78 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $78 | 0;
}
function _backward_recurse_s($aa, $qq, $xx, $ff, $gx, $even_odd, $ni) {
 $aa = +$aa;
 $qq = +$qq;
 $xx = +$xx;
 $ff = $ff | 0;
 $gx = $gx | 0;
 $even_odd = $even_odd | 0;
 $ni = $ni | 0;
 var $0 = 0, $1 = 0, $14 = 0, $2 = 0, $27 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $61 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $g1 = 0, $ii = 0, $nn = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $ii = sp + 36 | 0;
 $nn = sp + 32 | 0;
 $g1 = sp;
 HEAPF64[$0 >> 3] = $aa;
 HEAPF64[$1 >> 3] = $qq;
 HEAPF64[$2 >> 3] = $xx;
 HEAP32[$3 >> 2] = $ff;
 HEAP32[$4 >> 2] = $gx;
 HEAP32[$5 >> 2] = $even_odd;
 HEAP32[$6 >> 2] = $ni;
 HEAPF64[$g1 >> 3] = +HEAPF64[HEAP32[$4 >> 2] >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] << 3) >> 3] = +HEAPF64[$2 >> 3];
 $14 = (HEAP32[$5 >> 2] | 0) == 0;
 HEAP32[$ii >> 2] = 0;
 if ($14) {
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
   HEAP32[$nn >> 2] = 100 - (HEAP32[$ii >> 2] | 0) - 1;
   $27 = +(Math_imul((HEAP32[$nn >> 2] | 0) + 1 << 2, (HEAP32[$nn >> 2] | 0) + 1 | 0) | 0);
   HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3] = -1.0 / (($27 - +HEAPF64[$0 >> 3]) / +HEAPF64[$1 >> 3] + +HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) << 3) >> 3]);
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  $82 = HEAP32[$3 >> 2] | 0;
  $83 = +HEAPF64[$82 >> 3];
  $84 = +HEAPF64[$g1 >> 3];
  $85 = $83 - $84;
  $86 = HEAP32[$4 >> 2] | 0;
  HEAPF64[$86 >> 3] = $85;
  STACKTOP = sp;
  return;
 } else {
  while (1) {
   if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
   HEAP32[$nn >> 2] = 100 - (HEAP32[$ii >> 2] | 0) - 1;
   $61 = +(Math_imul((HEAP32[$nn >> 2] << 1) + 1 | 0, (HEAP32[$nn >> 2] << 1) + 1 | 0) | 0);
   HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) - 1 << 3) >> 3] = -1.0 / (($61 - +HEAPF64[$0 >> 3]) / +HEAPF64[$1 >> 3] + +HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) << 3) >> 3]);
   HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
  }
  $82 = HEAP32[$3 >> 2] | 0;
  $83 = +HEAPF64[$82 >> 3];
  $84 = +HEAPF64[$g1 >> 3];
  $85 = $83 - $84;
  $86 = HEAP32[$4 >> 2] | 0;
  HEAPF64[$86 >> 3] = $85;
  STACKTOP = sp;
  return;
 }
}
function _gamma_inc_F_CF($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $12 = 0, $2 = 0, $29 = 0.0, $3 = 0, $38 = 0.0, $60 = 0.0, $71 = 0.0, $73 = 0, $78 = 0, $Cn = 0, $Dn = 0, $an = 0, $delta = 0, $hn = 0, $n = 0, $small = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 76 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 72 | 0;
 $small = sp + 40 | 0;
 $hn = sp + 32 | 0;
 $Cn = sp + 24 | 0;
 $Dn = sp + 16 | 0;
 $n = sp + 64 | 0;
 $an = sp + 8 | 0;
 $delta = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[sp + 68 >> 2] = 5e3;
 HEAPF64[$small >> 3] = +_gsl_pow_3(2.220446049250313e-16);
 HEAPF64[$hn >> 3] = 1.0;
 HEAPF64[$Cn >> 3] = 1.0 / +HEAPF64[$small >> 3];
 HEAPF64[$Dn >> 3] = 1.0;
 HEAP32[$n >> 2] = 2;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= 5e3) break;
  $12 = HEAP32[$n >> 2] | 0;
  if (HEAP32[$n >> 2] & 1) HEAPF64[$an >> 3] = +($12 - 1 | 0) * .5 / +HEAPF64[$2 >> 3]; else HEAPF64[$an >> 3] = (+($12 | 0) * .5 - +HEAPF64[$1 >> 3]) / +HEAPF64[$2 >> 3];
  HEAPF64[$Dn >> 3] = +HEAPF64[$an >> 3] * +HEAPF64[$Dn >> 3] + 1.0;
  $29 = +Math_abs(+(+HEAPF64[$Dn >> 3]));
  if ($29 < +HEAPF64[$small >> 3]) HEAPF64[$Dn >> 3] = +HEAPF64[$small >> 3];
  HEAPF64[$Cn >> 3] = +HEAPF64[$an >> 3] / +HEAPF64[$Cn >> 3] + 1.0;
  $38 = +Math_abs(+(+HEAPF64[$Cn >> 3]));
  if ($38 < +HEAPF64[$small >> 3]) HEAPF64[$Cn >> 3] = +HEAPF64[$small >> 3];
  HEAPF64[$Dn >> 3] = 1.0 / +HEAPF64[$Dn >> 3];
  HEAPF64[$delta >> 3] = +HEAPF64[$Cn >> 3] * +HEAPF64[$Dn >> 3];
  HEAPF64[$hn >> 3] = +HEAPF64[$hn >> 3] * +HEAPF64[$delta >> 3];
  if (+Math_abs(+(+HEAPF64[$delta >> 3] - 1.0)) < 2.220446049250313e-16) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$hn >> 3];
 $60 = +Math_abs(+(+HEAPF64[$hn >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $60;
 $71 = (+(HEAP32[$n >> 2] | 0) * .5 + 2.0) * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 $73 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$73 >> 3] = +HEAPF64[$73 >> 3] + $71;
 if ((HEAP32[$n >> 2] | 0) == 5e3) {
  _gsl_error(51112, 50976, 286, 11);
  HEAP32[$0 >> 2] = 11;
  $78 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $78 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_I0_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $16 = 0.0, $2 = 0, $27 = 0.0, $33 = 0, $39 = 0.0, $41 = 0, $62 = 0.0, $68 = 0.0, $70 = 0, $76 = 0, $b_scaled = 0, $c = 0, $ey = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 56 | 0;
 $y = sp + 40 | 0;
 $c = sp + 24 | 0;
 $ey = sp + 16 | 0;
 $b_scaled = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$y >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$y >> 3] < 2.9802322387695312e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$y >> 3] * .5 * +HEAPF64[$y >> 3];
  HEAP32[$0 >> 2] = 0;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 }
 $16 = +HEAPF64[$y >> 3];
 if (+HEAPF64[$y >> 3] <= 3.0) {
  _cheb_eval_e82(11312, $16 * +HEAPF64[$y >> 3] / 4.5 - 1.0, $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] + 2.75;
  $27 = (+Math_abs(+(+HEAPF64[$c >> 3])) + 2.75) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $27;
  $33 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$33 >> 3] = +HEAPF64[$33 >> 3] + +HEAPF64[$c + 8 >> 3];
  $39 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $41 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$41 >> 3] = +HEAPF64[$41 >> 3] + $39;
  HEAP32[$0 >> 2] = 0;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 }
 if ($16 < 708.782712893384) {
  HEAPF64[$ey >> 3] = +Math_exp(+(+HEAPF64[$y >> 3]));
  _gsl_sf_bessel_I0_scaled_e(+HEAPF64[$1 >> 3], $b_scaled) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ey >> 3] * +HEAPF64[$b_scaled >> 3];
  $62 = +HEAPF64[$ey >> 3] * +HEAPF64[$b_scaled + 8 >> 3] + +HEAPF64[$y >> 3] * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $62;
  $68 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $70 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$70 >> 3] = +HEAPF64[$70 >> 3] + $68;
  HEAP32[$0 >> 2] = 0;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(10704, 10720, 216, 16);
  HEAP32[$0 >> 2] = 16;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 }
 return 0;
}
function _gsl_sf_hyperg_1F1_large_b_e($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $74 = 0.0, $78 = 0.0, $84 = 0.0, $86 = 0, $92 = 0, $pre = 0, $t1 = 0, $t2 = 0, $t2a = 0, $t2b = 0, $u = 0, $uv = 0, $uv2 = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 72 | 0;
 $4 = sp + 96 | 0;
 $u = sp + 64 | 0;
 $v = sp + 56 | 0;
 $pre = sp + 48 | 0;
 $uv = sp + 40 | 0;
 $uv2 = sp + 32 | 0;
 $t1 = sp + 24 | 0;
 $t2a = sp + 16 | 0;
 $t2b = sp + 8 | 0;
 $t2 = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (+Math_abs(+(+HEAPF64[$3 >> 3] / +HEAPF64[$2 >> 3])) < 1.0) {
  HEAPF64[$u >> 3] = +HEAPF64[$3 >> 3] / +HEAPF64[$2 >> 3];
  HEAPF64[$v >> 3] = 1.0 / (1.0 - +HEAPF64[$u >> 3]);
  HEAPF64[$pre >> 3] = +Math_pow(+(+HEAPF64[$v >> 3]), +(+HEAPF64[$1 >> 3]));
  HEAPF64[$uv >> 3] = +HEAPF64[$u >> 3] * +HEAPF64[$v >> 3];
  HEAPF64[$uv2 >> 3] = +HEAPF64[$uv >> 3] * +HEAPF64[$uv >> 3];
  HEAPF64[$t1 >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] + 1.0) / (+HEAPF64[$2 >> 3] * 2.0) * +HEAPF64[$uv2 >> 3];
  HEAPF64[$t2a >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] + 1.0) / (+HEAPF64[$2 >> 3] * 24.0 * +HEAPF64[$2 >> 3]) * +HEAPF64[$uv2 >> 3];
  HEAPF64[$t2b >> 3] = (+HEAPF64[$1 >> 3] + 2.0) * 16.0 * +HEAPF64[$uv >> 3] + 12.0 + (+HEAPF64[$1 >> 3] + 2.0) * 3.0 * (+HEAPF64[$1 >> 3] + 3.0) * +HEAPF64[$uv2 >> 3];
  HEAPF64[$t2 >> 3] = +HEAPF64[$t2a >> 3] * +HEAPF64[$t2b >> 3];
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$pre >> 3] * (1.0 - +HEAPF64[$t1 >> 3] + +HEAPF64[$t2 >> 3]);
  $74 = +Math_abs(+(+HEAPF64[$t1 >> 3])) + 1.0;
  $78 = +HEAPF64[$pre >> 3] * 2.220446049250313e-16 * ($74 + +Math_abs(+(+HEAPF64[$t2 >> 3])));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $78;
  $84 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  $86 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
  HEAPF64[$86 >> 3] = +HEAPF64[$86 >> 3] + $84;
  HEAP32[$0 >> 2] = 0;
  $92 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $92 | 0;
 } else {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51472, 51488, 123, 1);
  HEAP32[$0 >> 2] = 1;
  $92 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $92 | 0;
 }
 return 0;
}
function _gsl_sf_expint_3_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $15 = 0.0, $2 = 0, $48 = 0.0, $70 = 0, $result_c = 0, $result_c2 = 0, $s = 0, $t = 0, $t1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 76 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 72 | 0;
 $t = sp + 48 | 0;
 $result_c = sp + 32 | 0;
 $t1 = sp + 24 | 0;
 $s = sp + 16 | 0;
 $result_c2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 56 >> 3] = .8929795115692493;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(32872, 32888, 107, 1);
  HEAP32[$0 >> 2] = 1;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 9688727123829349.0e-21) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $10;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if ($10 <= 2.0) {
  HEAPF64[$t >> 3] = $15 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 4.0 - 1.0;
  _cheb_eval_e336(33344, +HEAPF64[$t >> 3], $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$result_c >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$result_c + 8 >> 3];
  HEAP32[$0 >> 2] = 0;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 if ($15 < +Math_pow(36.04365338911715, .3333333333333333)) {
  HEAPF64[$t1 >> 3] = 16.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]) - 1.0;
  $48 = +Math_exp(+(-+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]));
  HEAPF64[$s >> 3] = $48 / (+HEAPF64[$1 >> 3] * 3.0 * +HEAPF64[$1 >> 3]);
  _cheb_eval_e336(33120, +HEAPF64[$t1 >> 3], $result_c2) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = .8929795115692493 - +HEAPF64[$result_c2 >> 3] * +HEAPF64[$s >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$s >> 3] * +HEAPF64[$result_c2 + 8 >> 3] + 1.9828128285254138e-16;
  HEAP32[$0 >> 2] = 0;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = .8929795115692493;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 1.9828128285254138e-16;
  HEAP32[$0 >> 2] = 0;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 return 0;
}
function _gsl_sf_ellint_Ecomp_e($k, $mode, $result) {
 $k = +$k;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $18 = 0.0, $2 = 0, $3 = 0, $35 = 0.0, $89 = 0, $90 = 0, $rd = 0, $rdstatus = 0, $rf = 0, $rfstatus = 0, $ta = 0, $tb = 0, $y = 0, $y1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 88 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 84 | 0;
 $3 = sp + 80 | 0;
 $y = sp + 56 | 0;
 $ta = sp + 48 | 0;
 $tb = sp + 40 | 0;
 $rf = sp + 24 | 0;
 $rd = sp + 8 | 0;
 $y1 = sp;
 $rfstatus = sp + 76 | 0;
 $rdstatus = sp + 72 | 0;
 HEAPF64[$1 >> 3] = $k;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] >= 1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(29376, 29392, 542, 1);
  HEAP32[$0 >> 2] = 1;
  $90 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $90 | 0;
 }
 $18 = 1.0 - +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] >= .9999999850988388) {
  HEAPF64[$y >> 3] = $18;
  HEAPF64[$ta >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[3686] + +HEAPF64[$y >> 3] * (+HEAPF64[3687] + +HEAPF64[3688] * +HEAPF64[$y >> 3])) + 1.0;
  $35 = -+HEAPF64[$y >> 3] * +Math_log(+(+HEAPF64[$y >> 3]));
  HEAPF64[$tb >> 3] = $35 * (+HEAPF64[3689] + +HEAPF64[$y >> 3] * (+HEAPF64[3690] + +HEAPF64[3691] * +HEAPF64[$y >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$ta >> 3] + +HEAPF64[$tb >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3] * 4.440892098500626e-16;
  HEAP32[$0 >> 2] = 0;
  $90 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $90 | 0;
 }
 HEAPF64[$y1 >> 3] = $18;
 HEAP32[$rfstatus >> 2] = _gsl_sf_ellint_RF_e(0.0, +HEAPF64[$y1 >> 3], 1.0, HEAP32[$2 >> 2] | 0, $rf) | 0;
 HEAP32[$rdstatus >> 2] = _gsl_sf_ellint_RD_e(0.0, +HEAPF64[$y1 >> 3], 1.0, HEAP32[$2 >> 2] | 0, $rd) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$rf >> 3] - +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 3.0 * +HEAPF64[$rd >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$rf + 8 >> 3] + +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 3.0 * +HEAPF64[$rd + 8 >> 3];
 if (HEAP32[$rfstatus >> 2] | 0) $89 = HEAP32[$rfstatus >> 2] | 0; else $89 = (HEAP32[$rdstatus >> 2] | 0) != 0 ? HEAP32[$rdstatus >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $89;
 $90 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $90 | 0;
}
function _gsl_sf_clausen_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $21 = 0.0, $22 = 0.0, $25 = 0.0, $41 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $result_c = 0, $sgn = 0, $status_red = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 68 | 0;
 $sgn = sp + 40 | 0;
 $status_red = sp + 64 | 0;
 $t = sp + 16 | 0;
 $result_c = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[sp + 48 >> 3] = 4.681337853654911e-8;
 HEAPF64[$sgn >> 3] = 1.0;
 if (+HEAPF64[$0 >> 3] < 0.0) {
  HEAPF64[$0 >> 3] = -+HEAPF64[$0 >> 3];
  HEAPF64[$sgn >> 3] = -1.0;
 }
 HEAP32[$status_red >> 2] = _gsl_sf_angle_restrict_pos_e($0) | 0;
 if (+HEAPF64[$0 >> 3] > 3.141592653589793) {
  HEAPF64[sp + 32 >> 3] = 6.28125;
  HEAPF64[sp + 24 >> 3] = .001935307179586477;
  HEAPF64[$0 >> 3] = 6.28125 - +HEAPF64[$0 >> 3] + .001935307179586477;
  HEAPF64[$sgn >> 3] = -+HEAPF64[$sgn >> 3];
 }
 if (+HEAPF64[$0 >> 3] == 0.0) {
  HEAPF64[HEAP32[$1 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = 0.0;
  $50 = +HEAPF64[$sgn >> 3];
  $51 = HEAP32[$1 >> 2] | 0;
  $52 = +HEAPF64[$51 >> 3];
  $53 = $52 * $50;
  HEAPF64[$51 >> 3] = $53;
  $54 = HEAP32[$status_red >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 $21 = +HEAPF64[$0 >> 3];
 $22 = +HEAPF64[$0 >> 3];
 if (+HEAPF64[$0 >> 3] < 4.681337853654911e-8) {
  $25 = $21 * (1.0 - +Math_log(+$22));
  HEAPF64[HEAP32[$1 >> 2] >> 3] = $25;
  HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = +HEAPF64[$0 >> 3] * 2.220446049250313e-16;
  $50 = +HEAPF64[$sgn >> 3];
  $51 = HEAP32[$1 >> 2] | 0;
  $52 = +HEAPF64[$51 >> 3];
  $53 = $52 * $50;
  HEAPF64[$51 >> 3] = $53;
  $54 = HEAP32[$status_red >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 } else {
  HEAPF64[$t >> 3] = ($21 * $22 / 9.869604401089358 - .5) * 2.0;
  _cheb_eval_e238(26192, +HEAPF64[$t >> 3], $result_c) | 0;
  $41 = +HEAPF64[$0 >> 3] * (+HEAPF64[$result_c >> 3] - +Math_log(+(+HEAPF64[$0 >> 3])));
  HEAPF64[HEAP32[$1 >> 2] >> 3] = $41;
  HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$result_c + 8 >> 3] + 2.220446049250313e-16);
  $50 = +HEAPF64[$sgn >> 3];
  $51 = HEAP32[$1 >> 2] | 0;
  $52 = +HEAPF64[$51 >> 3];
  $53 = $52 * $50;
  HEAPF64[$51 >> 3] = $53;
  $54 = HEAP32[$status_red >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 return 0;
}
function _ranlxs_set_lux($vstate, $s, $luxury) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 $luxury = $luxury | 0;
 var $0 = 0, $1 = 0, $2 = 0, $i = 0, $ibit = 0, $jbit = 0, $k = 0, $m = 0, $seed = 0, $state = 0, $x = 0, $xbit = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 176 | 0;
 $1 = sp + 172 | 0;
 $2 = sp + 168 | 0;
 $state = sp + 164 | 0;
 $ibit = sp + 160 | 0;
 $jbit = sp + 156 | 0;
 $i = sp + 152 | 0;
 $k = sp + 148 | 0;
 $m = sp + 144 | 0;
 $xbit = sp + 20 | 0;
 $x = sp + 8 | 0;
 $y = sp;
 $seed = sp + 16 | 0;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $luxury;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[$seed >> 2] = HEAP32[$1 >> 2];
 HEAP32[$i >> 2] = HEAP32[$seed >> 2] & 2147483647;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 31) break;
  HEAP32[$xbit + (HEAP32[$k >> 2] << 2) >> 2] = (HEAP32[$i >> 2] | 0) % 2 | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) / 2 | 0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[$ibit >> 2] = 0;
 HEAP32[$jbit >> 2] = 18;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 12) break;
  HEAPF64[$x >> 3] = 0.0;
  HEAP32[$m >> 2] = 1;
  while (1) {
   if ((HEAP32[$m >> 2] | 0) > 48) break;
   HEAPF64[$y >> 3] = +(HEAP32[$xbit + (HEAP32[$ibit >> 2] << 2) >> 2] | 0);
   HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] + (+HEAPF64[$x >> 3] + +HEAPF64[$y >> 3]);
   HEAP32[$xbit + (HEAP32[$ibit >> 2] << 2) >> 2] = ((HEAP32[$xbit + (HEAP32[$ibit >> 2] << 2) >> 2] | 0) + (HEAP32[$xbit + (HEAP32[$jbit >> 2] << 2) >> 2] | 0) | 0) % 2 | 0;
   HEAP32[$ibit >> 2] = ((HEAP32[$ibit >> 2] | 0) + 1 | 0) % 31 | 0;
   HEAP32[$jbit >> 2] = ((HEAP32[$jbit >> 2] | 0) + 1 | 0) % 31 | 0;
   HEAP32[$m >> 2] = (HEAP32[$m >> 2] | 0) + 1;
  }
  HEAPF64[(HEAP32[$state >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[$x >> 3] * 3.552713678800501e-15;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[(HEAP32[$state >> 2] | 0) + 192 >> 3] = 0.0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 296 >> 2] = 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 300 >> 2] = 7;
 HEAP32[(HEAP32[$state >> 2] | 0) + 304 >> 2] = 23;
 HEAP32[(HEAP32[$state >> 2] | 0) + 308 >> 2] = 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 312 >> 2] = HEAP32[$2 >> 2];
 STACKTOP = sp;
 return;
}
function _gsl_sf_hazard_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $22 = 0.0, $26 = 0.0, $28 = 0, $36 = 0.0, $38 = 0, $48 = 0, $5 = 0.0, $83 = 0.0, $86 = 0, $arg = 0, $corrB = 0, $corrM = 0, $corrT = 0, $ix2 = 0, $result_ln_erfc = 0, $stat_e = 0, $stat_l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 80 | 0;
 $result_ln_erfc = sp + 48 | 0;
 $stat_l = sp + 76 | 0;
 $arg = sp + 32 | 0;
 $stat_e = sp + 72 | 0;
 $ix2 = sp + 24 | 0;
 $corrB = sp + 16 | 0;
 $corrM = sp + 8 | 0;
 $corrT = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $5 = +HEAPF64[$1 >> 3];
 if (!(+HEAPF64[$1 >> 3] < 25.0)) {
  HEAPF64[$ix2 >> 3] = 1.0 / ($5 * +HEAPF64[$1 >> 3]);
  HEAPF64[$corrB >> 3] = 1.0 - +HEAPF64[$ix2 >> 3] * 9.0 * (1.0 - +HEAPF64[$ix2 >> 3] * 11.0);
  HEAPF64[$corrM >> 3] = 1.0 - +HEAPF64[$ix2 >> 3] * 5.0 * (1.0 - +HEAPF64[$ix2 >> 3] * 7.0 * +HEAPF64[$corrB >> 3]);
  HEAPF64[$corrT >> 3] = 1.0 - +HEAPF64[$ix2 >> 3] * (1.0 - +HEAPF64[$ix2 >> 3] * 3.0 * +HEAPF64[$corrM >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$corrT >> 3];
  $83 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $83;
  HEAP32[$0 >> 2] = 0;
  $86 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 HEAP32[$stat_l >> 2] = _gsl_sf_log_erfc_e($5 / 1.4142135623730951, $result_ln_erfc) | 0;
 HEAPF64[sp + 40 >> 3] = -.22579135264472744;
 HEAPF64[$arg >> 3] = -.22579135264472744 - +HEAPF64[$1 >> 3] * .5 * +HEAPF64[$1 >> 3] - +HEAPF64[$result_ln_erfc >> 3];
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_e(+HEAPF64[$arg >> 3], HEAP32[$2 >> 2] | 0) | 0;
 $22 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0) * 3.0 * 2.220446049250313e-16;
 $26 = $22 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
 $28 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$28 >> 3] = +HEAPF64[$28 >> 3] + $26;
 $36 = +Math_abs(+(+HEAPF64[$result_ln_erfc + 8 >> 3] * +HEAPF64[HEAP32[$2 >> 2] >> 3]));
 $38 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$38 >> 3] = +HEAPF64[$38 >> 3] + $36;
 if (HEAP32[$stat_l >> 2] | 0) $48 = HEAP32[$stat_l >> 2] | 0; else $48 = (HEAP32[$stat_e >> 2] | 0) != 0 ? HEAP32[$stat_e >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $48;
 $86 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $86 | 0;
}
function _cheb_eval_e673($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e641($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e626($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e618($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e612($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e605($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e592($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e519($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e375($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e351($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e336($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e332($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e300($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e269($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e260($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e238($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e203($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e191($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e145($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e139($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e122($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e116($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e104($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e100($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e88($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e82($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_e($cs, $x, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $43 = 0.0, $46 = 0.0, $53 = 0.0, $72 = 0.0, $75 = 0.0, $81 = 0.0, $96 = 0.0, $d = 0, $dd = 0, $e = 0, $j = 0, $temp = 0, $temp1 = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 68 | 0;
 $j = sp + 64 | 0;
 $d = sp + 48 | 0;
 $dd = sp + 40 | 0;
 $y = sp + 32 | 0;
 $y2 = sp + 24 | 0;
 $e = sp + 16 | 0;
 $temp = sp + 8 | 0;
 $temp1 = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 HEAPF64[$e >> 3] = 0.0;
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 while (1) {
  $28 = +HEAPF64[$d >> 3];
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = $28;
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  $43 = +Math_abs(+(+HEAPF64[$y2 >> 3] * +HEAPF64[$temp >> 3]));
  $46 = $43 + +Math_abs(+(+HEAPF64[$dd >> 3]));
  $53 = $46 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3]));
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $53;
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$temp1 >> 3] = $28;
 HEAPF64[$d >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $72 = +Math_abs(+(+HEAPF64[$y >> 3] * +HEAPF64[$temp1 >> 3]));
 $75 = $72 + +Math_abs(+(+HEAPF64[$dd >> 3]));
 $81 = $75 + +Math_abs(+(+HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3])) * .5;
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + $81;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$d >> 3];
 $96 = +HEAPF64[$e >> 3] * 2.220446049250313e-16 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $96;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_bessel_yl_array($lmax, $x, $result_array) {
 $lmax = $lmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $54 = 0, $55 = 0, $ell = 0, $r_yell = 0, $r_yellm1 = 0, $result = 0, $stat = 0, $stat_0 = 0, $stat_1 = 0, $yell = 0, $yellm1 = 0, $yellp1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 100 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 96 | 0;
 $result = sp + 56 | 0;
 $stat = sp + 92 | 0;
 $r_yell = sp + 40 | 0;
 $r_yellm1 = sp + 24 | 0;
 $stat_1 = sp + 88 | 0;
 $stat_0 = sp + 84 | 0;
 $yellp1 = sp + 16 | 0;
 $yell = sp + 8 | 0;
 $yellm1 = sp;
 $ell = sp + 80 | 0;
 HEAP32[$1 >> 2] = $lmax;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result_array;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] <= 0.0)) {
  $10 = +HEAPF64[$2 >> 3];
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$stat >> 2] = _gsl_sf_bessel_y0_e($10, $result) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$result >> 3];
   HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
   $55 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $55 | 0;
  }
  HEAP32[$stat_1 >> 2] = _gsl_sf_bessel_y1_e($10, $r_yell) | 0;
  HEAP32[$stat_0 >> 2] = _gsl_sf_bessel_y0_e(+HEAPF64[$2 >> 3], $r_yellm1) | 0;
  HEAPF64[$yell >> 3] = +HEAPF64[$r_yell >> 3];
  HEAPF64[$yellm1 >> 3] = +HEAPF64[$r_yellm1 >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$yellm1 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$yell >> 3];
  HEAP32[$ell >> 2] = 1;
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$yellp1 >> 3] = +((HEAP32[$ell >> 2] << 1) + 1 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$yell >> 3] - +HEAPF64[$yellm1 >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) + 1 << 3) >> 3] = +HEAPF64[$yellp1 >> 3];
   HEAPF64[$yellm1 >> 3] = +HEAPF64[$yell >> 3];
   HEAPF64[$yell >> 3] = +HEAPF64[$yellp1 >> 3];
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
  }
  if (HEAP32[$stat_0 >> 2] | 0) $54 = HEAP32[$stat_0 >> 2] | 0; else $54 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $54;
  $55 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $55 | 0;
 }
 _gsl_error(19888, 19856, 237, 1);
 HEAP32[$0 >> 2] = 1;
 $55 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $55 | 0;
}
function _legendre_H3d_lnnorm($ell, $lambda, $result) {
 $ell = $ell | 0;
 $lambda = +$lambda;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $22 = 0.0, $3 = 0, $57 = 0.0, $67 = 0.0, $75 = 0, $abs_lam = 0, $angle_terms = 0, $lg_corrected = 0, $lg_r = 0, $ln_lam2ell2 = 0, $ln_sinh = 0, $rat = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 100 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 96 | 0;
 $abs_lam = sp + 80 | 0;
 $rat = sp + 72 | 0;
 $ln_lam2ell2 = sp + 64 | 0;
 $lg_corrected = sp + 56 | 0;
 $angle_terms = sp + 48 | 0;
 $lg_r = sp + 32 | 0;
 $ln_sinh = sp;
 HEAP32[$1 >> 2] = $ell;
 HEAPF64[$2 >> 3] = $lambda;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$abs_lam >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 if (+HEAPF64[$abs_lam >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  _gsl_error(52984, 52808, 52, 1);
  HEAP32[$0 >> 2] = 1;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 $17 = +(HEAP32[$1 >> 2] | 0) + 1.0;
 $18 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$2 >> 3] > (+(HEAP32[$1 >> 2] | 0) + 1.0) / 6055454452393343.0e-21) {
  HEAPF64[$rat >> 3] = $17 / $18;
  $22 = +Math_log(+(+HEAPF64[$2 >> 3])) * 2.0;
  HEAPF64[$ln_lam2ell2 >> 3] = $22 + +Math_log(+(+HEAPF64[$rat >> 3] * +HEAPF64[$rat >> 3] + 1.0));
  HEAPF64[$lg_corrected >> 3] = (+(HEAP32[$1 >> 2] | 0) + 1.0) * -2.0 + 1.1447298858494002 + (+(HEAP32[$1 >> 2] | 0) + .5) * +HEAPF64[$ln_lam2ell2 >> 3] + 1.0 / (+HEAPF64[$2 >> 3] * 288.0 * +HEAPF64[$2 >> 3]);
  HEAPF64[$angle_terms >> 3] = +HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$rat >> 3] * (1.0 - +HEAPF64[$rat >> 3] * +HEAPF64[$rat >> 3] / 3.0);
  $57 = +Math_log(+(+HEAPF64[$abs_lam >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $57 + +HEAPF64[$lg_corrected >> 3] + +HEAPF64[$angle_terms >> 3] - 1.1447298858494002;
  HEAP32[$0 >> 2] = 0;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 } else {
  _gsl_sf_lngamma_complex_e($17, $18, $lg_r, sp + 16 | 0) | 0;
  _gsl_sf_lnsinh_e(+HEAPF64[$abs_lam >> 3] * 3.141592653589793, $ln_sinh) | 0;
  $67 = +Math_log(+(+HEAPF64[$abs_lam >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $67 + +HEAPF64[$ln_sinh >> 3] + +HEAPF64[$lg_r >> 3] * 2.0 - 1.1447298858494002;
  HEAP32[$0 >> 2] = 0;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 return 0;
}
function _laguerre_n_poly_safe($n, $a, $x, $result) {
 $n = $n | 0;
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $54 = 0.0, $66 = 0.0, $73 = 0, $b = 0, $k = 0, $mx = 0, $stat_tc = 0, $sum_err = 0, $sum_val = 0, $tc = 0, $tc_sgn = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 92 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 88 | 0;
 $b = sp + 56 | 0;
 $mx = sp + 48 | 0;
 $tc_sgn = sp + 40 | 0;
 $tc = sp + 24 | 0;
 $stat_tc = sp + 84 | 0;
 $term = sp + 16 | 0;
 $sum_val = sp + 8 | 0;
 $sum_err = sp;
 $k = sp + 80 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$b >> 3] = +HEAPF64[$2 >> 3] + 1.0;
 HEAPF64[$mx >> 3] = -+HEAPF64[$3 >> 3];
 if (+HEAPF64[$3 >> 3] < 0.0) $15 = 1.0; else $15 = (HEAP32[$1 >> 2] & 1 | 0) != 0 ? -1.0 : 1.0;
 HEAPF64[$tc_sgn >> 3] = $15;
 HEAP32[$stat_tc >> 2] = _gsl_sf_taylorcoeff_e(HEAP32[$1 >> 2] | 0, +Math_abs(+(+HEAPF64[$3 >> 3])), $tc) | 0;
 if (HEAP32[$stat_tc >> 2] | 0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_tc >> 2];
  $73 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $73 | 0;
 }
 HEAPF64[$term >> 3] = +HEAPF64[$tc >> 3] * +HEAPF64[$tc_sgn >> 3];
 HEAPF64[$sum_val >> 3] = +HEAPF64[$term >> 3];
 HEAPF64[$sum_err >> 3] = +HEAPF64[$tc + 8 >> 3];
 HEAP32[$k >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) < 0) break;
  HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * ((+HEAPF64[$b >> 3] + +(HEAP32[$k >> 2] | 0)) / +((HEAP32[$1 >> 2] | 0) - (HEAP32[$k >> 2] | 0) | 0) * (+(HEAP32[$k >> 2] | 0) + 1.0) / +HEAPF64[$mx >> 3]);
  HEAPF64[$sum_val >> 3] = +HEAPF64[$sum_val >> 3] + +HEAPF64[$term >> 3];
  $54 = +Math_abs(+(+HEAPF64[$term >> 3])) * 8.881784197001252e-16;
  HEAPF64[$sum_err >> 3] = +HEAPF64[$sum_err >> 3] + $54;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + -1;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$sum_val >> 3];
 $66 = +HEAPF64[$sum_err >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $66;
 HEAP32[$0 >> 2] = 0;
 $73 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $73 | 0;
}
function _ranlxd_set_lux($vstate, $s, $luxury) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 $luxury = $luxury | 0;
 var $0 = 0, $1 = 0, $2 = 0, $i = 0, $ibit = 0, $jbit = 0, $k = 0, $l = 0, $seed = 0, $state = 0, $x = 0, $xbit = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $0 = sp + 176 | 0;
 $1 = sp + 172 | 0;
 $2 = sp + 168 | 0;
 $state = sp + 164 | 0;
 $ibit = sp + 160 | 0;
 $jbit = sp + 156 | 0;
 $i = sp + 152 | 0;
 $k = sp + 148 | 0;
 $l = sp + 144 | 0;
 $xbit = sp + 20 | 0;
 $x = sp + 8 | 0;
 $y = sp;
 $seed = sp + 16 | 0;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $luxury;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[$seed >> 2] = HEAP32[$1 >> 2];
 HEAP32[$i >> 2] = HEAP32[$seed >> 2];
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 31) break;
  HEAP32[$xbit + (HEAP32[$k >> 2] << 2) >> 2] = (HEAP32[$i >> 2] | 0) % 2 | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) / 2 | 0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[$ibit >> 2] = 0;
 HEAP32[$jbit >> 2] = 18;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 12) break;
  HEAPF64[$x >> 3] = 0.0;
  HEAP32[$l >> 2] = 1;
  while (1) {
   if ((HEAP32[$l >> 2] | 0) > 48) break;
   HEAPF64[$y >> 3] = +(((HEAP32[$xbit + (HEAP32[$ibit >> 2] << 2) >> 2] | 0) + 1 | 0) % 2 | 0 | 0);
   HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] + (+HEAPF64[$x >> 3] + +HEAPF64[$y >> 3]);
   HEAP32[$xbit + (HEAP32[$ibit >> 2] << 2) >> 2] = ((HEAP32[$xbit + (HEAP32[$ibit >> 2] << 2) >> 2] | 0) + (HEAP32[$xbit + (HEAP32[$jbit >> 2] << 2) >> 2] | 0) | 0) % 2 | 0;
   HEAP32[$ibit >> 2] = ((HEAP32[$ibit >> 2] | 0) + 1 | 0) % 31 | 0;
   HEAP32[$jbit >> 2] = ((HEAP32[$jbit >> 2] | 0) + 1 | 0) % 31 | 0;
   HEAP32[$l >> 2] = (HEAP32[$l >> 2] | 0) + 1;
  }
  HEAPF64[(HEAP32[$state >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = +HEAPF64[$x >> 3] * 3.552713678800501e-15;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[(HEAP32[$state >> 2] | 0) + 96 >> 3] = 0.0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 104 >> 2] = 11;
 HEAP32[(HEAP32[$state >> 2] | 0) + 108 >> 2] = 7;
 HEAP32[(HEAP32[$state >> 2] | 0) + 112 >> 2] = 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 116 >> 2] = HEAP32[$2 >> 2];
 STACKTOP = sp;
 return;
}
function _bessel_yl_small_x($l, $x, $result) {
 $l = $l | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $32 = 0.0, $61 = 0.0, $64 = 0, $delta = 0, $den = 0, $i = 0, $lmax = 0, $num_fact = 0, $stat_df = 0, $sum = 0, $t = 0, $t_coeff = 0, $t_power = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 92 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 84 | 0;
 $num_fact = sp + 48 | 0;
 $den = sp + 40 | 0;
 $stat_df = sp + 80 | 0;
 $lmax = sp + 76 | 0;
 $t = sp + 32 | 0;
 $sum = sp + 24 | 0;
 $t_coeff = sp + 16 | 0;
 $t_power = sp + 8 | 0;
 $delta = sp;
 $i = sp + 72 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$den >> 3] = +_gsl_sf_pow_int(+HEAPF64[$2 >> 3], (HEAP32[$1 >> 2] | 0) + 1 | 0);
 HEAP32[$stat_df >> 2] = _gsl_sf_doublefact_e((HEAP32[$1 >> 2] << 1) - 1 | 0, $num_fact) | 0;
 if (!(HEAP32[$stat_df >> 2] | 0)) if (!(+HEAPF64[$den >> 3] == 0.0)) {
  HEAP32[$lmax >> 2] = 200;
  HEAPF64[$t >> 3] = +HEAPF64[$2 >> 3] * -.5 * +HEAPF64[$2 >> 3];
  HEAPF64[$sum >> 3] = 1.0;
  HEAPF64[$t_coeff >> 3] = 1.0;
  HEAPF64[$t_power >> 3] = 1.0;
  HEAP32[$i >> 2] = 1;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) > 200) break;
   $32 = +(Math_imul(HEAP32[$i >> 2] | 0, ((HEAP32[$i >> 2] | 0) - (HEAP32[$1 >> 2] | 0) << 1) - 1 | 0) | 0);
   HEAPF64[$t_coeff >> 3] = +HEAPF64[$t_coeff >> 3] / $32;
   HEAPF64[$t_power >> 3] = +HEAPF64[$t_power >> 3] * +HEAPF64[$t >> 3];
   HEAPF64[$delta >> 3] = +HEAPF64[$t_power >> 3] * +HEAPF64[$t_coeff >> 3];
   HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$delta >> 3];
   if (+Math_abs(+(+HEAPF64[$delta >> 3] / +HEAPF64[$sum >> 3])) < 1.1102230246251565e-16) break;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[$num_fact >> 3] / +HEAPF64[$den >> 3] * +HEAPF64[$sum >> 3];
  $61 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $61;
  HEAP32[$0 >> 2] = 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
 _gsl_error(19872, 19856, 49, 16);
 HEAP32[$0 >> 2] = 16;
 $64 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $64 | 0;
}
function _gsl_sf_fermi_dirac_int_e($j, $x, $result) {
 $j = $j | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0.0, $3 = 0, $43 = 0, $6 = 0, $61 = 0.0, $63 = 0, $fasymp = 0, $stat_asymp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 36 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 28 | 0;
 $fasymp = sp;
 $stat_asymp = sp + 24 | 0;
 HEAP32[$1 >> 2] = $j;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 $6 = HEAP32[$1 >> 2] | 0;
 do if ((HEAP32[$1 >> 2] | 0) < -1) HEAP32[$0 >> 2] = _fd_nint($6, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0; else {
  if (($6 | 0) == -1) {
   HEAP32[$0 >> 2] = _gsl_sf_fermi_dirac_m1_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$0 >> 2] = _gsl_sf_fermi_dirac_0_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAP32[$0 >> 2] = _gsl_sf_fermi_dirac_1_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
  $26 = +HEAPF64[$2 >> 3];
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   HEAP32[$0 >> 2] = _gsl_sf_fermi_dirac_2_e($26, HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
  if ($26 < 0.0) {
   HEAP32[$0 >> 2] = _fd_neg(+(HEAP32[$1 >> 2] | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
  if (+HEAPF64[$2 >> 3] == 0.0) {
   HEAP32[$0 >> 2] = _gsl_sf_eta_int_e((HEAP32[$1 >> 2] | 0) + 1 | 0, HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
  $43 = HEAP32[$1 >> 2] | 0;
  if (+HEAPF64[$2 >> 3] < 1.5) {
   HEAP32[$0 >> 2] = _fd_series_int($43, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
  HEAP32[$stat_asymp >> 2] = _fd_asymp(+($43 | 0), +HEAPF64[$2 >> 3], $fasymp) | 0;
  if (!(HEAP32[$stat_asymp >> 2] | 0)) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$fasymp >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$fasymp + 8 >> 3];
   $61 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   $63 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAPF64[$63 >> 3] = +HEAPF64[$63 >> 3] + $61;
   HEAP32[$0 >> 2] = HEAP32[$stat_asymp >> 2];
   break;
  } else {
   HEAP32[$0 >> 2] = _fd_UMseries_int(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}
function _gsl_sf_exprel_2_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $19 = 0.0, $2 = 0, $21 = 0.0, $33 = 0.0, $37 = 0.0, $5 = 0.0, $56 = 0.0, $62 = 0.0, $74 = 0.0, $80 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp >> 3] = .002;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -2.0 / $5 * (1.0 / +HEAPF64[$1 >> 3] + 1.0);
  $15 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $15;
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 $19 = +HEAPF64[$1 >> 3];
 if ($5 < -.002) {
  $21 = +Math_exp(+$19) - 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = ($21 - +HEAPF64[$1 >> 3]) * 2.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  $33 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $33;
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 $37 = +HEAPF64[$1 >> 3];
 if ($19 < .002) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = .3333333333333333 * $37 * (+HEAPF64[$1 >> 3] * .25 * (+HEAPF64[$1 >> 3] * .2 * (+HEAPF64[$1 >> 3] * .16666666666666666 + 1.0) + 1.0) + 1.0) + 1.0;
  $56 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $56;
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 if ($37 < 709.782712893384) {
  $62 = +Math_exp(+(+HEAPF64[$1 >> 3])) - 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = ($62 - +HEAPF64[$1 >> 3]) * 2.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  $74 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $74;
  HEAP32[$0 >> 2] = 0;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31008, 31024, 411, 16);
  HEAP32[$0 >> 2] = 16;
  $80 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $80 | 0;
 }
 return 0;
}
function _gsl_sf_coulomb_wave_sphF_array($lam_min, $kmax, $eta, $x, $fc_array, $F_exp) {
 $lam_min = +$lam_min;
 $kmax = $kmax | 0;
 $eta = +$eta;
 $x = +$x;
 $fc_array = $fc_array | 0;
 $F_exp = $F_exp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $25 = 0.0, $3 = 0, $4 = 0, $5 = 0, $52 = 0, $6 = 0, $k = 0, $k1 = 0, $stat_F = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $k = sp + 32 | 0;
 $k1 = sp + 28 | 0;
 $stat_F = sp + 24 | 0;
 HEAPF64[$1 >> 3] = $lam_min;
 HEAP32[$2 >> 2] = $kmax;
 HEAPF64[$3 >> 3] = $eta;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$5 >> 2] = $fc_array;
 HEAP32[$6 >> 2] = $F_exp;
 if (!(+HEAPF64[$4 >> 3] < 0.0)) if (!(+HEAPF64[$1 >> 3] < -.5)) {
  if (!(+HEAPF64[$4 >> 3] < 5.562684646268004e-308)) {
   HEAP32[$stat_F >> 2] = _gsl_sf_coulomb_wave_F_array(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
   HEAP32[$k1 >> 2] = 0;
   while (1) {
    if ((HEAP32[$k1 >> 2] | 0) > (HEAP32[$2 >> 2] | 0)) break;
    HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$k1 >> 2] << 3) >> 3] = +HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$k1 >> 2] << 3) >> 3] / +HEAPF64[$4 >> 3];
    HEAP32[$k1 >> 2] = (HEAP32[$k1 >> 2] | 0) + 1;
   }
   HEAP32[$0 >> 2] = HEAP32[$stat_F >> 2];
   $52 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $52 | 0;
  }
  HEAP32[$k >> 2] = 0;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) > (HEAP32[$2 >> 2] | 0)) break;
   HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = 0.0;
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  if (+HEAPF64[$1 >> 3] == 0.0) {
   $25 = +Math_sqrt(+(+_C0sq(+HEAPF64[$3 >> 3])));
   HEAPF64[HEAP32[$5 >> 2] >> 3] = $25;
  }
  HEAPF64[HEAP32[$6 >> 2] >> 3] = 0.0;
  if (+HEAPF64[$4 >> 3] == 0.0) {
   HEAP32[$0 >> 2] = 0;
   $52 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $52 | 0;
  } else {
   _gsl_error(26280, 26240, 1401, 15);
   HEAP32[$0 >> 2] = 15;
   $52 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $52 | 0;
  }
 }
 _gsl_error(26224, 26240, 1387, 1);
 HEAP32[$0 >> 2] = 1;
 $52 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $52 | 0;
}
function _halley_iteration($x, $w_initial, $max_iters, $result) {
 $x = +$x;
 $w_initial = +$w_initial;
 $max_iters = $max_iters | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $42 = 0.0, $44 = 0.0, $51 = 0.0, $64 = 0.0, $67 = 0, $9 = 0.0, $e = 0, $i = 0, $p = 0, $t = 0, $tol = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 60 | 0;
 $w = sp + 32 | 0;
 $i = sp + 56 | 0;
 $tol = sp + 24 | 0;
 $e = sp + 16 | 0;
 $p = sp + 8 | 0;
 $t = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $w_initial;
 HEAP32[$3 >> 2] = $max_iters;
 HEAP32[$4 >> 2] = $result;
 HEAPF64[$w >> 3] = +HEAPF64[$2 >> 3];
 HEAP32[$i >> 2] = 0;
 while (1) {
  $9 = +HEAPF64[$w >> 3];
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) {
   label = 9;
   break;
  }
  HEAPF64[$e >> 3] = +Math_exp(+$9);
  HEAPF64[$p >> 3] = +HEAPF64[$w >> 3] + 1.0;
  HEAPF64[$t >> 3] = +HEAPF64[$w >> 3] * +HEAPF64[$e >> 3] - +HEAPF64[$1 >> 3];
  if (+HEAPF64[$w >> 3] > 0.0) HEAPF64[$t >> 3] = +HEAPF64[$t >> 3] / +HEAPF64[$p >> 3] / +HEAPF64[$e >> 3]; else HEAPF64[$t >> 3] = +HEAPF64[$t >> 3] / (+HEAPF64[$e >> 3] * +HEAPF64[$p >> 3] - (+HEAPF64[$p >> 3] + 1.0) * .5 * +HEAPF64[$t >> 3] / +HEAPF64[$p >> 3]);
  HEAPF64[$w >> 3] = +HEAPF64[$w >> 3] - +HEAPF64[$t >> 3];
  $42 = +Math_abs(+(+HEAPF64[$w >> 3]));
  $44 = +Math_abs(+(+HEAPF64[$p >> 3]));
  HEAPF64[$tol >> 3] = +_GSL_MAX_DBL(+$42, +(1.0 / ($44 * +HEAPF64[$e >> 3]))) * 2.220446049250313e-15;
  $51 = +Math_abs(+(+HEAPF64[$t >> 3]));
  if ($51 < +HEAPF64[$tol >> 3]) {
   label = 7;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$w >> 3];
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$tol >> 3] * 2.0;
  HEAP32[$0 >> 2] = 0;
  $67 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 } else if ((label | 0) == 9) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $9;
  $64 = +Math_abs(+(+HEAPF64[$w >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $64;
  HEAP32[$0 >> 2] = 11;
  $67 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 }
 return 0;
}
function _figi($nn, $tt, $dd, $ee, $e2) {
 $nn = $nn | 0;
 $tt = $tt | 0;
 $dd = $dd | 0;
 $ee = $ee | 0;
 $e2 = $e2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $63 = 0.0, $78 = 0, $ii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $ii = sp;
 HEAP32[$1 >> 2] = $nn;
 HEAP32[$2 >> 2] = $tt;
 HEAP32[$3 >> 2] = $dd;
 HEAP32[$4 >> 2] = $ee;
 HEAP32[$5 >> 2] = $e2;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) {
   label = 12;
   break;
  }
  if (HEAP32[$ii >> 2] | 0) {
   HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = +HEAPF64[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) * 3 << 3) >> 3] * +HEAPF64[(HEAP32[$2 >> 2] | 0) + ((((HEAP32[$ii >> 2] | 0) - 1 | 0) * 3 | 0) + 2 << 3) >> 3];
   if (+HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] < 0.0) {
    label = 5;
    break;
   }
   if (+HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] == 0.0) {
    if (+HEAPF64[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$ii >> 2] | 0) * 3 << 3) >> 3] != 0.0) {
     label = 9;
     break;
    }
    if (+HEAPF64[(HEAP32[$2 >> 2] | 0) + ((((HEAP32[$ii >> 2] | 0) - 1 | 0) * 3 | 0) + 2 << 3) >> 3] != 0.0) {
     label = 9;
     break;
    }
   }
   $63 = +Math_sqrt(+(+HEAPF64[(HEAP32[$5 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3]));
   HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = $63;
  }
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$ii >> 2] << 3) >> 3] = +HEAPF64[(HEAP32[$2 >> 2] | 0) + (((HEAP32[$ii >> 2] | 0) * 3 | 0) + 1 << 3) >> 3];
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 if ((label | 0) == 5) {
  HEAP32[$0 >> 2] = (HEAP32[$1 >> 2] | 0) + (HEAP32[$ii >> 2] | 0);
  $78 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 } else if ((label | 0) == 9) {
  HEAP32[$0 >> 2] = Math_imul(-1, ((HEAP32[$1 >> 2] | 0) * 3 | 0) + (HEAP32[$ii >> 2] | 0) | 0) | 0;
  $78 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 } else if ((label | 0) == 12) {
  HEAP32[$0 >> 2] = 0;
  $78 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_il_scaled_array($lmax, $x, $result_array) {
 $lmax = $lmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $57 = 0, $58 = 0, $ell = 0, $ell1 = 0, $iell = 0, $iellm1 = 0, $iellp1 = 0, $r_iell = 0, $r_iellp1 = 0, $stat_0 = 0, $stat_1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 88 | 0;
 $1 = sp + 84 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 80 | 0;
 $ell = sp + 76 | 0;
 $ell1 = sp + 72 | 0;
 $r_iellp1 = sp + 40 | 0;
 $r_iell = sp + 24 | 0;
 $stat_0 = sp + 68 | 0;
 $stat_1 = sp + 64 | 0;
 $iellp1 = sp + 16 | 0;
 $iell = sp + 8 | 0;
 $iellm1 = sp;
 HEAP32[$1 >> 2] = $lmax;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result_array;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAP32[$ell >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) < 1) break;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$ell >> 2] << 3) >> 3] = 0.0;
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + -1;
  }
  HEAP32[$0 >> 2] = 0;
  $58 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 }
 HEAP32[$stat_0 >> 2] = _gsl_sf_bessel_il_scaled_e((HEAP32[$1 >> 2] | 0) + 1 | 0, +HEAPF64[$2 >> 3], $r_iellp1) | 0;
 HEAP32[$stat_1 >> 2] = _gsl_sf_bessel_il_scaled_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $r_iell) | 0;
 HEAPF64[$iellp1 >> 3] = +HEAPF64[$r_iellp1 >> 3];
 HEAPF64[$iell >> 3] = +HEAPF64[$r_iell >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3] = +HEAPF64[$iell >> 3];
 HEAP32[$ell1 >> 2] = HEAP32[$1 >> 2];
 while (1) {
  if ((HEAP32[$ell1 >> 2] | 0) < 1) break;
  HEAPF64[$iellm1 >> 3] = +HEAPF64[$iellp1 >> 3] + +((HEAP32[$ell1 >> 2] << 1) + 1 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$iell >> 3];
  HEAPF64[$iellp1 >> 3] = +HEAPF64[$iell >> 3];
  HEAPF64[$iell >> 3] = +HEAPF64[$iellm1 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$ell1 >> 2] | 0) - 1 << 3) >> 3] = +HEAPF64[$iellm1 >> 3];
  HEAP32[$ell1 >> 2] = (HEAP32[$ell1 >> 2] | 0) + -1;
 }
 if (HEAP32[$stat_0 >> 2] | 0) $57 = HEAP32[$stat_0 >> 2] | 0; else $57 = (HEAP32[$stat_1 >> 2] | 0) != 0 ? HEAP32[$stat_1 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $57;
 $58 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $58 | 0;
}
function _gsl_sf_bessel_sin_pi4_e($y, $eps, $result) {
 $y = +$y;
 $eps = +$eps;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $53 = 0.0, $57 = 0.0, $65 = 0.0, $68 = 0, $76 = 0, $abs_sum = 0, $ceps = 0, $cy = 0, $d = 0, $e2 = 0, $s = 0, $seps = 0, $sy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 80 | 0;
 $sy = sp + 56 | 0;
 $cy = sp + 48 | 0;
 $s = sp + 40 | 0;
 $d = sp + 32 | 0;
 $abs_sum = sp + 24 | 0;
 $seps = sp + 16 | 0;
 $ceps = sp + 8 | 0;
 $e2 = sp;
 HEAPF64[$0 >> 3] = $y;
 HEAPF64[$1 >> 3] = $eps;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$sy >> 3] = +Math_sin(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$cy >> 3] = +Math_cos(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$s >> 3] = +HEAPF64[$sy >> 3] + +HEAPF64[$cy >> 3];
 HEAPF64[$d >> 3] = +HEAPF64[$sy >> 3] - +HEAPF64[$cy >> 3];
 $14 = +Math_abs(+(+HEAPF64[$cy >> 3]));
 HEAPF64[$abs_sum >> 3] = $14 + +Math_abs(+(+HEAPF64[$sy >> 3]));
 $20 = +Math_abs(+(+HEAPF64[$1 >> 3])) < .000740095979741405;
 $21 = +HEAPF64[$1 >> 3];
 if ($20) {
  HEAPF64[$e2 >> 3] = $21 * +HEAPF64[$1 >> 3];
  HEAPF64[$seps >> 3] = +HEAPF64[$1 >> 3] * (1.0 - +HEAPF64[$e2 >> 3] / 6.0 * (1.0 - +HEAPF64[$e2 >> 3] / 20.0));
  HEAPF64[$ceps >> 3] = 1.0 - +HEAPF64[$e2 >> 3] / 2.0 * (1.0 - +HEAPF64[$e2 >> 3] / 12.0);
 } else {
  HEAPF64[$seps >> 3] = +Math_sin(+$21);
  HEAPF64[$ceps >> 3] = +Math_cos(+(+HEAPF64[$1 >> 3]));
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$ceps >> 3] * +HEAPF64[$d >> 3] + +HEAPF64[$seps >> 3] * +HEAPF64[$s >> 3]) / 1.4142135623730951;
 $53 = +Math_abs(+(+HEAPF64[$ceps >> 3]));
 $57 = ($53 + +Math_abs(+(+HEAPF64[$seps >> 3]))) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $57 * +HEAPF64[$abs_sum >> 3] / 1.4142135623730951;
 $65 = +HEAPF64[$0 >> 3];
 if (+HEAPF64[$0 >> 3] > 4503599627370496.0) {
  $68 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$68 >> 3] = +HEAPF64[$68 >> 3] * .5 * $65;
  STACKTOP = sp;
  return 0;
 }
 if (!($65 > 67108864.0)) {
  STACKTOP = sp;
  return 0;
 }
 $76 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$76 >> 3] = +HEAPF64[$76 >> 3] * +HEAPF64[$0 >> 3] * 256.0 * 1.4901161193847656e-8;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_bessel_cos_pi4_e($y, $eps, $result) {
 $y = +$y;
 $eps = +$eps;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $53 = 0.0, $57 = 0.0, $65 = 0.0, $68 = 0, $76 = 0, $abs_sum = 0, $ceps = 0, $cy = 0, $d = 0, $e2 = 0, $s = 0, $seps = 0, $sy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 80 | 0;
 $sy = sp + 56 | 0;
 $cy = sp + 48 | 0;
 $s = sp + 40 | 0;
 $d = sp + 32 | 0;
 $abs_sum = sp + 24 | 0;
 $seps = sp + 16 | 0;
 $ceps = sp + 8 | 0;
 $e2 = sp;
 HEAPF64[$0 >> 3] = $y;
 HEAPF64[$1 >> 3] = $eps;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$sy >> 3] = +Math_sin(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$cy >> 3] = +Math_cos(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$s >> 3] = +HEAPF64[$sy >> 3] + +HEAPF64[$cy >> 3];
 HEAPF64[$d >> 3] = +HEAPF64[$sy >> 3] - +HEAPF64[$cy >> 3];
 $14 = +Math_abs(+(+HEAPF64[$cy >> 3]));
 HEAPF64[$abs_sum >> 3] = $14 + +Math_abs(+(+HEAPF64[$sy >> 3]));
 $20 = +Math_abs(+(+HEAPF64[$1 >> 3])) < .000740095979741405;
 $21 = +HEAPF64[$1 >> 3];
 if ($20) {
  HEAPF64[$e2 >> 3] = $21 * +HEAPF64[$1 >> 3];
  HEAPF64[$seps >> 3] = +HEAPF64[$1 >> 3] * (1.0 - +HEAPF64[$e2 >> 3] / 6.0 * (1.0 - +HEAPF64[$e2 >> 3] / 20.0));
  HEAPF64[$ceps >> 3] = 1.0 - +HEAPF64[$e2 >> 3] / 2.0 * (1.0 - +HEAPF64[$e2 >> 3] / 12.0);
 } else {
  HEAPF64[$seps >> 3] = +Math_sin(+$21);
  HEAPF64[$ceps >> 3] = +Math_cos(+(+HEAPF64[$1 >> 3]));
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$ceps >> 3] * +HEAPF64[$s >> 3] - +HEAPF64[$seps >> 3] * +HEAPF64[$d >> 3]) / 1.4142135623730951;
 $53 = +Math_abs(+(+HEAPF64[$ceps >> 3]));
 $57 = ($53 + +Math_abs(+(+HEAPF64[$seps >> 3]))) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $57 * +HEAPF64[$abs_sum >> 3] / 1.4142135623730951;
 $65 = +HEAPF64[$0 >> 3];
 if (+HEAPF64[$0 >> 3] > 4503599627370496.0) {
  $68 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$68 >> 3] = +HEAPF64[$68 >> 3] * .5 * $65;
  STACKTOP = sp;
  return 0;
 }
 if (!($65 > 67108864.0)) {
  STACKTOP = sp;
  return 0;
 }
 $76 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$76 >> 3] = +HEAPF64[$76 >> 3] * +HEAPF64[$0 >> 3] * 256.0 * 1.4901161193847656e-8;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_complex_logsin_e($zr, $zi, $lszr, $lszi) {
 $zr = +$zr;
 $zi = +$zi;
 $lszr = $lszr | 0;
 $lszi = $lszi | 0;
 var $0 = 0, $1 = 0, $16 = 0.0, $2 = 0, $22 = 0.0, $3 = 0, $35 = 0.0, $4 = 0, $41 = 0.0, $61 = 0, $7 = 0.0, $sin_i = 0, $sin_r = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 52 | 0;
 $sin_r = sp + 16 | 0;
 $sin_i = sp;
 $status = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $zr;
 HEAPF64[$2 >> 3] = $zi;
 HEAP32[$3 >> 2] = $lszr;
 HEAP32[$4 >> 2] = $lszi;
 $7 = +HEAPF64[$2 >> 3];
 do if (+HEAPF64[$2 >> 3] > 60.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = -.6931471805599453 + $7;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.5707963267948966 - +HEAPF64[$1 >> 3];
  $16 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $16;
  $22 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $22;
 } else {
  if ($7 < -60.0) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = -.6931471805599453 - +HEAPF64[$2 >> 3];
   HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$1 >> 3] + -1.5707963267948966;
   $35 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $35;
   $41 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $41;
   break;
  }
  _gsl_sf_complex_sin_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $sin_r, $sin_i) | 0;
  HEAP32[$status >> 2] = _gsl_sf_complex_log_e(+HEAPF64[$sin_r >> 3], +HEAPF64[$sin_i >> 3], HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  if ((HEAP32[$status >> 2] | 0) == 1) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
   HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
   _gsl_error(61544, 61536, 432, 1);
   HEAP32[$0 >> 2] = 1;
   $61 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $61 | 0;
  }
 } while (0);
 HEAP32[$0 >> 2] = _gsl_sf_angle_restrict_symm_e(HEAP32[$4 >> 2] | 0) | 0;
 $61 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $61 | 0;
}
function _gsl_sf_lambert_W0_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $28 = 0.0, $33 = 0.0, $56 = 0.0, $63 = 0, $p = 0, $q = 0, $r = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 48 | 0;
 $q = sp + 24 | 0;
 $r = sp + 16 | 0;
 $w = sp + 8 | 0;
 $p = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 32 >> 3] = .36787944117144233;
 HEAPF64[$q >> 3] = +HEAPF64[$1 >> 3] + .36787944117144233;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $63 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (+HEAPF64[$q >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -1.0;
  $15 = +Math_sqrt(+-+HEAPF64[$q >> 3]);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $15;
  HEAP32[$0 >> 2] = 1;
  $63 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (+HEAPF64[$q >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $63 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (+HEAPF64[$q >> 3] < .001) {
  HEAPF64[$r >> 3] = +Math_sqrt(+(+HEAPF64[$q >> 3]));
  $28 = +_series_eval(+HEAPF64[$r >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $28;
  $33 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $33;
  HEAP32[$0 >> 2] = 0;
  $63 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 1.0) {
  HEAPF64[$p >> 3] = +Math_sqrt(+(+HEAPF64[$q >> 3] * 5.43656365691809));
  HEAPF64[$w >> 3] = +HEAPF64[$p >> 3] * (+HEAPF64[$p >> 3] * (+HEAPF64[$p >> 3] * 11.0 / 72.0 + -.3333333333333333) + 1.0) + -1.0;
 } else {
  HEAPF64[$w >> 3] = +Math_log(+(+HEAPF64[$1 >> 3]));
  if (+HEAPF64[$1 >> 3] > 3.0) {
   $56 = +Math_log(+(+HEAPF64[$w >> 3]));
   HEAPF64[$w >> 3] = +HEAPF64[$w >> 3] - $56;
  }
 }
 HEAP32[$0 >> 2] = _halley_iteration(+HEAPF64[$1 >> 3], +HEAPF64[$w >> 3], 10, HEAP32[$2 >> 2] | 0) | 0;
 $63 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $63 | 0;
}
function _coulomb_F_recur($lam_min, $kmax, $eta, $x, $F_lam_max, $Fp_lam_max, $F_lam_min, $Fp_lam_min) {
 $lam_min = +$lam_min;
 $kmax = $kmax | 0;
 $eta = +$eta;
 $x = +$x;
 $F_lam_max = +$F_lam_max;
 $Fp_lam_max = +$Fp_lam_max;
 $F_lam_min = $F_lam_min | 0;
 $Fp_lam_min = $Fp_lam_min | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $el = 0, $fc_lm1 = 0, $fcl = 0, $fpl = 0, $k = 0, $lam = 0, $lam_max = 0, $rl = 0, $sl = 0, $x_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 124 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 80 | 0;
 $5 = sp + 72 | 0;
 $6 = sp + 120 | 0;
 $7 = sp + 116 | 0;
 $x_inv = sp + 64 | 0;
 $fcl = sp + 56 | 0;
 $fpl = sp + 48 | 0;
 $lam_max = sp + 40 | 0;
 $lam = sp + 32 | 0;
 $k = sp + 112 | 0;
 $el = sp + 24 | 0;
 $rl = sp + 16 | 0;
 $sl = sp + 8 | 0;
 $fc_lm1 = sp;
 HEAPF64[$0 >> 3] = $lam_min;
 HEAP32[$1 >> 2] = $kmax;
 HEAPF64[$2 >> 3] = $eta;
 HEAPF64[$3 >> 3] = $x;
 HEAPF64[$4 >> 3] = $F_lam_max;
 HEAPF64[$5 >> 3] = $Fp_lam_max;
 HEAP32[$6 >> 2] = $F_lam_min;
 HEAP32[$7 >> 2] = $Fp_lam_min;
 HEAPF64[$x_inv >> 3] = 1.0 / +HEAPF64[$3 >> 3];
 HEAPF64[$fcl >> 3] = +HEAPF64[$4 >> 3];
 HEAPF64[$fpl >> 3] = +HEAPF64[$5 >> 3];
 HEAPF64[$lam_max >> 3] = +HEAPF64[$0 >> 3] + +(HEAP32[$1 >> 2] | 0);
 HEAPF64[$lam >> 3] = +HEAPF64[$lam_max >> 3];
 HEAP32[$k >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) < 0) break;
  HEAPF64[$el >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$lam >> 3];
  HEAPF64[$rl >> 3] = +_hypot(1.0, +(+HEAPF64[$el >> 3]));
  HEAPF64[$sl >> 3] = +HEAPF64[$el >> 3] + +HEAPF64[$lam >> 3] * +HEAPF64[$x_inv >> 3];
  HEAPF64[$fc_lm1 >> 3] = (+HEAPF64[$fcl >> 3] * +HEAPF64[$sl >> 3] + +HEAPF64[$fpl >> 3]) / +HEAPF64[$rl >> 3];
  HEAPF64[$fpl >> 3] = +HEAPF64[$fc_lm1 >> 3] * +HEAPF64[$sl >> 3] - +HEAPF64[$fcl >> 3] * +HEAPF64[$rl >> 3];
  HEAPF64[$fcl >> 3] = +HEAPF64[$fc_lm1 >> 3];
  HEAPF64[$lam >> 3] = +HEAPF64[$lam >> 3] - 1.0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + -1;
 }
 HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$fcl >> 3];
 HEAPF64[HEAP32[$7 >> 2] >> 3] = +HEAPF64[$fpl >> 3];
 STACKTOP = sp;
 return 0;
}
function _ranmar_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $27 = 0, $a = 0, $b = 0, $i = 0, $ij = 0, $j = 0, $k = 0, $kl = 0, $l = 0, $m = 0, $state = 0, $sum = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 48 | 0;
 $state = sp + 44 | 0;
 $ij = sp + 40 | 0;
 $kl = sp + 36 | 0;
 $i = sp + 32 | 0;
 $j = sp + 28 | 0;
 $k = sp + 24 | 0;
 $l = sp + 20 | 0;
 $a = sp + 16 | 0;
 $b = sp + 12 | 0;
 $sum = sp + 8 | 0;
 $t = sp + 4 | 0;
 $m = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$ij >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) / 30082 | 0;
 HEAP32[$kl >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 30082 | 0;
 HEAP32[$i >> 2] = (((((HEAP32[$ij >> 2] | 0) >>> 0) / 177 | 0) >>> 0) % 177 | 0) + 2;
 HEAP32[$j >> 2] = (((HEAP32[$ij >> 2] | 0) >>> 0) % 177 | 0) + 2;
 HEAP32[$k >> 2] = (((((HEAP32[$kl >> 2] | 0) >>> 0) / 169 | 0) >>> 0) % 178 | 0) + 1;
 HEAP32[$l >> 2] = ((HEAP32[$kl >> 2] | 0) >>> 0) % 169 | 0;
 HEAP32[$a >> 2] = 0;
 while (1) {
  if ((HEAP32[$a >> 2] | 0) >= 97) break;
  HEAP32[$sum >> 2] = 0;
  HEAP32[$t >> 2] = 16777216;
  HEAP32[$b >> 2] = 0;
  while (1) {
   if ((HEAP32[$b >> 2] | 0) >= 24) break;
   $27 = (Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$j >> 2] | 0) | 0) % 179 | 0;
   HEAP32[$m >> 2] = (Math_imul($27, HEAP32[$k >> 2] | 0) | 0) % 179 | 0;
   HEAP32[$i >> 2] = HEAP32[$j >> 2];
   HEAP32[$j >> 2] = HEAP32[$k >> 2];
   HEAP32[$k >> 2] = HEAP32[$m >> 2];
   HEAP32[$l >> 2] = (((HEAP32[$l >> 2] | 0) * 53 | 0) + 1 | 0) % 169 | 0;
   HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) >>> 1;
   if ((((Math_imul(HEAP32[$l >> 2] | 0, HEAP32[$m >> 2] | 0) | 0) >>> 0) % 64 | 0) >>> 0 >= 32) HEAP32[$sum >> 2] = (HEAP32[$sum >> 2] | 0) + (HEAP32[$t >> 2] | 0);
   HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + 1;
  }
  HEAP32[(HEAP32[$state >> 2] | 0) + 12 + (HEAP32[$a >> 2] << 2) >> 2] = HEAP32[$sum >> 2];
  HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = 96;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 32;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = 362436;
 STACKTOP = sp;
 return;
}
function _ceer($order, $qq, $aa, $nterms) {
 $order = $order | 0;
 $qq = +$qq;
 $aa = +$aa;
 $nterms = $nterms | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $41 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $ii = 0, $n1 = 0, $term = 0, $term1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 40 | 0;
 $term = sp + 8 | 0;
 $term1 = sp;
 $ii = sp + 36 | 0;
 $n1 = sp + 32 | 0;
 HEAP32[$0 >> 2] = $order;
 HEAPF64[$1 >> 3] = $qq;
 HEAPF64[$2 >> 3] = $aa;
 HEAP32[$3 >> 2] = $nterms;
 L1 : do if (!(HEAP32[$0 >> 2] | 0)) HEAPF64[$term >> 3] = 0.0; else {
  HEAPF64[$term >> 3] = +HEAPF64[$1 >> 3] * 2.0 * +HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3];
  if ((HEAP32[$0 >> 2] | 0) != 2) {
   HEAP32[$n1 >> 2] = ((HEAP32[$0 >> 2] | 0) / 2 | 0) - 1;
   HEAP32[$ii >> 2] = 0;
   while (1) {
    if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$n1 >> 2] | 0)) break L1;
    HEAPF64[$term >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / (+HEAPF64[$2 >> 3] - +((HEAP32[$ii >> 2] | 0) + 1 | 0) * 4.0 * +((HEAP32[$ii >> 2] | 0) + 1 | 0) - +HEAPF64[$term >> 3]);
    HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
   }
  }
 } while (0);
 $41 = +(Math_imul(HEAP32[$0 >> 2] | 0, HEAP32[$0 >> 2] | 0) | 0);
 HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] + $41;
 HEAPF64[$term1 >> 3] = 0.0;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$3 >> 2] | 0)) break;
  HEAPF64[$term1 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / (+HEAPF64[$2 >> 3] - (+(HEAP32[$0 >> 2] | 0) + +((HEAP32[$3 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) | 0) * 2.0) * (+(HEAP32[$0 >> 2] | 0) + +((HEAP32[$3 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) | 0) * 2.0) - +HEAPF64[$term1 >> 3]);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 if (HEAP32[$0 >> 2] | 0) {
  $78 = +HEAPF64[$term >> 3];
  $79 = +HEAPF64[$term1 >> 3];
  $80 = $78 + $79;
  $81 = +HEAPF64[$2 >> 3];
  $82 = $80 - $81;
  STACKTOP = sp;
  return +$82;
 }
 HEAPF64[$term1 >> 3] = +HEAPF64[$term1 >> 3] * 2.0;
 $78 = +HEAPF64[$term >> 3];
 $79 = +HEAPF64[$term1 >> 3];
 $80 = $78 + $79;
 $81 = +HEAPF64[$2 >> 3];
 $82 = $80 - $81;
 STACKTOP = sp;
 return +$82;
}
function _solve_cubic($c2, $c1, $c0) {
 $c2 = +$c2;
 $c1 = +$c1;
 $c0 = +$c0;
 var $0 = 0, $1 = 0, $2 = 0, $36 = 0.0, $41 = 0.0, $53 = 0.0, $72 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $qq = 0, $rr = 0, $ss = 0, $t1 = 0, $theta = 0, $tt = 0, $ww = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $qq = sp + 48 | 0;
 $rr = sp + 40 | 0;
 $ww = sp + 32 | 0;
 $ss = sp + 24 | 0;
 $tt = sp + 16 | 0;
 $t1 = sp + 8 | 0;
 $theta = sp;
 HEAPF64[$0 >> 3] = $c2;
 HEAPF64[$1 >> 3] = $c1;
 HEAPF64[$2 >> 3] = $c0;
 HEAPF64[$qq >> 3] = (+HEAPF64[$1 >> 3] * 3.0 - +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]) / 9.0;
 HEAPF64[$rr >> 3] = (+HEAPF64[$0 >> 3] * 9.0 * +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3] * 27.0 - +HEAPF64[$0 >> 3] * 2.0 * +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]) / 54.0;
 HEAPF64[$ww >> 3] = +HEAPF64[$qq >> 3] * +HEAPF64[$qq >> 3] * +HEAPF64[$qq >> 3] + +HEAPF64[$rr >> 3] * +HEAPF64[$rr >> 3];
 $36 = +HEAPF64[$rr >> 3];
 if (+HEAPF64[$ww >> 3] >= 0.0) {
  HEAPF64[$t1 >> 3] = $36 + +Math_sqrt(+(+HEAPF64[$ww >> 3]));
  $41 = +Math_abs(+(+HEAPF64[$t1 >> 3]));
  HEAPF64[$ss >> 3] = $41 / +HEAPF64[$t1 >> 3] * +Math_pow(+(+Math_abs(+(+HEAPF64[$t1 >> 3]))), .3333333333333333);
  HEAPF64[$t1 >> 3] = +HEAPF64[$rr >> 3] - +Math_sqrt(+(+HEAPF64[$ww >> 3]));
  $53 = +Math_abs(+(+HEAPF64[$t1 >> 3]));
  HEAPF64[$tt >> 3] = $53 / +HEAPF64[$t1 >> 3] * +Math_pow(+(+Math_abs(+(+HEAPF64[$t1 >> 3]))), .3333333333333333);
  $78 = +HEAPF64[$ss >> 3];
  $79 = +HEAPF64[$tt >> 3];
  $80 = $78 + $79;
  $81 = +HEAPF64[$0 >> 3];
  $82 = $81 / 3.0;
  $83 = $80 - $82;
  STACKTOP = sp;
  return +$83;
 } else {
  HEAPF64[$theta >> 3] = +Math_acos(+($36 / +Math_sqrt(+(-+HEAPF64[$qq >> 3] * +HEAPF64[$qq >> 3] * +HEAPF64[$qq >> 3]))));
  $72 = +Math_sqrt(+-+HEAPF64[$qq >> 3]) * 2.0;
  HEAPF64[$ss >> 3] = $72 * +Math_cos(+((+HEAPF64[$theta >> 3] + 12.566370614359172) / 3.0));
  HEAPF64[$tt >> 3] = 0.0;
  $78 = +HEAPF64[$ss >> 3];
  $79 = +HEAPF64[$tt >> 3];
  $80 = $78 + $79;
  $81 = +HEAPF64[$0 >> 3];
  $82 = $81 / 3.0;
  $83 = $80 - $82;
  STACKTOP = sp;
  return +$83;
 }
 return 0.0;
}
function _gsl_sf_bessel_K0_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $30 = 0.0, $42 = 0.0, $44 = 0, $53 = 0.0, $66 = 0, $67 = 0, $I0 = 0, $K0_scaled = 0, $c = 0, $lx = 0, $stat_I0 = 0, $stat_K0 = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 76 | 0;
 $lx = sp + 48 | 0;
 $stat_I0 = sp + 72 | 0;
 $I0 = sp + 32 | 0;
 $c = sp + 16 | 0;
 $K0_scaled = sp;
 $stat_K0 = sp + 68 | 0;
 $stat_e = sp + 64 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(12768, 12784, 176, 1);
  HEAP32[$0 >> 2] = 1;
  $67 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] <= 2.0) {
  HEAPF64[$lx >> 3] = +Math_log(+$10);
  _cheb_eval_e116(13272, +HEAPF64[$1 >> 3] * .5 * +HEAPF64[$1 >> 3] - 1.0, $c) | 0;
  HEAP32[$stat_I0 >> 2] = _gsl_sf_bessel_I0_e(+HEAPF64[$1 >> 3], $I0) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (-+HEAPF64[$lx >> 3] + .6931471805599453) * +HEAPF64[$I0 >> 3] - .25 + +HEAPF64[$c >> 3];
  $30 = +Math_abs(+(+HEAPF64[$lx >> 3])) + .6931471805599453;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $30 * +HEAPF64[$I0 + 8 >> 3] + +HEAPF64[$c + 8 >> 3];
  $42 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $44 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$44 >> 3] = +HEAPF64[$44 >> 3] + $42;
  HEAP32[$0 >> 2] = HEAP32[$stat_I0 >> 2];
  $67 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 }
 HEAP32[$stat_K0 >> 2] = _gsl_sf_bessel_K0_scaled_e($10, $K0_scaled) | 0;
 $53 = +Math_abs(+(+HEAPF64[$1 >> 3])) * 2.220446049250313e-16;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(-+HEAPF64[$1 >> 3], $53, +HEAPF64[$K0_scaled >> 3], +HEAPF64[$K0_scaled + 8 >> 3], HEAP32[$2 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) $66 = HEAP32[$stat_e >> 2] | 0; else $66 = (HEAP32[$stat_K0 >> 2] | 0) != 0 ? HEAP32[$stat_K0 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $66;
 $67 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $67 | 0;
}
function _R_norm($n, $l, $Z, $result) {
 $n = $n | 0;
 $l = $l | 0;
 $Z = +$Z;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $58 = 0.0, $60 = 0, $73 = 0, $A = 0, $diff_err = 0, $diff_val = 0, $ex = 0, $ln_a = 0, $ln_b = 0, $pre = 0, $stat_a = 0, $stat_b = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 100 | 0;
 $A = sp + 72 | 0;
 $pre = sp + 64 | 0;
 $ln_a = sp + 48 | 0;
 $ln_b = sp + 32 | 0;
 $ex = sp + 16 | 0;
 $stat_a = sp + 96 | 0;
 $stat_b = sp + 92 | 0;
 $diff_val = sp + 8 | 0;
 $diff_err = sp;
 $stat_e = sp + 88 | 0;
 HEAP32[$0 >> 2] = $n;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $Z;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$A >> 3] = +HEAPF64[$2 >> 3] * 2.0 / +(HEAP32[$0 >> 2] | 0);
 HEAPF64[$pre >> 3] = +Math_sqrt(+(+HEAPF64[$A >> 3] * +HEAPF64[$A >> 3] * +HEAPF64[$A >> 3] / (+(HEAP32[$0 >> 2] | 0) * 2.0)));
 HEAP32[$stat_a >> 2] = _gsl_sf_lnfact_e((HEAP32[$0 >> 2] | 0) + (HEAP32[$1 >> 2] | 0) | 0, $ln_a) | 0;
 HEAP32[$stat_b >> 2] = _gsl_sf_lnfact_e((HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) - 1 | 0, $ln_b) | 0;
 HEAPF64[$diff_val >> 3] = (+HEAPF64[$ln_b >> 3] - +HEAPF64[$ln_a >> 3]) * .5;
 HEAPF64[$diff_err >> 3] = (+HEAPF64[$ln_b + 8 >> 3] + +HEAPF64[$ln_a + 8 >> 3]) * .5 + +Math_abs(+(+HEAPF64[$diff_val >> 3])) * 2.220446049250313e-16;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$diff_val >> 3], +HEAPF64[$diff_err >> 3], $ex) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$ex >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$ex + 8 >> 3];
 $58 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $60 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$60 >> 3] = +HEAPF64[$60 >> 3] + $58;
 if (HEAP32[$stat_e >> 2] | 0) {
  $73 = HEAP32[$stat_e >> 2] | 0;
  STACKTOP = sp;
  return $73 | 0;
 }
 if (HEAP32[$stat_a >> 2] | 0) {
  $73 = HEAP32[$stat_a >> 2] | 0;
  STACKTOP = sp;
  return $73 | 0;
 } else {
  $73 = (HEAP32[$stat_b >> 2] | 0) != 0 ? HEAP32[$stat_b >> 2] | 0 : 0;
  STACKTOP = sp;
  return $73 | 0;
 }
 return 0;
}
function _gsl_sf_angle_restrict_symm_err_e($theta, $result) {
 $theta = +$theta;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $25 = 0.0, $44 = 0, $49 = 0.0, $60 = 0, $delta = 0, $r = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 64 | 0;
 $y = sp + 16 | 0;
 $r = sp + 8 | 0;
 $delta = sp;
 HEAPF64[$1 >> 3] = $theta;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 48 >> 3] = 3.141592502593994;
 HEAPF64[sp + 40 >> 3] = 1.5099578831723193e-7;
 HEAPF64[sp + 32 >> 3] = 1.0780605716316238e-14;
 HEAPF64[sp + 24 >> 3] = 6.283185307179586;
 HEAPF64[$y >> 3] = +((+HEAPF64[$1 >> 3] >= 0.0 ? 1 : -1) << 1 | 0) * +Math_floor(+(+Math_abs(+(+HEAPF64[$1 >> 3])) / 6.283185307179586));
 HEAPF64[$r >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$y >> 3] * 3.141592502593994 - +HEAPF64[$y >> 3] * 1.5099578831723193e-7 - +HEAPF64[$y >> 3] * 1.0780605716316238e-14;
 $25 = +HEAPF64[$r >> 3];
 if (+HEAPF64[$r >> 3] > 3.141592653589793) HEAPF64[$r >> 3] = $25 - 6.283185005187988 - 3.0199157663446385e-7 - 2.1561211432632476e-14; else if ($25 < -3.141592653589793) HEAPF64[$r >> 3] = +HEAPF64[$r >> 3] + 6.283185005187988 + 3.0199157663446385e-7 + 2.1561211432632476e-14;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$r >> 3];
 if (+Math_abs(+(+HEAPF64[$1 >> 3])) > 281474976710656.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(61560, 61536, 552, 17);
  HEAP32[$0 >> 2] = 17;
  $60 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $60 | 0;
 }
 $44 = +Math_abs(+(+HEAPF64[$1 >> 3])) > 4194304.0;
 $49 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3] - +HEAPF64[$1 >> 3]));
 if ($44) {
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 4.440892098500626e-16 * $49;
  HEAP32[$0 >> 2] = 0;
  $60 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $60 | 0;
 } else {
  HEAPF64[$delta >> 3] = $49;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$delta >> 3] < 3.141592653589793 ? +HEAPF64[$delta >> 3] : 3.141592653589793) * 4.440892098500626e-16;
  HEAP32[$0 >> 2] = 0;
  $60 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $60 | 0;
 }
 return 0;
}
function _olver_B2($z, $abs_zeta) {
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 var $0 = 0, $1 = 0, $14 = 0.0, $5 = 0.0, $55 = 0.0, $a = 0, $c = 0, $c10 = 0, $x = 0, $x1 = 0, $zi = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $0 = sp + 160 | 0;
 $1 = sp + 152 | 0;
 $x = sp + 136 | 0;
 $c = sp + 120 | 0;
 $a = sp + 112 | 0;
 $zi = sp + 24 | 0;
 $x1 = sp + 16 | 0;
 $c10 = sp;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[sp + 144 >> 3] = $abs_zeta;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .8) {
  HEAPF64[$x >> 3] = 5.0 * $5 / 2.0 - 1.0;
  _cheb_eval_e191(17592, +HEAPF64[$x >> 3], $c) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c >> 3] / +HEAPF64[$1 >> 3];
  $55 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$55;
 }
 $14 = +HEAPF64[$1 >> 3];
 if ($5 <= 1.2) {
  HEAPF64[$a >> 3] = 1.0 - $14;
  HEAPF64[sp + 104 >> 3] = .0005522130767212928;
  HEAPF64[sp + 96 >> 3] = .0008958651631047693;
  HEAPF64[sp + 88 >> 3] = .0006701500344156977;
  HEAPF64[sp + 80 >> 3] = .00010166263361949046;
  HEAPF64[sp + 72 >> 3] = -.00044086345133806886;
  HEAPF64[sp + 64 >> 3] = -.0007396308150878874;
  HEAPF64[sp + 56 >> 3] = -.0007674549437783956;
  HEAPF64[sp + 48 >> 3] = -.0006082903810604037;
  HEAPF64[sp + 40 >> 3] = -.00037128707528893496;
  HEAPF64[sp + 32 >> 3] = -.0001411632510570261;
  HEAPF64[$0 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * -.0001411632510570261 + -.00037128707528893496) + -.0006082903810604037) + -.0007674549437783956) + -.0007396308150878874) + -.00044086345133806886) + .00010166263361949046) + .0006701500344156977) + .0008958651631047693) + .0005522130767212928;
  $55 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$55;
 } else {
  HEAPF64[$zi >> 3] = 1.0 / $14;
  HEAPF64[$x1 >> 3] = +HEAPF64[$zi >> 3] * 2.4 - 1.0;
  _cheb_eval_e191(17240, +HEAPF64[$x1 >> 3], $c10) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c10 >> 3] * +HEAPF64[$zi >> 3] * +HEAPF64[$zi >> 3] * +HEAPF64[$zi >> 3];
  $55 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$55;
 }
 return 0.0;
}
function _gsl_sf_angle_restrict_pos_err_e($theta, $result) {
 $theta = +$theta;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $36 = 0.0, $41 = 0, $46 = 0.0, $57 = 0, $delta = 0, $r = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 64 | 0;
 $y = sp + 16 | 0;
 $r = sp + 8 | 0;
 $delta = sp;
 HEAPF64[$1 >> 3] = $theta;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 48 >> 3] = 3.141592502593994;
 HEAPF64[sp + 40 >> 3] = 1.5099578831723193e-7;
 HEAPF64[sp + 32 >> 3] = 1.0780605716316238e-14;
 HEAPF64[sp + 24 >> 3] = 6.283185307179586;
 HEAPF64[$y >> 3] = +Math_floor(+(+HEAPF64[$1 >> 3] / 6.283185307179586)) * 2.0;
 HEAPF64[$r >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$y >> 3] * 3.141592502593994 - +HEAPF64[$y >> 3] * 1.5099578831723193e-7 - +HEAPF64[$y >> 3] * 1.0780605716316238e-14;
 $19 = +HEAPF64[$r >> 3];
 if (+HEAPF64[$r >> 3] > 6.283185307179586) HEAPF64[$r >> 3] = $19 - 6.283185005187988 - 3.0199157663446385e-7 - 2.1561211432632476e-14; else if ($19 < 0.0) HEAPF64[$r >> 3] = +HEAPF64[$r >> 3] + 6.283185005187988 + 3.0199157663446385e-7 + 2.1561211432632476e-14;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$r >> 3];
 if (+Math_abs(+(+HEAPF64[$1 >> 3])) > 281474976710656.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  $36 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $36;
  _gsl_error(61560, 61536, 588, 17);
  HEAP32[$0 >> 2] = 17;
  $57 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 }
 $41 = +Math_abs(+(+HEAPF64[$1 >> 3])) > 4194304.0;
 $46 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3] - +HEAPF64[$1 >> 3]));
 if ($41) {
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16 * $46;
  HEAP32[$0 >> 2] = 0;
  $57 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 } else {
  HEAPF64[$delta >> 3] = $46;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$delta >> 3] < 3.141592653589793 ? +HEAPF64[$delta >> 3] : 3.141592653589793) * 4.440892098500626e-16;
  HEAP32[$0 >> 2] = 0;
  $57 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 }
 return 0;
}
function _asymptotic($order, $qq) {
 $order = $order | 0;
 $qq = +$qq;
 var $0 = 0, $1 = 0, $ah = 0, $ah2 = 0, $ah3 = 0, $ah4 = 0, $ah5 = 0, $asymp = 0, $hh = 0, $n2 = 0, $n4 = 0, $n6 = 0, $nn = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 88 | 0;
 $asymp = sp + 80 | 0;
 $nn = sp + 72 | 0;
 $n2 = sp + 64 | 0;
 $n4 = sp + 56 | 0;
 $n6 = sp + 48 | 0;
 $hh = sp + 40 | 0;
 $ah = sp + 32 | 0;
 $ah2 = sp + 24 | 0;
 $ah3 = sp + 16 | 0;
 $ah4 = sp + 8 | 0;
 $ah5 = sp;
 HEAP32[$0 >> 2] = $order;
 HEAPF64[$1 >> 3] = $qq;
 HEAPF64[$nn >> 3] = +((HEAP32[$0 >> 2] << 1) + 1 | 0);
 HEAPF64[$n2 >> 3] = +HEAPF64[$nn >> 3] * +HEAPF64[$nn >> 3];
 HEAPF64[$n4 >> 3] = +HEAPF64[$n2 >> 3] * +HEAPF64[$n2 >> 3];
 HEAPF64[$n6 >> 3] = +HEAPF64[$n4 >> 3] * +HEAPF64[$n2 >> 3];
 HEAPF64[$hh >> 3] = +Math_sqrt(+(+HEAPF64[$1 >> 3])) * 2.0;
 HEAPF64[$ah >> 3] = +HEAPF64[$hh >> 3] * 16.0;
 HEAPF64[$ah2 >> 3] = +HEAPF64[$ah >> 3] * +HEAPF64[$ah >> 3];
 HEAPF64[$ah3 >> 3] = +HEAPF64[$ah2 >> 3] * +HEAPF64[$ah >> 3];
 HEAPF64[$ah4 >> 3] = +HEAPF64[$ah3 >> 3] * +HEAPF64[$ah >> 3];
 HEAPF64[$ah5 >> 3] = +HEAPF64[$ah4 >> 3] * +HEAPF64[$ah >> 3];
 HEAPF64[$asymp >> 3] = +HEAPF64[$1 >> 3] * -2.0 + +HEAPF64[$nn >> 3] * +HEAPF64[$hh >> 3] - (+HEAPF64[$n2 >> 3] + 1.0) * .125;
 HEAPF64[$asymp >> 3] = +HEAPF64[$asymp >> 3] - +HEAPF64[$nn >> 3] * .25 * (+HEAPF64[$n2 >> 3] + 3.0) / +HEAPF64[$ah >> 3];
 HEAPF64[$asymp >> 3] = +HEAPF64[$asymp >> 3] - (+HEAPF64[$n4 >> 3] * 5.0 + +HEAPF64[$n2 >> 3] * 34.0 + 9.0) * .25 / +HEAPF64[$ah2 >> 3];
 HEAPF64[$asymp >> 3] = +HEAPF64[$asymp >> 3] - +HEAPF64[$nn >> 3] * .25 * (+HEAPF64[$n4 >> 3] * 33.0 + +HEAPF64[$n2 >> 3] * 410.0 + 405.0) / +HEAPF64[$ah3 >> 3];
 HEAPF64[$asymp >> 3] = +HEAPF64[$asymp >> 3] - (+HEAPF64[$n6 >> 3] * 63.0 + +HEAPF64[$n4 >> 3] * 1260.0 + +HEAPF64[$n2 >> 3] * 2943.0 + 486.0) / +HEAPF64[$ah4 >> 3];
 HEAPF64[$asymp >> 3] = +HEAPF64[$asymp >> 3] - +HEAPF64[$nn >> 3] * (+HEAPF64[$n6 >> 3] * 527.0 + +HEAPF64[$n4 >> 3] * 15617.0 + +HEAPF64[$n2 >> 3] * 69001.0 + 41607.0) / +HEAPF64[$ah5 >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$asymp >> 3]);
}
function _gsl_sf_psi_int_e($n, $result) {
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $17 = 0.0, $2 = 0, $40 = 0.0, $51 = 0.0, $56 = 0.0, $60 = 0.0, $66 = 0.0, $68 = 0, $71 = 0, $ni2 = 0, $ser = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $ni2 = sp + 8 | 0;
 $ser = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) <= 0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(55568, 55584, 587, 1);
  HEAP32[$0 >> 2] = 1;
  $71 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) <= 100) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[55592 + (HEAP32[$1 >> 2] << 3) >> 3];
  $17 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $17;
  HEAP32[$0 >> 2] = 0;
  $71 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 } else {
  HEAPF64[sp + 40 >> 3] = -.08333333333333333;
  HEAPF64[sp + 32 >> 3] = .008333333333333333;
  HEAPF64[sp + 24 >> 3] = -.003968253968253968;
  HEAPF64[sp + 16 >> 3] = .004166666666666667;
  HEAPF64[$ni2 >> 3] = 1.0 / +(HEAP32[$1 >> 2] | 0) * (1.0 / +(HEAP32[$1 >> 2] | 0));
  HEAPF64[$ser >> 3] = +HEAPF64[$ni2 >> 3] * (+HEAPF64[$ni2 >> 3] * (+HEAPF64[$ni2 >> 3] * (+HEAPF64[$ni2 >> 3] * .004166666666666667 + -.003968253968253968) + .008333333333333333) + -.08333333333333333);
  $40 = +Math_log(+(+(HEAP32[$1 >> 2] | 0)));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $40 - .5 / +(HEAP32[$1 >> 2] | 0) + +HEAPF64[$ser >> 3];
  $51 = +Math_abs(+(+Math_log(+(+(HEAP32[$1 >> 2] | 0)))));
  $56 = $51 + +Math_abs(+(.5 / +(HEAP32[$1 >> 2] | 0)));
  $60 = ($56 + +Math_abs(+(+HEAPF64[$ser >> 3]))) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $60;
  $66 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  $68 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$68 >> 3] = +HEAPF64[$68 >> 3] + $66;
  HEAP32[$0 >> 2] = 0;
  $71 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 return 0;
}
function _riemann_zeta_sgt0($s, $result) {
 $s = +$s;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $18 = 0.0, $2 = 0, $23 = 0.0, $27 = 0.0, $46 = 0.0, $5 = 0.0, $76 = 0.0, $79 = 0, $c = 0, $c1 = 0, $f2 = 0, $f3 = 0, $f5 = 0, $f7 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 80 | 0;
 $c = sp + 56 | 0;
 $x = sp + 48 | 0;
 $c1 = sp + 32 | 0;
 $f2 = sp + 24 | 0;
 $f3 = sp + 16 | 0;
 $f5 = sp + 8 | 0;
 $f7 = sp;
 HEAPF64[$1 >> 3] = $s;
 HEAP32[$2 >> 2] = $result;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 1.0) {
  _cheb_eval_e673(65824, 2.0 * $5 - 1.0, $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] / (+HEAPF64[$1 >> 3] - 1.0);
  $18 = +HEAPF64[$c + 8 >> 3] / +Math_abs(+(+HEAPF64[$1 >> 3] - 1.0));
  $23 = $18 + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $23;
  HEAP32[$0 >> 2] = 0;
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 $27 = +HEAPF64[$1 >> 3];
 if ($5 <= 20.0) {
  HEAPF64[$x >> 3] = (2.0 * $27 - 21.0) / 19.0;
  _cheb_eval_e673(65680, +HEAPF64[$x >> 3], $c1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c1 >> 3] / (+HEAPF64[$1 >> 3] - 1.0);
  $46 = +HEAPF64[$c1 + 8 >> 3] / (+HEAPF64[$1 >> 3] - 1.0) + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $46;
  HEAP32[$0 >> 2] = 0;
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 } else {
  HEAPF64[$f2 >> 3] = 1.0 - +Math_pow(2.0, +-$27);
  HEAPF64[$f3 >> 3] = 1.0 - +Math_pow(3.0, +-+HEAPF64[$1 >> 3]);
  HEAPF64[$f5 >> 3] = 1.0 - +Math_pow(5.0, +-+HEAPF64[$1 >> 3]);
  HEAPF64[$f7 >> 3] = 1.0 - +Math_pow(7.0, +-+HEAPF64[$1 >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 / (+HEAPF64[$f2 >> 3] * +HEAPF64[$f3 >> 3] * +HEAPF64[$f5 >> 3] * +HEAPF64[$f7 >> 3]);
  $76 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 6.661338147750939e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $76;
  HEAP32[$0 >> 2] = 0;
  $79 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $79 | 0;
 }
 return 0;
}
function _olver_B0($z, $abs_zeta) {
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 var $0 = 0, $1 = 0, $2 = 0, $29 = 0.0, $5 = 0.0, $80 = 0.0, $a = 0, $t = 0, $t1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $t = sp + 88 | 0;
 $a = sp + 80 | 0;
 $t1 = sp;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[$2 >> 3] = $abs_zeta;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .98) {
  HEAPF64[$t >> 3] = 1.0 / +Math_sqrt(+(1.0 - $5 * +HEAPF64[$1 >> 3]));
  HEAPF64[$0 >> 3] = -5.0 / (+HEAPF64[$2 >> 3] * 48.0 * +HEAPF64[$2 >> 3]) + +HEAPF64[$t >> 3] * (+HEAPF64[$t >> 3] * 5.0 * +HEAPF64[$t >> 3] + -3.0) / (+Math_sqrt(+(+HEAPF64[$2 >> 3])) * 24.0);
  $80 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$80;
 }
 $29 = +HEAPF64[$1 >> 3];
 if ($5 < 1.02) {
  HEAPF64[$a >> 3] = 1.0 - $29;
  HEAPF64[sp + 72 >> 3] = .01799887214135533;
  HEAPF64[sp + 64 >> 3] = .011199298221287762;
  HEAPF64[sp + 56 >> 3] = .00594040697860143;
  HEAPF64[sp + 48 >> 3] = .002867672451639004;
  HEAPF64[sp + 40 >> 3] = .001233918905256727;
  HEAPF64[sp + 32 >> 3] = .0004169250674535179;
  HEAPF64[sp + 24 >> 3] = 3301733850859498.0e-20;
  HEAPF64[sp + 16 >> 3] = -.0001318076238578203;
  HEAPF64[sp + 8 >> 3] = -.00019068703700508472;
  HEAPF64[$0 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * -.00019068703700508472 + -.0001318076238578203) + 3301733850859498.0e-20) + .0004169250674535179) + .001233918905256727) + .002867672451639004) + .00594040697860143) + .011199298221287762) + .01799887214135533;
  $80 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$80;
 } else {
  HEAPF64[$t1 >> 3] = 1.0 / ($29 * +Math_sqrt(+(1.0 - 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]))));
  HEAPF64[$0 >> 3] = -5.0 / (+HEAPF64[$2 >> 3] * 48.0 * +HEAPF64[$2 >> 3]) + +HEAPF64[$t1 >> 3] * (+HEAPF64[$t1 >> 3] * 5.0 * +HEAPF64[$t1 >> 3] + 3.0) / (+Math_sqrt(+(+HEAPF64[$2 >> 3])) * 24.0);
  $80 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$80;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_0_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $34 = 0.0, $38 = 0.0, $41 = 0.0, $45 = 0.0, $76 = 0, $ex = 0, $ex1 = 0, $ser = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 36 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 32 | 0;
 $ex = sp + 16 | 0;
 $ser = sp + 8 | 0;
 $ex1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(33376, 33392, 1239, 15);
  HEAP32[$0 >> 2] = 15;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -5.0) {
  HEAPF64[$ex >> 3] = +Math_exp(+$10);
  HEAPF64[$ser >> 3] = 1.0 - +HEAPF64[$ex >> 3] * (.5 - +HEAPF64[$ex >> 3] * (.3333333333333333 - +HEAPF64[$ex >> 3] * (.25 - +HEAPF64[$ex >> 3] * (.2 - +HEAPF64[$ex >> 3] / 6.0))));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ex >> 3] * +HEAPF64[$ser >> 3];
  $34 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $34;
  HEAP32[$0 >> 2] = 0;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 }
 $38 = +HEAPF64[$1 >> 3];
 if ($10 < 10.0) {
  $41 = +Math_log(+(+Math_exp(+$38) + 1.0));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $41;
  $45 = +Math_abs(+(+HEAPF64[$1 >> 3] * 2.220446049250313e-16));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $45;
  HEAP32[$0 >> 2] = 0;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 } else {
  HEAPF64[$ex1 >> 3] = +Math_exp(+-$38);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] + +HEAPF64[$ex1 >> 3] * (1.0 - +HEAPF64[$ex1 >> 3] * .5 + +HEAPF64[$ex1 >> 3] * +HEAPF64[$ex1 >> 3] / 3.0 - +HEAPF64[$ex1 >> 3] * +HEAPF64[$ex1 >> 3] * +HEAPF64[$ex1 >> 3] / 4.0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$1 >> 3] + +HEAPF64[$ex1 >> 3]) * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 }
 return 0;
}
function _hyperg_1F1_largebx($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $121 = 0.0, $126 = 0.0, $2 = 0, $3 = 0, $45 = 0.0, $76 = 0.0, $8 = 0.0, $f = 0, $t1 = 0, $t2 = 0, $t3 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 64 | 0;
 $y = sp + 32 | 0;
 $f = sp + 24 | 0;
 $t1 = sp + 16 | 0;
 $t2 = sp + 8 | 0;
 $t3 = sp;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $b;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$y >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$1 >> 3];
 $8 = -+HEAPF64[$0 >> 3];
 HEAPF64[$f >> 3] = +Math_exp(+($8 * +_log1p(+-+HEAPF64[$y >> 3])));
 HEAPF64[$t1 >> 3] = -(+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] + 1.0) / (+HEAPF64[$1 >> 3] * 2.0)) * +Math_pow(+(+HEAPF64[$y >> 3] / (1.0 - +HEAPF64[$y >> 3])), 2.0);
 $45 = 1.0 / (+HEAPF64[$1 >> 3] * 24.0 * +HEAPF64[$1 >> 3]) * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] + 1.0) * +HEAPF64[$y >> 3] * +HEAPF64[$y >> 3] / +Math_pow(+(1.0 - +HEAPF64[$y >> 3]), 4.0));
 HEAPF64[$t2 >> 3] = $45 * ((+HEAPF64[$0 >> 3] * 2.0 + 1.0) * 8.0 * +HEAPF64[$y >> 3] + 12.0 + (+HEAPF64[$0 >> 3] * 3.0 * +HEAPF64[$0 >> 3] - +HEAPF64[$0 >> 3] - 2.0) * +HEAPF64[$y >> 3] * +HEAPF64[$y >> 3]);
 $76 = -1.0 / (+HEAPF64[$1 >> 3] * 48.0 * +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] * +Math_pow(+(1.0 - +HEAPF64[$y >> 3]), 6.0));
 HEAPF64[$t3 >> 3] = $76 * +HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] + 1.0) * (+HEAPF64[$y >> 3] * (+HEAPF64[$0 >> 3] + 1.0) * (+HEAPF64[$0 >> 3] * +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$0 >> 3] - 2.0) + 16.0) * (+HEAPF64[$0 >> 3] - 1.0) + 72.0) + 96.0) + 24.0) * +Math_pow(+(+HEAPF64[$y >> 3]), 2.0);
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$f >> 3] * (+HEAPF64[$t1 >> 3] + 1.0 + +HEAPF64[$t2 >> 3] + +HEAPF64[$t3 >> 3]);
 $121 = +Math_abs(+(+HEAPF64[$f >> 3] * +HEAPF64[$t3 >> 3])) * 2.0;
 $126 = $121 + +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $126;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_bessel_i0_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $43 = 0.0, $46 = 0.0, $64 = 0, $ax = 0, $eax = 0, $sum = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 80 | 0;
 $ax = sp + 64 | 0;
 $eax = sp + 56 | 0;
 $y = sp + 48 | 0;
 $sum = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 $12 = +HEAPF64[$ax >> 3];
 do if (+HEAPF64[$ax >> 3] < .2) {
  HEAPF64[$eax >> 3] = +Math_exp(+-$12);
  HEAPF64[$y >> 3] = +HEAPF64[$ax >> 3] * +HEAPF64[$ax >> 3];
  HEAPF64[sp + 40 >> 3] = .16666666666666666;
  HEAPF64[sp + 32 >> 3] = .008333333333333333;
  HEAPF64[sp + 24 >> 3] = .0001984126984126984;
  HEAPF64[sp + 16 >> 3] = 27557319223985893.0e-22;
  HEAPF64[sp + 8 >> 3] = 2.505210838544172e-8;
  HEAPF64[$sum >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * 2.505210838544172e-8 + 27557319223985893.0e-22) + .0001984126984126984) + .008333333333333333) + .16666666666666666) + 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$eax >> 3] * +HEAPF64[$sum >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 4.440892098500626e-16;
 } else {
  $43 = +HEAPF64[$ax >> 3];
  if ($12 < 18.021826694558577) {
   $46 = 1.0 - +Math_exp(+(-2.0 * $43));
   HEAPF64[HEAP32[$2 >> 2] >> 3] = $46 / (+HEAPF64[$ax >> 3] * 2.0);
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 4.440892098500626e-16;
   break;
  } else {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 / (2.0 * $43);
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 4.440892098500626e-16;
   break;
  }
 } while (0);
 HEAP32[$0 >> 2] = 0;
 $64 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $64 | 0;
}
function _gsl_sf_exprel_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $15 = 0.0, $17 = 0.0, $2 = 0, $24 = 0.0, $28 = 0.0, $47 = 0.0, $5 = 0.0, $53 = 0.0, $60 = 0.0, $66 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp >> 3] = .002;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -1.0 / $5;
  $11 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $11;
  HEAP32[$0 >> 2] = 0;
  $66 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 if ($5 < -.002) {
  $17 = +Math_exp(+$15) - 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $17 / +HEAPF64[$1 >> 3];
  $24 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $24;
  HEAP32[$0 >> 2] = 0;
  $66 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 $28 = +HEAPF64[$1 >> 3];
 if ($15 < .002) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = .5 * $28 * (+HEAPF64[$1 >> 3] / 3.0 * (+HEAPF64[$1 >> 3] * .25 * (+HEAPF64[$1 >> 3] * .2 + 1.0) + 1.0) + 1.0) + 1.0;
  $47 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $47;
  HEAP32[$0 >> 2] = 0;
  $66 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 if ($28 < 709.782712893384) {
  $53 = +Math_exp(+(+HEAPF64[$1 >> 3])) - 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $53 / +HEAPF64[$1 >> 3];
  $60 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $60;
  HEAP32[$0 >> 2] = 0;
  $66 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $66 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31008, 31024, 381, 16);
  HEAP32[$0 >> 2] = 16;
  $66 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_kl_scaled_array($lmax, $x, $result_array) {
 $lmax = $lmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $45 = 0, $ell = 0, $kell = 0, $kellm1 = 0, $kellp1 = 0, $r_kell = 0, $r_kellm1 = 0, $result = 0, $stat = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 92 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 88 | 0;
 $result = sp + 56 | 0;
 $stat = sp + 84 | 0;
 $ell = sp + 80 | 0;
 $kellp1 = sp + 48 | 0;
 $kell = sp + 40 | 0;
 $kellm1 = sp + 32 | 0;
 $r_kell = sp + 16 | 0;
 $r_kellm1 = sp;
 HEAP32[$1 >> 2] = $lmax;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result_array;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] <= 0.0)) {
  $10 = +HEAPF64[$2 >> 3];
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$stat >> 2] = _gsl_sf_bessel_k0_scaled_e($10, $result) | 0;
   HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$result >> 3];
   HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
   $45 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  }
  _gsl_sf_bessel_k1_scaled_e($10, $r_kell) | 0;
  _gsl_sf_bessel_k0_scaled_e(+HEAPF64[$2 >> 3], $r_kellm1) | 0;
  HEAPF64[$kell >> 3] = +HEAPF64[$r_kell >> 3];
  HEAPF64[$kellm1 >> 3] = +HEAPF64[$r_kellm1 >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$kellm1 >> 3];
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$kell >> 3];
  HEAP32[$ell >> 2] = 1;
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$kellp1 >> 3] = +((HEAP32[$ell >> 2] << 1) + 1 | 0) / +HEAPF64[$2 >> 3] * +HEAPF64[$kell >> 3] + +HEAPF64[$kellm1 >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$ell >> 2] | 0) + 1 << 3) >> 3] = +HEAPF64[$kellp1 >> 3];
   HEAPF64[$kellm1 >> 3] = +HEAPF64[$kell >> 3];
   HEAPF64[$kell >> 3] = +HEAPF64[$kellp1 >> 3];
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = 0;
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 _gsl_error(16032, 16048, 196, 1);
 HEAP32[$0 >> 2] = 1;
 $45 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $45 | 0;
}
function _gsl_sf_pochrel_e($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $39 = 0.0, $51 = 0.0, $54 = 0.0, $56 = 0, $64 = 0, $absa = 0, $absx = 0, $el = 0, $lnpoch = 0, $sgn = 0, $stat_poch = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 68 | 0;
 $absx = sp + 40 | 0;
 $absa = sp + 32 | 0;
 $lnpoch = sp + 16 | 0;
 $sgn = sp + 8 | 0;
 $stat_poch = sp + 64 | 0;
 $el = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$absx >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$absa >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (!(+HEAPF64[$absx >> 3] > +HEAPF64[$absa >> 3] * .1)) if (!(+HEAPF64[$absx >> 3] * +Math_log(+(+HEAPF64[$absa >> 3] > 2.0 ? +HEAPF64[$absa >> 3] : 2.0)) > .1)) {
  HEAP32[$0 >> 2] = _pochrel_smallx(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 HEAP32[$stat_poch >> 2] = _gsl_sf_lnpoch_sgn_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $lnpoch, $sgn) | 0;
 if (+HEAPF64[$lnpoch >> 3] > 709.782712893384) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(55216, 55208, 432, 16);
  HEAP32[$0 >> 2] = 16;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else {
  HEAPF64[$el >> 3] = +Math_exp(+(+HEAPF64[$lnpoch >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = (+HEAPF64[$sgn >> 3] * +HEAPF64[$el >> 3] - 1.0) / +HEAPF64[$2 >> 3];
  $39 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $39 * (+HEAPF64[$lnpoch + 8 >> 3] + 4.440892098500626e-16);
  $51 = (+Math_abs(+(+HEAPF64[$sgn >> 3] * +HEAPF64[$el >> 3])) + 1.0) * 4.440892098500626e-16;
  $54 = $51 / +Math_abs(+(+HEAPF64[$2 >> 3]));
  $56 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$56 >> 3] = +HEAPF64[$56 >> 3] + $54;
  HEAP32[$0 >> 2] = HEAP32[$stat_poch >> 2];
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 return 0;
}
function _ran3_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $i1 = 0, $j = 0, $k = 0, $n = 0, $state = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 $state = sp + 24 | 0;
 $i = sp + 20 | 0;
 $i1 = sp + 16 | 0;
 $j = sp + 12 | 0;
 $k = sp + 8 | 0;
 $n = sp + 4 | 0;
 $t = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[$j >> 2] = ((161803398 - (HEAP32[$1 >> 2] | 0) | 0) >>> 0) % 1e9 | 0;
 if ((HEAP32[$j >> 2] | 0) < 0) HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1e9;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 228 >> 2] = HEAP32[$j >> 2];
 HEAP32[$k >> 2] = 1;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 55) break;
  HEAP32[$n >> 2] = ((HEAP32[$i >> 2] | 0) * 21 | 0) % 55 | 0;
  HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$n >> 2] << 2) >> 2] = HEAP32[$k >> 2];
  HEAP32[$k >> 2] = (HEAP32[$j >> 2] | 0) - (HEAP32[$k >> 2] | 0);
  if ((HEAP32[$k >> 2] | 0) < 0) HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1e9;
  HEAP32[$j >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$n >> 2] << 2) >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i1 >> 2] | 0) >= 4) break;
  HEAP32[$i >> 2] = 1;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= 56) break;
   HEAP32[$t >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) >> 2] | 0) - (HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (1 + (((HEAP32[$i >> 2] | 0) + 30 | 0) % 55 | 0) << 2) >> 2] | 0);
   if ((HEAP32[$t >> 2] | 0) < 0) HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) + 1e9;
   HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$t >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$i1 >> 2] = (HEAP32[$i1 >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 31;
 STACKTOP = sp;
 return;
}
function _hyperg_1F1_a_negint_poly($a, $b, $x, $result) {
 $a = $a | 0;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $54 = 0.0, $57 = 0.0, $60 = 0, $N = 0, $k = 0, $poly = 0, $r = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 48 | 0;
 $N = sp + 44 | 0;
 $poly = sp + 16 | 0;
 $k = sp + 40 | 0;
 $t = sp + 8 | 0;
 $r = sp;
 HEAP32[$1 >> 2] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 1.0;
  HEAP32[$0 >> 2] = 0;
  $60 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $60 | 0;
 }
 HEAP32[$N >> 2] = 0 - (HEAP32[$1 >> 2] | 0);
 HEAPF64[$poly >> 3] = 1.0;
 HEAP32[$k >> 2] = (HEAP32[$N >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) < 0) {
   label = 8;
   break;
  }
  HEAPF64[$t >> 3] = +((HEAP32[$1 >> 2] | 0) + (HEAP32[$k >> 2] | 0) | 0) / (+HEAPF64[$2 >> 3] + +(HEAP32[$k >> 2] | 0)) * (+HEAPF64[$3 >> 3] / +((HEAP32[$k >> 2] | 0) + 1 | 0));
  HEAPF64[$r >> 3] = +HEAPF64[$t >> 3] + 1.0 / +HEAPF64[$poly >> 3];
  if (+HEAPF64[$r >> 3] > 1.6179238213760842e+308 / +HEAPF64[$poly >> 3]) {
   label = 6;
   break;
  }
  HEAPF64[$poly >> 3] = +HEAPF64[$poly >> 3] * +HEAPF64[$r >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + -1;
 }
 if ((label | 0) == 6) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(51784, 51680, 1198, 16);
  HEAP32[$0 >> 2] = 16;
  $60 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $60 | 0;
 } else if ((label | 0) == 8) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$poly >> 3];
  $54 = (+Math_sqrt(+(+(HEAP32[$N >> 2] | 0))) + 1.0) * 2.0 * 2.220446049250313e-16;
  $57 = $54 * +Math_abs(+(+HEAPF64[$poly >> 3]));
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $57;
  HEAP32[$0 >> 2] = 0;
  $60 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $60 | 0;
 }
 return 0;
}
function _coulomb_G_recur($lam_min, $kmax, $eta, $x, $G_lam_min, $Gp_lam_min, $G_lam_max, $Gp_lam_max) {
 $lam_min = +$lam_min;
 $kmax = $kmax | 0;
 $eta = +$eta;
 $x = +$x;
 $G_lam_min = +$G_lam_min;
 $Gp_lam_min = +$Gp_lam_min;
 $G_lam_max = $G_lam_max | 0;
 $Gp_lam_max = $Gp_lam_max | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $el = 0, $gcl = 0, $gcl1 = 0, $gpl = 0, $k = 0, $lam = 0, $rl = 0, $sl = 0, $x_inv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 116 | 0;
 $2 = sp + 88 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 112 | 0;
 $7 = sp + 108 | 0;
 $x_inv = sp + 56 | 0;
 $gcl = sp + 48 | 0;
 $gpl = sp + 40 | 0;
 $lam = sp + 32 | 0;
 $k = sp + 104 | 0;
 $el = sp + 24 | 0;
 $rl = sp + 16 | 0;
 $sl = sp + 8 | 0;
 $gcl1 = sp;
 HEAPF64[$0 >> 3] = $lam_min;
 HEAP32[$1 >> 2] = $kmax;
 HEAPF64[$2 >> 3] = $eta;
 HEAPF64[$3 >> 3] = $x;
 HEAPF64[$4 >> 3] = $G_lam_min;
 HEAPF64[$5 >> 3] = $Gp_lam_min;
 HEAP32[$6 >> 2] = $G_lam_max;
 HEAP32[$7 >> 2] = $Gp_lam_max;
 HEAPF64[$x_inv >> 3] = 1.0 / +HEAPF64[$3 >> 3];
 HEAPF64[$gcl >> 3] = +HEAPF64[$4 >> 3];
 HEAPF64[$gpl >> 3] = +HEAPF64[$5 >> 3];
 HEAPF64[$lam >> 3] = +HEAPF64[$0 >> 3] + 1.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[$el >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$lam >> 3];
  HEAPF64[$rl >> 3] = +_hypot(1.0, +(+HEAPF64[$el >> 3]));
  HEAPF64[$sl >> 3] = +HEAPF64[$el >> 3] + +HEAPF64[$lam >> 3] * +HEAPF64[$x_inv >> 3];
  HEAPF64[$gcl1 >> 3] = (+HEAPF64[$sl >> 3] * +HEAPF64[$gcl >> 3] - +HEAPF64[$gpl >> 3]) / +HEAPF64[$rl >> 3];
  HEAPF64[$gpl >> 3] = +HEAPF64[$rl >> 3] * +HEAPF64[$gcl >> 3] - +HEAPF64[$sl >> 3] * +HEAPF64[$gcl1 >> 3];
  HEAPF64[$gcl >> 3] = +HEAPF64[$gcl1 >> 3];
  HEAPF64[$lam >> 3] = +HEAPF64[$lam >> 3] + 1.0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$6 >> 2] >> 3] = +HEAPF64[$gcl >> 3];
 HEAPF64[HEAP32[$7 >> 2] >> 3] = +HEAPF64[$gpl >> 3];
 STACKTOP = sp;
 return 0;
}
function _zuf_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $27 = 0, $i = 0, $ii = 0, $ij = 0, $j = 0, $jj = 0, $k = 0, $kl = 0, $l = 0, $m = 0, $state = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $kl = sp + 52 | 0;
 $ij = sp + 48 | 0;
 $i = sp + 44 | 0;
 $j = sp + 40 | 0;
 $k = sp + 36 | 0;
 $l = sp + 32 | 0;
 $m = sp + 28 | 0;
 $x = sp + 8 | 0;
 $y = sp;
 $ii = sp + 24 | 0;
 $jj = sp + 20 | 0;
 $state = sp + 16 | 0;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$kl >> 2] = 9373;
 HEAP32[$ij >> 2] = 1802;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = 0;
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1802;
 HEAP32[$ij >> 2] = HEAP32[$1 >> 2];
 HEAP32[$i >> 2] = (((HEAP32[$ij >> 2] | 0) / 177 | 0 | 0) % 177 | 0) + 2;
 HEAP32[$j >> 2] = ((HEAP32[$ij >> 2] | 0) % 177 | 0) + 2;
 HEAP32[$k >> 2] = (((HEAP32[$kl >> 2] | 0) / 169 | 0 | 0) % 178 | 0) + 1;
 HEAP32[$l >> 2] = (HEAP32[$kl >> 2] | 0) % 169 | 0;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= 607) break;
  HEAPF64[$x >> 3] = 0.0;
  HEAPF64[$y >> 3] = .5;
  HEAP32[$jj >> 2] = 1;
  while (1) {
   if ((HEAP32[$jj >> 2] | 0) > 24) break;
   $27 = (Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$j >> 2] | 0) | 0) % 179 | 0;
   HEAP32[$m >> 2] = (Math_imul($27, HEAP32[$k >> 2] | 0) | 0) % 179 | 0;
   HEAP32[$i >> 2] = HEAP32[$j >> 2];
   HEAP32[$j >> 2] = HEAP32[$k >> 2];
   HEAP32[$k >> 2] = HEAP32[$m >> 2];
   HEAP32[$l >> 2] = (((HEAP32[$l >> 2] | 0) * 53 | 0) + 1 | 0) % 169 | 0;
   if (((Math_imul(HEAP32[$l >> 2] | 0, HEAP32[$m >> 2] | 0) | 0) % 64 | 0 | 0) >= 32) HEAPF64[$x >> 3] = +HEAPF64[$x >> 3] + +HEAPF64[$y >> 3];
   HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] * .5;
   HEAP32[$jj >> 2] = (HEAP32[$jj >> 2] | 0) + 1;
  }
  HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$ii >> 2] << 2) >> 2] = ~~(+HEAPF64[$x >> 3] * 16777216.0) >>> 0;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gsl_sf_lambert_Wm1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $35 = 0.0, $5 = 0.0, $55 = 0, $L_1 = 0, $L_2 = 0, $q = 0, $r = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 56 | 0;
 $q = sp + 32 | 0;
 $w = sp + 24 | 0;
 $r = sp + 16 | 0;
 $L_1 = sp + 8 | 0;
 $L_2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] > 0.0) {
  HEAP32[$0 >> 2] = _gsl_sf_lambert_W0_e($5, HEAP32[$2 >> 2] | 0) | 0;
  $55 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $55 | 0;
 }
 if ($5 == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $55 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $55 | 0;
 }
 HEAPF64[sp + 40 >> 3] = .36787944117144233;
 HEAPF64[$q >> 3] = +HEAPF64[$1 >> 3] + .36787944117144233;
 if (+HEAPF64[$q >> 3] < 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -1.0;
  $19 = +Math_sqrt(+-+HEAPF64[$q >> 3]);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $19;
  HEAP32[$0 >> 2] = 1;
  $55 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $55 | 0;
 }
 if (+HEAPF64[$1 >> 3] < -1.0e-6) {
  HEAPF64[$r >> 3] = -+Math_sqrt(+(+HEAPF64[$q >> 3]));
  HEAPF64[$w >> 3] = +_series_eval(+HEAPF64[$r >> 3]);
  if (+HEAPF64[$q >> 3] < .003) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$w >> 3];
   $35 = +Math_abs(+(+HEAPF64[$w >> 3])) * 1.1102230246251565e-15;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $35;
   HEAP32[$0 >> 2] = 0;
   $55 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $55 | 0;
  }
 } else {
  HEAPF64[$L_1 >> 3] = +Math_log(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$L_2 >> 3] = +Math_log(+-+HEAPF64[$L_1 >> 3]);
  HEAPF64[$w >> 3] = +HEAPF64[$L_1 >> 3] - +HEAPF64[$L_2 >> 3] + +HEAPF64[$L_2 >> 3] / +HEAPF64[$L_1 >> 3];
 }
 HEAP32[$0 >> 2] = _halley_iteration(+HEAPF64[$1 >> 3], +HEAPF64[$w >> 3], 32, HEAP32[$2 >> 2] | 0) | 0;
 $55 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $55 | 0;
}
function _gsl_sf_Chi_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $44 = 0.0, $46 = 0, $49 = 0, $result_E1 = 0, $result_Ei = 0, $status_E1 = 0, $status_Ei = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 48 | 0;
 $result_Ei = sp + 16 | 0;
 $result_E1 = sp;
 $status_Ei = sp + 44 | 0;
 $status_E1 = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$status_Ei >> 2] = _gsl_sf_expint_Ei_e(+HEAPF64[$1 >> 3], $result_Ei) | 0;
 HEAP32[$status_E1 >> 2] = _gsl_sf_expint_E1_e(+HEAPF64[$1 >> 3], $result_E1) | 0;
 if ((HEAP32[$status_Ei >> 2] | 0) != 1) if ((HEAP32[$status_E1 >> 2] | 0) != 1) {
  if ((HEAP32[$status_Ei >> 2] | 0) == 15) if ((HEAP32[$status_E1 >> 2] | 0) == 15) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
   _gsl_error(58048, 58064, 110, 15);
   HEAP32[$0 >> 2] = 15;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
  if ((HEAP32[$status_Ei >> 2] | 0) != 16) if ((HEAP32[$status_E1 >> 2] | 0) != 16) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$result_Ei >> 3] - +HEAPF64[$result_E1 >> 3]) * .5;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$result_Ei + 8 >> 3] + +HEAPF64[$result_E1 + 8 >> 3]) * .5;
   $44 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
   $46 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
   HEAPF64[$46 >> 3] = +HEAPF64[$46 >> 3] + $44;
   HEAP32[$0 >> 2] = 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(58072, 58064, 113, 16);
  HEAP32[$0 >> 2] = 16;
  $49 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(58088, 58064, 107, 1);
 HEAP32[$0 >> 2] = 1;
 $49 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $49 | 0;
}
function _gsl_sf_legendre_Pl_array($lmax, $x, $result_array) {
 $lmax = $lmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $53 = 0, $ell = 0, $p_ell = 0, $p_ellm1 = 0, $p_ellm2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 36 | 0;
 $p_ellm2 = sp + 16 | 0;
 $p_ellm1 = sp + 8 | 0;
 $p_ell = sp;
 $ell = sp + 32 | 0;
 HEAP32[$1 >> 2] = $lmax;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result_array;
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] < -1.0 | +HEAPF64[$2 >> 3] > 1.0)) {
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
   HEAP32[$0 >> 2] = 0;
   $53 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $53 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
   HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$2 >> 3];
   HEAP32[$0 >> 2] = 0;
   $53 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $53 | 0;
  }
  HEAPF64[$p_ellm2 >> 3] = 1.0;
  HEAPF64[$p_ellm1 >> 3] = +HEAPF64[$2 >> 3];
  HEAPF64[$p_ell >> 3] = +HEAPF64[$p_ellm1 >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$2 >> 3];
  HEAP32[$ell >> 2] = 2;
  while (1) {
   if ((HEAP32[$ell >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$p_ell >> 3] = (+HEAPF64[$2 >> 3] * +((HEAP32[$ell >> 2] << 1) - 1 | 0) * +HEAPF64[$p_ellm1 >> 3] - +((HEAP32[$ell >> 2] | 0) - 1 | 0) * +HEAPF64[$p_ellm2 >> 3]) / +(HEAP32[$ell >> 2] | 0);
   HEAPF64[$p_ellm2 >> 3] = +HEAPF64[$p_ellm1 >> 3];
   HEAPF64[$p_ellm1 >> 3] = +HEAPF64[$p_ell >> 3];
   HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$ell >> 2] << 3) >> 3] = +HEAPF64[$p_ell >> 3];
   HEAP32[$ell >> 2] = (HEAP32[$ell >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = 0;
  $53 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $53 | 0;
 }
 _gsl_error(53496, 53512, 210, 1);
 HEAP32[$0 >> 2] = 1;
 $53 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $53 | 0;
}
function _gsl_sf_ellint_Kcomp_e($k, $mode, $result) {
 $k = +$k;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $18 = 0.0, $2 = 0, $3 = 0, $30 = 0.0, $47 = 0.0, $53 = 0.0, $63 = 0, $67 = 0, $status = 0, $ta = 0, $tb = 0, $y = 0, $y1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $y = sp + 24 | 0;
 $ta = sp + 16 | 0;
 $tb = sp + 8 | 0;
 $y1 = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $k;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] >= 1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(29376, 29392, 505, 1);
  HEAP32[$0 >> 2] = 1;
  $67 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 }
 $18 = 1.0 - +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] >= .9999999850988388) {
  HEAPF64[$y >> 3] = $18;
  HEAPF64[$ta >> 3] = +HEAPF64[3680] + +HEAPF64[$y >> 3] * (+HEAPF64[3681] + +HEAPF64[$y >> 3] * +HEAPF64[3682]);
  $30 = -+Math_log(+(+HEAPF64[$y >> 3]));
  HEAPF64[$tb >> 3] = $30 * (+HEAPF64[3683] + +HEAPF64[$y >> 3] * (+HEAPF64[3684] + +HEAPF64[$y >> 3] * +HEAPF64[3685]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$ta >> 3] + +HEAPF64[$tb >> 3];
  $47 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
  $53 = ($47 + +Math_abs(+(+HEAPF64[$1 >> 3] / +HEAPF64[$y >> 3]))) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $53;
  HEAP32[$0 >> 2] = 0;
  $67 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 } else {
  HEAPF64[$y1 >> 3] = $18;
  HEAP32[$status >> 2] = _gsl_sf_ellint_RF_e(0.0, +HEAPF64[$y1 >> 3], 1.0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  $63 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$63 >> 3] = +HEAPF64[$63 >> 3] + 1.1102230246251565e-16 / +HEAPF64[$y1 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $67 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 }
 return 0;
}
function _gamma_inc_Q_large_x($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $49 = 0.0, $55 = 0.0, $57 = 0, $63 = 0, $D = 0, $last = 0, $n = 0, $stat_D = 0, $sum = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 68 | 0;
 $D = sp + 24 | 0;
 $stat_D = sp + 60 | 0;
 $sum = sp + 16 | 0;
 $term = sp + 8 | 0;
 $last = sp;
 $n = sp + 56 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[sp + 64 >> 2] = 5e3;
 HEAP32[$stat_D >> 2] = _gamma_inc_D(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $D) | 0;
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$term >> 3] = 1.0;
 HEAPF64[$last >> 3] = 1.0;
 HEAP32[$n >> 2] = 1;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= 5e3) break;
  HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * ((+HEAPF64[$1 >> 3] - +(HEAP32[$n >> 2] | 0)) / +HEAPF64[$2 >> 3]);
  if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$last >> 3])) > 1.0) break;
  if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
  HEAPF64[$last >> 3] = +HEAPF64[$term >> 3];
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$D >> 3] * (+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3]) * +HEAPF64[$sum >> 3];
 $49 = +HEAPF64[$D + 8 >> 3] * +Math_abs(+(+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3] * +HEAPF64[$sum >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $49;
 $55 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $57 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$57 >> 3] = +HEAPF64[$57 >> 3] + $55;
 if ((HEAP32[$n >> 2] | 0) == 5e3) {
  _gsl_error(51136, 50976, 181, 11);
  HEAP32[$0 >> 2] = 11;
  $63 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$stat_D >> 2];
  $63 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 return 0;
}
function _cornish_fisher($t, $n) {
 $t = +$t;
 $n = +$n;
 var $0 = 0, $1 = 0, $18 = 0.0, $23 = 0.0, $27 = 0.0, $32 = 0.0, $71 = 0.0, $8 = 0.0, $a = 0, $b = 0, $p0 = 0, $p1 = 0, $p2 = 0, $p3 = 0, $p4 = 0, $p5 = 0, $y = 0, $z = 0, $z2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 88 | 0;
 $a = sp + 80 | 0;
 $b = sp + 72 | 0;
 $z2 = sp + 64 | 0;
 $z = sp + 56 | 0;
 $p5 = sp + 48 | 0;
 $p4 = sp + 40 | 0;
 $p3 = sp + 32 | 0;
 $p2 = sp + 24 | 0;
 $p1 = sp + 16 | 0;
 $p0 = sp + 8 | 0;
 $y = sp;
 HEAPF64[$0 >> 3] = $t;
 HEAPF64[$1 >> 3] = $n;
 HEAPF64[$a >> 3] = +HEAPF64[$1 >> 3] - .5;
 HEAPF64[$b >> 3] = +HEAPF64[$a >> 3] * 48.0 * +HEAPF64[$a >> 3];
 $8 = +HEAPF64[$a >> 3];
 HEAPF64[$z2 >> 3] = $8 * +_log1p(+(+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3]));
 HEAPF64[$z >> 3] = +Math_sqrt(+(+HEAPF64[$z2 >> 3]));
 $18 = +HEAPF64[$z >> 3];
 HEAPF64[$p5 >> 3] = $18 * +_poly_eval(1120, 9, +HEAPF64[$z2 >> 3]);
 $23 = -+HEAPF64[$z >> 3];
 HEAPF64[$p4 >> 3] = $23 * +_poly_eval(1200, 7, +HEAPF64[$z2 >> 3]);
 $27 = +HEAPF64[$z >> 3];
 HEAPF64[$p3 >> 3] = $27 * +_poly_eval(1264, 5, +HEAPF64[$z2 >> 3]);
 $32 = -+HEAPF64[$z >> 3];
 HEAPF64[$p2 >> 3] = $32 * +_poly_eval(1312, 3, +HEAPF64[$z2 >> 3]);
 HEAPF64[$p1 >> 3] = +HEAPF64[$z >> 3] * (+HEAPF64[$z2 >> 3] + 3.0);
 HEAPF64[$p0 >> 3] = +HEAPF64[$z >> 3];
 HEAPF64[$y >> 3] = +HEAPF64[$p5 >> 3];
 HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] / +HEAPF64[$b >> 3] + +HEAPF64[$p4 >> 3];
 HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] / +HEAPF64[$b >> 3] + +HEAPF64[$p3 >> 3];
 HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] / +HEAPF64[$b >> 3] + +HEAPF64[$p2 >> 3];
 HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] / +HEAPF64[$b >> 3] + +HEAPF64[$p1 >> 3];
 HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] / +HEAPF64[$b >> 3] + +HEAPF64[$p0 >> 3];
 if (!(+HEAPF64[$0 >> 3] < 0.0)) {
  $71 = +HEAPF64[$y >> 3];
  STACKTOP = sp;
  return +$71;
 }
 HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] * -1.0;
 $71 = +HEAPF64[$y >> 3];
 STACKTOP = sp;
 return +$71;
}
function _hyperg_1F1_beq2a_pos($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $25 = 0.0, $28 = 0.0, $3 = 0, $34 = 0.0, $57 = 0, $58 = 0, $I = 0, $lg = 0, $ln_term = 0, $lnpre_err = 0, $lnpre_val = 0, $stat_I = 0, $stat_e = 0, $stat_g = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 88 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 84 | 0;
 $I = sp + 40 | 0;
 $stat_I = sp + 80 | 0;
 $lg = sp + 24 | 0;
 $stat_g = sp + 76 | 0;
 $ln_term = sp + 16 | 0;
 $lnpre_val = sp + 8 | 0;
 $lnpre_err = sp;
 $stat_e = sp + 72 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $58 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 }
 HEAP32[$stat_I >> 2] = _gsl_sf_bessel_Inu_scaled_e(+HEAPF64[$1 >> 3] - .5, +Math_abs(+(+HEAPF64[$2 >> 3])) * .5, $I) | 0;
 HEAP32[$stat_g >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3] + .5, $lg) | 0;
 HEAPF64[$ln_term >> 3] = (.5 - +HEAPF64[$1 >> 3]) * +Math_log(+(+Math_abs(+(+HEAPF64[$2 >> 3])) * .25));
 $25 = +HEAPF64[$lg >> 3];
 $28 = $25 + +_GSL_MAX_DBL(+(+HEAPF64[$2 >> 3]), 0.0);
 HEAPF64[$lnpre_val >> 3] = $28 + +HEAPF64[$ln_term >> 3];
 $34 = +Math_abs(+(+HEAPF64[$ln_term >> 3]));
 HEAPF64[$lnpre_err >> 3] = +HEAPF64[$lg + 8 >> 3] + ($34 + +Math_abs(+(+HEAPF64[$2 >> 3]))) * 2.220446049250313e-16;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$lnpre_val >> 3], +HEAPF64[$lnpre_err >> 3], +HEAPF64[$I >> 3], +HEAPF64[$I + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 do if (HEAP32[$stat_e >> 2] | 0) $57 = HEAP32[$stat_e >> 2] | 0; else if (HEAP32[$stat_g >> 2] | 0) {
  $57 = HEAP32[$stat_g >> 2] | 0;
  break;
 } else {
  $57 = (HEAP32[$stat_I >> 2] | 0) != 0 ? HEAP32[$stat_I >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $57;
 $58 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $58 | 0;
}
function _coulomb_connection($lam, $eta, $cos_phi, $sin_phi) {
 $lam = +$lam;
 $eta = +$eta;
 $cos_phi = $cos_phi | 0;
 $sin_phi = $sin_phi | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $3 = 0, $36 = 0.0, $4 = 0, $43 = 0.0, $49 = 0.0, $52 = 0.0, $54 = 0, $X = 0, $dth = 0, $eps = 0, $phi = 0, $tpl = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 60 | 0;
 $4 = sp + 56 | 0;
 $eps = sp + 32 | 0;
 $tpl = sp + 24 | 0;
 $dth = sp + 16 | 0;
 $X = sp + 8 | 0;
 $phi = sp;
 HEAPF64[$1 >> 3] = $lam;
 HEAPF64[$2 >> 3] = $eta;
 HEAP32[$3 >> 2] = $cos_phi;
 HEAP32[$4 >> 2] = $sin_phi;
 if (+HEAPF64[$2 >> 3] > 1111.7464921451406) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  _gsl_error(26256, 26240, 242, 15);
  HEAP32[$0 >> 2] = 15;
  $54 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 $11 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$2 >> 3] > 2.8682628019844705) {
  HEAPF64[$eps >> 3] = +Math_exp(+(-6.283185307179586 * $11)) * 2.0;
  HEAPF64[$tpl >> 3] = +Math_tan(+(+HEAPF64[$1 >> 3] * 3.141592653589793));
  HEAPF64[$dth >> 3] = +HEAPF64[$eps >> 3] * +HEAPF64[$tpl >> 3] / (+HEAPF64[$tpl >> 3] * +HEAPF64[$tpl >> 3] + 1.0);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$dth >> 3] * .5 * +HEAPF64[$dth >> 3] + -1.0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = -+HEAPF64[$dth >> 3];
  HEAP32[$0 >> 2] = 0;
  $54 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 } else {
  $36 = +_tanh(+(3.141592653589793 * $11));
  HEAPF64[$X >> 3] = $36 / +Math_tan(+(+HEAPF64[$1 >> 3] * 3.141592653589793));
  $43 = -+Math_atan(+(+HEAPF64[$X >> 3]));
  HEAPF64[$phi >> 3] = $43 - (+HEAPF64[$1 >> 3] + .5) * 3.141592653589793;
  $49 = +Math_cos(+(+HEAPF64[$phi >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $49;
  $52 = +Math_sin(+(+HEAPF64[$phi >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $52;
  HEAP32[$0 >> 2] = 0;
  $54 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_j0_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $32 = 0.0, $44 = 0.0, $50 = 0.0, $52 = 0, $56 = 0, $7 = 0.0, $ax = 0, $sin_result = 0, $stat = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 92 | 0;
 $ax = sp + 72 | 0;
 $y = sp + 64 | 0;
 $sin_result = sp;
 $stat = sp + 88 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 $7 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$ax >> 3] < .5) {
  HEAPF64[$y >> 3] = $7 * +HEAPF64[$1 >> 3];
  HEAPF64[sp + 56 >> 3] = -.16666666666666666;
  HEAPF64[sp + 48 >> 3] = .008333333333333333;
  HEAPF64[sp + 40 >> 3] = -.0001984126984126984;
  HEAPF64[sp + 32 >> 3] = 27557319223985893.0e-22;
  HEAPF64[sp + 24 >> 3] = -2.505210838544172e-8;
  HEAPF64[sp + 16 >> 3] = 1.6059043836821613e-10;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * 1.6059043836821613e-10 + -2.505210838544172e-8) + 27557319223985893.0e-22) + -.0001984126984126984) + .008333333333333333) + -.16666666666666666) + 1.0;
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $32;
  HEAP32[$0 >> 2] = 0;
  $56 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $56 | 0;
 } else {
  HEAP32[$stat >> 2] = _gsl_sf_sin_e($7, $sin_result) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sin_result >> 3] / +HEAPF64[$1 >> 3];
  $44 = +Math_abs(+(+HEAPF64[$sin_result + 8 >> 3] / +HEAPF64[$1 >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $44;
  $50 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $52 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$52 >> 3] = +HEAPF64[$52 >> 3] + $50;
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $56 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $56 | 0;
 }
 return 0;
}
function _gsl_sf_expm1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $12 = 0.0, $17 = 0.0, $2 = 0, $21 = 0.0, $42 = 0.0, $48 = 0.0, $53 = 0.0, $59 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp >> 3] = .002;
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -1.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < -.002) {
  $12 = +Math_exp(+$10) - 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $12;
  $17 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $17;
  HEAP32[$0 >> 2] = 0;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 $21 = +HEAPF64[$1 >> 3];
 if ($10 < .002) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $21 * (+HEAPF64[$1 >> 3] * .5 * (+HEAPF64[$1 >> 3] / 3.0 * (+HEAPF64[$1 >> 3] * .25 * (+HEAPF64[$1 >> 3] * .2 + 1.0) + 1.0) + 1.0) + 1.0);
  $42 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $42;
  HEAP32[$0 >> 2] = 0;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 if ($21 < 709.782712893384) {
  $48 = +Math_exp(+(+HEAPF64[$1 >> 3])) - 1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $48;
  $53 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $53;
  HEAP32[$0 >> 2] = 0;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31008, 31024, 351, 16);
  HEAP32[$0 >> 2] = 16;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 return 0;
}
function _gsl_sf_Si_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $32 = 0.0, $34 = 0, $42 = 0.0, $47 = 0.0, $59 = 0.0, $61 = 0, $70 = 0, $ax = 0, $f = 0, $g = 0, $result_c = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 64 | 0;
 $ax = sp + 48 | 0;
 $result_c = sp + 32 | 0;
 $f = sp + 16 | 0;
 $g = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$ax >> 3] < 1.4901161193847656e-8) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 if (+HEAPF64[$ax >> 3] <= 4.0) {
  _cheb_eval_e612(59528, (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] - 8.0) * .125, $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$result_c >> 3] + .75);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ax >> 3] * +HEAPF64[$result_c + 8 >> 3];
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $34 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] + $32;
  HEAP32[$0 >> 2] = 0;
  $70 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 _fg_asymp(+HEAPF64[$ax >> 3], $f, $g);
 $42 = 1.5707963267948966 - +HEAPF64[$f >> 3] * +Math_cos(+(+HEAPF64[$ax >> 3]));
 $47 = $42 - +HEAPF64[$g >> 3] * +Math_sin(+(+HEAPF64[$ax >> 3]));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = $47;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$f + 8 >> 3] + +HEAPF64[$g + 8 >> 3];
 $59 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $61 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$61 >> 3] = +HEAPF64[$61 >> 3] + $59;
 if (+HEAPF64[$1 >> 3] < 0.0) HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[HEAP32[$2 >> 2] >> 3];
 HEAP32[$0 >> 2] = 0;
 $70 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $70 | 0;
}
function _gsl_sf_psi_n_e($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $53 = 0, $54 = 0, $hzeta = 0, $ln_nf = 0, $stat_e = 0, $stat_hz = 0, $stat_nf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 52 | 0;
 $ln_nf = sp + 16 | 0;
 $hzeta = sp;
 $stat_hz = sp + 48 | 0;
 $stat_nf = sp + 44 | 0;
 $stat_e = sp + 40 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$0 >> 2] = _gsl_sf_psi_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $54 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAP32[$0 >> 2] = _gsl_sf_psi_1_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $54 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) >= 0) if (!(+HEAPF64[$2 >> 3] <= 0.0)) {
  HEAP32[$stat_hz >> 2] = _gsl_sf_hzeta_e(+(HEAP32[$1 >> 2] | 0) + 1.0, +HEAPF64[$2 >> 3], $hzeta) | 0;
  HEAP32[$stat_nf >> 2] = _gsl_sf_lnfact_e(HEAP32[$1 >> 2] | 0, $ln_nf) | 0;
  HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_nf >> 3], +HEAPF64[$ln_nf + 8 >> 3], +HEAPF64[$hzeta >> 3], +HEAPF64[$hzeta + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  if (!(HEAP32[$1 >> 2] & 1)) HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[HEAP32[$3 >> 2] >> 3];
  do if (HEAP32[$stat_e >> 2] | 0) $53 = HEAP32[$stat_e >> 2] | 0; else if (HEAP32[$stat_nf >> 2] | 0) {
   $53 = HEAP32[$stat_nf >> 2] | 0;
   break;
  } else {
   $53 = (HEAP32[$stat_hz >> 2] | 0) != 0 ? HEAP32[$stat_hz >> 2] | 0 : 0;
   break;
  } while (0);
  HEAP32[$0 >> 2] = $53;
  $54 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(55568, 55584, 781, 1);
 HEAP32[$0 >> 2] = 1;
 $54 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $54 | 0;
}
function _hyperg_0F1_bessel_J($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $32 = 0.0, $38 = 0.0, $44 = 0.0, $49 = 0.0, $51 = 0, $6 = 0.0, $61 = 0, $65 = 0, $J = 0, $Y = 0, $anu = 0, $c = 0, $s = 0, $stat_J = 0, $stat_Y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 80 | 0;
 $anu = sp + 48 | 0;
 $s = sp + 40 | 0;
 $c = sp + 32 | 0;
 $J = sp + 16 | 0;
 $Y = sp;
 $stat_J = sp + 76 | 0;
 $stat_Y = sp + 72 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 $6 = +HEAPF64[$1 >> 3];
 if (!(+HEAPF64[$1 >> 3] < 0.0)) {
  HEAP32[$0 >> 2] = _gsl_sf_bessel_Jnu_e($6, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $65 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 }
 HEAPF64[$anu >> 3] = -$6;
 HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$anu >> 3] * 3.141592653589793));
 HEAPF64[$c >> 3] = +Math_cos(+(+HEAPF64[$anu >> 3] * 3.141592653589793));
 HEAP32[$stat_J >> 2] = _gsl_sf_bessel_Jnu_e(+HEAPF64[$anu >> 3], +HEAPF64[$2 >> 3], $J) | 0;
 HEAP32[$stat_Y >> 2] = _gsl_sf_bessel_Ynu_e(+HEAPF64[$anu >> 3], +HEAPF64[$2 >> 3], $Y) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$c >> 3] * +HEAPF64[$J >> 3] - +HEAPF64[$s >> 3] * +HEAPF64[$Y >> 3];
 $32 = +Math_abs(+(+HEAPF64[$c >> 3] * +HEAPF64[$J + 8 >> 3]));
 $38 = $32 + +Math_abs(+(+HEAPF64[$s >> 3] * +HEAPF64[$Y + 8 >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $38;
 $44 = +Math_abs(+(+HEAPF64[$anu >> 3] * 3.141592653589793)) * 2.220446049250313e-16;
 $49 = $44 * +Math_abs(+(+HEAPF64[$J >> 3] + +HEAPF64[$Y >> 3]));
 $51 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$51 >> 3] = +HEAPF64[$51 >> 3] + $49;
 if (HEAP32[$stat_Y >> 2] | 0) $61 = HEAP32[$stat_Y >> 2] | 0; else $61 = (HEAP32[$stat_J >> 2] | 0) != 0 ? HEAP32[$stat_J >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $61;
 $65 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $65 | 0;
}
function _cheb_eval_mode_e66($cs, $x, $mode, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $64 = 0.0, $71 = 0.0, $d = 0, $dd = 0, $eval_order = 0, $j = 0, $temp = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 60 | 0;
 $3 = sp + 56 | 0;
 $j = sp + 52 | 0;
 $d = sp + 32 | 0;
 $dd = sp + 24 | 0;
 $y = sp + 16 | 0;
 $y2 = sp + 8 | 0;
 $eval_order = sp + 48 | 0;
 $temp = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 $26 = (_GSL_MODE_PREC(HEAP32[$2 >> 2] | 0) | 0) == 0;
 $27 = HEAP32[$0 >> 2] | 0;
 if ($26) HEAP32[$eval_order >> 2] = HEAP32[$27 + 4 >> 2]; else HEAP32[$eval_order >> 2] = HEAP32[$27 + 24 >> 2];
 HEAP32[$j >> 2] = HEAP32[$eval_order >> 2];
 while (1) {
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = +HEAPF64[$d >> 3];
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $64 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
 $71 = $64 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$eval_order >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $71;
 STACKTOP = sp;
 return 0;
}
function _cheb_eval_mode_e($cs, $x, $mode, $result) {
 $cs = $cs | 0;
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $64 = 0.0, $71 = 0.0, $d = 0, $dd = 0, $eval_order = 0, $j = 0, $temp = 0, $y = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 60 | 0;
 $3 = sp + 56 | 0;
 $j = sp + 52 | 0;
 $d = sp + 32 | 0;
 $dd = sp + 24 | 0;
 $y = sp + 16 | 0;
 $y2 = sp + 8 | 0;
 $eval_order = sp + 48 | 0;
 $temp = sp;
 HEAP32[$0 >> 2] = $cs;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$d >> 3] = 0.0;
 HEAPF64[$dd >> 3] = 0.0;
 HEAPF64[$y >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3]) / (+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3]);
 HEAPF64[$y2 >> 3] = +HEAPF64[$y >> 3] * 2.0;
 $26 = (_GSL_MODE_PREC(HEAP32[$2 >> 2] | 0) | 0) == 0;
 $27 = HEAP32[$0 >> 2] | 0;
 if ($26) HEAP32[$eval_order >> 2] = HEAP32[$27 + 4 >> 2]; else HEAP32[$eval_order >> 2] = HEAP32[$27 + 24 >> 2];
 HEAP32[$j >> 2] = HEAP32[$eval_order >> 2];
 while (1) {
  if ((HEAP32[$j >> 2] | 0) < 1) break;
  HEAPF64[$temp >> 3] = +HEAPF64[$d >> 3];
  HEAPF64[$d >> 3] = +HEAPF64[$y2 >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3];
  HEAPF64[$dd >> 3] = +HEAPF64[$temp >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$y >> 3] * +HEAPF64[$d >> 3] - +HEAPF64[$dd >> 3] + +HEAPF64[HEAP32[HEAP32[$0 >> 2] >> 2] >> 3] * .5;
 $64 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
 $71 = $64 + +Math_abs(+(+HEAPF64[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + (HEAP32[$eval_order >> 2] << 3) >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $71;
 STACKTOP = sp;
 return 0;
}
function _riemann_zeta_minus1_large_s($s, $result) {
 $s = +$s;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $a = 0, $b = 0, $c = 0, $d = 0, $e = 0, $f = 0, $numt = 0, $t1 = 0, $t2 = 0, $zeta = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 88 | 0;
 $a = sp + 72 | 0;
 $b = sp + 64 | 0;
 $c = sp + 56 | 0;
 $d = sp + 48 | 0;
 $e = sp + 40 | 0;
 $f = sp + 32 | 0;
 $t1 = sp + 24 | 0;
 $t2 = sp + 16 | 0;
 $numt = sp + 8 | 0;
 $zeta = sp;
 HEAPF64[$0 >> 3] = $s;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[$a >> 3] = +Math_pow(2.0, +-+HEAPF64[$0 >> 3]);
 HEAPF64[$b >> 3] = +Math_pow(3.0, +-+HEAPF64[$0 >> 3]);
 HEAPF64[$c >> 3] = +Math_pow(5.0, +-+HEAPF64[$0 >> 3]);
 HEAPF64[$d >> 3] = +Math_pow(7.0, +-+HEAPF64[$0 >> 3]);
 HEAPF64[$e >> 3] = +Math_pow(11.0, +-+HEAPF64[$0 >> 3]);
 HEAPF64[$f >> 3] = +Math_pow(13.0, +-+HEAPF64[$0 >> 3]);
 HEAPF64[$t1 >> 3] = +HEAPF64[$a >> 3] + +HEAPF64[$b >> 3] + +HEAPF64[$c >> 3] + +HEAPF64[$d >> 3] + +HEAPF64[$e >> 3] + +HEAPF64[$f >> 3];
 HEAPF64[$t2 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$b >> 3] + +HEAPF64[$c >> 3] + +HEAPF64[$d >> 3] + +HEAPF64[$e >> 3] + +HEAPF64[$f >> 3]) + +HEAPF64[$b >> 3] * (+HEAPF64[$c >> 3] + +HEAPF64[$d >> 3] + +HEAPF64[$e >> 3] + +HEAPF64[$f >> 3]) + +HEAPF64[$c >> 3] * (+HEAPF64[$d >> 3] + +HEAPF64[$e >> 3] + +HEAPF64[$f >> 3]) + +HEAPF64[$d >> 3] * (+HEAPF64[$e >> 3] + +HEAPF64[$f >> 3]) + +HEAPF64[$e >> 3] * +HEAPF64[$f >> 3];
 HEAPF64[$numt >> 3] = +HEAPF64[$t1 >> 3] - +HEAPF64[$t2 >> 3];
 HEAPF64[$zeta >> 3] = 1.0 / ((1.0 - +HEAPF64[$a >> 3]) * (1.0 - +HEAPF64[$b >> 3]) * (1.0 - +HEAPF64[$c >> 3]) * (1.0 - +HEAPF64[$d >> 3]) * (1.0 - +HEAPF64[$e >> 3]) * (1.0 - +HEAPF64[$f >> 3]));
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$numt >> 3] * +HEAPF64[$zeta >> 3];
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = (15.0 / +HEAPF64[$0 >> 3] + 1.0) * 6.0 * 2.220446049250313e-16 * +HEAPF64[HEAP32[$1 >> 2] >> 3];
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_zeta_int_e($n, $result) {
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $13 = 0, $2 = 0, $23 = 0.0, $43 = 0.0, $49 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $result;
 $5 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  if (!($5 & 1)) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
  $13 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$1 >> 2] | 0) > -99) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[62576 + (((0 - ($13 + 1) | 0) / 2 | 0) << 3) >> 3];
   $23 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $23;
   HEAP32[$0 >> 2] = 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  } else {
   HEAP32[$0 >> 2] = _gsl_sf_zeta_e(+($13 | 0), HEAP32[$2 >> 2] | 0) | 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
 } else {
  if (($5 | 0) == 1) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
   _gsl_error(62256, 62272, 873, 1);
   HEAP32[$0 >> 2] = 1;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
  if ((HEAP32[$1 >> 2] | 0) <= 100) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[62976 + (HEAP32[$1 >> 2] << 3) >> 3] + 1.0;
   $43 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $43;
   HEAP32[$0 >> 2] = 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  } else {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.220446049250313e-16;
   HEAP32[$0 >> 2] = 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
 }
 return 0;
}
function _hyperg_1F1_CF1_p_ser($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $65 = 0, $ak = 0, $k = 0, $pk = 0, $rhok = 0, $sum = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 64 | 0;
 $sum = sp + 24 | 0;
 $pk = sp + 16 | 0;
 $rhok = sp + 8 | 0;
 $k = sp + 56 | 0;
 $ak = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $65 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 }
 HEAP32[sp + 60 >> 2] = 5e3;
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$pk >> 3] = 1.0;
 HEAPF64[$rhok >> 3] = 0.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 5e3) break;
  HEAPF64[$ak >> 3] = (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] | 0)) * +HEAPF64[$3 >> 3] / ((+HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3] + +(HEAP32[$k >> 2] | 0) - 1.0) * (+HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3] + +(HEAP32[$k >> 2] | 0)));
  HEAPF64[$rhok >> 3] = -+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) / (+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) + 1.0);
  HEAPF64[$pk >> 3] = +HEAPF64[$pk >> 3] * +HEAPF64[$rhok >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$pk >> 3];
  if (+Math_abs(+(+HEAPF64[$pk >> 3] / +HEAPF64[$sum >> 3])) < 4.440892098500626e-16) break;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$1 >> 3] / (+HEAPF64[$2 >> 3] - +HEAPF64[$3 >> 3]) * +HEAPF64[$sum >> 3];
 if ((HEAP32[$k >> 2] | 0) == 5e3) {
  _gsl_error(51800, 51680, 580, 11);
  HEAP32[$0 >> 2] = 11;
  $65 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $65 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 }
 return 0;
}
function _delta($ta, $tb, $tc, $d) {
 $ta = $ta | 0;
 $tb = $tb | 0;
 $tc = $tc | 0;
 $d = $d | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $20 = 0, $29 = 0, $3 = 0, $39 = 0, $4 = 0, $58 = 0.0, $61 = 0, $f1 = 0, $f2 = 0, $f3 = 0, $f4 = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 72 | 0;
 $4 = sp + 68 | 0;
 $f1 = sp + 48 | 0;
 $f2 = sp + 32 | 0;
 $f3 = sp + 16 | 0;
 $f4 = sp;
 $status = sp + 64 | 0;
 HEAP32[$1 >> 2] = $ta;
 HEAP32[$2 >> 2] = $tb;
 HEAP32[$3 >> 2] = $tc;
 HEAP32[$4 >> 2] = $d;
 HEAP32[$status >> 2] = 0;
 $11 = _gsl_sf_fact_e(((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0) / 2 | 0, $f1) | 0;
 HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $11;
 $20 = _gsl_sf_fact_e(((HEAP32[$1 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 2 | 0, $f2) | 0;
 HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $20;
 $29 = _gsl_sf_fact_e(((HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0) / 2 | 0, $f3) | 0;
 HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $29;
 $39 = _gsl_sf_fact_e((((HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) / 2 | 0) + 1 | 0, $f4) | 0;
 HEAP32[$status >> 2] = (HEAP32[$status >> 2] | 0) + $39;
 if (HEAP32[$status >> 2] | 0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(26464, 26448, 72, 16);
  HEAP32[$0 >> 2] = 16;
  $61 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $61 | 0;
 } else {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$f1 >> 3] * +HEAPF64[$f2 >> 3] * +HEAPF64[$f3 >> 3] / +HEAPF64[$f4 >> 3];
  $58 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 8.881784197001252e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $58;
  HEAP32[$0 >> 2] = 0;
  $61 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $61 | 0;
 }
 return 0;
}
function _gsl_sf_complex_log_e($zr, $zi, $lnr, $theta) {
 $zr = +$zr;
 $zi = +$zi;
 $lnr = $lnr | 0;
 $theta = $theta | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0.0, $3 = 0, $37 = 0.0, $4 = 0, $42 = 0.0, $47 = 0.0, $52 = 0.0, $61 = 0, $ax = 0, $ay = 0, $max = 0, $min = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $ax = sp + 24 | 0;
 $ay = sp + 16 | 0;
 $min = sp + 8 | 0;
 $max = sp;
 HEAPF64[$1 >> 3] = $zr;
 HEAPF64[$2 >> 3] = $zi;
 HEAP32[$3 >> 2] = $lnr;
 HEAP32[$4 >> 2] = $theta;
 if (!(+HEAPF64[$1 >> 3] != 0.0)) if (!(+HEAPF64[$2 >> 3] != 0.0)) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(53872, 53888, 159, 1);
  HEAP32[$0 >> 2] = 1;
  $61 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $61 | 0;
 }
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$ay >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$min >> 3] = +HEAPF64[$ax >> 3] < +HEAPF64[$ay >> 3] ? +HEAPF64[$ax >> 3] : +HEAPF64[$ay >> 3];
 HEAPF64[$max >> 3] = +HEAPF64[$ax >> 3] > +HEAPF64[$ay >> 3] ? +HEAPF64[$ax >> 3] : +HEAPF64[$ay >> 3];
 $26 = +Math_log(+(+HEAPF64[$max >> 3]));
 $37 = $26 + +Math_log(+(+HEAPF64[$min >> 3] / +HEAPF64[$max >> 3] * (+HEAPF64[$min >> 3] / +HEAPF64[$max >> 3]) + 1.0)) * .5;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = $37;
 $42 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $42;
 $47 = +Math_atan2(+(+HEAPF64[$2 >> 3]), +(+HEAPF64[$1 >> 3]));
 HEAPF64[HEAP32[$4 >> 2] >> 3] = $47;
 $52 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $52;
 HEAP32[$0 >> 2] = 0;
 $61 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $61 | 0;
}
function _gsl_sf_zetam1_int_e($n, $result) {
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $13 = 0, $2 = 0, $24 = 0.0, $36 = 0, $43 = 0.0, $49 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $result;
 $5 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  if (!($5 & 1)) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = -1.0;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
   HEAP32[$0 >> 2] = 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
  $13 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$1 >> 2] | 0) > -99) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[62576 + (((0 - ($13 + 1) | 0) / 2 | 0) << 3) >> 3] - 1.0;
   $24 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $24;
   HEAP32[$0 >> 2] = 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  } else {
   HEAP32[$0 >> 2] = _gsl_sf_zeta_e(+($13 | 0), HEAP32[$2 >> 2] | 0) | 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
 } else {
  if (($5 | 0) == 1) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
   _gsl_error(62256, 62272, 927, 1);
   HEAP32[$0 >> 2] = 1;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
  $36 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$1 >> 2] | 0) <= 100) {
   HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[62976 + ($36 << 3) >> 3];
   $43 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $43;
   HEAP32[$0 >> 2] = 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  } else {
   HEAP32[$0 >> 2] = _gsl_sf_zetam1_e(+($36 | 0), HEAP32[$2 >> 2] | 0) | 0;
   $49 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $49 | 0;
  }
 }
 return 0;
}
function _airy_bie($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $29 = 0.0, $54 = 0.0, $6 = 0.0, $result_c = 0, $result_c4 = 0, $sqx = 0, $sqx1 = 0, $y = 0, $y3 = 0, $z = 0, $z2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 108 | 0;
 $2 = sp + 104 | 0;
 $sqx = sp + 72 | 0;
 $z = sp + 64 | 0;
 $y = sp + 56 | 0;
 $result_c = sp + 40 | 0;
 $sqx1 = sp + 32 | 0;
 $z2 = sp + 24 | 0;
 $y3 = sp + 16 | 0;
 $result_c4 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $mode;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[sp + 88 >> 3] = 8.750690570848434;
 HEAPF64[sp + 80 >> 3] = -2.0938363213560542;
 $6 = +Math_sqrt(+(+HEAPF64[$0 >> 3]));
 if (+HEAPF64[$0 >> 3] < 4.0) {
  HEAPF64[$sqx >> 3] = $6;
  HEAPF64[$z >> 3] = 8.750690570848434 / (+HEAPF64[$0 >> 3] * +HEAPF64[$sqx >> 3]) + -2.0938363213560542;
  HEAPF64[$y >> 3] = +Math_sqrt(+(+HEAPF64[$sqx >> 3]));
  _cheb_eval_mode_e(2064, +HEAPF64[$z >> 3], HEAP32[$1 >> 2] | 0, $result_c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$result_c >> 3] + .625) / +HEAPF64[$y >> 3];
  $29 = +HEAPF64[$result_c + 8 >> 3] / +HEAPF64[$y >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $29;
  STACKTOP = sp;
  return 0;
 } else {
  HEAPF64[$sqx1 >> 3] = $6;
  HEAPF64[$z2 >> 3] = 16.0 / (+HEAPF64[$0 >> 3] * +HEAPF64[$sqx1 >> 3]) - 1.0;
  HEAPF64[$y3 >> 3] = +Math_sqrt(+(+HEAPF64[$sqx1 >> 3]));
  _cheb_eval_mode_e(1840, +HEAPF64[$z2 >> 3], HEAP32[$1 >> 2] | 0, $result_c4) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$result_c4 >> 3] + .625) / +HEAPF64[$y3 >> 3];
  $54 = +HEAPF64[$result_c4 + 8 >> 3] / +HEAPF64[$y3 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $54;
  STACKTOP = sp;
  return 0;
 }
 return 0;
}
function _gfsr4_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $32 = 0, $39 = 0, $46 = 0, $bit = 0, $i = 0, $j = 0, $k = 0, $mask = 0, $msb = 0, $state = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 36 | 0;
 $1 = sp + 32 | 0;
 $state = sp + 28 | 0;
 $i = sp + 24 | 0;
 $j = sp + 20 | 0;
 $msb = sp + 16 | 0;
 $mask = sp + 12 | 0;
 $t = sp + 8 | 0;
 $bit = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$msb >> 2] = -2147483648;
 HEAP32[$mask >> 2] = -1;
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 4357;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > 16383) break;
  HEAP32[$t >> 2] = 0;
  HEAP32[$bit >> 2] = HEAP32[$msb >> 2];
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= 32) break;
   HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
   if (HEAP32[$1 >> 2] & HEAP32[$msb >> 2]) HEAP32[$t >> 2] = HEAP32[$t >> 2] | HEAP32[$bit >> 2];
   HEAP32[$bit >> 2] = (HEAP32[$bit >> 2] | 0) >>> 1;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$t >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $32 = HEAP32[$i >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= 32) break;
  HEAP32[$k >> 2] = 7 + ($32 * 3 | 0);
  $39 = (HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$k >> 2] << 2) | 0;
  HEAP32[$39 >> 2] = HEAP32[$39 >> 2] & HEAP32[$mask >> 2];
  $46 = (HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$k >> 2] << 2) | 0;
  HEAP32[$46 >> 2] = HEAP32[$46 >> 2] | HEAP32[$msb >> 2];
  HEAP32[$mask >> 2] = (HEAP32[$mask >> 2] | 0) >>> 1;
  HEAP32[$msb >> 2] = (HEAP32[$msb >> 2] | 0) >>> 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = $32;
 STACKTOP = sp;
 return;
}
function _taus113_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $11 = 0, $24 = 0, $38 = 0, $52 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) >>> 0 < 2) {
  $11 = HEAP32[$state >> 2] | 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 2;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] | 0) * 69069;
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) >>> 0 < 8) {
  $24 = (HEAP32[$state >> 2] | 0) + 4 | 0;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 8;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) * 69069;
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] | 0) >>> 0 < 16) {
  $38 = (HEAP32[$state >> 2] | 0) + 8 | 0;
  HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 16;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] | 0) * 69069;
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0) >>> 0 < 128) {
  $52 = (HEAP32[$state >> 2] | 0) + 12 | 0;
  HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + 128;
 }
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 _taus113_get(HEAP32[$state >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}
function _gsl_cdf_tdist_Q($x, $nu) {
 $x = +$x;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $2 = 0, $31 = 0.0, $32 = 0.0, $47 = 0.0, $48 = 0.0, $52 = 0.0, $Q = 0, $eps = 0, $eps2 = 0, $u = 0, $u1 = 0, $v = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $Q = sp + 48 | 0;
 $x2 = sp + 40 | 0;
 $u = sp + 32 | 0;
 $u1 = sp + 24 | 0;
 $eps = sp + 16 | 0;
 $v = sp + 8 | 0;
 $eps2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $nu;
 HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 if (+HEAPF64[$2 >> 3] > 30.0) if (+HEAPF64[$x2 >> 3] < +HEAPF64[$2 >> 3] * 10.0) {
  HEAPF64[$u >> 3] = +_cornish_fisher(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3]);
  HEAPF64[$Q >> 3] = +_gsl_cdf_ugaussian_Q(+HEAPF64[$u >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
  $52 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$52;
 }
 do if (+HEAPF64[$x2 >> 3] < +HEAPF64[$2 >> 3]) {
  HEAPF64[$u1 >> 3] = +HEAPF64[$x2 >> 3] / +HEAPF64[$2 >> 3];
  HEAPF64[$eps >> 3] = +HEAPF64[$u1 >> 3] / (+HEAPF64[$u1 >> 3] + 1.0);
  $31 = +HEAPF64[$2 >> 3] / 2.0;
  $32 = +HEAPF64[$eps >> 3];
  if (+HEAPF64[$1 >> 3] >= 0.0) {
   HEAPF64[$Q >> 3] = +_beta_inc_AXPY40(-.5, .5, .5, $31, $32);
   break;
  } else {
   HEAPF64[$Q >> 3] = +_beta_inc_AXPY40(.5, .5, .5, $31, $32);
   break;
  }
 } else {
  HEAPF64[$v >> 3] = +HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  HEAPF64[$eps2 >> 3] = +HEAPF64[$v >> 3] / (+HEAPF64[$v >> 3] + 1.0);
  $47 = +HEAPF64[$2 >> 3] / 2.0;
  $48 = +HEAPF64[$eps2 >> 3];
  if (+HEAPF64[$1 >> 3] >= 0.0) {
   HEAPF64[$Q >> 3] = +_beta_inc_AXPY40(.5, 0.0, $47, .5, $48);
   break;
  } else {
   HEAPF64[$Q >> 3] = +_beta_inc_AXPY40(-.5, 1.0, $47, .5, $48);
   break;
  }
 } while (0);
 HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
 $52 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$52;
}
function _gsl_cdf_tdist_P($x, $nu) {
 $x = +$x;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $2 = 0, $31 = 0.0, $32 = 0.0, $47 = 0.0, $48 = 0.0, $52 = 0.0, $P = 0, $eps = 0, $eps2 = 0, $u = 0, $u1 = 0, $v = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $P = sp + 48 | 0;
 $x2 = sp + 40 | 0;
 $u = sp + 32 | 0;
 $u1 = sp + 24 | 0;
 $eps = sp + 16 | 0;
 $v = sp + 8 | 0;
 $eps2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $nu;
 HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 if (+HEAPF64[$2 >> 3] > 30.0) if (+HEAPF64[$x2 >> 3] < +HEAPF64[$2 >> 3] * 10.0) {
  HEAPF64[$u >> 3] = +_cornish_fisher(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3]);
  HEAPF64[$P >> 3] = +_gsl_cdf_ugaussian_P(+HEAPF64[$u >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
  $52 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$52;
 }
 do if (+HEAPF64[$x2 >> 3] < +HEAPF64[$2 >> 3]) {
  HEAPF64[$u1 >> 3] = +HEAPF64[$x2 >> 3] / +HEAPF64[$2 >> 3];
  HEAPF64[$eps >> 3] = +HEAPF64[$u1 >> 3] / (+HEAPF64[$u1 >> 3] + 1.0);
  $31 = +HEAPF64[$2 >> 3] / 2.0;
  $32 = +HEAPF64[$eps >> 3];
  if (+HEAPF64[$1 >> 3] >= 0.0) {
   HEAPF64[$P >> 3] = +_beta_inc_AXPY40(.5, .5, .5, $31, $32);
   break;
  } else {
   HEAPF64[$P >> 3] = +_beta_inc_AXPY40(-.5, .5, .5, $31, $32);
   break;
  }
 } else {
  HEAPF64[$v >> 3] = +HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  HEAPF64[$eps2 >> 3] = +HEAPF64[$v >> 3] / (+HEAPF64[$v >> 3] + 1.0);
  $47 = +HEAPF64[$2 >> 3] / 2.0;
  $48 = +HEAPF64[$eps2 >> 3];
  if (+HEAPF64[$1 >> 3] >= 0.0) {
   HEAPF64[$P >> 3] = +_beta_inc_AXPY40(-.5, 1.0, $47, .5, $48);
   break;
  } else {
   HEAPF64[$P >> 3] = +_beta_inc_AXPY40(.5, 0.0, $47, .5, $48);
   break;
  }
 } while (0);
 HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
 $52 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$52;
}
function _olver_A3($z, $abs_zeta) {
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 var $0 = 0, $1 = 0, $12 = 0.0, $47 = 0.0, $5 = 0.0, $a = 0, $c = 0, $c7 = 0, $x = 0, $x1 = 0, $zi2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 136 | 0;
 $1 = sp + 128 | 0;
 $x = sp + 112 | 0;
 $c = sp + 96 | 0;
 $a = sp + 88 | 0;
 $x1 = sp + 24 | 0;
 $zi2 = sp + 16 | 0;
 $c7 = sp;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[sp + 120 >> 3] = $abs_zeta;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .9) {
  HEAPF64[$x >> 3] = 20.0 * $5 / 9.0 - 1.0;
  _cheb_eval_e191(18768, +HEAPF64[$x >> 3], $c) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c >> 3];
  $47 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$47;
 }
 $12 = +HEAPF64[$1 >> 3];
 if ($5 < 1.1) {
  HEAPF64[$a >> 3] = 1.0 - $12;
  HEAPF64[sp + 80 >> 3] = -.00035421197145774384;
  HEAPF64[sp + 72 >> 3] = -.00031232252789031883;
  HEAPF64[sp + 64 >> 3] = .00027794746538313395;
  HEAPF64[sp + 56 >> 3] = .000919803044747967;
  HEAPF64[sp + 48 >> 3] = .0011476003882759777;
  HEAPF64[sp + 40 >> 3] = .0008692393261236258;
  HEAPF64[sp + 32 >> 3] = .00028739225728250734;
  HEAPF64[$0 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * .00028739225728250734 + .0008692393261236258) + .0011476003882759777) + .000919803044747967) + .00027794746538313395) + -.00031232252789031883) + -.00035421197145774384;
  $47 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$47;
 } else {
  HEAPF64[$x1 >> 3] = 11.0 / (5.0 * $12) - 1.0;
  HEAPF64[$zi2 >> 3] = 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  _cheb_eval_e191(18416, +HEAPF64[$x1 >> 3], $c7) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c7 >> 3] * +HEAPF64[$zi2 >> 3] * +HEAPF64[$zi2 >> 3] * +HEAPF64[$zi2 >> 3];
  $47 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$47;
 }
 return 0.0;
}
function _olver_B3($z, $abs_zeta) {
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 var $0 = 0, $1 = 0, $12 = 0.0, $47 = 0.0, $5 = 0.0, $a = 0, $c = 0, $c7 = 0, $x = 0, $x1 = 0, $zi2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 136 | 0;
 $1 = sp + 128 | 0;
 $x = sp + 112 | 0;
 $c = sp + 96 | 0;
 $a = sp + 88 | 0;
 $x1 = sp + 24 | 0;
 $zi2 = sp + 16 | 0;
 $c7 = sp;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[sp + 120 >> 3] = $abs_zeta;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .8) {
  HEAPF64[$x >> 3] = 5.0 * $5 / 2.0 - 1.0;
  _cheb_eval_e191(16888, +HEAPF64[$x >> 3], $c) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c >> 3];
  $47 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$47;
 }
 $12 = +HEAPF64[$1 >> 3];
 if ($5 < 1.2) {
  HEAPF64[$a >> 3] = 1.0 - $12;
  HEAPF64[sp + 80 >> 3] = -.0004746177965599598;
  HEAPF64[sp + 72 >> 3] = -.000955729134294643;
  HEAPF64[sp + 64 >> 3] = -.000803696345120829;
  HEAPF64[sp + 56 >> 3] = -7279216691547842.0e-21;
  HEAPF64[sp + 48 >> 3] = .0009316250033158135;
  HEAPF64[sp + 40 >> 3] = .001498487969137515;
  HEAPF64[sp + 32 >> 3] = .0014840603967594974;
  HEAPF64[$0 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * .0014840603967594974 + .001498487969137515) + .0009316250033158135) + -7279216691547842.0e-21) + -.000803696345120829) + -.000955729134294643) + -.0004746177965599598;
  $47 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$47;
 } else {
  HEAPF64[$x1 >> 3] = 12.0 / (5.0 * $12) - 1.0;
  HEAPF64[$zi2 >> 3] = 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  _cheb_eval_e191(16536, +HEAPF64[$x1 >> 3], $c7) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c7 >> 3] * +HEAPF64[$zi2 >> 3] * +HEAPF64[$zi2 >> 3] * +HEAPF64[$zi2 >> 3];
  $47 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$47;
 }
 return 0.0;
}
function _tt_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $i = 0, $n = 0, $state = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $state = sp + 16 | 0;
 $y = sp + 12 | 0;
 $x = sp + 8 | 0;
 $n = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x >> 2] = (HEAP32[$state >> 2] | 0) + 4;
 HEAP32[$n >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 if ((HEAP32[$n >> 2] | 0) >= 25) {
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= 18) break;
   HEAP32[(HEAP32[$x >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[(HEAP32[$x >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 7 << 2) >> 2] ^ (HEAP32[(HEAP32[$x >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) >>> 1 ^ HEAP32[80616 + ((((HEAP32[(HEAP32[$x >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) >>> 0) % 2 | 0) << 2) >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= 25) break;
   HEAP32[(HEAP32[$x >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[(HEAP32[$x >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + -18 << 2) >> 2] ^ (HEAP32[(HEAP32[$x >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) >>> 1 ^ HEAP32[80616 + ((((HEAP32[(HEAP32[$x >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) >>> 0) % 2 | 0) << 2) >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$n >> 2] = 0;
 }
 HEAP32[$y >> 2] = HEAP32[(HEAP32[$x >> 2] | 0) + (HEAP32[$n >> 2] << 2) >> 2];
 HEAP32[$y >> 2] = HEAP32[$y >> 2] ^ HEAP32[$y >> 2] << 7 & 727393536;
 HEAP32[$y >> 2] = HEAP32[$y >> 2] ^ HEAP32[$y >> 2] << 15 & -611647488;
 HEAP32[$y >> 2] = HEAP32[$y >> 2];
 HEAP32[$y >> 2] = HEAP32[$y >> 2] ^ (HEAP32[$y >> 2] | 0) >>> 16;
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 STACKTOP = sp;
 return HEAP32[$y >> 2] | 0;
}
function _mrg_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $28 = 0, $62 = 0, $65 = 0, $66 = 0, $h1 = 0, $h5 = 0, $p1 = 0, $p5 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $state = sp + 16 | 0;
 $p1 = sp + 12 | 0;
 $h1 = sp + 8 | 0;
 $p5 = sp + 4 | 0;
 $h5 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$h5 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 16 >> 2] | 0) / 20554 | 0;
 HEAP32[$p5 >> 2] = (((HEAP32[(HEAP32[$state >> 2] | 0) + 16 >> 2] | 0) - ((HEAP32[$h5 >> 2] | 0) * 20554 | 0) | 0) * 104480 | 0) - ((HEAP32[$h5 >> 2] | 0) * 1727 | 0);
 if ((HEAP32[$p5 >> 2] | 0) > 0) HEAP32[$p5 >> 2] = (HEAP32[$p5 >> 2] | 0) - 2147483647;
 HEAP32[$h1 >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] | 0) / 20 | 0;
 $28 = Math_imul(107374182, (HEAP32[HEAP32[$state >> 2] >> 2] | 0) - ((HEAP32[$h1 >> 2] | 0) * 20 | 0) | 0) | 0;
 HEAP32[$p1 >> 2] = $28 - ((HEAP32[$h1 >> 2] | 0) * 7 | 0);
 if ((HEAP32[$p1 >> 2] | 0) < 0) HEAP32[$p1 >> 2] = (HEAP32[$p1 >> 2] | 0) + 2147483647;
 HEAP32[(HEAP32[$state >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[$p1 >> 2] | 0) + (HEAP32[$p5 >> 2] | 0);
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) >= 0) {
  $65 = HEAP32[$state >> 2] | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 $62 = HEAP32[$state >> 2] | 0;
 HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + 2147483647;
 $65 = HEAP32[$state >> 2] | 0;
 $66 = HEAP32[$65 >> 2] | 0;
 STACKTOP = sp;
 return $66 | 0;
}
function _lngamma_sgn_0($eps, $lng, $sgn) {
 $eps = +$eps;
 $lng = $lng | 0;
 $sgn = $sgn | 0;
 var $0 = 0, $1 = 0, $2 = 0, $45 = 0.0, $50 = 0.0, $g = 0, $g6 = 0, $gee = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 116 | 0;
 $2 = sp + 112 | 0;
 $g6 = sp + 16 | 0;
 $g = sp + 8 | 0;
 $gee = sp;
 HEAPF64[$0 >> 3] = $eps;
 HEAP32[$1 >> 2] = $lng;
 HEAP32[$2 >> 2] = $sgn;
 HEAPF64[sp + 96 >> 3] = -.07721566490153287;
 HEAPF64[sp + 88 >> 3] = -.010944004672027444;
 HEAPF64[sp + 80 >> 3] = .0925209239191137;
 HEAPF64[sp + 72 >> 3] = -.018271913165599812;
 HEAPF64[sp + 64 >> 3] = .018004931096854797;
 HEAPF64[sp + 56 >> 3] = -.006850885378723807;
 HEAPF64[sp + 48 >> 3] = .003998239557568466;
 HEAPF64[sp + 40 >> 3] = -.001894306216871078;
 HEAPF64[sp + 32 >> 3] = .0009747323780451322;
 HEAPF64[sp + 24 >> 3] = -.0004843439272225589;
 HEAPF64[$g6 >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * -.0004843439272225589 + .0009747323780451322) + -.001894306216871078) + .003998239557568466) + -.006850885378723807;
 HEAPF64[$g >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * +HEAPF64[$g6 >> 3] + .018004931096854797) + -.018271913165599812) + .0925209239191137) + -.010944004672027444) + -.07721566490153287);
 HEAPF64[$gee >> 3] = +HEAPF64[$g >> 3] + 1.0 / (+HEAPF64[$0 >> 3] + 1.0) + +HEAPF64[$0 >> 3] * .5;
 $45 = +Math_log(+(+HEAPF64[$gee >> 3] / +Math_abs(+(+HEAPF64[$0 >> 3]))));
 HEAPF64[HEAP32[$1 >> 2] >> 3] = $45;
 $50 = +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 8.881784197001252e-16;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $50;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +((+HEAPF64[$0 >> 3] >= 0.0 ? 1 : -1) | 0);
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_gegenpoly_array($nmax, $lambda, $x, $result_array) {
 $nmax = $nmax | 0;
 $lambda = +$lambda;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $64 = 0, $k = 0, $term1 = 0, $term2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 36 | 0;
 $k = sp + 32 | 0;
 $term1 = sp + 8 | 0;
 $term2 = sp;
 HEAP32[$1 >> 2] = $nmax;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 if (!(+HEAPF64[$2 >> 3] <= -.5)) if ((HEAP32[$1 >> 2] | 0) >= 0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$0 >> 2] = 0;
   $64 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $64 | 0;
  }
  if (+HEAPF64[$2 >> 3] == 0.0) HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$3 >> 3] * 2.0; else HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$3 >> 3];
  HEAP32[$k >> 2] = 2;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$term1 >> 3] = (+(HEAP32[$k >> 2] | 0) + +HEAPF64[$2 >> 3] - 1.0) * 2.0 * +HEAPF64[$3 >> 3] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - 1 << 3) >> 3];
   HEAPF64[$term2 >> 3] = (+(HEAP32[$k >> 2] | 0) + +HEAPF64[$2 >> 3] * 2.0 - 2.0) * +HEAPF64[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - 2 << 3) >> 3];
   HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = (+HEAPF64[$term1 >> 3] - +HEAPF64[$term2 >> 3]) / +(HEAP32[$k >> 2] | 0);
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 _gsl_error(51248, 51264, 148, 1);
 HEAP32[$0 >> 2] = 1;
 $64 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $64 | 0;
}
function _ran_array763($aa, $n, $ran_x) {
 $aa = $aa | 0;
 $n = $n | 0;
 $ran_x = $ran_x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $i = 0, $j = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $i = sp + 4 | 0;
 $j = sp;
 HEAP32[$0 >> 2] = $aa;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $ran_x;
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >>> 0 >= 100) break;
  HEAP32[(HEAP32[$0 >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  HEAP32[(HEAP32[$0 >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] | 0) - (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 37 << 2) >> 2] | 0) & 1073741823;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 37) break;
  HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] | 0) - (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 37 << 2) >> 2] | 0) & 1073741823;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 100) break;
  HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] | 0) - (HEAP32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) - 37 << 2) >> 2] | 0) & 1073741823;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gsl_sf_hypot_e($x, $y, $result) {
 $x = +$x;
 $y = +$y;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $40 = 0.0, $46 = 0, $a = 0, $b = 0, $max = 0, $min = 0, $rat = 0, $root_term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 64 | 0;
 $a = sp + 40 | 0;
 $b = sp + 32 | 0;
 $min = sp + 24 | 0;
 $max = sp + 16 | 0;
 $rat = sp + 8 | 0;
 $root_term = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == 0.0) if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $46 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $46 | 0;
 }
 HEAPF64[$a >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$b >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$min >> 3] = +_GSL_MIN_DBL(+(+HEAPF64[$a >> 3]), +(+HEAPF64[$b >> 3]));
 HEAPF64[$max >> 3] = +_GSL_MAX_DBL(+(+HEAPF64[$a >> 3]), +(+HEAPF64[$b >> 3]));
 HEAPF64[$rat >> 3] = +HEAPF64[$min >> 3] / +HEAPF64[$max >> 3];
 HEAPF64[$root_term >> 3] = +Math_sqrt(+(+HEAPF64[$rat >> 3] * +HEAPF64[$rat >> 3] + 1.0));
 if (+HEAPF64[$max >> 3] < 1.7976931348623157e+308 / +HEAPF64[$root_term >> 3]) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$max >> 3] * +HEAPF64[$root_term >> 3];
  $40 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $40;
  HEAP32[$0 >> 2] = 0;
  $46 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $46 | 0;
 } else {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(61520, 61536, 335, 16);
  HEAP32[$0 >> 2] = 16;
  $46 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $46 | 0;
 }
 return 0;
}
function _ran_array($aa, $n, $ran_x) {
 $aa = $aa | 0;
 $n = $n | 0;
 $ran_x = $ran_x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $i = 0, $j = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $i = sp + 4 | 0;
 $j = sp;
 HEAP32[$0 >> 2] = $aa;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $ran_x;
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >>> 0 >= 100) break;
  HEAP32[(HEAP32[$0 >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  HEAP32[(HEAP32[$0 >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] | 0) - (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 37 << 2) >> 2] | 0) & 1073741823;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 37) break;
  HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] | 0) - (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 37 << 2) >> 2] | 0) & 1073741823;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 100) break;
  HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 100 << 2) >> 2] | 0) - (HEAP32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) - 37 << 2) >> 2] | 0) & 1073741823;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _olver_b0($z, $minus_zeta) {
 $z = +$z;
 $minus_zeta = +$minus_zeta;
 var $0 = 0, $1 = 0, $2 = 0, $58 = 0.0, $a = 0, $abs_zeta = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 104 | 0;
 $2 = sp + 96 | 0;
 $a = sp + 88 | 0;
 $abs_zeta = sp + 8 | 0;
 $t = sp;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[$2 >> 3] = $minus_zeta;
 if (+HEAPF64[$1 >> 3] < 1.02) {
  HEAPF64[$a >> 3] = 1.0 - +HEAPF64[$1 >> 3];
  HEAPF64[sp + 80 >> 3] = .01799887214135533;
  HEAPF64[sp + 72 >> 3] = .011199298221287762;
  HEAPF64[sp + 64 >> 3] = .00594040697860143;
  HEAPF64[sp + 56 >> 3] = .002867672451639004;
  HEAPF64[sp + 48 >> 3] = .001233918905256727;
  HEAPF64[sp + 40 >> 3] = .0004169250674535179;
  HEAPF64[sp + 32 >> 3] = 3301733850859498.0e-20;
  HEAPF64[sp + 24 >> 3] = -.0001318076238578203;
  HEAPF64[sp + 16 >> 3] = -.00019068703700508472;
  HEAPF64[$0 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * -.00019068703700508472 + -.0001318076238578203) + 3301733850859498.0e-20) + .0004169250674535179) + .001233918905256727) + .002867672451639004) + .00594040697860143) + .011199298221287762) + .01799887214135533;
  $58 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$58;
 } else {
  HEAPF64[$abs_zeta >> 3] = +HEAPF64[$2 >> 3];
  HEAPF64[$t >> 3] = 1.0 / (+HEAPF64[$1 >> 3] * +Math_sqrt(+(1.0 - 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]))));
  HEAPF64[$0 >> 3] = -5.0 / (+HEAPF64[$abs_zeta >> 3] * 48.0 * +HEAPF64[$abs_zeta >> 3]) + +HEAPF64[$t >> 3] * (+HEAPF64[$t >> 3] * 5.0 * +HEAPF64[$t >> 3] + 3.0) / (+Math_sqrt(+(+HEAPF64[$abs_zeta >> 3])) * 24.0);
  $58 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$58;
 }
 return 0.0;
}
function _ran_get733($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $44 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $r = 0, $state = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $state = sp + 8 | 0;
 $y = sp + 4 | 0;
 $r = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$r >> 2] = (((HEAP32[HEAP32[$state >> 2] >> 2] | 0) >>> 0) / 44488 | 0) * 3399;
 HEAP32[$y >> 2] = ((((HEAP32[HEAP32[$state >> 2] >> 2] | 0) >>> 0) % 44488 | 0) * 48271 | 0) - (HEAP32[$r >> 2] | 0);
 if ((HEAP32[$y >> 2] | 0) < 0) HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 2147483647;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$y >> 2];
 HEAP32[$r >> 2] = (((HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) >>> 0) / 52774 | 0) * 3791;
 HEAP32[$y >> 2] = ((((HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) >>> 0) % 52774 | 0) * 40692 | 0) - (HEAP32[$r >> 2] | 0);
 if ((HEAP32[$y >> 2] | 0) < 0) HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 2147483399;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = HEAP32[$y >> 2];
 $44 = HEAP32[HEAP32[$state >> 2] >> 2] | 0;
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  $56 = $44 - (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) | 0;
  $54 = HEAP32[$state >> 2] | 0;
  $55 = $54 + 8 | 0;
  HEAP32[$55 >> 2] = $56;
  $57 = HEAP32[$state >> 2] | 0;
  $58 = $57 + 8 | 0;
  $59 = HEAP32[$58 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 } else {
  $56 = 2147483647 + $44 - (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) | 0;
  $54 = HEAP32[$state >> 2] | 0;
  $55 = $54 + 8 | 0;
  HEAP32[$55 >> 2] = $56;
  $57 = HEAP32[$state >> 2] | 0;
  $58 = $57 + 8 | 0;
  $59 = HEAP32[$58 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 return 0;
}
function _gsl_sf_result_smash_e($re, $r) {
 $re = $re | 0;
 $r = $r | 0;
 var $0 = 0, $1 = 0, $2 = 0, $68 = 0, $8 = 0.0, $ae = 0, $av = 0, $scale = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 24 | 0;
 $av = sp + 16 | 0;
 $ae = sp + 8 | 0;
 $scale = sp;
 HEAP32[$1 >> 2] = $re;
 HEAP32[$2 >> 2] = $r;
 $8 = +HEAPF64[HEAP32[$1 >> 2] >> 3];
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $8;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3];
  HEAP32[$0 >> 2] = 0;
  $68 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $68 | 0;
 }
 HEAPF64[$av >> 3] = +Math_abs(+$8);
 HEAPF64[$ae >> 3] = +Math_abs(+(+HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3]));
 if (1.4916681462400413e-154 < +HEAPF64[$av >> 3] & +HEAPF64[$av >> 3] < 1.3407807929942596e+154) if (1.4916681462400413e-154 < +HEAPF64[$ae >> 3] & +HEAPF64[$ae >> 3] < 1.3407807929942596e+154) if (-347.1142450808094 < +(HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0)) if (+(HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) < 347.79352931775816) {
  HEAPF64[$scale >> 3] = +Math_exp(+(+(HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) * 2.302585092994046));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[HEAP32[$1 >> 2] >> 3] * +HEAPF64[$scale >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] * +HEAPF64[$scale >> 3];
  HEAP32[$0 >> 2] = 0;
  $68 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $68 | 0;
 }
 HEAP32[$0 >> 2] = _gsl_sf_exp_mult_err_e(+(HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) * 2.302585092994046, 0.0, +HEAPF64[HEAP32[$1 >> 2] >> 3], +HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3], HEAP32[$2 >> 2] | 0) | 0;
 $68 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $68 | 0;
}
function _gsl_ran_multinomial_lnpdf($K, $p, $n) {
 $K = $K | 0;
 $p = $p | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $41 = 0.0, $47 = 0.0, $53 = 0.0, $N = 0, $k = 0, $log_pdf = 0, $norm = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 24 | 0;
 $k = sp + 20 | 0;
 $N = sp + 16 | 0;
 $log_pdf = sp + 8 | 0;
 $norm = sp;
 HEAP32[$0 >> 2] = $K;
 HEAP32[$1 >> 2] = $p;
 HEAP32[$2 >> 2] = $n;
 HEAP32[$N >> 2] = 0;
 HEAPF64[$log_pdf >> 3] = 0.0;
 HEAPF64[$norm >> 3] = 0.0;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$0 >> 2] | 0) >>> 0) break;
  HEAP32[$N >> 2] = (HEAP32[$N >> 2] | 0) + (HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] | 0);
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$0 >> 2] | 0) >>> 0) break;
  HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[(HEAP32[$1 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[$log_pdf >> 3] = +_gsl_sf_lnfact(HEAP32[$N >> 2] | 0);
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$0 >> 2] | 0) >>> 0) break;
  if ((HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] | 0) >>> 0 > 0) {
   $41 = +Math_log(+(+HEAPF64[(HEAP32[$1 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] / +HEAPF64[$norm >> 3]));
   $47 = $41 * +((HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] | 0) >>> 0);
   $53 = $47 - +_gsl_sf_lnfact(HEAP32[(HEAP32[$2 >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] | 0);
   HEAPF64[$log_pdf >> 3] = +HEAPF64[$log_pdf >> 3] + $53;
  }
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$log_pdf >> 3]);
}
function _olver_A4($z, $abs_zeta) {
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 var $0 = 0, $1 = 0, $12 = 0.0, $46 = 0.0, $5 = 0.0, $a = 0, $c = 0, $c6 = 0, $x = 0, $x1 = 0, $zi2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $0 = sp + 128 | 0;
 $1 = sp + 120 | 0;
 $x = sp + 104 | 0;
 $c = sp + 88 | 0;
 $a = sp + 80 | 0;
 $x1 = sp + 24 | 0;
 $zi2 = sp + 16 | 0;
 $c6 = sp;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[sp + 112 >> 3] = $abs_zeta;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .8) {
  HEAPF64[$x >> 3] = 5.0 * $5 / 2.0 - 1.0;
  _cheb_eval_e191(18136, +HEAPF64[$x >> 3], $c) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c >> 3];
  $46 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$46;
 }
 $12 = +HEAPF64[$1 >> 3];
 if ($5 < 1.2) {
  HEAPF64[$a >> 3] = 1.0 - $12;
  HEAPF64[sp + 72 >> 3] = .0003781941992017729;
  HEAPF64[sp + 64 >> 3] = .0004049439055236323;
  HEAPF64[sp + 56 >> 3] = -.00045764735528936113;
  HEAPF64[sp + 48 >> 3] = -.0016536104422965022;
  HEAPF64[sp + 40 >> 3] = -.0021752751798336007;
  HEAPF64[sp + 32 >> 3] = -.0015200328786649073;
  HEAPF64[$0 >> 3] = +HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * (+HEAPF64[$a >> 3] * -.0015200328786649073 + -.0021752751798336007) + -.0016536104422965022) + -.00045764735528936113) + .0004049439055236323) + .0003781941992017729;
  $46 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$46;
 } else {
  HEAPF64[$x1 >> 3] = 12.0 / (5.0 * $12) - 1.0;
  HEAPF64[$zi2 >> 3] = 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]);
  _cheb_eval_e191(17864, +HEAPF64[$x1 >> 3], $c6) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c6 >> 3] * +HEAPF64[$zi2 >> 3] * +HEAPF64[$zi2 >> 3] * +HEAPF64[$zi2 >> 3] * +HEAPF64[$zi2 >> 3];
  $46 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$46;
 }
 return 0.0;
}
function _bessel_il_CF1($l, $x, $threshold, $ratio) {
 $l = $l | 0;
 $x = +$x;
 $threshold = +$threshold;
 $ratio = $ratio | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $48 = 0.0, $64 = 0, $ak = 0, $k = 0, $rhok = 0, $sum = 0, $tk = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 60 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 56 | 0;
 $tk = sp + 24 | 0;
 $sum = sp + 16 | 0;
 $rhok = sp + 8 | 0;
 $k = sp + 48 | 0;
 $ak = sp;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAPF64[$3 >> 3] = $threshold;
 HEAP32[$4 >> 2] = $ratio;
 HEAP32[sp + 52 >> 2] = 2e3;
 HEAPF64[$tk >> 3] = 1.0;
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$rhok >> 3] = 0.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > 2e3) break;
  HEAPF64[$ak >> 3] = +HEAPF64[$2 >> 3] / (+(HEAP32[$1 >> 2] | 0) * 2.0 + 1.0 + +(HEAP32[$k >> 2] | 0) * 2.0) * (+HEAPF64[$2 >> 3] / (+(HEAP32[$1 >> 2] | 0) * 2.0 + 3.0 + +(HEAP32[$k >> 2] | 0) * 2.0));
  HEAPF64[$rhok >> 3] = -+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) / (+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) + 1.0);
  HEAPF64[$tk >> 3] = +HEAPF64[$tk >> 3] * +HEAPF64[$rhok >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$tk >> 3];
  $48 = +Math_abs(+(+HEAPF64[$tk >> 3] / +HEAPF64[$sum >> 3]));
  if ($48 < +HEAPF64[$3 >> 3]) break;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$2 >> 3] / (+(HEAP32[$1 >> 2] | 0) * 2.0 + 3.0) * +HEAPF64[$sum >> 3];
 if ((HEAP32[$k >> 2] | 0) == 2e3) {
  _gsl_error(15832, 15632, 56, 11);
  HEAP32[$0 >> 2] = 11;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 return 0;
}
function _ranmar_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $60 = 0, $carry = 0, $delta = 0, $i = 0, $j = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $state = sp + 16 | 0;
 $i = sp + 12 | 0;
 $j = sp + 8 | 0;
 $carry = sp + 4 | 0;
 $delta = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$i >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2];
 HEAP32[$carry >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2];
 HEAP32[$delta >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 12 + (HEAP32[$i >> 2] << 2) >> 2] | 0) - (HEAP32[(HEAP32[$state >> 2] | 0) + 12 + (HEAP32[$j >> 2] << 2) >> 2] | 0);
 if ((HEAP32[$delta >> 2] | 0) < 0) HEAP32[$delta >> 2] = (HEAP32[$delta >> 2] | 0) + 16777216;
 HEAP32[(HEAP32[$state >> 2] | 0) + 12 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$delta >> 2];
 if (!(HEAP32[$i >> 2] | 0)) HEAP32[$i >> 2] = 96; else HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$i >> 2];
 if (!(HEAP32[$j >> 2] | 0)) HEAP32[$j >> 2] = 96; else HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = HEAP32[$j >> 2];
 HEAP32[$carry >> 2] = (HEAP32[$carry >> 2] | 0) + -7654321;
 if ((HEAP32[$carry >> 2] | 0) < 0) HEAP32[$carry >> 2] = (HEAP32[$carry >> 2] | 0) + 16777213;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = HEAP32[$carry >> 2];
 HEAP32[$delta >> 2] = (HEAP32[$delta >> 2] | 0) + (0 - (HEAP32[$carry >> 2] | 0));
 if ((HEAP32[$delta >> 2] | 0) >= 0) {
  $60 = HEAP32[$delta >> 2] | 0;
  STACKTOP = sp;
  return $60 | 0;
 }
 HEAP32[$delta >> 2] = (HEAP32[$delta >> 2] | 0) + 16777216;
 $60 = HEAP32[$delta >> 2] | 0;
 STACKTOP = sp;
 return $60 | 0;
}
function _gsl_sf_lnchoose_e($n, $m, $result) {
 $n = $n | 0;
 $m = $m | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $49 = 0.0, $51 = 0, $54 = 0, $mf = 0, $nf = 0, $nmmf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $nf = sp + 32 | 0;
 $mf = sp + 16 | 0;
 $nmmf = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $m;
 HEAP32[$3 >> 2] = $result;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 > (HEAP32[$1 >> 2] | 0) >>> 0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(38384, 38400, 1561, 1);
  HEAP32[$0 >> 2] = 1;
  $54 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) == 0 ? 1 : (HEAP32[$2 >> 2] | 0) == (HEAP32[$1 >> 2] | 0)) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $54 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 if (HEAP32[$2 >> 2] << 1 >>> 0 > (HEAP32[$1 >> 2] | 0) >>> 0) HEAP32[$2 >> 2] = (HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0);
 _gsl_sf_lnfact_e(HEAP32[$1 >> 2] | 0, $nf) | 0;
 _gsl_sf_lnfact_e(HEAP32[$2 >> 2] | 0, $mf) | 0;
 _gsl_sf_lnfact_e((HEAP32[$1 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0, $nmmf) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$nf >> 3] - +HEAPF64[$mf >> 3] - +HEAPF64[$nmmf >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$nf + 8 >> 3] + +HEAPF64[$mf + 8 >> 3] + +HEAPF64[$nmmf + 8 >> 3];
 $49 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $51 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$51 >> 3] = +HEAPF64[$51 >> 3] + $49;
 HEAP32[$0 >> 2] = 0;
 $54 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $54 | 0;
}
function _gsl_ran_multinomial($r, $K, $N, $p, $n) {
 $r = $r | 0;
 $K = $K | 0;
 $N = $N | 0;
 $p = $p | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $36 = 0, $4 = 0, $k = 0, $norm = 0, $sum_n = 0, $sum_p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $k = sp + 20 | 0;
 $norm = sp + 8 | 0;
 $sum_p = sp;
 $sum_n = sp + 16 | 0;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $K;
 HEAP32[$2 >> 2] = $N;
 HEAP32[$3 >> 2] = $p;
 HEAP32[$4 >> 2] = $n;
 HEAPF64[$norm >> 3] = 0.0;
 HEAPF64[$sum_p >> 3] = 0.0;
 HEAP32[$sum_n >> 2] = 0;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  if (+HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] > 0.0) {
   $36 = _gsl_ran_binomial(HEAP32[$0 >> 2] | 0, +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] / (+HEAPF64[$norm >> 3] - +HEAPF64[$sum_p >> 3]), (HEAP32[$2 >> 2] | 0) - (HEAP32[$sum_n >> 2] | 0) | 0) | 0;
   HEAP32[(HEAP32[$4 >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] = $36;
  } else HEAP32[(HEAP32[$4 >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] = 0;
  HEAPF64[$sum_p >> 3] = +HEAPF64[$sum_p >> 3] + +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3];
  HEAP32[$sum_n >> 2] = (HEAP32[$sum_n >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2] | 0);
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gsl_cdf_ugaussian_Q($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $20 = 0.0, $39 = 0.0, $absx = 0, $result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp + 8 | 0;
 $absx = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$absx >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$absx >> 3] < 1.1102230246251565e-16) {
  HEAPF64[$result >> 3] = .5;
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $39 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$39;
 }
 if (+HEAPF64[$absx >> 3] < .66291) {
  HEAPF64[$result >> 3] = +_gauss_small(+HEAPF64[$1 >> 3]);
  $13 = +HEAPF64[$result >> 3];
  if (+HEAPF64[$1 >> 3] < 0.0) HEAPF64[$result >> 3] = +Math_abs(+$13) + .5; else HEAPF64[$result >> 3] = .5 - $13;
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $39 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$39;
 }
 $20 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$absx >> 3] < 5.656854249492381) {
  HEAPF64[$result >> 3] = +_gauss_medium($20);
  if (+HEAPF64[$1 >> 3] < 0.0) HEAPF64[$result >> 3] = 1.0 - +HEAPF64[$result >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $39 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$39;
 }
 if ($20 > 37.519) {
  HEAPF64[$result >> 3] = 0.0;
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $39 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$39;
 }
 if (+HEAPF64[$1 >> 3] < -8.572) {
  HEAPF64[$result >> 3] = 1.0;
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $39 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$39;
 }
 HEAPF64[$result >> 3] = +_gauss_large(+HEAPF64[$1 >> 3]);
 if (+HEAPF64[$1 >> 3] < 0.0) HEAPF64[$result >> 3] = 1.0 - +HEAPF64[$result >> 3];
 HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
 $39 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$39;
}
function _gsl_ran_gamma($r, $a, $b) {
 $r = $r | 0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $3 = 0, $50 = 0.0, $69 = 0.0, $c = 0, $d = 0, $u = 0, $u1 = 0, $v = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 48 | 0;
 $u = sp + 40 | 0;
 $x = sp + 32 | 0;
 $v = sp + 24 | 0;
 $u1 = sp + 16 | 0;
 $d = sp + 8 | 0;
 $c = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$2 >> 3] < 1.0) {
  HEAPF64[$u >> 3] = +_gsl_rng_uniform_pos(HEAP32[$1 >> 2] | 0);
  $12 = +_gsl_ran_gamma(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3] + 1.0, +HEAPF64[$3 >> 3]);
  HEAPF64[$0 >> 3] = $12 * +Math_pow(+(+HEAPF64[$u >> 3]), +(1.0 / +HEAPF64[$2 >> 3]));
  $69 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$69;
 }
 HEAPF64[$d >> 3] = +HEAPF64[$2 >> 3] - .3333333333333333;
 HEAPF64[$c >> 3] = .3333333333333333 / +Math_sqrt(+(+HEAPF64[$d >> 3]));
 while (1) {
  HEAPF64[$x >> 3] = +_gsl_ran_gaussian_ziggurat(HEAP32[$1 >> 2] | 0, 1.0);
  HEAPF64[$v >> 3] = +HEAPF64[$c >> 3] * +HEAPF64[$x >> 3] + 1.0;
  if (+HEAPF64[$v >> 3] <= 0.0) continue;
  HEAPF64[$v >> 3] = +HEAPF64[$v >> 3] * +HEAPF64[$v >> 3] * +HEAPF64[$v >> 3];
  HEAPF64[$u1 >> 3] = +_gsl_rng_uniform_pos(HEAP32[$1 >> 2] | 0);
  if (+HEAPF64[$u1 >> 3] < 1.0 - +HEAPF64[$x >> 3] * .0331 * +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3]) break;
  $50 = +Math_log(+(+HEAPF64[$u1 >> 3]));
  if ($50 < +HEAPF64[$x >> 3] * .5 * +HEAPF64[$x >> 3] + +HEAPF64[$d >> 3] * (1.0 - +HEAPF64[$v >> 3] + +Math_log(+(+HEAPF64[$v >> 3])))) break;
 }
 HEAPF64[$0 >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$d >> 3] * +HEAPF64[$v >> 3];
 $69 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$69;
}
function _lngamma_2_pade($eps, $result) {
 $eps = +$eps;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $48 = 0.0, $corr = 0, $den = 0, $eps5 = 0, $num = 0, $pade = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 120 | 0;
 $num = sp + 72 | 0;
 $den = sp + 64 | 0;
 $pade = sp + 56 | 0;
 $eps5 = sp + 8 | 0;
 $corr = sp;
 HEAPF64[$0 >> 3] = $eps;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[sp + 104 >> 3] = 1.0008958347866692;
 HEAPF64[sp + 96 >> 3] = 4.209376735287755;
 HEAPF64[sp + 88 >> 3] = 2.618851904903217;
 HEAPF64[sp + 80 >> 3] = 10.857665599009835;
 HEAPF64[$num >> 3] = (+HEAPF64[$0 >> 3] + 1.0008958347866692) * (+HEAPF64[$0 >> 3] + 4.209376735287755);
 HEAPF64[$den >> 3] = (+HEAPF64[$0 >> 3] + 2.618851904903217) * (+HEAPF64[$0 >> 3] + 10.857665599009835);
 HEAPF64[$pade >> 3] = +HEAPF64[$num >> 3] * 2.853379987657819 / +HEAPF64[$den >> 3];
 HEAPF64[sp + 48 >> 3] = .0001139406357036744;
 HEAPF64[sp + 40 >> 3] = -.0001365435269792533;
 HEAPF64[sp + 32 >> 3] = .0001067287169183665;
 HEAPF64[sp + 24 >> 3] = -693271800931282.0e-19;
 HEAPF64[sp + 16 >> 3] = 40722092786795.0e-18;
 HEAPF64[$eps5 >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 HEAPF64[$corr >> 3] = +HEAPF64[$eps5 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * 40722092786795.0e-18 + -693271800931282.0e-19) + .0001067287169183665) + -.0001365435269792533) + .0001139406357036744);
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$pade >> 3] + +HEAPF64[$corr >> 3]);
 $48 = +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $48;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_bessel_In_array($nmin, $nmax, $x, $result_array) {
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $34 = 0, $4 = 0, $40 = 0, $ax = 0, $eax = 0, $j = 0, $j1 = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 36 | 0;
 $ax = sp + 8 | 0;
 $j = sp + 32 | 0;
 $j1 = sp + 28 | 0;
 $eax = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $nmin;
 HEAP32[$2 >> 2] = $nmax;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result_array;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$3 >> 3]));
 if (+HEAPF64[$ax >> 3] > 708.782712893384) {
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) > ((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0)) break;
   HEAPF64[(HEAP32[$4 >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 3] = 0.0;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  _gsl_error(12024, 12008, 202, 16);
  HEAP32[$0 >> 2] = 16;
  $40 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 } else {
  HEAPF64[$eax >> 3] = +Math_exp(+(+HEAPF64[$ax >> 3]));
  HEAP32[$status >> 2] = _gsl_sf_bessel_In_scaled_array(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  HEAP32[$j1 >> 2] = 0;
  while (1) {
   if ((HEAP32[$j1 >> 2] | 0) > ((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0)) break;
   $34 = (HEAP32[$4 >> 2] | 0) + (HEAP32[$j1 >> 2] << 3) | 0;
   HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] * +HEAPF64[$eax >> 3];
   HEAP32[$j1 >> 2] = (HEAP32[$j1 >> 2] | 0) + 1;
  }
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $40 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 return 0;
}
function _gsl_sf_lnsinh_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $13 = 0.0, $18 = 0.0, $2 = 0, $22 = 0.0, $29 = 0.0, $34 = 0.0, $42 = 0.0, $45 = 0, $eps = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 $eps = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(61544, 61536, 445, 1);
  HEAP32[$0 >> 2] = 1;
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 $10 = +Math_abs(+(+HEAPF64[$1 >> 3])) < 1.0;
 $11 = +HEAPF64[$1 >> 3];
 if ($10) {
  _sinh_series($11, $eps) | 0;
  $13 = +Math_log(+(+HEAPF64[$eps >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $13;
  $18 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $18;
  HEAP32[$0 >> 2] = 0;
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 $22 = +HEAPF64[$1 >> 3];
 if ($11 < 18.021826694558577) {
  $29 = $22 + +Math_log(+((1.0 - +Math_exp(+(+HEAPF64[$1 >> 3] * -2.0))) * .5));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $29;
  $34 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $34;
  HEAP32[$0 >> 2] = 0;
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -.6931471805599453 + $22;
  $42 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $42;
  HEAP32[$0 >> 2] = 0;
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 return 0;
}
function _gsl_sf_exp_err_e10_e($x, $dx, $result) {
 $x = +$x;
 $dx = +$dx;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $40 = 0.0, $49 = 0, $N = 0, $adx = 0, $ex = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 36 | 0;
 $adx = sp + 8 | 0;
 $N = sp + 32 | 0;
 $ex = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $dx;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$adx >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 if (+HEAPF64[$1 >> 3] + +HEAPF64[$adx >> 3] > 2147483646.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(31008, 31024, 566, 16);
  HEAP32[$0 >> 2] = 16;
  $49 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 if (+HEAPF64[$1 >> 3] - +HEAPF64[$adx >> 3] < -2147483647.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(31032, 31024, 569, 15);
  HEAP32[$0 >> 2] = 15;
  $49 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 } else {
  HEAP32[$N >> 2] = ~~+Math_floor(+(+HEAPF64[$1 >> 3] / 2.302585092994046));
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3] - +(HEAP32[$N >> 2] | 0) * 2.302585092994046));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$ex >> 3];
  $40 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ex >> 3] * ($40 + +HEAPF64[$adx >> 3]);
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = HEAP32[$N >> 2];
  HEAP32[$0 >> 2] = 0;
  $49 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 return 0;
}
function _gsl_sf_exp_err_e($x, $dx, $result) {
 $x = +$x;
 $dx = +$dx;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0.0, $3 = 0, $32 = 0.0, $38 = 0.0, $40 = 0, $43 = 0, $adx = 0, $edx = 0, $ex = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 40 | 0;
 $adx = sp + 16 | 0;
 $ex = sp + 8 | 0;
 $edx = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $dx;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$adx >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 if (+HEAPF64[$1 >> 3] + +HEAPF64[$adx >> 3] > 709.782712893384) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31008, 31024, 542, 16);
  HEAP32[$0 >> 2] = 16;
  $43 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 if (+HEAPF64[$1 >> 3] - +HEAPF64[$adx >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(31032, 31024, 545, 15);
  HEAP32[$0 >> 2] = 15;
  $43 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 } else {
  HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$edx >> 3] = +Math_exp(+(+HEAPF64[$adx >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$ex >> 3];
  $26 = +HEAPF64[$ex >> 3];
  $32 = $26 * +_GSL_MAX_DBL(2.220446049250313e-16, +(+HEAPF64[$edx >> 3] - 1.0 / +HEAPF64[$edx >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $32;
  $38 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $40 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$40 >> 3] = +HEAPF64[$40 >> 3] + $38;
  HEAP32[$0 >> 2] = 0;
  $43 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 return 0;
}
function _lngamma_1_pade($eps, $result) {
 $eps = +$eps;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $48 = 0.0, $corr = 0, $den = 0, $eps5 = 0, $num = 0, $pade = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 120 | 0;
 $num = sp + 72 | 0;
 $den = sp + 64 | 0;
 $pade = sp + 56 | 0;
 $eps5 = sp + 8 | 0;
 $corr = sp;
 HEAPF64[$0 >> 3] = $eps;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[sp + 104 >> 3] = -1.001741928234951;
 HEAPF64[sp + 96 >> 3] = 1.736483920992288;
 HEAPF64[sp + 88 >> 3] = 1.2433006018858752;
 HEAPF64[sp + 80 >> 3] = 5.045627410027401;
 HEAPF64[$num >> 3] = (+HEAPF64[$0 >> 3] + -1.001741928234951) * (+HEAPF64[$0 >> 3] + 1.736483920992288);
 HEAPF64[$den >> 3] = (+HEAPF64[$0 >> 3] + 1.2433006018858752) * (+HEAPF64[$0 >> 3] + 5.045627410027401);
 HEAPF64[$pade >> 3] = +HEAPF64[$num >> 3] * 2.081626518866269 / +HEAPF64[$den >> 3];
 HEAPF64[sp + 48 >> 3] = .004785324257581753;
 HEAPF64[sp + 40 >> 3] = -.01192457083645441;
 HEAPF64[sp + 32 >> 3] = .01931961413960498;
 HEAPF64[sp + 24 >> 3] = -.0259402739872502;
 HEAPF64[sp + 16 >> 3] = .03141928755021455;
 HEAPF64[$eps5 >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 HEAPF64[$corr >> 3] = +HEAPF64[$eps5 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * .03141928755021455 + -.0259402739872502) + .01931961413960498) + -.01192457083645441) + .004785324257581753);
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$pade >> 3] + +HEAPF64[$corr >> 3]);
 $48 = +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $48;
 STACKTOP = sp;
 return 0;
}
function _ranf_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $26 = 0, $31 = 0, $44 = 0, $49 = 0, $54 = 0, $b0 = 0, $b1 = 0, $b2 = 0, $r = 0, $state = 0, $x0 = 0, $x1 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $state = sp + 16 | 0;
 $x0 = sp + 32 | 0;
 $x1 = sp + 30 | 0;
 $x2 = sp + 28 | 0;
 $r = sp + 12 | 0;
 $b0 = sp + 8 | 0;
 $b1 = sp + 4 | 0;
 $b2 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$b0 >> 2] = 55005;
 HEAP32[$b1 >> 2] = 47252;
 HEAP32[$b2 >> 2] = 23790;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP16[$x0 >> 1] = -25391;
  HEAP16[$x1 >> 1] = 21500;
  HEAP16[$x2 >> 1] = -27518;
 } else {
  HEAP16[$x0 >> 1] = HEAP32[$1 >> 2] | 1;
  HEAP16[$x1 >> 1] = (HEAP32[$1 >> 2] | 0) >>> 16;
  HEAP16[$x2 >> 1] = 0;
 }
 HEAP32[$r >> 2] = Math_imul(HEAP32[$b0 >> 2] | 0, HEAPU16[$x0 >> 1] | 0) | 0;
 HEAP16[HEAP32[$state >> 2] >> 1] = HEAP32[$r >> 2];
 HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) >>> 16;
 $26 = Math_imul(HEAP32[$b0 >> 2] | 0, HEAPU16[$x1 >> 1] | 0) | 0;
 $31 = $26 + (Math_imul(HEAP32[$b1 >> 2] | 0, HEAPU16[$x0 >> 1] | 0) | 0) | 0;
 HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) + $31;
 HEAP16[(HEAP32[$state >> 2] | 0) + 2 >> 1] = HEAP32[$r >> 2];
 HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) >>> 16;
 $44 = Math_imul(HEAP32[$b0 >> 2] | 0, HEAPU16[$x2 >> 1] | 0) | 0;
 $49 = $44 + (Math_imul(HEAP32[$b1 >> 2] | 0, HEAPU16[$x1 >> 1] | 0) | 0) | 0;
 $54 = $49 + (Math_imul(HEAP32[$b2 >> 2] | 0, HEAPU16[$x0 >> 1] | 0) | 0) | 0;
 HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) + $54;
 HEAP16[(HEAP32[$state >> 2] | 0) + 4 >> 1] = HEAP32[$r >> 2];
 STACKTOP = sp;
 return;
}
function _ran2_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $29 = 0, $h = 0, $h1 = 0, $i = 0, $state = 0, $t = 0, $t2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $state = sp + 20 | 0;
 $i = sp + 16 | 0;
 $h = sp + 12 | 0;
 $t = sp + 8 | 0;
 $h1 = sp + 4 | 0;
 $t2 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 8) break;
  HEAP32[$h >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) / 53668 | 0;
  HEAP32[$t >> 2] = (((HEAP32[$1 >> 2] | 0) - ((HEAP32[$h >> 2] | 0) * 53668 | 0) | 0) * 40014 | 0) - ((HEAP32[$h >> 2] | 0) * 12211 | 0);
  if ((HEAP32[$t >> 2] | 0) < 0) HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) + 2147483563;
  HEAP32[$1 >> 2] = HEAP32[$t >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 31;
 while (1) {
  $29 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) < 0) break;
  HEAP32[$h1 >> 2] = ($29 >>> 0) / 53668 | 0;
  HEAP32[$t2 >> 2] = (((HEAP32[$1 >> 2] | 0) - ((HEAP32[$h1 >> 2] | 0) * 53668 | 0) | 0) * 40014 | 0) - ((HEAP32[$h1 >> 2] | 0) * 12211 | 0);
  if ((HEAP32[$t2 >> 2] | 0) < 0) HEAP32[$t2 >> 2] = (HEAP32[$t2 >> 2] | 0) + 2147483563;
  HEAP32[$1 >> 2] = HEAP32[$t2 >> 2];
  HEAP32[(HEAP32[$state >> 2] | 0) + 12 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$1 >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = $29;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _gsl_sf_poch_e($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0, $3 = 0, $30 = 0.0, $32 = 0, $42 = 0, $43 = 0, $lnpoch = 0, $sgn = 0, $stat_exp = 0, $stat_lnpoch = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 48 | 0;
 $lnpoch = sp + 8 | 0;
 $sgn = sp;
 $stat_lnpoch = sp + 44 | 0;
 $stat_exp = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $43 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 HEAP32[$stat_lnpoch >> 2] = _gsl_sf_lnpoch_sgn_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $lnpoch, $sgn) | 0;
 if (+HEAPF64[$lnpoch >> 3] == -inf) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = HEAP32[$stat_lnpoch >> 2];
  $43 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 HEAP32[$stat_exp >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$lnpoch >> 3], +HEAPF64[$lnpoch + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 $24 = HEAP32[$3 >> 2] | 0;
 HEAPF64[$24 >> 3] = +HEAPF64[$24 >> 3] * +HEAPF64[$sgn >> 3];
 $30 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $32 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$32 >> 3] = +HEAPF64[$32 >> 3] + $30;
 if (HEAP32[$stat_exp >> 2] | 0) $42 = HEAP32[$stat_exp >> 2] | 0; else $42 = (HEAP32[$stat_lnpoch >> 2] | 0) != 0 ? HEAP32[$stat_lnpoch >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $42;
 $43 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $43 | 0;
}
function _gsl_sf_laguerre_2_e($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $3 = 0, $41 = 0.0, $46 = 0.0, $55 = 0.0, $61 = 0.0, $63 = 0, $66 = 0, $c0 = 0, $c1 = 0, $c2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 40 | 0;
 $c0 = sp + 16 | 0;
 $c1 = sp + 8 | 0;
 $c2 = sp;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == -2.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$2 >> 3] * .5 * +HEAPF64[$2 >> 3];
  $14 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $14;
  HEAP32[$0 >> 2] = 0;
  $66 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $66 | 0;
 } else {
  HEAPF64[$c0 >> 3] = (+HEAPF64[$1 >> 3] + 2.0) * .5 * (+HEAPF64[$1 >> 3] + 1.0);
  HEAPF64[$c1 >> 3] = -(+HEAPF64[$1 >> 3] + 2.0);
  HEAPF64[$c2 >> 3] = -.5 / (+HEAPF64[$1 >> 3] + 2.0);
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$c0 >> 3] + +HEAPF64[$c1 >> 3] * +HEAPF64[$2 >> 3] * (+HEAPF64[$c2 >> 3] * +HEAPF64[$2 >> 3] + 1.0);
  $41 = +Math_abs(+(+HEAPF64[$c0 >> 3]));
  $46 = +Math_abs(+(+HEAPF64[$c1 >> 3] * +HEAPF64[$2 >> 3])) * 2.0;
  $55 = ($41 + $46 * (+Math_abs(+(+HEAPF64[$c2 >> 3] * +HEAPF64[$2 >> 3])) * 2.0 + 1.0)) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $55;
  $61 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $63 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$63 >> 3] = +HEAPF64[$63 >> 3] + $61;
  HEAP32[$0 >> 2] = 0;
  $66 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 return 0;
}
function _gsl_sf_psi_1_int_e($n, $result) {
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $59 = 0, $ni2 = 0, $ser = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $ni2 = sp + 8 | 0;
 $ser = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) <= 0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(55568, 55584, 699, 1);
  HEAP32[$0 >> 2] = 1;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) <= 100) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[56400 + (HEAP32[$1 >> 2] << 3) >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 } else {
  HEAPF64[sp + 32 >> 3] = -.03333333333333333;
  HEAPF64[sp + 24 >> 3] = .023809523809523808;
  HEAPF64[sp + 16 >> 3] = -.03333333333333333;
  HEAPF64[$ni2 >> 3] = 1.0 / +(HEAP32[$1 >> 2] | 0) * (1.0 / +(HEAP32[$1 >> 2] | 0));
  HEAPF64[$ser >> 3] = +HEAPF64[$ni2 >> 3] * +HEAPF64[$ni2 >> 3] * (+HEAPF64[$ni2 >> 3] * (+HEAPF64[$ni2 >> 3] * -.03333333333333333 + .023809523809523808) + -.03333333333333333);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (.5 / +(HEAP32[$1 >> 2] | 0) + 1.0 + 1.0 / (+(HEAP32[$1 >> 2] | 0) * 6.0 * +(HEAP32[$1 >> 2] | 0)) + +HEAPF64[$ser >> 3]) / +(HEAP32[$1 >> 2] | 0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.220446049250313e-16;
  HEAP32[$0 >> 2] = 0;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 return 0;
}
function _gsl_sf_lndoublefact_e($n, $result) {
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $20 = 0.0, $35 = 0.0, $5 = 0, $53 = 0.0, $59 = 0, $9 = 0.0, $lg = 0, $lg1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 32 | 0;
 $lg = sp + 16 | 0;
 $lg1 = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $result;
 $5 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 <= 297) {
  $9 = +Math_log(+(+HEAPF64[38872 + ($5 * 24 | 0) >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $9;
  $14 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $14;
  HEAP32[$0 >> 2] = 0;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 $20 = +((HEAP32[$1 >> 2] | 0) >>> 0);
 if ($5 & 1) {
  _gsl_sf_lngamma_e(($20 + 2.0) * .5, $lg) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = (+((HEAP32[$1 >> 2] | 0) >>> 0) + 1.0) * .5 * .6931471805599453 - .5723649429247001 + +HEAPF64[$lg >> 3];
  $35 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $35 + +HEAPF64[$lg + 8 >> 3];
  HEAP32[$0 >> 2] = 0;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 } else {
  _gsl_sf_lngamma_e(.5 * $20 + 1.0, $lg1) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0) * .5 * .6931471805599453 + +HEAPF64[$lg1 >> 3];
  $53 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $53 + +HEAPF64[$lg1 + 8 >> 3];
  HEAP32[$0 >> 2] = 0;
  $59 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_In_e($n_in, $x, $result) {
 $n_in = $n_in | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $33 = 0.0, $35 = 0, $48 = 0, $In_scaled = 0, $ax = 0, $ex = 0, $n = 0, $stat_In_scaled = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 48 | 0;
 $ax = sp + 24 | 0;
 $n = sp + 44 | 0;
 $In_scaled = sp + 8 | 0;
 $stat_In_scaled = sp + 40 | 0;
 $ex = sp;
 HEAP32[$1 >> 2] = $n_in;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$2 >> 3]));
 HEAP32[$n >> 2] = Math_abs(HEAP32[$1 >> 2] | 0) | 0;
 HEAP32[$stat_In_scaled >> 2] = _gsl_sf_bessel_In_scaled_e(HEAP32[$n >> 2] | 0, +HEAPF64[$ax >> 3], $In_scaled) | 0;
 if (+HEAPF64[$ax >> 3] > 708.782712893384) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(12024, 12008, 179, 16);
  HEAP32[$0 >> 2] = 16;
  $48 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $48 | 0;
 }
 HEAPF64[$ex >> 3] = +Math_exp(+(+HEAPF64[$ax >> 3]));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$ex >> 3] * +HEAPF64[$In_scaled >> 3];
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[$ex >> 3] * +HEAPF64[$In_scaled + 8 >> 3];
 $33 = +HEAPF64[$ax >> 3] * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3]));
 $35 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$35 >> 3] = +HEAPF64[$35 >> 3] + $33;
 if (+HEAPF64[$2 >> 3] < 0.0) if (HEAP32[$n >> 2] & 1) HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[HEAP32[$3 >> 2] >> 3];
 HEAP32[$0 >> 2] = HEAP32[$stat_In_scaled >> 2];
 $48 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $48 | 0;
}
function _gsl_sf_pow_int_e($x, $n, $result) {
 $x = +$x;
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $15 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $45 = 0.0, $48 = 0, $count = 0, $u = 0, $value = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 36 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $value = sp + 8 | 0;
 $count = sp + 24 | 0;
 $u = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $n;
 HEAP32[$3 >> 2] = $result;
 HEAPF64[$value >> 3] = 1.0;
 HEAP32[$count >> 2] = 0;
 do if ((HEAP32[$2 >> 2] | 0) < 0) {
  HEAP32[$2 >> 2] = 0 - (HEAP32[$2 >> 2] | 0);
  $11 = 1.0 / +HEAPF64[$1 >> 3];
  if (!(+HEAPF64[$1 >> 3] == 0.0)) {
   HEAPF64[$1 >> 3] = $11;
   break;
  }
  HEAPF64[$u >> 3] = $11;
  $15 = +HEAPF64[$u >> 3];
  if ((HEAP32[$2 >> 2] | 0) % 2 | 0) $19 = $15; else $19 = $15 * +HEAPF64[$u >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $19;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(55504, 55520, 45, 16);
  HEAP32[$0 >> 2] = 16;
  $48 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $48 | 0;
 } while (0);
 do {
  if (HEAP32[$2 >> 2] & 1) HEAPF64[$value >> 3] = +HEAPF64[$value >> 3] * +HEAPF64[$1 >> 3];
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] >> 1;
  HEAPF64[$1 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAP32[$count >> 2] = (HEAP32[$count >> 2] | 0) + 1;
 } while ((HEAP32[$2 >> 2] | 0) != 0);
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$value >> 3];
 $45 = (+(HEAP32[$count >> 2] | 0) + 1.0) * 4.440892098500626e-16 * +Math_abs(+(+HEAPF64[$value >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $45;
 HEAP32[$0 >> 2] = 0;
 $48 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $48 | 0;
}
function _series_2($r, $result) {
 $r = +$r;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $34 = 0.0, $54 = 0.0, $ds = 0, $ds1 = 0, $k = 0, $rk = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 44 | 0;
 $rk = sp + 24 | 0;
 $sum = sp + 16 | 0;
 $k = sp + 40 | 0;
 $ds = sp + 8 | 0;
 $ds1 = sp;
 HEAPF64[$0 >> 3] = $r;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[$rk >> 3] = +HEAPF64[$0 >> 3];
 HEAPF64[$sum >> 3] = +HEAPF64[$0 >> 3] * .5;
 HEAP32[$k >> 2] = 2;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 10) break;
  HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] * +HEAPF64[$0 >> 3];
  $14 = +(Math_imul(HEAP32[$k >> 2] | 0, HEAP32[$k >> 2] | 0) | 0);
  HEAPF64[$ds >> 3] = +HEAPF64[$rk >> 3] / ($14 * (+(HEAP32[$k >> 2] | 0) + 1.0));
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$ds >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 100) {
   label = 7;
   break;
  }
  HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] * +HEAPF64[$0 >> 3];
  $34 = +(Math_imul(HEAP32[$k >> 2] | 0, HEAP32[$k >> 2] | 0) | 0);
  HEAPF64[$ds1 >> 3] = +HEAPF64[$rk >> 3] / ($34 * (+(HEAP32[$k >> 2] | 0) + 1.0));
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$ds1 >> 3];
  if (+Math_abs(+(+HEAPF64[$ds1 >> 3] / +HEAPF64[$sum >> 3])) < 1.1102230246251565e-16) {
   label = 7;
   break;
  }
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$sum >> 3];
  $54 = +Math_abs(+(+HEAPF64[$sum >> 3])) * 4.440892098500626e-14;
  HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $54;
  STACKTOP = sp;
  return 0;
 }
 return 0;
}
function _gsl_ran_levy($r, $c, $alpha) {
 $r = $r | 0;
 $c = +$c;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0, $2 = 0, $23 = 0.0, $3 = 0, $33 = 0.0, $35 = 0.0, $44 = 0.0, $57 = 0.0, $s = 0, $t = 0, $u = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $u = sp + 24 | 0;
 $v = sp + 16 | 0;
 $t = sp + 8 | 0;
 $s = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $c;
 HEAPF64[$3 >> 3] = $alpha;
 HEAPF64[$u >> 3] = (+_gsl_rng_uniform_pos(HEAP32[$1 >> 2] | 0) - .5) * 3.141592653589793;
 if (+HEAPF64[$3 >> 3] == 1.0) {
  HEAPF64[$t >> 3] = +Math_tan(+(+HEAPF64[$u >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$t >> 3];
  $57 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$57;
 }
 do HEAPF64[$v >> 3] = +_gsl_ran_exponential(HEAP32[$1 >> 2] | 0, 1.0); while (+HEAPF64[$v >> 3] == 0.0);
 if (+HEAPF64[$3 >> 3] == 2.0) {
  $23 = +Math_sin(+(+HEAPF64[$u >> 3])) * 2.0;
  HEAPF64[$t >> 3] = $23 * +Math_sqrt(+(+HEAPF64[$v >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$t >> 3];
  $57 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$57;
 } else {
  $33 = +Math_sin(+(+HEAPF64[$3 >> 3] * +HEAPF64[$u >> 3]));
  $35 = +Math_cos(+(+HEAPF64[$u >> 3]));
  HEAPF64[$t >> 3] = $33 / +Math_pow(+$35, +(1.0 / +HEAPF64[$3 >> 3]));
  $44 = +Math_cos(+((1.0 - +HEAPF64[$3 >> 3]) * +HEAPF64[$u >> 3]));
  HEAPF64[$s >> 3] = +Math_pow(+($44 / +HEAPF64[$v >> 3]), +((1.0 - +HEAPF64[$3 >> 3]) / +HEAPF64[$3 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3] * +HEAPF64[$t >> 3] * +HEAPF64[$s >> 3];
  $57 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$57;
 }
 return 0.0;
}
function _gsl_ran_hypergeometric_pdf($k, $n1, $n2, $t) {
 $k = $k | 0;
 $n1 = $n1 | 0;
 $n2 = $n2 | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $47 = 0.0, $c1 = 0, $c2 = 0, $c3 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $4 = sp + 40 | 0;
 $p = sp + 24 | 0;
 $c1 = sp + 16 | 0;
 $c2 = sp + 8 | 0;
 $c3 = sp;
 HEAP32[$1 >> 2] = $k;
 HEAP32[$2 >> 2] = $n1;
 HEAP32[$3 >> 2] = $n2;
 HEAP32[$4 >> 2] = $t;
 if ((HEAP32[$4 >> 2] | 0) >>> 0 > ((HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) >>> 0) HEAP32[$4 >> 2] = (HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0);
 if ((HEAP32[$1 >> 2] | 0) >>> 0 <= (HEAP32[$2 >> 2] | 0) >>> 0) if ((HEAP32[$1 >> 2] | 0) >>> 0 <= (HEAP32[$4 >> 2] | 0) >>> 0) {
  if ((HEAP32[$4 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) if (((HEAP32[$1 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAPF64[$0 >> 3] = 0.0;
   $47 = +HEAPF64[$0 >> 3];
   STACKTOP = sp;
   return +$47;
  }
  HEAPF64[$c1 >> 3] = +_gsl_sf_lnchoose(HEAP32[$2 >> 2] | 0, HEAP32[$1 >> 2] | 0);
  HEAPF64[$c2 >> 3] = +_gsl_sf_lnchoose(HEAP32[$3 >> 2] | 0, (HEAP32[$4 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0);
  HEAPF64[$c3 >> 3] = +_gsl_sf_lnchoose((HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0, HEAP32[$4 >> 2] | 0);
  HEAPF64[$p >> 3] = +Math_exp(+(+HEAPF64[$c1 >> 3] + +HEAPF64[$c2 >> 3] - +HEAPF64[$c3 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $47 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$47;
 }
 HEAPF64[$0 >> 3] = 0.0;
 $47 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$47;
}
function _gsl_sf_polar_to_rect($r, $theta, $x, $y) {
 $r = +$r;
 $theta = +$theta;
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $18 = 0.0, $2 = 0, $26 = 0.0, $3 = 0, $32 = 0.0, $34 = 0, $43 = 0.0, $49 = 0.0, $51 = 0, $c = 0, $s = 0, $status = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $t = sp + 16 | 0;
 $status = sp + 40 | 0;
 $c = sp + 8 | 0;
 $s = sp;
 HEAPF64[$0 >> 3] = $r;
 HEAPF64[$1 >> 3] = $theta;
 HEAP32[$2 >> 2] = $x;
 HEAP32[$3 >> 2] = $y;
 HEAPF64[$t >> 3] = +HEAPF64[$1 >> 3];
 HEAP32[$status >> 2] = _gsl_sf_angle_restrict_symm_e($t) | 0;
 HEAPF64[$c >> 3] = +Math_cos(+(+HEAPF64[$t >> 3]));
 HEAPF64[$s >> 3] = +Math_sin(+(+HEAPF64[$t >> 3]));
 $13 = +HEAPF64[$0 >> 3] * +Math_cos(+(+HEAPF64[$t >> 3]));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = $13;
 $18 = +HEAPF64[$0 >> 3] * +Math_sin(+(+HEAPF64[$t >> 3]));
 HEAPF64[HEAP32[$3 >> 2] >> 3] = $18;
 $26 = +HEAPF64[$0 >> 3] * +Math_abs(+(+HEAPF64[$s >> 3] * 2.220446049250313e-16 * +HEAPF64[$t >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $26;
 $32 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $34 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] + $32;
 $43 = +HEAPF64[$0 >> 3] * +Math_abs(+(+HEAPF64[$c >> 3] * 2.220446049250313e-16 * +HEAPF64[$t >> 3]));
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $43;
 $49 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
 $51 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAPF64[$51 >> 3] = +HEAPF64[$51 >> 3] + $49;
 STACKTOP = sp;
 return HEAP32[$status >> 2] | 0;
}
function _gsl_sf_ellint_Pcomp_e($k, $n, $mode, $result) {
 $k = +$k;
 $n = +$n;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $35 = 0.0, $4 = 0, $49 = 0, $50 = 0, $rf = 0, $rfstatus = 0, $rj = 0, $rjstatus = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 68 | 0;
 $4 = sp + 64 | 0;
 $rf = sp + 24 | 0;
 $rj = sp + 8 | 0;
 $y = sp;
 $rfstatus = sp + 60 | 0;
 $rjstatus = sp + 56 | 0;
 HEAPF64[$1 >> 3] = $k;
 HEAPF64[$2 >> 3] = $n;
 HEAP32[$3 >> 2] = $mode;
 HEAP32[$4 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] >= 1.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(29376, 29392, 572, 1);
  HEAP32[$0 >> 2] = 1;
  $50 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $50 | 0;
 }
 HEAPF64[$y >> 3] = 1.0 - +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 HEAP32[$rfstatus >> 2] = _gsl_sf_ellint_RF_e(0.0, +HEAPF64[$y >> 3], 1.0, HEAP32[$3 >> 2] | 0, $rf) | 0;
 HEAP32[$rjstatus >> 2] = _gsl_sf_ellint_RJ_e(0.0, +HEAPF64[$y >> 3], 1.0, +HEAPF64[$2 >> 3] + 1.0, HEAP32[$3 >> 2] | 0, $rj) | 0;
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$rf >> 3] - +HEAPF64[$2 >> 3] / 3.0 * +HEAPF64[$rj >> 3];
 $35 = +Math_abs(+(+HEAPF64[$2 >> 3] / 3.0));
 HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = +HEAPF64[$rf + 8 >> 3] + $35 * +HEAPF64[$rj + 8 >> 3];
 if (HEAP32[$rfstatus >> 2] | 0) $49 = HEAP32[$rfstatus >> 2] | 0; else $49 = (HEAP32[$rjstatus >> 2] | 0) != 0 ? HEAP32[$rjstatus >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $49;
 $50 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $50 | 0;
}
function _gsl_cdf_hypergeometric_P($k, $n1, $n2, $t) {
 $k = $k | 0;
 $n1 = $n1 | 0;
 $n2 = $n2 | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $42 = 0.0, $P = 0, $midpoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $P = sp + 8 | 0;
 $midpoint = sp;
 HEAP32[$1 >> 2] = $k;
 HEAP32[$2 >> 2] = $n1;
 HEAP32[$3 >> 2] = $n2;
 HEAP32[$4 >> 2] = $t;
 if ((HEAP32[$4 >> 2] | 0) >>> 0 > ((HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) >>> 0) {
  _gsl_error(1e3, 1032, 119, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 do if ((HEAP32[$1 >> 2] | 0) >>> 0 >= (HEAP32[$2 >> 2] | 0) >>> 0) label = 5; else if ((HEAP32[$1 >> 2] | 0) >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) label = 5; else {
  if (+((HEAP32[$1 >> 2] | 0) >>> 0) < 0.0) {
   HEAPF64[$P >> 3] = 0.0;
   break;
  }
  HEAPF64[$midpoint >> 3] = +((HEAP32[$4 >> 2] | 0) >>> 0) * +((HEAP32[$2 >> 2] | 0) >>> 0) / (+((HEAP32[$2 >> 2] | 0) >>> 0) + +((HEAP32[$3 >> 2] | 0) >>> 0));
  $34 = HEAP32[$1 >> 2] | 0;
  $35 = HEAP32[$2 >> 2] | 0;
  $36 = HEAP32[$3 >> 2] | 0;
  $37 = HEAP32[$4 >> 2] | 0;
  if (+((HEAP32[$1 >> 2] | 0) >>> 0) >= +HEAPF64[$midpoint >> 3]) {
   HEAPF64[$P >> 3] = 1.0 - +_upper_tail($34, $35, $36, $37);
   break;
  } else {
   HEAPF64[$P >> 3] = +_lower_tail($34, $35, $36, $37);
   break;
  }
 } while (0);
 if ((label | 0) == 5) HEAPF64[$P >> 3] = 1.0;
 HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
 $42 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$42;
}
function _ran1_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $26 = 0, $h = 0, $h1 = 0, $i = 0, $state = 0, $t = 0, $t2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $state = sp + 20 | 0;
 $i = sp + 16 | 0;
 $h = sp + 12 | 0;
 $t = sp + 8 | 0;
 $h1 = sp + 4 | 0;
 $t2 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 8) break;
  HEAP32[$h >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) / 127773 | 0;
  HEAP32[$t >> 2] = (((HEAP32[$1 >> 2] | 0) - ((HEAP32[$h >> 2] | 0) * 127773 | 0) | 0) * 16807 | 0) - ((HEAP32[$h >> 2] | 0) * 2836 | 0);
  if ((HEAP32[$t >> 2] | 0) < 0) HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) + 2147483647;
  HEAP32[$1 >> 2] = HEAP32[$t >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 31;
 while (1) {
  $26 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) < 0) break;
  HEAP32[$h1 >> 2] = ($26 >>> 0) / 127773 | 0;
  HEAP32[$t2 >> 2] = (((HEAP32[$1 >> 2] | 0) - ((HEAP32[$h1 >> 2] | 0) * 127773 | 0) | 0) * 16807 | 0) - ((HEAP32[$h1 >> 2] | 0) * 2836 | 0);
  if ((HEAP32[$t2 >> 2] | 0) < 0) HEAP32[$t2 >> 2] = (HEAP32[$t2 >> 2] | 0) + 2147483647;
  HEAP32[$1 >> 2] = HEAP32[$t2 >> 2];
  HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$1 >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = $26;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _gsl_cdf_hypergeometric_Q($k, $n1, $n2, $t) {
 $k = $k | 0;
 $n1 = $n1 | 0;
 $n2 = $n2 | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $42 = 0.0, $Q = 0, $midpoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $Q = sp + 8 | 0;
 $midpoint = sp;
 HEAP32[$1 >> 2] = $k;
 HEAP32[$2 >> 2] = $n1;
 HEAP32[$3 >> 2] = $n2;
 HEAP32[$4 >> 2] = $t;
 if ((HEAP32[$4 >> 2] | 0) >>> 0 > ((HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) >>> 0) {
  _gsl_error(1e3, 1032, 158, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 do if ((HEAP32[$1 >> 2] | 0) >>> 0 >= (HEAP32[$2 >> 2] | 0) >>> 0) label = 5; else if ((HEAP32[$1 >> 2] | 0) >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) label = 5; else {
  if (+((HEAP32[$1 >> 2] | 0) >>> 0) < 0.0) {
   HEAPF64[$Q >> 3] = 1.0;
   break;
  }
  HEAPF64[$midpoint >> 3] = +((HEAP32[$4 >> 2] | 0) >>> 0) * +((HEAP32[$2 >> 2] | 0) >>> 0) / (+((HEAP32[$2 >> 2] | 0) >>> 0) + +((HEAP32[$3 >> 2] | 0) >>> 0));
  $34 = HEAP32[$1 >> 2] | 0;
  $35 = HEAP32[$2 >> 2] | 0;
  $36 = HEAP32[$3 >> 2] | 0;
  $37 = HEAP32[$4 >> 2] | 0;
  if (+((HEAP32[$1 >> 2] | 0) >>> 0) < +HEAPF64[$midpoint >> 3]) {
   HEAPF64[$Q >> 3] = 1.0 - +_lower_tail($34, $35, $36, $37);
   break;
  } else {
   HEAPF64[$Q >> 3] = +_upper_tail($34, $35, $36, $37);
   break;
  }
 } while (0);
 if ((label | 0) == 5) HEAPF64[$Q >> 3] = 0.0;
 HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
 $42 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$42;
}
function _seor($order, $qq, $aa, $nterms) {
 $order = $order | 0;
 $qq = +$qq;
 $aa = +$aa;
 $nterms = $nterms | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $37 = 0.0, $ii = 0, $n1 = 0, $term = 0, $term1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 40 | 0;
 $term = sp + 8 | 0;
 $term1 = sp;
 $ii = sp + 36 | 0;
 $n1 = sp + 32 | 0;
 HEAP32[$0 >> 2] = $order;
 HEAPF64[$1 >> 3] = $qq;
 HEAPF64[$2 >> 3] = $aa;
 HEAP32[$3 >> 2] = $nterms;
 HEAPF64[$term >> 3] = +HEAPF64[$1 >> 3] * -1.0;
 HEAP32[$n1 >> 2] = ~~(+(HEAP32[$0 >> 2] | 0) / 2.0 - .5);
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$n1 >> 2] | 0)) break;
  HEAPF64[$term >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / (+HEAPF64[$2 >> 3] - (+(HEAP32[$ii >> 2] | 0) * 2.0 + 1.0) * (+(HEAP32[$ii >> 2] | 0) * 2.0 + 1.0) - +HEAPF64[$term >> 3]);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 $37 = +(Math_imul(HEAP32[$0 >> 2] | 0, HEAP32[$0 >> 2] | 0) | 0);
 HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] + $37;
 HEAPF64[$term1 >> 3] = 0.0;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$3 >> 2] | 0)) break;
  HEAPF64[$term1 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / (+HEAPF64[$2 >> 3] - (+(HEAP32[$0 >> 2] | 0) + +((HEAP32[$3 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) | 0) * 2.0) * (+(HEAP32[$0 >> 2] | 0) + +((HEAP32[$3 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) | 0) * 2.0) - +HEAPF64[$term1 >> 3]);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$term >> 3] + +HEAPF64[$term1 >> 3] - +HEAPF64[$2 >> 3]);
}
function _gsl_sf_bessel_I_CF1_ser($nu, $x, $ratio) {
 $nu = +$nu;
 $x = +$x;
 $ratio = $ratio | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $55 = 0, $ak = 0, $k = 0, $rhok = 0, $sum = 0, $tk = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 56 | 0;
 $tk = sp + 24 | 0;
 $sum = sp + 16 | 0;
 $rhok = sp + 8 | 0;
 $k = sp + 48 | 0;
 $ak = sp;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $ratio;
 HEAP32[sp + 52 >> 2] = 2e4;
 HEAPF64[$tk >> 3] = 1.0;
 HEAPF64[$sum >> 3] = 1.0;
 HEAPF64[$rhok >> 3] = 0.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 2e4) break;
  HEAPF64[$ak >> 3] = +HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] | 0)) * .25 * +HEAPF64[$2 >> 3] / (+HEAPF64[$1 >> 3] + +(HEAP32[$k >> 2] | 0) + 1.0);
  HEAPF64[$rhok >> 3] = -+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) / (+HEAPF64[$ak >> 3] * (+HEAPF64[$rhok >> 3] + 1.0) + 1.0);
  HEAPF64[$tk >> 3] = +HEAPF64[$tk >> 3] * +HEAPF64[$rhok >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$tk >> 3];
  if (+Math_abs(+(+HEAPF64[$tk >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$2 >> 3] / ((+HEAPF64[$1 >> 3] + 1.0) * 2.0) * +HEAPF64[$sum >> 3];
 if ((HEAP32[$k >> 2] | 0) == 2e4) {
  _gsl_error(10696, 10680, 656, 11);
  HEAP32[$0 >> 2] = 11;
  $55 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $55 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $55 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $55 | 0;
 }
 return 0;
}
function _dilog_series_1($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $35 = 0.0, $41 = 0.0, $43 = 0, $48 = 0, $k = 0, $rk = 0, $sum = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 40 | 0;
 $sum = sp + 16 | 0;
 $term = sp + 8 | 0;
 $k = sp + 32 | 0;
 $rk = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[sp + 36 >> 2] = 1e3;
 HEAPF64[$sum >> 3] = +HEAPF64[$1 >> 3];
 HEAPF64[$term >> 3] = +HEAPF64[$1 >> 3];
 HEAP32[$k >> 2] = 2;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 1e3) break;
  HEAPF64[$rk >> 3] = (+(HEAP32[$k >> 2] | 0) - 1.0) / +(HEAP32[$k >> 2] | 0);
  HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * +HEAPF64[$1 >> 3];
  HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * +HEAPF64[$rk >> 3] * +HEAPF64[$rk >> 3];
  HEAPF64[$sum >> 3] = +HEAPF64[$sum >> 3] + +HEAPF64[$term >> 3];
  if (+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum >> 3])) < 2.220446049250313e-16) break;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sum >> 3];
 $35 = +Math_abs(+(+HEAPF64[$term >> 3])) * 2.0;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $35;
 $41 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $43 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$43 >> 3] = +HEAPF64[$43 >> 3] + $41;
 if ((HEAP32[$k >> 2] | 0) == 1e3) {
  _gsl_error(29320, 29312, 57, 11);
  HEAP32[$0 >> 2] = 11;
  $48 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $48 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $48 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $48 | 0;
 }
 return 0;
}
function _ceor($order, $qq, $aa, $nterms) {
 $order = $order | 0;
 $qq = +$qq;
 $aa = +$aa;
 $nterms = $nterms | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $36 = 0.0, $ii = 0, $n1 = 0, $term = 0, $term1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 40 | 0;
 $term = sp + 8 | 0;
 $term1 = sp;
 $ii = sp + 36 | 0;
 $n1 = sp + 32 | 0;
 HEAP32[$0 >> 2] = $order;
 HEAPF64[$1 >> 3] = $qq;
 HEAPF64[$2 >> 3] = $aa;
 HEAP32[$3 >> 2] = $nterms;
 HEAPF64[$term >> 3] = +HEAPF64[$1 >> 3];
 HEAP32[$n1 >> 2] = ~~(+(HEAP32[$0 >> 2] | 0) / 2.0 - .5);
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$n1 >> 2] | 0)) break;
  HEAPF64[$term >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / (+HEAPF64[$2 >> 3] - (+(HEAP32[$ii >> 2] | 0) * 2.0 + 1.0) * (+(HEAP32[$ii >> 2] | 0) * 2.0 + 1.0) - +HEAPF64[$term >> 3]);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 $36 = +(Math_imul(HEAP32[$0 >> 2] | 0, HEAP32[$0 >> 2] | 0) | 0);
 HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] + $36;
 HEAPF64[$term1 >> 3] = 0.0;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$3 >> 2] | 0)) break;
  HEAPF64[$term1 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / (+HEAPF64[$2 >> 3] - (+(HEAP32[$0 >> 2] | 0) + +((HEAP32[$3 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) | 0) * 2.0) * (+(HEAP32[$0 >> 2] | 0) + +((HEAP32[$3 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) | 0) * 2.0) - +HEAPF64[$term1 >> 3]);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$term >> 3] + +HEAPF64[$term1 >> 3] - +HEAPF64[$2 >> 3]);
}
function _gsl_ran_dirichlet_lnpdf($K, $alpha, $theta) {
 $K = $K | 0;
 $alpha = $alpha | 0;
 $theta = $theta | 0;
 var $0 = 0, $1 = 0, $16 = 0.0, $2 = 0, $33 = 0.0, $43 = 0.0, $i = 0, $log_p = 0, $sum_alpha = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $i = sp + 16 | 0;
 $log_p = sp + 8 | 0;
 $sum_alpha = sp;
 HEAP32[$0 >> 2] = $K;
 HEAP32[$1 >> 2] = $alpha;
 HEAP32[$2 >> 2] = $theta;
 HEAPF64[$log_p >> 3] = 0.0;
 HEAPF64[$sum_alpha >> 3] = 0.0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$0 >> 2] | 0) >>> 0) break;
  $16 = (+HEAPF64[(HEAP32[$1 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] - 1.0) * +Math_log(+(+HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3]));
  HEAPF64[$log_p >> 3] = +HEAPF64[$log_p >> 3] + $16;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$0 >> 2] | 0) >>> 0) break;
  HEAPF64[$sum_alpha >> 3] = +HEAPF64[$sum_alpha >> 3] + +HEAPF64[(HEAP32[$1 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $33 = +_gsl_sf_lngamma(+HEAPF64[$sum_alpha >> 3]);
 HEAPF64[$log_p >> 3] = +HEAPF64[$log_p >> 3] + $33;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$0 >> 2] | 0) >>> 0) break;
  $43 = +_gsl_sf_lngamma(+HEAPF64[(HEAP32[$1 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3]);
  HEAPF64[$log_p >> 3] = +HEAPF64[$log_p >> 3] - $43;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$log_p >> 3]);
}
function _gsl_ran_beta_pdf($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $29 = 0.0, $3 = 0, $34 = 0.0, $47 = 0.0, $51 = 0.0, $54 = 0.0, $61 = 0.0, $ga = 0, $gab = 0, $gb = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $p = sp + 24 | 0;
 $gab = sp + 16 | 0;
 $ga = sp + 8 | 0;
 $gb = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] < 0.0 | +HEAPF64[$1 >> 3] > 1.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $61 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$61;
 }
 HEAPF64[$gab >> 3] = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]);
 HEAPF64[$ga >> 3] = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3]);
 HEAPF64[$gb >> 3] = +_gsl_sf_lngamma(+HEAPF64[$3 >> 3]);
 do if (+HEAPF64[$1 >> 3] == 0.0 | +HEAPF64[$1 >> 3] == 1.0) {
  if (+HEAPF64[$2 >> 3] > 1.0) if (+HEAPF64[$3 >> 3] > 1.0) {
   HEAPF64[$p >> 3] = 0.0;
   break;
  }
  $29 = +Math_exp(+(+HEAPF64[$gab >> 3] - +HEAPF64[$ga >> 3] - +HEAPF64[$gb >> 3]));
  $34 = $29 * +Math_pow(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[$2 >> 3] - 1.0));
  HEAPF64[$p >> 3] = $34 * +Math_pow(+(1.0 - +HEAPF64[$1 >> 3]), +(+HEAPF64[$3 >> 3] - 1.0));
 } else {
  $47 = +Math_log(+(+HEAPF64[$1 >> 3]));
  $51 = +HEAPF64[$gab >> 3] - +HEAPF64[$ga >> 3] - +HEAPF64[$gb >> 3] + $47 * (+HEAPF64[$2 >> 3] - 1.0);
  $54 = +_log1p(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$p >> 3] = +Math_exp(+($51 + $54 * (+HEAPF64[$3 >> 3] - 1.0)));
 } while (0);
 HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
 $61 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$61;
}
function _uni32_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $27 = 0, $i = 0, $j0 = 0, $j1 = 0, $k0 = 0, $k1 = 0, $seed = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 $seed = sp + 24 | 0;
 $k0 = sp + 20 | 0;
 $k1 = sp + 16 | 0;
 $j0 = sp + 12 | 0;
 $j1 = sp + 8 | 0;
 $i = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$seed >> 2] = (HEAP32[$1 >> 2] | 0) >>> 0 < 2147483647 ? HEAP32[$1 >> 2] | 0 : 2147483647;
 HEAP32[$seed >> 2] = (HEAP32[$seed >> 2] | 0) - (((HEAP32[$seed >> 2] | 0) % 2 | 0 | 0) == 0 ? 1 : 0);
 HEAP32[$k0 >> 2] = 9069;
 HEAP32[$k1 >> 2] = 0;
 HEAP32[$j0 >> 2] = ((HEAP32[$seed >> 2] | 0) >>> 0) % 65536 | 0;
 HEAP32[$j1 >> 2] = ((HEAP32[$seed >> 2] | 0) >>> 0) / 65536 | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 17) break;
  HEAP32[$seed >> 2] = Math_imul(HEAP32[$j0 >> 2] | 0, HEAP32[$k0 >> 2] | 0) | 0;
  $27 = (((HEAP32[$seed >> 2] | 0) >>> 0) / 65536 | 0) + (Math_imul(HEAP32[$j0 >> 2] | 0, HEAP32[$k1 >> 2] | 0) | 0) | 0;
  HEAP32[$j1 >> 2] = (($27 + (Math_imul(HEAP32[$j1 >> 2] | 0, HEAP32[$k0 >> 2] | 0) | 0) | 0) >>> 0) % 32768 | 0;
  HEAP32[$j0 >> 2] = ((HEAP32[$seed >> 2] | 0) >>> 0) % 65536 | 0;
  HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) >> 2] = (HEAP32[$j0 >> 2] | 0) + (HEAP32[$j1 >> 2] << 16);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = 4;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 16;
 STACKTOP = sp;
 return;
}
function _seer($order, $qq, $aa, $nterms) {
 $order = $order | 0;
 $qq = +$qq;
 $aa = +$aa;
 $nterms = $nterms | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $31 = 0.0, $ii = 0, $n1 = 0, $term = 0, $term1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 40 | 0;
 $term = sp + 8 | 0;
 $term1 = sp;
 $ii = sp + 36 | 0;
 $n1 = sp + 32 | 0;
 HEAP32[$0 >> 2] = $order;
 HEAPF64[$1 >> 3] = $qq;
 HEAPF64[$2 >> 3] = $aa;
 HEAP32[$3 >> 2] = $nterms;
 HEAPF64[$term >> 3] = 0.0;
 HEAP32[$n1 >> 2] = ((HEAP32[$0 >> 2] | 0) / 2 | 0) - 1;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$n1 >> 2] | 0)) break;
  HEAPF64[$term >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / (+HEAPF64[$2 >> 3] - +((HEAP32[$ii >> 2] | 0) + 1 | 0) * 4.0 * +((HEAP32[$ii >> 2] | 0) + 1 | 0) - +HEAPF64[$term >> 3]);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 $31 = +(Math_imul(HEAP32[$0 >> 2] | 0, HEAP32[$0 >> 2] | 0) | 0);
 HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] + $31;
 HEAPF64[$term1 >> 3] = 0.0;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$3 >> 2] | 0)) break;
  HEAPF64[$term1 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / (+HEAPF64[$2 >> 3] - (+(HEAP32[$0 >> 2] | 0) + +((HEAP32[$3 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) | 0) * 2.0) * (+(HEAP32[$0 >> 2] | 0) + +((HEAP32[$3 >> 2] | 0) - (HEAP32[$ii >> 2] | 0) | 0) * 2.0) - +HEAPF64[$term1 >> 3]);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$term >> 3] + +HEAPF64[$term1 >> 3] - +HEAPF64[$2 >> 3]);
}
function _gsl_cdf_ugaussian_P($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $15 = 0.0, $34 = 0.0, $absx = 0, $result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp + 8 | 0;
 $absx = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$absx >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if (+HEAPF64[$absx >> 3] < 1.1102230246251565e-16) {
  HEAPF64[$result >> 3] = .5;
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $34 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$34;
 }
 if (+HEAPF64[$absx >> 3] < .66291) {
  HEAPF64[$result >> 3] = +_gauss_small(+HEAPF64[$1 >> 3]) + .5;
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $34 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$34;
 }
 $15 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$absx >> 3] < 5.656854249492381) {
  HEAPF64[$result >> 3] = +_gauss_medium($15);
  if (+HEAPF64[$1 >> 3] > 0.0) HEAPF64[$result >> 3] = 1.0 - +HEAPF64[$result >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $34 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$34;
 }
 if ($15 > 8.572) {
  HEAPF64[$result >> 3] = 1.0;
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $34 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$34;
 }
 if (+HEAPF64[$1 >> 3] < -37.519) {
  HEAPF64[$result >> 3] = 0.0;
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $34 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$34;
 }
 HEAPF64[$result >> 3] = +_gauss_large(+HEAPF64[$1 >> 3]);
 if (+HEAPF64[$1 >> 3] > 0.0) HEAPF64[$result >> 3] = 1.0 - +HEAPF64[$result >> 3];
 HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
 $34 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$34;
}
function _riemann_zeta1ms_slt0($s, $result) {
 $s = +$s;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $5 = 0.0, $58 = 0.0, $61 = 0, $c = 0, $f2 = 0, $f3 = 0, $f5 = 0, $f7 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 64 | 0;
 $x = sp + 48 | 0;
 $c = sp + 32 | 0;
 $f2 = sp + 24 | 0;
 $f3 = sp + 16 | 0;
 $f5 = sp + 8 | 0;
 $f7 = sp;
 HEAPF64[$1 >> 3] = $s;
 HEAP32[$2 >> 2] = $result;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] > -19.0) {
  HEAPF64[$x >> 3] = (-19.0 - 2.0 * $5) / 19.0;
  _cheb_eval_e673(65680, +HEAPF64[$x >> 3], $c) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$c >> 3] / -+HEAPF64[$1 >> 3];
  $24 = +HEAPF64[$c + 8 >> 3] / -+HEAPF64[$1 >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $24;
  HEAP32[$0 >> 2] = 0;
  $61 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $61 | 0;
 } else {
  HEAPF64[$f2 >> 3] = 1.0 - +Math_pow(2.0, +-(1.0 - $5));
  HEAPF64[$f3 >> 3] = 1.0 - +Math_pow(3.0, +-(1.0 - +HEAPF64[$1 >> 3]));
  HEAPF64[$f5 >> 3] = 1.0 - +Math_pow(5.0, +-(1.0 - +HEAPF64[$1 >> 3]));
  HEAPF64[$f7 >> 3] = 1.0 - +Math_pow(7.0, +-(1.0 - +HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 / (+HEAPF64[$f2 >> 3] * +HEAPF64[$f3 >> 3] * +HEAPF64[$f5 >> 3] * +HEAPF64[$f7 >> 3]);
  $58 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 6.661338147750939e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $58;
  HEAP32[$0 >> 2] = 0;
  $61 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $61 | 0;
 }
 return 0;
}
function _gsl_cdf_fdist_Qinv($Q, $nu1, $nu2) {
 $Q = +$Q;
 $nu1 = +$nu1;
 $nu2 = +$nu2;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $3 = 0, $42 = 0.0, $result = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp + 8 | 0;
 $y = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $nu1;
 HEAPF64[$3 >> 3] = $nu2;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  _gsl_error(224, 184, 75, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 if (+HEAPF64[$1 >> 3] > 1.0) {
  _gsl_error(232, 184, 79, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 if (+HEAPF64[$2 >> 3] < 1.0) {
  _gsl_error(208, 184, 83, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 if (+HEAPF64[$3 >> 3] < 1.0) {
  _gsl_error(216, 184, 87, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 $14 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] > .5) {
  HEAPF64[$y >> 3] = +_gsl_cdf_beta_Qinv($14, +HEAPF64[$2 >> 3] / 2.0, +HEAPF64[$3 >> 3] / 2.0);
  HEAPF64[$result >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$y >> 3] / (+HEAPF64[$2 >> 3] * (1.0 - +HEAPF64[$y >> 3]));
 } else {
  HEAPF64[$y >> 3] = +_gsl_cdf_beta_Pinv($14, +HEAPF64[$3 >> 3] / 2.0, +HEAPF64[$2 >> 3] / 2.0);
  HEAPF64[$result >> 3] = +HEAPF64[$3 >> 3] * (1.0 - +HEAPF64[$y >> 3]) / (+HEAPF64[$2 >> 3] * +HEAPF64[$y >> 3]);
 }
 HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
 $42 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$42;
}
function _gsl_cdf_fdist_Pinv($P, $nu1, $nu2) {
 $P = +$P;
 $nu1 = +$nu1;
 $nu2 = +$nu2;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $3 = 0, $42 = 0.0, $result = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp + 8 | 0;
 $y = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $nu1;
 HEAPF64[$3 >> 3] = $nu2;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  _gsl_error(176, 184, 36, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 if (+HEAPF64[$1 >> 3] > 1.0) {
  _gsl_error(200, 184, 40, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 if (+HEAPF64[$2 >> 3] < 1.0) {
  _gsl_error(208, 184, 44, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 if (+HEAPF64[$3 >> 3] < 1.0) {
  _gsl_error(216, 184, 48, 1);
  HEAPF64[$0 >> 3] = nan;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 $14 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .5) {
  HEAPF64[$y >> 3] = +_gsl_cdf_beta_Pinv($14, +HEAPF64[$2 >> 3] / 2.0, +HEAPF64[$3 >> 3] / 2.0);
  HEAPF64[$result >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$y >> 3] / (+HEAPF64[$2 >> 3] * (1.0 - +HEAPF64[$y >> 3]));
 } else {
  HEAPF64[$y >> 3] = +_gsl_cdf_beta_Qinv($14, +HEAPF64[$3 >> 3] / 2.0, +HEAPF64[$2 >> 3] / 2.0);
  HEAPF64[$result >> 3] = +HEAPF64[$3 >> 3] * (1.0 - +HEAPF64[$y >> 3]) / (+HEAPF64[$2 >> 3] * +HEAPF64[$y >> 3]);
 }
 HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
 $42 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$42;
}
function _gsl_sf_exp_e10_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $25 = 0, $31 = 0.0, $37 = 0.0, $41 = 0.0, $47 = 0, $N = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp;
 $2 = sp + 12 | 0;
 $N = sp + 8 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] > 2147483646.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(31008, 31024, 125, 16);
  HEAP32[$0 >> 2] = 16;
  $47 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $47 | 0;
 }
 if (+HEAPF64[$1 >> 3] < -2147483647.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = 0;
  _gsl_error(31032, 31024, 128, 15);
  HEAP32[$0 >> 2] = 15;
  $47 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $47 | 0;
 }
 if (+HEAPF64[$1 >> 3] > 709.782712893384 | +HEAPF64[$1 >> 3] < -708.3964185322641) $25 = ~~+Math_floor(+(+HEAPF64[$1 >> 3] / 2.302585092994046)); else $25 = 0;
 HEAP32[$N >> 2] = $25;
 $31 = +Math_exp(+(+HEAPF64[$1 >> 3] - +(HEAP32[$N >> 2] | 0) * 2.302585092994046));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = $31;
 $37 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0) * 2.0 * 2.220446049250313e-16;
 $41 = $37 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $41;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = HEAP32[$N >> 2];
 HEAP32[$0 >> 2] = 0;
 $47 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $47 | 0;
}
function _gsl_ran_dirichlet($r, $K, $alpha, $theta) {
 $r = $r | 0;
 $K = $K | 0;
 $alpha = $alpha | 0;
 $theta = $theta | 0;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $3 = 0, $41 = 0, $i = 0, $norm = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $i = sp + 8 | 0;
 $norm = sp;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $K;
 HEAP32[$2 >> 2] = $alpha;
 HEAP32[$3 >> 2] = $theta;
 HEAPF64[$norm >> 3] = 0.0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  $12 = +_gsl_ran_gamma(HEAP32[$0 >> 2] | 0, +HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3], 1.0);
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] = $12;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  HEAPF64[$norm >> 3] = +HEAPF64[$norm >> 3] + +HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (+HEAPF64[$norm >> 3] < 1.4916681462400413e-154) {
  _ran_dirichlet_small(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  $41 = (HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) | 0;
  HEAPF64[$41 >> 3] = +HEAPF64[$41 >> 3] / +HEAPF64[$norm >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gsl_sf_hyperg_2F0_e($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0.0, $3 = 0, $36 = 0, $4 = 0, $41 = 0, $7 = 0.0, $U = 0, $pre = 0, $stat_U = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 52 | 0;
 $U = sp + 8 | 0;
 $pre = sp;
 $stat_U = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 $7 = +HEAPF64[$3 >> 3];
 if (+HEAPF64[$3 >> 3] < 0.0) {
  HEAPF64[$pre >> 3] = +Math_pow(+(-1.0 / $7), +(+HEAPF64[$1 >> 3]));
  HEAP32[$stat_U >> 2] = _gsl_sf_hyperg_U_e(+HEAPF64[$1 >> 3], +HEAPF64[$1 >> 3] + 1.0 - +HEAPF64[$2 >> 3], -1.0 / +HEAPF64[$3 >> 3], $U) | 0;
  HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$pre >> 3] * +HEAPF64[$U >> 3];
  $26 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $26 + +HEAPF64[$pre >> 3] * +HEAPF64[$U + 8 >> 3];
  HEAP32[$0 >> 2] = HEAP32[$stat_U >> 2];
  $41 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 }
 $36 = HEAP32[$4 >> 2] | 0;
 if ($7 == 0.0) {
  HEAPF64[$36 >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $41 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 } else {
  HEAPF64[$36 >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51808, 51824, 52, 1);
  HEAP32[$0 >> 2] = 1;
  $41 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 }
 return 0;
}
function _bisect($x, $P, $a, $b, $xtol, $Ptol) {
 $x = +$x;
 $P = +$P;
 $a = +$a;
 $b = +$b;
 $xtol = +$xtol;
 $Ptol = +$Ptol;
 var $0 = 0, $1 = 0, $10 = 0.0, $13 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $36 = 0.0, $4 = 0, $5 = 0, $6 = 0, $Px = 0, $x0 = 0, $x1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 24 | 0;
 $x0 = sp + 16 | 0;
 $x1 = sp + 8 | 0;
 $Px = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $P;
 HEAPF64[$3 >> 3] = $a;
 HEAPF64[$4 >> 3] = $b;
 HEAPF64[$5 >> 3] = $xtol;
 HEAPF64[$6 >> 3] = $Ptol;
 HEAPF64[$x0 >> 3] = 0.0;
 HEAPF64[$x1 >> 3] = 1.0;
 while (1) {
  $10 = +Math_abs(+(+HEAPF64[$x1 >> 3] - +HEAPF64[$x0 >> 3]));
  $13 = +HEAPF64[$1 >> 3];
  if (!($10 > +HEAPF64[$5 >> 3])) {
   label = 10;
   break;
  }
  HEAPF64[$Px >> 3] = +_gsl_cdf_beta_P($13, +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3]);
  $20 = +Math_abs(+(+HEAPF64[$Px >> 3] - +HEAPF64[$2 >> 3]));
  if ($20 < +HEAPF64[$6 >> 3]) {
   label = 4;
   break;
  }
  if (+HEAPF64[$Px >> 3] < +HEAPF64[$2 >> 3]) HEAPF64[$x0 >> 3] = +HEAPF64[$1 >> 3]; else if (+HEAPF64[$Px >> 3] > +HEAPF64[$2 >> 3]) HEAPF64[$x1 >> 3] = +HEAPF64[$1 >> 3];
  HEAPF64[$1 >> 3] = (+HEAPF64[$x0 >> 3] + +HEAPF64[$x1 >> 3]) * .5;
 }
 if ((label | 0) == 4) {
  HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3];
  $36 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$36;
 } else if ((label | 0) == 10) {
  HEAPF64[$0 >> 3] = $13;
  $36 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$36;
 }
 return 0.0;
}
function _gsl_sf_bessel_zero_J0_e($s, $result) {
 $s = $s | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $54 = 0.0, $57 = 0, $R33 = 0, $R33den = 0, $R33num = 0, $beta = 0, $bi2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $beta = sp + 32 | 0;
 $bi2 = sp + 24 | 0;
 $R33num = sp + 16 | 0;
 $R33den = sp + 8 | 0;
 $R33 = sp;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $result;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  _gsl_error(20032, 20040, 1031, 4);
  HEAP32[$0 >> 2] = 4;
  $57 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 } else {
  HEAPF64[$beta >> 3] = (+((HEAP32[$1 >> 2] | 0) >>> 0) - .25) * 3.141592653589793;
  HEAPF64[$bi2 >> 3] = 1.0 / (+HEAPF64[$beta >> 3] * +HEAPF64[$beta >> 3]);
  HEAPF64[$R33num >> 3] = +HEAPF64[2507] + +HEAPF64[$bi2 >> 3] * (+HEAPF64[2508] + +HEAPF64[$bi2 >> 3] * (+HEAPF64[2509] + +HEAPF64[2510] * +HEAPF64[$bi2 >> 3]));
  HEAPF64[$R33den >> 3] = +HEAPF64[2511] + +HEAPF64[$bi2 >> 3] * (+HEAPF64[2512] + +HEAPF64[$bi2 >> 3] * (+HEAPF64[2513] + +HEAPF64[2514] * +HEAPF64[$bi2 >> 3]));
  HEAPF64[$R33 >> 3] = +HEAPF64[$R33num >> 3] / +HEAPF64[$R33den >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$beta >> 3] + +HEAPF64[$R33 >> 3] / +HEAPF64[$beta >> 3];
  $54 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3] * 3.0e-15));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $54;
  HEAP32[$0 >> 2] = 0;
  $57 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 }
 return 0;
}
function _ranlux_set_lux($vstate, $s, $luxury) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 $luxury = $luxury | 0;
 var $0 = 0, $1 = 0, $2 = 0, $47 = 0, $i = 0, $k = 0, $seed = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $state = sp + 12 | 0;
 $i = sp + 8 | 0;
 $seed = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $luxury;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 314159265;
 HEAP32[$seed >> 2] = HEAP32[$1 >> 2];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 24) break;
  HEAP32[$k >> 2] = (HEAP32[$seed >> 2] | 0) / 53668 | 0;
  HEAP32[$seed >> 2] = (((HEAP32[$seed >> 2] | 0) - ((HEAP32[$k >> 2] | 0) * 53668 | 0) | 0) * 40014 | 0) - ((HEAP32[$k >> 2] | 0) * 12211 | 0);
  if ((HEAP32[$seed >> 2] | 0) < 0) HEAP32[$seed >> 2] = (HEAP32[$seed >> 2] | 0) + 2147483563;
  HEAP32[(HEAP32[$state >> 2] | 0) + 20 + (HEAP32[$i >> 2] << 2) >> 2] = ((HEAP32[$seed >> 2] | 0) >>> 0) % 16777216 | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = 23;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 9;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] = (HEAP32[$2 >> 2] | 0) - 24;
 $47 = (HEAP32[$state >> 2] | 0) + 16 | 0;
 if (HEAP32[(HEAP32[$state >> 2] | 0) + 112 >> 2] & -16777216) {
  HEAP32[$47 >> 2] = 1;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$47 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
}
function _gsl_sf_coupling_9j($two_ja, $two_jb, $two_jc, $two_jd, $two_je, $two_jf, $two_jg, $two_jh, $two_ji) {
 $two_ja = $two_ja | 0;
 $two_jb = $two_jb | 0;
 $two_jc = $two_jc | 0;
 $two_jd = $two_jd | 0;
 $two_je = $two_je | 0;
 $two_jf = $two_jf | 0;
 $two_jg = $two_jg | 0;
 $two_jh = $two_jh | 0;
 $two_ji = $two_ji | 0;
 var $0 = 0, $1 = 0, $2 = 0, $25 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 60 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 32 | 0;
 $9 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $two_ja;
 HEAP32[$2 >> 2] = $two_jb;
 HEAP32[$3 >> 2] = $two_jc;
 HEAP32[$4 >> 2] = $two_jd;
 HEAP32[$5 >> 2] = $two_je;
 HEAP32[$6 >> 2] = $two_jf;
 HEAP32[$7 >> 2] = $two_jg;
 HEAP32[$8 >> 2] = $two_jh;
 HEAP32[$9 >> 2] = $two_ji;
 HEAP32[$status >> 2] = _gsl_sf_coupling_9j_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(26640, 26448, 452, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $25 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$25;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $25 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$25;
 }
 return 0.0;
}
function _gsl_sf_sinc_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $23 = 0.0, $40 = 0.0, $44 = 0, $7 = 0.0, $ax = 0, $r = 0, $s = 0, $stat_s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 44 | 0;
 $ax = sp + 24 | 0;
 $r = sp + 16 | 0;
 $s = sp;
 $stat_s = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ax >> 3] = +Math_abs(+(+HEAPF64[$1 >> 3]));
 $7 = +HEAPF64[$ax >> 3];
 if (+HEAPF64[$ax >> 3] < .8) {
  HEAP32[$0 >> 2] = _cheb_eval_e641(61976, 2.0 * $7 - 1.0, HEAP32[$2 >> 2] | 0) | 0;
  $44 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $44 | 0;
 }
 $14 = +HEAPF64[$ax >> 3] * 3.141592653589793;
 if ($7 < 100.0) {
  $15 = +Math_sin(+$14);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $15 / (+HEAPF64[$ax >> 3] * 3.141592653589793);
  $23 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $23;
  HEAP32[$0 >> 2] = 0;
  $44 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $44 | 0;
 } else {
  HEAPF64[$r >> 3] = $14;
  HEAP32[$stat_s >> 2] = _gsl_sf_sin_e(+HEAPF64[$r >> 3], $s) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$s >> 3] / +HEAPF64[$r >> 3];
  $40 = +HEAPF64[$s + 8 >> 3] / +HEAPF64[$r >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $40;
  HEAP32[$0 >> 2] = HEAP32[$stat_s >> 2];
  $44 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $44 | 0;
 }
 return 0;
}
function _upper_tail($k, $n1, $n2, $t) {
 $k = $k | 0;
 $n1 = $n1 | 0;
 $n2 = $n2 | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Q = 0, $factor = 0, $i = 0, $relerr = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $relerr = sp + 24 | 0;
 $i = sp + 32 | 0;
 $s = sp + 16 | 0;
 $Q = sp + 8 | 0;
 $factor = sp;
 HEAP32[$0 >> 2] = $k;
 HEAP32[$1 >> 2] = $n1;
 HEAP32[$2 >> 2] = $n2;
 HEAP32[$3 >> 2] = $t;
 HEAP32[$i >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 HEAPF64[$s >> 3] = +_gsl_ran_hypergeometric_pdf(HEAP32[$i >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 HEAPF64[$Q >> 3] = +HEAPF64[$s >> 3];
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) {
   label = 5;
   break;
  }
  HEAPF64[$factor >> 3] = +(((HEAP32[$1 >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0) >>> 0) / (+((HEAP32[$i >> 2] | 0) >>> 0) + 1.0) * (+(((HEAP32[$3 >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0) >>> 0) / (+(((HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) >>> 0) + 1.0 - +((HEAP32[$3 >> 2] | 0) >>> 0)));
  HEAPF64[$s >> 3] = +HEAPF64[$s >> 3] * +HEAPF64[$factor >> 3];
  HEAPF64[$Q >> 3] = +HEAPF64[$Q >> 3] + +HEAPF64[$s >> 3];
  HEAPF64[$relerr >> 3] = +HEAPF64[$s >> 3] / +HEAPF64[$Q >> 3];
  if (+HEAPF64[$relerr >> 3] < 2.220446049250313e-16) {
   label = 5;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return +(+HEAPF64[$Q >> 3]);
 }
 return 0.0;
}
function _hyperg_1F1_ab_negint($a, $b, $x, $result) {
 $a = $a | 0;
 $b = $b | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $29 = 0.0, $3 = 0, $4 = 0, $42 = 0, $43 = 0, $K = 0, $stat_K = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 32 | 0;
 $K = sp;
 $stat_K = sp + 28 | 0;
 $stat_e = sp + 24 | 0;
 HEAP32[$1 >> 2] = $a;
 HEAP32[$2 >> 2] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$4 >> 2] = $result;
 if (+HEAPF64[$3 >> 3] == 0.0) {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = 1.0;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $43 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 if (+HEAPF64[$3 >> 3] > 0.0) {
  HEAP32[$0 >> 2] = _hyperg_1F1_a_negint_poly(HEAP32[$1 >> 2] | 0, +(HEAP32[$2 >> 2] | 0), +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0) | 0;
  $43 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 HEAP32[$stat_K >> 2] = _hyperg_1F1_a_negint_poly((HEAP32[$2 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0, +(HEAP32[$2 >> 2] | 0), -+HEAPF64[$3 >> 3], $K) | 0;
 $29 = +Math_abs(+(+HEAPF64[$3 >> 3])) * 4.440892098500626e-16;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$3 >> 3], $29, +HEAPF64[$K >> 3], +HEAPF64[$K + 8 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) $42 = HEAP32[$stat_e >> 2] | 0; else $42 = (HEAP32[$stat_K >> 2] | 0) != 0 ? HEAP32[$stat_K >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $42;
 $43 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $43 | 0;
}
function _uni_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $24 = 0, $i = 0, $j0 = 0, $j1 = 0, $k0 = 0, $k1 = 0, $seed = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 $i = sp + 24 | 0;
 $seed = sp + 20 | 0;
 $k0 = sp + 16 | 0;
 $k1 = sp + 12 | 0;
 $j0 = sp + 8 | 0;
 $j1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] << 1) + 1;
 HEAP32[$seed >> 2] = (HEAP32[$1 >> 2] | 0) >>> 0 < 32767 ? HEAP32[$1 >> 2] | 0 : 32767;
 HEAP32[$k0 >> 2] = 109;
 HEAP32[$k1 >> 2] = 35;
 HEAP32[$j0 >> 2] = ((HEAP32[$seed >> 2] | 0) >>> 0) % 256 | 0;
 HEAP32[$j1 >> 2] = ((HEAP32[$seed >> 2] | 0) >>> 0) / 256 | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 17) break;
  HEAP32[$seed >> 2] = Math_imul(HEAP32[$j0 >> 2] | 0, HEAP32[$k0 >> 2] | 0) | 0;
  $24 = (((HEAP32[$seed >> 2] | 0) >>> 0) / 256 | 0) + (Math_imul(HEAP32[$j0 >> 2] | 0, HEAP32[$k1 >> 2] | 0) | 0) | 0;
  HEAP32[$j1 >> 2] = (($24 + (Math_imul(HEAP32[$j1 >> 2] | 0, HEAP32[$k0 >> 2] | 0) | 0) | 0) >>> 0) % 128 | 0;
  HEAP32[$j0 >> 2] = ((HEAP32[$seed >> 2] | 0) >>> 0) % 256 | 0;
  HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) >> 2] = (HEAP32[$j0 >> 2] | 0) + (HEAP32[$j1 >> 2] << 8);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[$state >> 2] >> 2] = 4;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 16;
 STACKTOP = sp;
 return;
}
function _gsl_sf_bessel_zero_J1_e($s, $result) {
 $s = $s | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $55 = 0.0, $58 = 0, $R = 0, $Rden = 0, $Rnum = 0, $beta = 0, $bi2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $beta = sp + 32 | 0;
 $bi2 = sp + 24 | 0;
 $Rnum = sp + 16 | 0;
 $Rden = sp + 8 | 0;
 $R = sp;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $result;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $58 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 } else {
  HEAPF64[$beta >> 3] = (+((HEAP32[$1 >> 2] | 0) >>> 0) + .25) * 3.141592653589793;
  HEAPF64[$bi2 >> 3] = 1.0 / (+HEAPF64[$beta >> 3] * +HEAPF64[$beta >> 3]);
  HEAPF64[$Rnum >> 3] = +HEAPF64[2518] + +HEAPF64[$bi2 >> 3] * (+HEAPF64[2517] + +HEAPF64[$bi2 >> 3] * (+HEAPF64[2516] + +HEAPF64[$bi2 >> 3] * +HEAPF64[2515]));
  HEAPF64[$Rden >> 3] = +HEAPF64[2522] + +HEAPF64[$bi2 >> 3] * (+HEAPF64[2521] + +HEAPF64[$bi2 >> 3] * (+HEAPF64[2520] + +HEAPF64[$bi2 >> 3] * +HEAPF64[2519]));
  HEAPF64[$R >> 3] = +HEAPF64[$Rnum >> 3] / +HEAPF64[$Rden >> 3];
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$beta >> 3] * (+HEAPF64[$R >> 3] * +HEAPF64[$bi2 >> 3] + 1.0);
  $55 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3] * 2.0e-14));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $55;
  HEAP32[$0 >> 2] = 0;
  $58 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 }
 return 0;
}
function _ran3_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $10 = 0, $2 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $j = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $j = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $2 = HEAP32[$state >> 2] | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) == 56) HEAP32[HEAP32[$state >> 2] >> 2] = 1;
 $10 = (HEAP32[$state >> 2] | 0) + 4 | 0;
 HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) == 56) HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 1;
 HEAP32[$j >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[HEAP32[$state >> 2] >> 2] << 2) >> 2] | 0) - (HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
 if ((HEAP32[$j >> 2] | 0) >= 0) {
  $37 = HEAP32[$j >> 2] | 0;
  $38 = HEAP32[$state >> 2] | 0;
  $39 = HEAP32[$38 >> 2] | 0;
  $40 = HEAP32[$state >> 2] | 0;
  $41 = $40 + 8 | 0;
  $42 = $41 + ($39 << 2) | 0;
  HEAP32[$42 >> 2] = $37;
  $43 = HEAP32[$j >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1e9;
 $37 = HEAP32[$j >> 2] | 0;
 $38 = HEAP32[$state >> 2] | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 $40 = HEAP32[$state >> 2] | 0;
 $41 = $40 + 8 | 0;
 $42 = $41 + ($39 << 2) | 0;
 HEAP32[$42 >> 2] = $37;
 $43 = HEAP32[$j >> 2] | 0;
 STACKTOP = sp;
 return $43 | 0;
}
function _gsl_ran_gamma_knuth($r, $a, $b) {
 $r = $r | 0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $26 = 0.0, $3 = 0, $33 = 0.0, $34 = 0, $39 = 0.0, $48 = 0.0, $9 = 0.0, $na = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $na = sp + 24 | 0;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 HEAP32[$na >> 2] = ~~+Math_floor(+(+HEAPF64[$2 >> 3])) >>> 0;
 if (+HEAPF64[$2 >> 3] >= 4294967295.0) {
  $9 = +HEAPF64[$3 >> 3];
  $13 = +_gamma_large(HEAP32[$1 >> 2] | 0, +Math_floor(+(+HEAPF64[$2 >> 3])));
  HEAPF64[$0 >> 3] = $9 * ($13 + +_gamma_frac(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3] - +Math_floor(+(+HEAPF64[$2 >> 3]))));
  $48 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$48;
 }
 if (+HEAPF64[$2 >> 3] == +((HEAP32[$na >> 2] | 0) >>> 0)) {
  $26 = +HEAPF64[$3 >> 3];
  HEAPF64[$0 >> 3] = $26 * +_gsl_ran_gamma_int(HEAP32[$1 >> 2] | 0, HEAP32[$na >> 2] | 0);
  $48 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$48;
 }
 $33 = +HEAPF64[$3 >> 3];
 $34 = HEAP32[$1 >> 2] | 0;
 if (!(HEAP32[$na >> 2] | 0)) {
  HEAPF64[$0 >> 3] = $33 * +_gamma_frac($34, +HEAPF64[$2 >> 3]);
  $48 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$48;
 } else {
  $39 = +_gsl_ran_gamma_int($34, HEAP32[$na >> 2] | 0);
  HEAPF64[$0 >> 3] = $33 * ($39 + +_gamma_frac(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3] - +((HEAP32[$na >> 2] | 0) >>> 0)));
  $48 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$48;
 }
 return 0.0;
}
function _gsl_ran_choose($r, $dest, $k, $src, $n, $size) {
 $r = $r | 0;
 $dest = $dest | 0;
 $k = $k | 0;
 $src = $src | 0;
 $n = $n | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $22 = 0.0, $3 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $i = 0, $j = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $i = sp + 4 | 0;
 $j = sp;
 HEAP32[$1 >> 2] = $r;
 HEAP32[$2 >> 2] = $dest;
 HEAP32[$3 >> 2] = $k;
 HEAP32[$4 >> 2] = $src;
 HEAP32[$5 >> 2] = $n;
 HEAP32[$6 >> 2] = $size;
 HEAP32[$j >> 2] = 0;
 if ((HEAP32[$3 >> 2] | 0) >>> 0 > (HEAP32[$5 >> 2] | 0) >>> 0) {
  _gsl_error(77048, 77104, 95, 4);
  HEAP32[$0 >> 2] = 4;
  $37 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$5 >> 2] | 0) >>> 0) break;
  if ((HEAP32[$j >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) break;
  $19 = +(((HEAP32[$5 >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0) >>> 0);
  $22 = $19 * +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
  if ($22 < +(((HEAP32[$3 >> 2] | 0) - (HEAP32[$j >> 2] | 0) | 0) >>> 0)) {
   _copy(HEAP32[$2 >> 2] | 0, HEAP32[$j >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$i >> 2] | 0, HEAP32[$6 >> 2] | 0);
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$0 >> 2] = 0;
 $37 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $37 | 0;
}
function _increment_state($state) {
 $state = $state | 0;
 var $0 = 0, $25 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $delta = 0, $i = 0, $j = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $i = sp + 8 | 0;
 $j = sp + 4 | 0;
 $delta = sp;
 HEAP32[$0 >> 2] = $state;
 HEAP32[$i >> 2] = HEAP32[HEAP32[$0 >> 2] >> 2];
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2];
 HEAP32[$delta >> 2] = (HEAP32[(HEAP32[$0 >> 2] | 0) + 20 + (HEAP32[$j >> 2] << 2) >> 2] | 0) - (HEAP32[(HEAP32[$0 >> 2] | 0) + 20 + (HEAP32[$i >> 2] << 2) >> 2] | 0) - (HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0);
 $25 = (HEAP32[$0 >> 2] | 0) + 16 | 0;
 if (HEAP32[$delta >> 2] & -16777216) {
  HEAP32[$25 >> 2] = 1;
  HEAP32[$delta >> 2] = HEAP32[$delta >> 2] & 16777215;
 } else HEAP32[$25 >> 2] = 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 20 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$delta >> 2];
 if (!(HEAP32[$i >> 2] | 0)) HEAP32[$i >> 2] = 23; else HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$i >> 2];
 if (!(HEAP32[$j >> 2] | 0)) {
  HEAP32[$j >> 2] = 23;
  $43 = HEAP32[$j >> 2] | 0;
  $44 = HEAP32[$0 >> 2] | 0;
  $45 = $44 + 4 | 0;
  HEAP32[$45 >> 2] = $43;
  $46 = HEAP32[$delta >> 2] | 0;
  STACKTOP = sp;
  return $46 | 0;
 } else {
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
  $43 = HEAP32[$j >> 2] | 0;
  $44 = HEAP32[$0 >> 2] | 0;
  $45 = $44 + 4 | 0;
  HEAP32[$45 >> 2] = $43;
  $46 = HEAP32[$delta >> 2] | 0;
  STACKTOP = sp;
  return $46 | 0;
 }
 return 0;
}
function _cmrg_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[HEAP32[$state >> 2] >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2145483479 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 16 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2145483479 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 20 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2145483479 | 0;
 _cmrg_get(HEAP32[$state >> 2] | 0) | 0;
 _cmrg_get(HEAP32[$state >> 2] | 0) | 0;
 _cmrg_get(HEAP32[$state >> 2] | 0) | 0;
 _cmrg_get(HEAP32[$state >> 2] | 0) | 0;
 _cmrg_get(HEAP32[$state >> 2] | 0) | 0;
 _cmrg_get(HEAP32[$state >> 2] | 0) | 0;
 _cmrg_get(HEAP32[$state >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}
function _gsl_ran_poisson($r, $mu) {
 $r = $r | 0;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $14 = 0, $2 = 0, $32 = 0.0, $42 = 0, $5 = 0.0, $X = 0, $emu = 0, $k = 0, $m = 0, $prod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $emu = sp + 16 | 0;
 $prod = sp + 8 | 0;
 $k = sp + 36 | 0;
 $m = sp + 32 | 0;
 $X = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $mu;
 HEAPF64[$prod >> 3] = 1.0;
 HEAP32[$k >> 2] = 0;
 while (1) {
  $5 = +HEAPF64[$2 >> 3];
  if (!(+HEAPF64[$2 >> 3] > 10.0)) break;
  HEAP32[$m >> 2] = ~~($5 * .875) >>> 0;
  HEAPF64[$X >> 3] = +_gsl_ran_gamma_int(HEAP32[$1 >> 2] | 0, HEAP32[$m >> 2] | 0);
  if (+HEAPF64[$X >> 3] >= +HEAPF64[$2 >> 3]) {
   label = 4;
   break;
  }
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + (HEAP32[$m >> 2] | 0);
  HEAPF64[$2 >> 3] = +HEAPF64[$2 >> 3] - +HEAPF64[$X >> 3];
 }
 if ((label | 0) == 4) {
  $14 = HEAP32[$k >> 2] | 0;
  HEAP32[$0 >> 2] = $14 + (_gsl_ran_binomial(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3] / +HEAPF64[$X >> 3], (HEAP32[$m >> 2] | 0) - 1 | 0) | 0);
  $42 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $42 | 0;
 }
 HEAPF64[$emu >> 3] = +Math_exp(+-$5);
 do {
  $32 = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
  HEAPF64[$prod >> 3] = +HEAPF64[$prod >> 3] * $32;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 } while (+HEAPF64[$prod >> 3] > +HEAPF64[$emu >> 3]);
 HEAP32[$0 >> 2] = (HEAP32[$k >> 2] | 0) - 1;
 $42 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $42 | 0;
}
function _gsl_sf_hydrogenicR_1_e($Z, $r, $result) {
 $Z = +$Z;
 $r = +$r;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0.0, $3 = 0, $31 = 0.0, $41 = 0, $A = 0, $ea = 0, $norm = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 40 | 0;
 $A = sp + 16 | 0;
 $norm = sp + 8 | 0;
 $ea = sp;
 HEAPF64[$1 >> 3] = $Z;
 HEAPF64[$2 >> 3] = $r;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] > 0.0) if (+HEAPF64[$2 >> 3] >= 0.0) {
  HEAPF64[$A >> 3] = +HEAPF64[$1 >> 3] * 2.0;
  HEAPF64[$norm >> 3] = +HEAPF64[$A >> 3] * +Math_sqrt(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$ea >> 3] = +Math_exp(+(-+HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3]));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$norm >> 3] * +HEAPF64[$ea >> 3];
  $26 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $31 = $26 * +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $31;
  if (+Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) < 2.2250738585072014e-308) {
   _gsl_error(26296, 26312, 66, 15);
   HEAP32[$0 >> 2] = 15;
   $41 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $41 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $41 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $41 | 0;
  }
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(26328, 26312, 70, 1);
 HEAP32[$0 >> 2] = 1;
 $41 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $41 | 0;
}
function _CLeta($L, $eta, $result) {
 $L = +$L;
 $eta = +$eta;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $36 = 0.0, $42 = 0.0, $48 = 0, $8 = 0, $arg_err = 0, $arg_val = 0, $ln1 = 0, $ln2 = 0, $sgn = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 88 | 0;
 $ln1 = sp + 56 | 0;
 $ln2 = sp + 40 | 0;
 $sgn = sp + 32 | 0;
 $arg_val = sp + 24 | 0;
 $arg_err = sp + 16 | 0;
 HEAPF64[$0 >> 3] = $L;
 HEAPF64[$1 >> 3] = $eta;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$sgn >> 3] = 1.0;
 $8 = +Math_abs(+(+HEAPF64[$1 >> 3] / (+HEAPF64[$0 >> 3] + 1.0))) < 2.220446049250313e-16;
 $10 = +HEAPF64[$0 >> 3] + 1.0;
 if ($8) _gsl_sf_lngamma_e($10, $ln1) | 0; else _gsl_sf_lngamma_complex_e($10, +HEAPF64[$1 >> 3], $ln1, sp) | 0;
 _gsl_sf_lngamma_e((+HEAPF64[$0 >> 3] + 1.0) * 2.0, $ln2) | 0;
 if (+HEAPF64[$0 >> 3] < -1.0) HEAPF64[$sgn >> 3] = -+HEAPF64[$sgn >> 3];
 HEAPF64[$arg_val >> 3] = +HEAPF64[$0 >> 3] * .6931471805599453 - +HEAPF64[$1 >> 3] * .5 * 3.141592653589793 + +HEAPF64[$ln1 >> 3] - +HEAPF64[$ln2 >> 3];
 HEAPF64[$arg_err >> 3] = +HEAPF64[$ln1 + 8 >> 3] + +HEAPF64[$ln2 + 8 >> 3];
 $36 = +Math_abs(+(+HEAPF64[$0 >> 3] * .6931471805599453));
 $42 = ($36 + +Math_abs(+(+HEAPF64[$1 >> 3] * .5 * 3.141592653589793))) * 2.220446049250313e-16;
 HEAPF64[$arg_err >> 3] = +HEAPF64[$arg_err >> 3] + $42;
 $48 = _gsl_sf_exp_err_e(+HEAPF64[$arg_val >> 3], +HEAPF64[$arg_err >> 3], HEAP32[$2 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $48 | 0;
}
function _gamma_inc_CF($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0.0, $32 = 0.0, $38 = 0.0, $40 = 0, $50 = 0, $F = 0, $am1lgx = 0, $pre = 0, $stat_E = 0, $stat_F = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 64 | 0;
 $F = sp + 24 | 0;
 $pre = sp + 8 | 0;
 $am1lgx = sp;
 $stat_F = sp + 60 | 0;
 $stat_E = sp + 56 | 0;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$am1lgx >> 3] = (+HEAPF64[$0 >> 3] - 1.0) * +Math_log(+(+HEAPF64[$1 >> 3]));
 HEAP32[$stat_F >> 2] = _gamma_inc_F_CF(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], $F) | 0;
 HEAP32[$stat_E >> 2] = _gsl_sf_exp_err_e(+HEAPF64[$am1lgx >> 3] - +HEAPF64[$1 >> 3], +Math_abs(+(+HEAPF64[$am1lgx >> 3])) * 2.220446049250313e-16, $pre) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$F >> 3] * +HEAPF64[$pre >> 3];
 $26 = +Math_abs(+(+HEAPF64[$F + 8 >> 3] * +HEAPF64[$pre >> 3]));
 $32 = $26 + +Math_abs(+(+HEAPF64[$F >> 3] * +HEAPF64[$pre + 8 >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $32;
 $38 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $40 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$40 >> 3] = +HEAPF64[$40 >> 3] + $38;
 if (HEAP32[$stat_F >> 2] | 0) {
  $50 = HEAP32[$stat_F >> 2] | 0;
  STACKTOP = sp;
  return $50 | 0;
 } else {
  $50 = (HEAP32[$stat_E >> 2] | 0) != 0 ? HEAP32[$stat_E >> 2] | 0 : 0;
  STACKTOP = sp;
  return $50 | 0;
 }
 return 0;
}
function _lower_tail($k, $n1, $n2, $t) {
 $k = $k | 0;
 $n1 = $n1 | 0;
 $n2 = $n2 | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $P = 0, $factor = 0, $i = 0, $relerr = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $relerr = sp + 24 | 0;
 $i = sp + 32 | 0;
 $s = sp + 16 | 0;
 $P = sp + 8 | 0;
 $factor = sp;
 HEAP32[$0 >> 2] = $k;
 HEAP32[$1 >> 2] = $n1;
 HEAP32[$2 >> 2] = $n2;
 HEAP32[$3 >> 2] = $t;
 HEAP32[$i >> 2] = HEAP32[$0 >> 2];
 HEAPF64[$s >> 3] = +_gsl_ran_hypergeometric_pdf(HEAP32[$i >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 HEAPF64[$P >> 3] = +HEAPF64[$s >> 3];
 while (1) {
  if ((HEAP32[$i >> 2] | 0) <= 0) {
   label = 5;
   break;
  }
  HEAPF64[$factor >> 3] = +(HEAP32[$i >> 2] | 0) / (+(((HEAP32[$1 >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0) >>> 0) + 1.0) * (+(((HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0) >>> 0) / (+(((HEAP32[$3 >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0) >>> 0) + 1.0));
  HEAPF64[$s >> 3] = +HEAPF64[$s >> 3] * +HEAPF64[$factor >> 3];
  HEAPF64[$P >> 3] = +HEAPF64[$P >> 3] + +HEAPF64[$s >> 3];
  HEAPF64[$relerr >> 3] = +HEAPF64[$s >> 3] / +HEAPF64[$P >> 3];
  if (+HEAPF64[$relerr >> 3] < 2.220446049250313e-16) {
   label = 5;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return +(+HEAPF64[$P >> 3]);
 }
 return 0.0;
}
function _taus113_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $b1 = 0, $b2 = 0, $b3 = 0, $b4 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $state = sp + 16 | 0;
 $b1 = sp + 12 | 0;
 $b2 = sp + 8 | 0;
 $b3 = sp + 4 | 0;
 $b4 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$b1 >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] << 6 ^ HEAP32[HEAP32[$state >> 2] >> 2]) >>> 13;
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] & -2) << 18 ^ HEAP32[$b1 >> 2];
 HEAP32[$b2 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] << 2 ^ HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2]) >>> 27;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] & -8) << 2 ^ HEAP32[$b2 >> 2];
 HEAP32[$b3 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] << 13 ^ HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2]) >>> 21;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] & -16) << 7 ^ HEAP32[$b3 >> 2];
 HEAP32[$b4 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] << 3 ^ HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2]) >>> 12;
 HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] & -128) << 13 ^ HEAP32[$b4 >> 2];
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] ^ HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] ^ HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] ^ HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0;
}
function _gsl_ran_tdist($r, $nu) {
 $r = $r | 0;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $2 = 0, $38 = 0.0, $52 = 0.0, $Y1 = 0, $Y11 = 0, $Y2 = 0, $Y22 = 0, $Z = 0, $t = 0, $t3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 56 | 0;
 $Y1 = sp + 48 | 0;
 $Y2 = sp + 40 | 0;
 $t = sp + 32 | 0;
 $Y11 = sp + 24 | 0;
 $Y22 = sp + 16 | 0;
 $Z = sp + 8 | 0;
 $t3 = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $nu;
 if (+HEAPF64[$2 >> 3] <= 2.0) {
  HEAPF64[$Y1 >> 3] = +_gsl_ran_ugaussian(HEAP32[$1 >> 2] | 0);
  HEAPF64[$Y2 >> 3] = +_gsl_ran_chisq(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3]);
  HEAPF64[$t >> 3] = +HEAPF64[$Y1 >> 3] / +Math_sqrt(+(+HEAPF64[$Y2 >> 3] / +HEAPF64[$2 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$t >> 3];
  $52 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$52;
 }
 while (1) {
  HEAPF64[$Y11 >> 3] = +_gsl_ran_ugaussian(HEAP32[$1 >> 2] | 0);
  HEAPF64[$Y22 >> 3] = +_gsl_ran_exponential(HEAP32[$1 >> 2] | 0, 1.0 / (+HEAPF64[$2 >> 3] / 2.0 - 1.0));
  HEAPF64[$Z >> 3] = +HEAPF64[$Y11 >> 3] * +HEAPF64[$Y11 >> 3] / (+HEAPF64[$2 >> 3] - 2.0);
  if (1.0 - +HEAPF64[$Z >> 3] < 0.0) continue;
  $38 = +Math_exp(+(-+HEAPF64[$Y22 >> 3] - +HEAPF64[$Z >> 3]));
  if (!($38 > 1.0 - +HEAPF64[$Z >> 3])) break;
 }
 HEAPF64[$t3 >> 3] = +HEAPF64[$Y11 >> 3] / +Math_sqrt(+((1.0 - 2.0 / +HEAPF64[$2 >> 3]) * (1.0 - +HEAPF64[$Z >> 3])));
 HEAPF64[$0 >> 3] = +HEAPF64[$t3 >> 3];
 $52 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$52;
}
function _psi_n_xg0($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $41 = 0, $42 = 0, $hzeta = 0, $ln_nf = 0, $stat_e = 0, $stat_hz = 0, $stat_nf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 52 | 0;
 $ln_nf = sp + 16 | 0;
 $hzeta = sp;
 $stat_hz = sp + 48 | 0;
 $stat_nf = sp + 44 | 0;
 $stat_e = sp + 40 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$0 >> 2] = _gsl_sf_psi_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $42 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $42 | 0;
 }
 HEAP32[$stat_hz >> 2] = _gsl_sf_hzeta_e(+(HEAP32[$1 >> 2] | 0) + 1.0, +HEAPF64[$2 >> 3], $hzeta) | 0;
 HEAP32[$stat_nf >> 2] = _gsl_sf_lnfact_e(HEAP32[$1 >> 2] | 0, $ln_nf) | 0;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$ln_nf >> 3], +HEAPF64[$ln_nf + 8 >> 3], +HEAPF64[$hzeta >> 3], +HEAPF64[$hzeta + 8 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 if (!(HEAP32[$1 >> 2] & 1)) HEAPF64[HEAP32[$3 >> 2] >> 3] = -+HEAPF64[HEAP32[$3 >> 2] >> 3];
 do if (HEAP32[$stat_e >> 2] | 0) $41 = HEAP32[$stat_e >> 2] | 0; else if (HEAP32[$stat_nf >> 2] | 0) {
  $41 = HEAP32[$stat_nf >> 2] | 0;
  break;
 } else {
  $41 = (HEAP32[$stat_hz >> 2] | 0) != 0 ? HEAP32[$stat_hz >> 2] | 0 : 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $41;
 $42 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $42 | 0;
}
function _transport_sumexp($numexp, $order, $t, $x) {
 $numexp = $numexp | 0;
 $order = $order | 0;
 $t = +$t;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $j = 0, $k = 0, $rk = 0, $sum2 = 0, $sumexp = 0, $xk = 0, $xk1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 40 | 0;
 $rk = sp + 32 | 0;
 $sumexp = sp + 24 | 0;
 $k = sp + 60 | 0;
 $sum2 = sp + 16 | 0;
 $xk = sp + 8 | 0;
 $xk1 = sp;
 $j = sp + 56 | 0;
 HEAP32[$0 >> 2] = $numexp;
 HEAP32[$1 >> 2] = $order;
 HEAPF64[$2 >> 3] = $t;
 HEAPF64[$3 >> 3] = $x;
 HEAPF64[$rk >> 3] = +(HEAP32[$0 >> 2] | 0);
 HEAPF64[$sumexp >> 3] = 0.0;
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$0 >> 2] | 0)) break;
  HEAPF64[$sum2 >> 3] = 1.0;
  HEAPF64[$xk >> 3] = 1.0 / (+HEAPF64[$rk >> 3] * +HEAPF64[$3 >> 3]);
  HEAPF64[$xk1 >> 3] = 1.0;
  HEAP32[$j >> 2] = 1;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
   HEAPF64[$sum2 >> 3] = +HEAPF64[$sum2 >> 3] * +HEAPF64[$xk1 >> 3] * +HEAPF64[$xk >> 3] + 1.0;
   HEAPF64[$xk1 >> 3] = +HEAPF64[$xk1 >> 3] + 1.0;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAPF64[$sumexp >> 3] = +HEAPF64[$sumexp >> 3] * +HEAPF64[$2 >> 3];
  HEAPF64[$sumexp >> 3] = +HEAPF64[$sumexp >> 3] + +HEAPF64[$sum2 >> 3];
  HEAPF64[$rk >> 3] = +HEAPF64[$rk >> 3] - 1.0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$sumexp >> 3]);
}
function _gsl_sf_bessel_y0_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $30 = 0.0, $32 = 0, $36 = 0, $cos_result = 0, $stat = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 28 | 0;
 $cos_result = sp;
 $stat = sp + 24 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(19840, 19856, 82, 1);
  HEAP32[$0 >> 2] = 1;
  $36 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $36 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 5.562684646268003e-309) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(19872, 19856, 85, 16);
  HEAP32[$0 >> 2] = 16;
  $36 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $36 | 0;
 } else {
  HEAP32[$stat >> 2] = _gsl_sf_cos_e(+HEAPF64[$1 >> 3], $cos_result) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$cos_result >> 3] / +HEAPF64[$1 >> 3];
  $24 = +Math_abs(+(+HEAPF64[$cos_result + 8 >> 3] / +HEAPF64[$1 >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $24;
  $30 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $32 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$32 >> 3] = +HEAPF64[$32 >> 3] + $30;
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $36 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $36 | 0;
 }
 return 0;
}
function _gsl_ran_fdist_pdf($x, $nu1, $nu2) {
 $x = +$x;
 $nu1 = +$nu1;
 $nu2 = +$nu2;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $41 = 0.0, $56 = 0.0, $lg1 = 0, $lg12 = 0, $lg2 = 0, $lglg = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 40 | 0;
 $p = sp + 32 | 0;
 $lglg = sp + 24 | 0;
 $lg12 = sp + 16 | 0;
 $lg1 = sp + 8 | 0;
 $lg2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $nu1;
 HEAPF64[$3 >> 3] = $nu2;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $56 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$56;
 } else {
  $10 = +HEAPF64[$2 >> 3] / 2.0 * +Math_log(+(+HEAPF64[$2 >> 3]));
  HEAPF64[$lglg >> 3] = $10 + +HEAPF64[$3 >> 3] / 2.0 * +Math_log(+(+HEAPF64[$3 >> 3]));
  HEAPF64[$lg12 >> 3] = +_gsl_sf_lngamma((+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]) / 2.0);
  HEAPF64[$lg1 >> 3] = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3] / 2.0);
  HEAPF64[$lg2 >> 3] = +_gsl_sf_lngamma(+HEAPF64[$3 >> 3] / 2.0);
  $41 = +HEAPF64[$lglg >> 3] + +HEAPF64[$lg12 >> 3] - +HEAPF64[$lg1 >> 3] - +HEAPF64[$lg2 >> 3] + (+HEAPF64[$2 >> 3] / 2.0 - 1.0) * +Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$p >> 3] = +Math_exp(+($41 - (+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3]) / 2.0 * +Math_log(+(+HEAPF64[$3 >> 3] + +HEAPF64[$2 >> 3] * +HEAPF64[$1 >> 3]))));
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $56 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$56;
 }
 return 0.0;
}
function _gsl_ran_bivariate_gaussian($r, $sigma_x, $sigma_y, $rho, $x, $y) {
 $r = $r | 0;
 $sigma_x = +$sigma_x;
 $sigma_y = +$sigma_y;
 $rho = +$rho;
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $2 = 0, $27 = 0.0, $3 = 0, $4 = 0, $45 = 0.0, $5 = 0, $r2 = 0, $scale = 0, $u = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $u = sp + 24 | 0;
 $v = sp + 16 | 0;
 $r2 = sp + 8 | 0;
 $scale = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $sigma_x;
 HEAPF64[$2 >> 3] = $sigma_y;
 HEAPF64[$3 >> 3] = $rho;
 HEAP32[$4 >> 2] = $x;
 HEAP32[$5 >> 2] = $y;
 do {
  HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[$v >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[$r2 >> 3] = +HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] + +HEAPF64[$v >> 3] * +HEAPF64[$v >> 3];
 } while (+HEAPF64[$r2 >> 3] > 1.0 | +HEAPF64[$r2 >> 3] == 0.0);
 $27 = +Math_log(+(+HEAPF64[$r2 >> 3])) * -2.0;
 HEAPF64[$scale >> 3] = +Math_sqrt(+($27 / +HEAPF64[$r2 >> 3]));
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$u >> 3] * +HEAPF64[$scale >> 3];
 $45 = +Math_sqrt(+(1.0 - +HEAPF64[$3 >> 3] * +HEAPF64[$3 >> 3]));
 HEAPF64[HEAP32[$5 >> 2] >> 3] = +HEAPF64[$2 >> 3] * (+HEAPF64[$3 >> 3] * +HEAPF64[$u >> 3] + $45 * +HEAPF64[$v >> 3]) * +HEAPF64[$scale >> 3];
 STACKTOP = sp;
 return;
}
function _gsl_sf_fermi_dirac_m1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $21 = 0.0, $25 = 0.0, $41 = 0, $ex = 0, $ex1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 24 | 0;
 $ex = sp + 8 | 0;
 $ex1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(33376, 33392, 1218, 15);
  HEAP32[$0 >> 2] = 15;
  $41 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 }
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[$ex >> 3] = +Math_exp(+$10);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ex >> 3] / (+HEAPF64[$ex >> 3] + 1.0);
  $21 = (+Math_abs(+(+HEAPF64[$1 >> 3])) + 1.0) * 2.0 * 2.220446049250313e-16;
  $25 = $21 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $25;
  HEAP32[$0 >> 2] = 0;
  $41 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 } else {
  HEAPF64[$ex1 >> 3] = +Math_exp(+-$10);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 / (+HEAPF64[$ex1 >> 3] + 1.0);
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$1 >> 3] + 1.0) * 4.440892098500626e-16 * +HEAPF64[$ex1 >> 3];
  HEAP32[$0 >> 2] = 0;
  $41 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 }
 return 0;
}
function _gsl_ran_gaussian_ratio_method($r, $sigma) {
 $r = $r | 0;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $Q = 0, $u = 0, $v = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 88 | 0;
 $u = sp + 80 | 0;
 $v = sp + 72 | 0;
 $x = sp + 64 | 0;
 $y = sp + 56 | 0;
 $Q = sp + 48 | 0;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $sigma;
 HEAPF64[sp + 40 >> 3] = .449871;
 HEAPF64[sp + 32 >> 3] = -.386595;
 HEAPF64[sp + 24 >> 3] = .196;
 HEAPF64[sp + 16 >> 3] = .25472;
 HEAPF64[sp + 8 >> 3] = .27597;
 HEAPF64[sp >> 3] = .27846;
 while (1) {
  HEAPF64[$u >> 3] = 1.0 - +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0);
  HEAPF64[$v >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) - .5;
  HEAPF64[$v >> 3] = +HEAPF64[$v >> 3] * 1.7156;
  HEAPF64[$x >> 3] = +HEAPF64[$u >> 3] - .449871;
  HEAPF64[$y >> 3] = +Math_abs(+(+HEAPF64[$v >> 3])) + .386595;
  HEAPF64[$Q >> 3] = +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3] + +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * .196 - +HEAPF64[$x >> 3] * .25472);
  if (!(+HEAPF64[$Q >> 3] >= .27597)) {
   label = 5;
   break;
  }
  if (+HEAPF64[$Q >> 3] > .27846) continue;
  if (!(+HEAPF64[$v >> 3] * +HEAPF64[$v >> 3] > +HEAPF64[$u >> 3] * -4.0 * +HEAPF64[$u >> 3] * +Math_log(+(+HEAPF64[$u >> 3])))) {
   label = 5;
   break;
  }
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return +(+HEAPF64[$1 >> 3] * (+HEAPF64[$v >> 3] / +HEAPF64[$u >> 3]));
 }
 return 0.0;
}
function _hyperg_1F1_1_series($b, $x, $result) {
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $25 = 0.0, $37 = 0.0, $39 = 0, $n = 0, $sum_err = 0, $sum_val = 0, $term = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 48 | 0;
 $sum_val = sp + 24 | 0;
 $sum_err = sp + 16 | 0;
 $term = sp + 8 | 0;
 $n = sp;
 HEAPF64[$0 >> 3] = $b;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$sum_val >> 3] = 1.0;
 HEAPF64[$sum_err >> 3] = 0.0;
 HEAPF64[$term >> 3] = 1.0;
 HEAPF64[$n >> 3] = 1.0;
 while (1) {
  if (!(+Math_abs(+(+HEAPF64[$term >> 3] / +HEAPF64[$sum_val >> 3])) > 5.551115123125783e-17)) break;
  HEAPF64[$term >> 3] = +HEAPF64[$term >> 3] * (+HEAPF64[$1 >> 3] / (+HEAPF64[$0 >> 3] + +HEAPF64[$n >> 3] - 1.0));
  HEAPF64[$sum_val >> 3] = +HEAPF64[$sum_val >> 3] + +HEAPF64[$term >> 3];
  $21 = +Math_abs(+(+HEAPF64[$term >> 3])) * 1.7763568394002505e-15;
  $25 = $21 + +Math_abs(+(+HEAPF64[$sum_val >> 3])) * 2.220446049250313e-16;
  HEAPF64[$sum_err >> 3] = +HEAPF64[$sum_err >> 3] + $25;
  HEAPF64[$n >> 3] = +HEAPF64[$n >> 3] + 1.0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$sum_val >> 3];
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$sum_err >> 3];
 $37 = +Math_abs(+(+HEAPF64[$term >> 3])) * 2.0;
 $39 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$39 >> 3] = +HEAPF64[$39 >> 3] + $37;
 STACKTOP = sp;
 return 0;
}
function _gammastar_ser($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $30 = 0.0, $34 = 0.0, $39 = 0.0, $ser = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 88 | 0;
 $y = sp + 72 | 0;
 $ser = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[$y >> 3] = 1.0 / (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]);
 HEAPF64[sp + 64 >> 3] = .08333333333333333;
 HEAPF64[sp + 56 >> 3] = -.002777777777777778;
 HEAPF64[sp + 48 >> 3] = .0007936507936507937;
 HEAPF64[sp + 40 >> 3] = -.0005952380952380953;
 HEAPF64[sp + 32 >> 3] = .0008417508417508417;
 HEAPF64[sp + 24 >> 3] = -.0019175269175269176;
 HEAPF64[sp + 16 >> 3] = .00641025641025641;
 HEAPF64[sp + 8 >> 3] = -.029550653594771242;
 HEAPF64[$ser >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * -.029550653594771242 + .00641025641025641) + -.0019175269175269176) + .0008417508417508417) + -.0005952380952380953) + .0007936507936507937) + -.002777777777777778) + .08333333333333333;
 $30 = +Math_exp(+(+HEAPF64[$ser >> 3] / +HEAPF64[$0 >> 3]));
 HEAPF64[HEAP32[$1 >> 2] >> 3] = $30;
 $34 = +HEAPF64[HEAP32[$1 >> 2] >> 3] * 4.440892098500626e-16;
 $39 = $34 * +_GSL_MAX_DBL(1.0, +(+HEAPF64[$ser >> 3] / +HEAPF64[$0 >> 3]));
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $39;
 STACKTOP = sp;
 return 0;
}
function _r250_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $26 = 0, $33 = 0, $i = 0, $k = 0, $mask = 0, $msb = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $state = sp + 16 | 0;
 $i = sp + 12 | 0;
 $msb = sp + 8 | 0;
 $mask = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 250) break;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
  HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$1 >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$msb >> 2] = -2147483648;
 HEAP32[$mask >> 2] = -1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 32) break;
  HEAP32[$k >> 2] = ((HEAP32[$i >> 2] | 0) * 7 | 0) + 3;
  $26 = (HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$k >> 2] << 2) | 0;
  HEAP32[$26 >> 2] = HEAP32[$26 >> 2] & HEAP32[$mask >> 2];
  $33 = (HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$k >> 2] << 2) | 0;
  HEAP32[$33 >> 2] = HEAP32[$33 >> 2] | HEAP32[$msb >> 2];
  HEAP32[$mask >> 2] = (HEAP32[$mask >> 2] | 0) >>> 1;
  HEAP32[$msb >> 2] = (HEAP32[$msb >> 2] | 0) >>> 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _rat_eval($a, $na, $b, $nb, $x) {
 $a = $a | 0;
 $na = $na | 0;
 $b = $b | 0;
 $nb = $nb | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i = 0, $j = 0, $r = 0, $u = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 24 | 0;
 $i = sp + 36 | 0;
 $j = sp + 32 | 0;
 $u = sp + 16 | 0;
 $v = sp + 8 | 0;
 $r = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $na;
 HEAP32[$2 >> 2] = $b;
 HEAP32[$3 >> 2] = $nb;
 HEAPF64[$4 >> 3] = $x;
 HEAPF64[$u >> 3] = +HEAPF64[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$1 >> 2] | 0) - 1 << 3) >> 3];
 HEAP32[$i >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 <= 0) break;
  HEAPF64[$u >> 3] = +HEAPF64[$4 >> 3] * +HEAPF64[$u >> 3] + +HEAPF64[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) - 1 << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 HEAPF64[$v >> 3] = +HEAPF64[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$3 >> 2] | 0) - 1 << 3) >> 3];
 HEAP32[$j >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >>> 0 <= 0) break;
  HEAPF64[$v >> 3] = +HEAPF64[$4 >> 3] * +HEAPF64[$v >> 3] + +HEAPF64[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$j >> 2] | 0) - 1 << 3) >> 3];
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
 }
 HEAPF64[$r >> 3] = +HEAPF64[$u >> 3] / +HEAPF64[$v >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$r >> 3]);
}
function _gsl_sf_gegenpoly_3_e($lambda, $x, $result) {
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $17 = 0.0, $2 = 0, $21 = 0.0, $3 = 0, $48 = 0.0, $54 = 0.0, $57 = 0, $c = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 24 | 0;
 $c = sp;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$2 >> 3] * (+HEAPF64[$2 >> 3] * 1.3333333333333333 * +HEAPF64[$2 >> 3] + -2.0);
  $17 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.0;
  $21 = ($17 + +Math_abs(+(+HEAPF64[$2 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $21;
  HEAP32[$0 >> 2] = 0;
  $57 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 } else {
  HEAPF64[$c >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$1 >> 3] * 2.0 + 6.0) + 4.0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * 2.0 * +HEAPF64[$2 >> 3] * (-1.0 - +HEAPF64[$1 >> 3] + +HEAPF64[$c >> 3] * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] / 3.0);
  $48 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.0;
  $54 = ($48 + +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $54;
  HEAP32[$0 >> 2] = 0;
  $57 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 }
 return 0;
}
function _gsl_ran_gamma_pdf($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $16 = 0.0, $2 = 0, $27 = 0.0, $3 = 0, $34 = 0.0, $38 = 0.0, $9 = 0, $lngamma = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $p = sp + 8 | 0;
 $lngamma = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $38 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$38;
 }
 $9 = +HEAPF64[$2 >> 3] == 1.0;
 if (+HEAPF64[$1 >> 3] == 0.0) if ($9) {
  HEAPF64[$0 >> 3] = 1.0 / +HEAPF64[$3 >> 3];
  $38 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$38;
 } else {
  HEAPF64[$0 >> 3] = 0.0;
  $38 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$38;
 } else if ($9) {
  $16 = +Math_exp(+(-+HEAPF64[$1 >> 3] / +HEAPF64[$3 >> 3]));
  HEAPF64[$0 >> 3] = $16 / +HEAPF64[$3 >> 3];
  $38 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$38;
 } else {
  HEAPF64[$lngamma >> 3] = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3]);
  $27 = (+HEAPF64[$2 >> 3] - 1.0) * +Math_log(+(+HEAPF64[$1 >> 3] / +HEAPF64[$3 >> 3]));
  $34 = +Math_exp(+($27 - +HEAPF64[$1 >> 3] / +HEAPF64[$3 >> 3] - +HEAPF64[$lngamma >> 3]));
  HEAPF64[$p >> 3] = $34 / +HEAPF64[$3 >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $38 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$38;
 }
 return 0.0;
}
function _gsl_cdf_ugaussian_Qinv($Q) {
 $Q = +$Q;
 var $0 = 0, $1 = 0, $17 = 0.0, $19 = 0.0, $26 = 0.0, $31 = 0.0, $33 = 0.0, $dQ = 0, $pp = 0, $r = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $r = sp + 24 | 0;
 $x = sp + 16 | 0;
 $pp = sp + 8 | 0;
 $dQ = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$dQ >> 3] = +HEAPF64[$1 >> 3] - .5;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = -inf;
  $33 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$33;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $33 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$33;
 }
 if (+Math_abs(+(+HEAPF64[$dQ >> 3])) <= .425) {
  HEAPF64[$x >> 3] = +_small(+HEAPF64[$dQ >> 3]);
  HEAPF64[$0 >> 3] = -+HEAPF64[$x >> 3];
  $33 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$33;
 }
 $17 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < .5) $19 = $17; else $19 = 1.0 - $17;
 HEAPF64[$pp >> 3] = $19;
 HEAPF64[$r >> 3] = +Math_sqrt(+-+Math_log(+(+HEAPF64[$pp >> 3])));
 $26 = +HEAPF64[$r >> 3];
 if (+HEAPF64[$r >> 3] <= 5.0) HEAPF64[$x >> 3] = +_intermediate($26); else HEAPF64[$x >> 3] = +_tail($26);
 $31 = +HEAPF64[$x >> 3];
 if (+HEAPF64[$1 >> 3] < .5) {
  HEAPF64[$0 >> 3] = $31;
  $33 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$33;
 } else {
  HEAPF64[$0 >> 3] = -$31;
  $33 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$33;
 }
 return 0.0;
}
function _gsl_sf_gegenpoly_2_e($lambda, $x, $result) {
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $21 = 0.0, $23 = 0, $3 = 0, $40 = 0.0, $44 = 0.0, $47 = 0, $txx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 24 | 0;
 $txx = sp;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$txx >> 3] = +HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$2 >> 3];
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$txx >> 3] + -1.0;
  $15 = +Math_abs(+(+HEAPF64[$txx >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $15;
  $21 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  $23 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAPF64[$23 >> 3] = +HEAPF64[$23 >> 3] + $21;
  HEAP32[$0 >> 2] = 0;
  $47 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $47 | 0;
 } else {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * ((+HEAPF64[$1 >> 3] + 1.0) * 2.0 * +HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] + -1.0);
  $40 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.0;
  $44 = ($40 + +Math_abs(+(+HEAPF64[$1 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $44;
  HEAP32[$0 >> 2] = 0;
  $47 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $47 | 0;
 }
 return 0;
}
function _gsl_ran_discrete_pdf($k, $g) {
 $k = $k | 0;
 $g = $g | 0;
 var $0 = 0, $1 = 0, $2 = 0, $48 = 0.0, $K = 0, $f = 0, $i = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 32 | 0;
 $i = sp + 28 | 0;
 $K = sp + 24 | 0;
 $f = sp + 8 | 0;
 $p = sp;
 HEAP32[$1 >> 2] = $k;
 HEAP32[$2 >> 2] = $g;
 HEAPF64[$p >> 3] = 0.0;
 HEAP32[$K >> 2] = HEAP32[HEAP32[$2 >> 2] >> 2];
 if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$K >> 2] | 0) >>> 0) {
  HEAPF64[$0 >> 3] = 0.0;
  $48 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$48;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$K >> 2] | 0) >>> 0) break;
  HEAPF64[$f >> 3] = +HEAPF64[(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3];
  HEAPF64[$f >> 3] = +((HEAP32[$K >> 2] | 0) >>> 0) * +HEAPF64[$f >> 3] - +((HEAP32[$i >> 2] | 0) >>> 0);
  if ((HEAP32[$i >> 2] | 0) == (HEAP32[$1 >> 2] | 0)) HEAPF64[$p >> 3] = +HEAPF64[$p >> 3] + +HEAPF64[$f >> 3]; else if ((HEAP32[$1 >> 2] | 0) == (HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0)) HEAPF64[$p >> 3] = +HEAPF64[$p >> 3] + (1.0 - +HEAPF64[$f >> 3]);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3] / +((HEAP32[$K >> 2] | 0) >>> 0);
 $48 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$48;
}
function _gsl_sf_bessel_k2_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0.0, $35 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(16032, 16048, 124, 1);
  HEAP32[$0 >> 2] = 1;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 3.5437097408357316e-103) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(16080, 16048, 127, 16);
  HEAP32[$0 >> 2] = 16;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.141592653589793 / (+HEAPF64[$1 >> 3] * 2.0) * (3.0 / +HEAPF64[$1 >> 3] * (1.0 / +HEAPF64[$1 >> 3] + 1.0) + 1.0);
 $28 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $28;
 if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(16064, 16048, 132, 15);
  HEAP32[$0 >> 2] = 15;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 return 0;
}
function _lngamma_lanczos($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $35 = 0.0, $40 = 0.0, $46 = 0.0, $48 = 0, $Ag = 0, $k = 0, $term1 = 0, $term2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $k = sp + 32 | 0;
 $Ag = sp + 16 | 0;
 $term1 = sp + 8 | 0;
 $term2 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[$0 >> 3] = +HEAPF64[$0 >> 3] - 1.0;
 HEAPF64[$Ag >> 3] = +HEAPF64[6265];
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > 8) break;
  HEAPF64[$Ag >> 3] = +HEAPF64[$Ag >> 3] + +HEAPF64[50120 + (HEAP32[$k >> 2] << 3) >> 3] / (+HEAPF64[$0 >> 3] + +(HEAP32[$k >> 2] | 0));
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[$term1 >> 3] = (+HEAPF64[$0 >> 3] + .5) * +Math_log(+((+HEAPF64[$0 >> 3] + 7.5) / 2.718281828459045));
 HEAPF64[$term2 >> 3] = +Math_log(+(+HEAPF64[$Ag >> 3])) + .9189385332046728;
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$term1 >> 3] + (+HEAPF64[$term2 >> 3] - 7.0);
 $35 = +Math_abs(+(+HEAPF64[$term1 >> 3]));
 $40 = ($35 + +Math_abs(+(+HEAPF64[$term2 >> 3])) + 7.0) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $40;
 $46 = +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 2.220446049250313e-16;
 $48 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
 HEAPF64[$48 >> 3] = +HEAPF64[$48 >> 3] + $46;
 STACKTOP = sp;
 return 0;
}
function _taus2_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $11 = 0, $24 = 0, $38 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) >>> 0 < 2) {
  $11 = HEAP32[$state >> 2] | 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 2;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] | 0) * 69069;
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) >>> 0 < 8) {
  $24 = (HEAP32[$state >> 2] | 0) + 4 | 0;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 8;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) * 69069;
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] | 0) >>> 0 < 16) {
  $38 = (HEAP32[$state >> 2] | 0) + 8 | 0;
  HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 16;
 }
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}
function _gsl_sf_airy_zero_Ai_deriv_e($s, $result) {
 $s = $s | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0, $17 = 0.0, $2 = 0, $32 = 0.0, $35 = 0, $g = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $z = sp + 8 | 0;
 $g = sp;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 1) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(7384, 7408, 485, 1);
  HEAP32[$0 >> 2] = 1;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 $10 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 101) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[9040 + ($10 << 3) >> 3];
  $17 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $17;
  HEAP32[$0 >> 2] = 0;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 } else {
  HEAPF64[$z >> 3] = (+($10 >>> 0) * 4.0 - 3.0) * 1.1780972450961724;
  HEAPF64[$g >> 3] = +_zero_g(+HEAPF64[$z >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$g >> 3];
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $32;
  HEAP32[$0 >> 2] = 0;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 return 0;
}
function _gsl_sf_airy_zero_Bi_deriv_e($s, $result) {
 $s = $s | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0, $17 = 0.0, $2 = 0, $32 = 0.0, $35 = 0, $g = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $z = sp + 8 | 0;
 $g = sp;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 1) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(7384, 7408, 508, 1);
  HEAP32[$0 >> 2] = 1;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 $10 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 51) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[9848 + ($10 << 3) >> 3];
  $17 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $17;
  HEAP32[$0 >> 2] = 0;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 } else {
  HEAPF64[$z >> 3] = (+($10 >>> 0) * 4.0 - 1.0) * 1.1780972450961724;
  HEAPF64[$g >> 3] = +_zero_g(+HEAPF64[$z >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$g >> 3];
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $32;
  HEAP32[$0 >> 2] = 0;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 return 0;
}
function _gsl_sf_lncosh_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $11 = 0, $13 = 0.0, $2 = 0, $21 = 0.0, $26 = 0.0, $34 = 0.0, $37 = 0, $5 = 0, $6 = 0.0, $eps = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 $eps = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $5 = +Math_abs(+(+HEAPF64[$1 >> 3])) < 1.0;
 $6 = +HEAPF64[$1 >> 3];
 if ($5) {
  _cosh_m1_series($6, $eps) | 0;
  HEAP32[$0 >> 2] = _gsl_sf_log_1plusx_e(+HEAPF64[$eps >> 3], HEAP32[$2 >> 2] | 0) | 0;
  $37 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 }
 $11 = +Math_abs(+$6) < 18.021826694558577;
 $13 = +Math_abs(+(+HEAPF64[$1 >> 3]));
 if ($11) {
  $21 = $13 + +Math_log(+((+Math_exp(+(+Math_abs(+(+HEAPF64[$1 >> 3])) * -2.0)) + 1.0) * .5));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $21;
  $26 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $26;
  HEAP32[$0 >> 2] = 0;
  $37 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -.6931471805599453 + $13;
  $34 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $34;
  HEAP32[$0 >> 2] = 0;
  $37 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 }
 return 0;
}
function _gsl_sf_airy_zero_Bi_e($s, $result) {
 $s = $s | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0, $17 = 0.0, $2 = 0, $32 = 0.0, $35 = 0, $f = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $z = sp + 8 | 0;
 $f = sp;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 1) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(7384, 7408, 462, 1);
  HEAP32[$0 >> 2] = 1;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 $10 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 101) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[8232 + ($10 << 3) >> 3];
  $17 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $17;
  HEAP32[$0 >> 2] = 0;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 } else {
  HEAPF64[$z >> 3] = (+($10 >>> 0) * 4.0 - 3.0) * 1.1780972450961724;
  HEAPF64[$f >> 3] = +_zero_f(+HEAPF64[$z >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$f >> 3];
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $32;
  HEAP32[$0 >> 2] = 0;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 return 0;
}
function _gsl_sf_airy_zero_Ai_e($s, $result) {
 $s = $s | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0, $17 = 0.0, $2 = 0, $32 = 0.0, $35 = 0, $f = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $z = sp + 8 | 0;
 $f = sp;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $result;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 1) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(7384, 7408, 439, 1);
  HEAP32[$0 >> 2] = 1;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 $10 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 101) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[7424 + ($10 << 3) >> 3];
  $17 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $17;
  HEAP32[$0 >> 2] = 0;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 } else {
  HEAPF64[$z >> 3] = (+($10 >>> 0) * 4.0 - 1.0) * 1.1780972450961724;
  HEAPF64[$f >> 3] = +_zero_f(+HEAPF64[$z >> 3]);
  HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$f >> 3];
  $32 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $32;
  HEAP32[$0 >> 2] = 0;
  $35 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $35 | 0;
 }
 return 0;
}
function _olver_Asum($nu, $z, $abs_zeta, $err) {
 $nu = +$nu;
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 $err = $err | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $A1 = 0, $A1_err = 0, $A2 = 0, $A3 = 0, $A4 = 0, $nu2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 72 | 0;
 $nu2 = sp + 40 | 0;
 $A1_err = sp + 32 | 0;
 $A1 = sp + 24 | 0;
 $A2 = sp + 16 | 0;
 $A3 = sp + 8 | 0;
 $A4 = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[$2 >> 3] = $abs_zeta;
 HEAP32[$3 >> 2] = $err;
 HEAPF64[$nu2 >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 HEAPF64[$A1 >> 3] = +_olver_A1(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $A1_err);
 HEAPF64[$A2 >> 3] = +_olver_A2(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3]);
 HEAPF64[$A3 >> 3] = +_olver_A3(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3]);
 HEAPF64[$A4 >> 3] = +_olver_A4(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3]);
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$A1_err >> 3] / +HEAPF64[$nu2 >> 3] + 2.220446049250313e-16;
 STACKTOP = sp;
 return +(+HEAPF64[$A1 >> 3] / +HEAPF64[$nu2 >> 3] + 1.0 + +HEAPF64[$A2 >> 3] / (+HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3]) + +HEAPF64[$A3 >> 3] / (+HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3]) + +HEAPF64[$A4 >> 3] / (+HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3]));
}
function _gsl_sf_bessel_k1_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $31 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(16032, 16048, 105, 1);
  HEAP32[$0 >> 2] = 1;
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 if (+HEAPF64[$1 >> 3] < 1.4621487186760747e-154) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(16080, 16048, 108, 16);
  HEAP32[$0 >> 2] = 16;
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.141592653589793 / (+HEAPF64[$1 >> 3] * 2.0) * (1.0 / +HEAPF64[$1 >> 3] + 1.0);
 $24 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $24;
 if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(16064, 16048, 113, 15);
  HEAP32[$0 >> 2] = 15;
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 return 0;
}
function _hyperg_lnU_beq2a($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $30 = 0.0, $36 = 0, $42 = 0.0, $44 = 0, $lnK = 0, $lnpre = 0, $lx = 0, $nu = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 56 | 0;
 $lx = sp + 32 | 0;
 $nu = sp + 24 | 0;
 $lnpre = sp + 16 | 0;
 $lnK = sp;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$lx >> 3] = +Math_log(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$nu >> 3] = +HEAPF64[$0 >> 3] - .5;
 HEAPF64[$lnpre >> 3] = (+HEAPF64[$1 >> 3] - 1.1447298858494002) * .5 - +HEAPF64[$nu >> 3] * +HEAPF64[$lx >> 3];
 _gsl_sf_bessel_lnKnu_e(+HEAPF64[$nu >> 3], +HEAPF64[$1 >> 3] * .5, $lnK) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$lnpre >> 3] + +HEAPF64[$lnK >> 3];
 $24 = +Math_abs(+(+HEAPF64[$1 >> 3] * .5)) + .5723649429247001;
 $30 = ($24 + +Math_abs(+(+HEAPF64[$nu >> 3] * +HEAPF64[$lx >> 3]))) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $30;
 $36 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$36 >> 3] = +HEAPF64[$36 >> 3] + +HEAPF64[$lnK + 8 >> 3];
 $42 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $44 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$44 >> 3] = +HEAPF64[$44 >> 3] + $42;
 STACKTOP = sp;
 return 0;
}
function _gsl_ran_logarithmic($r, $p) {
 $r = $r | 0;
 $p = +$p;
 var $0 = 0, $1 = 0, $2 = 0, $23 = 0.0, $24 = 0.0, $33 = 0, $c = 0, $q = 0, $u = 0, $v = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $c = sp + 32 | 0;
 $v = sp + 24 | 0;
 $u = sp + 16 | 0;
 $q = sp + 8 | 0;
 $x = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $p;
 HEAPF64[$c >> 3] = +Math_log(+(1.0 - +HEAPF64[$2 >> 3]));
 HEAPF64[$v >> 3] = +_gsl_rng_uniform_pos(HEAP32[$1 >> 2] | 0);
 if (+HEAPF64[$v >> 3] >= +HEAPF64[$2 >> 3]) {
  HEAP32[$0 >> 2] = 1;
  $33 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 HEAPF64[$u >> 3] = +_gsl_rng_uniform_pos(HEAP32[$1 >> 2] | 0);
 HEAPF64[$q >> 3] = 1.0 - +Math_exp(+(+HEAPF64[$c >> 3] * +HEAPF64[$u >> 3]));
 $23 = +HEAPF64[$v >> 3];
 if (+HEAPF64[$v >> 3] <= +HEAPF64[$q >> 3] * +HEAPF64[$q >> 3]) {
  $24 = +Math_log(+$23);
  HEAPF64[$x >> 3] = $24 / +Math_log(+(+HEAPF64[$q >> 3])) + 1.0;
  HEAP32[$0 >> 2] = ~~+HEAPF64[$x >> 3] >>> 0;
  $33 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 if ($23 <= +HEAPF64[$q >> 3]) {
  HEAP32[$0 >> 2] = 2;
  $33 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 } else {
  HEAP32[$0 >> 2] = 1;
  $33 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 return 0;
}
function _gsl_sf_dilog_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $31 = 0.0, $33 = 0, $43 = 0, $44 = 0, $5 = 0.0, $d1 = 0, $d2 = 0, $stat_d1 = 0, $stat_d2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 48 | 0;
 $d1 = sp + 16 | 0;
 $d2 = sp;
 $stat_d1 = sp + 44 | 0;
 $stat_d2 = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] >= 0.0) {
  HEAP32[$0 >> 2] = _dilog_xge0($5, HEAP32[$2 >> 2] | 0) | 0;
  $44 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $44 | 0;
 }
 HEAP32[$stat_d1 >> 2] = _dilog_xge0(-$5, $d1) | 0;
 HEAP32[$stat_d2 >> 2] = _dilog_xge0(+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3], $d2) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = -+HEAPF64[$d1 >> 3] + +HEAPF64[$d2 >> 3] * .5;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$d1 + 8 >> 3] + +HEAPF64[$d2 + 8 >> 3] * .5;
 $31 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $33 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$33 >> 3] = +HEAPF64[$33 >> 3] + $31;
 if (HEAP32[$stat_d1 >> 2] | 0) $43 = HEAP32[$stat_d1 >> 2] | 0; else $43 = (HEAP32[$stat_d2 >> 2] | 0) != 0 ? HEAP32[$stat_d2 >> 2] | 0 : 0;
 HEAP32[$0 >> 2] = $43;
 $44 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $44 | 0;
}
function _mrg_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[HEAP32[$state >> 2] >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 16 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 _mrg_get(HEAP32[$state >> 2] | 0) | 0;
 _mrg_get(HEAP32[$state >> 2] | 0) | 0;
 _mrg_get(HEAP32[$state >> 2] | 0) | 0;
 _mrg_get(HEAP32[$state >> 2] | 0) | 0;
 _mrg_get(HEAP32[$state >> 2] | 0) | 0;
 _mrg_get(HEAP32[$state >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}
function _dilog_series_2($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $12 = 0.0, $42 = 0, $47 = 0.0, $49 = 0, $7 = 0.0, $stat_s3 = 0, $t = 0, $t38 = 0, $t68 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $stat_s3 = sp + 32 | 0;
 $t = sp + 16 | 0;
 $t68 = sp + 8 | 0;
 $t38 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAP32[$stat_s3 >> 2] = _series_2(+HEAPF64[$0 >> 3], HEAP32[$1 >> 2] | 0) | 0;
 $7 = +HEAPF64[$0 >> 3];
 if (+HEAPF64[$0 >> 3] > .01) {
  $12 = (1.0 - $7) * +Math_log(+(1.0 - +HEAPF64[$0 >> 3]));
  HEAPF64[$t >> 3] = $12 / +HEAPF64[$0 >> 3];
 } else {
  HEAPF64[$t68 >> 3] = $7 * (+HEAPF64[$0 >> 3] * .125 + .14285714285714285) + .16666666666666666;
  HEAPF64[$t38 >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * +HEAPF64[$t68 >> 3] + .2) + .25) + .3333333333333333;
  HEAPF64[$t >> 3] = (+HEAPF64[$0 >> 3] - 1.0) * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * +HEAPF64[$t38 >> 3] + .5) + 1.0);
 }
 $42 = HEAP32[$1 >> 2] | 0;
 HEAPF64[$42 >> 3] = +HEAPF64[$42 >> 3] + (+HEAPF64[$t >> 3] + 1.0);
 $47 = +Math_abs(+(+HEAPF64[$t >> 3])) * 4.440892098500626e-16;
 $49 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
 HEAPF64[$49 >> 3] = +HEAPF64[$49 >> 3] + $47;
 STACKTOP = sp;
 return HEAP32[$stat_s3 >> 2] | 0;
}
function _gsl_rng_uniform_int($r, $n) {
 $r = $r | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $28 = 0, $37 = 0, $k = 0, $offset = 0, $range = 0, $scale = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $offset = sp + 12 | 0;
 $range = sp + 8 | 0;
 $scale = sp + 4 | 0;
 $k = sp;
 HEAP32[$1 >> 2] = $r;
 HEAP32[$2 >> 2] = $n;
 HEAP32[$offset >> 2] = HEAP32[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 8 >> 2];
 HEAP32[$range >> 2] = (HEAP32[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[$offset >> 2] | 0);
 if ((HEAP32[$2 >> 2] | 0) == 0 ? 1 : (HEAP32[$2 >> 2] | 0) >>> 0 > (HEAP32[$range >> 2] | 0) >>> 0) {
  _gsl_error(77528, 77592, 200, 4);
  HEAP32[$0 >> 2] = 0;
  $37 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 }
 HEAP32[$scale >> 2] = ((HEAP32[$range >> 2] | 0) >>> 0) / ((HEAP32[$2 >> 2] | 0) >>> 0) | 0;
 do {
  $28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 20 >> 2] & 63](HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0;
  HEAP32[$k >> 2] = (($28 - (HEAP32[$offset >> 2] | 0) | 0) >>> 0) / ((HEAP32[$scale >> 2] | 0) >>> 0) | 0;
 } while ((HEAP32[$k >> 2] | 0) >>> 0 >= (HEAP32[$2 >> 2] | 0) >>> 0);
 HEAP32[$0 >> 2] = HEAP32[$k >> 2];
 $37 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $37 | 0;
}
function _schrage757($a, $b, $m) {
 $a = $a | 0;
 $b = $b | 0;
 $m = $m | 0;
 var $0 = 0, $1 = 0, $2 = 0, $29 = 0, $3 = 0, $35 = 0, $38 = 0, $39 = 0, $q = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $q = sp + 4 | 0;
 $t = sp;
 HEAP32[$1 >> 2] = $a;
 HEAP32[$2 >> 2] = $b;
 HEAP32[$3 >> 2] = $m;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $39 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 }
 HEAP32[$q >> 2] = ((HEAP32[$3 >> 2] | 0) >>> 0) / ((HEAP32[$1 >> 2] | 0) >>> 0) | 0;
 HEAP32[$t >> 2] = (HEAP32[$3 >> 2] << 1) - (Math_imul(((HEAP32[$3 >> 2] | 0) >>> 0) % ((HEAP32[$1 >> 2] | 0) >>> 0) | 0, ((HEAP32[$2 >> 2] | 0) >>> 0) / ((HEAP32[$q >> 2] | 0) >>> 0) | 0) | 0);
 if ((HEAP32[$t >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) - (HEAP32[$3 >> 2] | 0);
 $29 = Math_imul(HEAP32[$1 >> 2] | 0, ((HEAP32[$2 >> 2] | 0) >>> 0) % ((HEAP32[$q >> 2] | 0) >>> 0) | 0) | 0;
 HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) + $29;
 $35 = HEAP32[$t >> 2] | 0;
 if ((HEAP32[$t >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) $38 = $35 - (HEAP32[$3 >> 2] | 0) | 0; else $38 = $35;
 HEAP32[$0 >> 2] = $38;
 $39 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $39 | 0;
}
function _schrage($a, $b, $m) {
 $a = $a | 0;
 $b = $b | 0;
 $m = $m | 0;
 var $0 = 0, $1 = 0, $2 = 0, $29 = 0, $3 = 0, $35 = 0, $38 = 0, $39 = 0, $q = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $q = sp + 4 | 0;
 $t = sp;
 HEAP32[$1 >> 2] = $a;
 HEAP32[$2 >> 2] = $b;
 HEAP32[$3 >> 2] = $m;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $39 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 }
 HEAP32[$q >> 2] = ((HEAP32[$3 >> 2] | 0) >>> 0) / ((HEAP32[$1 >> 2] | 0) >>> 0) | 0;
 HEAP32[$t >> 2] = (HEAP32[$3 >> 2] << 1) - (Math_imul(((HEAP32[$3 >> 2] | 0) >>> 0) % ((HEAP32[$1 >> 2] | 0) >>> 0) | 0, ((HEAP32[$2 >> 2] | 0) >>> 0) / ((HEAP32[$q >> 2] | 0) >>> 0) | 0) | 0);
 if ((HEAP32[$t >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) - (HEAP32[$3 >> 2] | 0);
 $29 = Math_imul(HEAP32[$1 >> 2] | 0, ((HEAP32[$2 >> 2] | 0) >>> 0) % ((HEAP32[$q >> 2] | 0) >>> 0) | 0) | 0;
 HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) + $29;
 $35 = HEAP32[$t >> 2] | 0;
 if ((HEAP32[$t >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) $38 = $35 - (HEAP32[$3 >> 2] | 0) | 0; else $38 = $35;
 HEAP32[$0 >> 2] = $38;
 $39 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $39 | 0;
}
function _gsl_sf_ellint_Dcomp_e($k, $mode, $result) {
 $k = +$k;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $29 = 0.0, $3 = 0, $33 = 0, $rd = 0, $status = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $y = sp + 16 | 0;
 $rd = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $k;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] >= 1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(29376, 29392, 488, 1);
  HEAP32[$0 >> 2] = 1;
  $33 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 } else {
  HEAPF64[$y >> 3] = 1.0 - +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
  HEAP32[$status >> 2] = _gsl_sf_ellint_RD_e(0.0, +HEAPF64[$y >> 3], 1.0, HEAP32[$2 >> 2] | 0, $rd) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$rd >> 3] * .3333333333333333;
  $24 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 2.220446049250313e-16;
  $29 = $24 + +Math_abs(+(+HEAPF64[$rd + 8 >> 3] * .3333333333333333));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $29;
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $33 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_Olver_zofmzeta($minus_zeta) {
 $minus_zeta = +$minus_zeta;
 var $0 = 0, $1 = 0, $25 = 0.0, $4 = 0.0, $c = 0, $c2 = 0, $c4 = 0, $p = 0, $x = 0, $x1 = 0, $x3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 96 | 0;
 $1 = sp + 88 | 0;
 $x = sp + 80 | 0;
 $c = sp + 64 | 0;
 $x1 = sp + 56 | 0;
 $c2 = sp + 40 | 0;
 $p = sp + 24 | 0;
 $x3 = sp + 16 | 0;
 $c4 = sp;
 HEAPF64[$1 >> 3] = $minus_zeta;
 $4 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] < 1.0) {
  HEAPF64[$x >> 3] = 2.0 * $4 - 1.0;
  _cheb_eval_e191(19352, +HEAPF64[$x >> 3], $c) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c >> 3];
  $25 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$25;
 }
 if ($4 < 10.0) {
  HEAPF64[$x1 >> 3] = (+HEAPF64[$1 >> 3] * 2.0 - 11.0) / 9.0;
  _cheb_eval_e191(19160, +HEAPF64[$x1 >> 3], $c2) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c2 >> 3];
  $25 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$25;
 } else {
  HEAPF64[sp + 32 >> 3] = 31.622776601683793;
  HEAPF64[$p >> 3] = +Math_pow(+(+HEAPF64[$1 >> 3]), 1.5);
  HEAPF64[$x3 >> 3] = 63.245553203367585 / +HEAPF64[$p >> 3] - 1.0;
  _cheb_eval_e191(18888, +HEAPF64[$x3 >> 3], $c4) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$c4 >> 3] * +HEAPF64[$p >> 3];
  $25 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$25;
 }
 return 0.0;
}
function _gauss_large($x) {
 $x = +$x;
 var $0 = 0, $absx = 0, $i = 0, $result = 0, $temp = 0, $xden = 0, $xnum = 0, $xsq = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $i = sp + 56 | 0;
 $result = sp + 40 | 0;
 $xsq = sp + 32 | 0;
 $temp = sp + 24 | 0;
 $xnum = sp + 16 | 0;
 $xden = sp + 8 | 0;
 $absx = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$absx >> 3] = +Math_abs(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$xsq >> 3] = 1.0 / (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]);
 HEAPF64[$xnum >> 3] = +HEAPF64[41] * +HEAPF64[$xsq >> 3];
 HEAPF64[$xden >> 3] = +HEAPF64[$xsq >> 3];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 4) break;
  HEAPF64[$xnum >> 3] = (+HEAPF64[$xnum >> 3] + +HEAPF64[288 + (HEAP32[$i >> 2] << 3) >> 3]) * +HEAPF64[$xsq >> 3];
  HEAPF64[$xden >> 3] = (+HEAPF64[$xden >> 3] + +HEAPF64[336 + (HEAP32[$i >> 2] << 3) >> 3]) * +HEAPF64[$xsq >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$temp >> 3] = +HEAPF64[$xsq >> 3] * (+HEAPF64[$xnum >> 3] + +HEAPF64[40]) / (+HEAPF64[$xden >> 3] + +HEAPF64[46]);
 HEAPF64[$temp >> 3] = (.3989422804014327 - +HEAPF64[$temp >> 3]) / +HEAPF64[$absx >> 3];
 HEAPF64[$result >> 3] = +_get_del(+HEAPF64[$0 >> 3], +HEAPF64[$temp >> 3]);
 STACKTOP = sp;
 return +(+HEAPF64[$result >> 3]);
}
function _gsl_ran_binomial_pdf($k, $p, $n) {
 $k = $k | 0;
 $p = +$p;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $29 = 0.0, $3 = 0, $33 = 0.0, $42 = 0.0, $P = 0, $ln_Cnk = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 32 | 0;
 $P = sp + 8 | 0;
 $ln_Cnk = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 HEAP32[$3 >> 2] = $n;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
  HEAPF64[$0 >> 3] = 0.0;
  $42 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$42;
 }
 do if (+HEAPF64[$2 >> 3] == 0.0) HEAPF64[$P >> 3] = +(((HEAP32[$1 >> 2] | 0) == 0 ? 1 : 0) | 0); else if (+HEAPF64[$2 >> 3] == 1.0) {
  HEAPF64[$P >> 3] = +(((HEAP32[$1 >> 2] | 0) == (HEAP32[$3 >> 2] | 0) ? 1 : 0) | 0);
  break;
 } else {
  HEAPF64[$ln_Cnk >> 3] = +_gsl_sf_lnchoose(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0);
  $29 = +HEAPF64[$ln_Cnk >> 3] + +((HEAP32[$1 >> 2] | 0) >>> 0) * +Math_log(+(+HEAPF64[$2 >> 3]));
  $33 = +(((HEAP32[$3 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0) >>> 0);
  HEAPF64[$P >> 3] = $29 + $33 * +_log1p(+-+HEAPF64[$2 >> 3]);
  HEAPF64[$P >> 3] = +Math_exp(+(+HEAPF64[$P >> 3]));
  break;
 } while (0);
 HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
 $42 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$42;
}
function _olver_A1_xi($mu, $xi, $x) {
 $mu = +$mu;
 $xi = +$xi;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $B = 0, $psi = 0, $s = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $B = sp + 24 | 0;
 $psi = sp + 16 | 0;
 $y = sp + 8 | 0;
 $s = sp;
 HEAPF64[$0 >> 3] = $mu;
 HEAPF64[$1 >> 3] = $xi;
 HEAPF64[$2 >> 3] = $x;
 HEAPF64[$B >> 3] = +_olver_B0_xi(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3]);
 if (+Math_abs(+(+HEAPF64[$2 >> 3] - 1.0)) < .0001220703125) {
  HEAPF64[$y >> 3] = +HEAPF64[$2 >> 3] - 1.0;
  HEAPF64[$s >> 3] = +HEAPF64[$y >> 3] * (.13333333333333333 - +HEAPF64[$y >> 3] * (.06455026455026455 - +HEAPF64[$y >> 3] * .031887125220458556)) + -.3333333333333333;
  HEAPF64[$psi >> 3] = (+HEAPF64[$0 >> 3] * 4.0 * +HEAPF64[$0 >> 3] - 1.0) / 16.0 * +HEAPF64[$s >> 3];
 } else HEAPF64[$psi >> 3] = (+HEAPF64[$0 >> 3] * 4.0 * +HEAPF64[$0 >> 3] - 1.0) / 16.0 * (1.0 / (+HEAPF64[$2 >> 3] * +HEAPF64[$2 >> 3] - 1.0) - 1.0 / (+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$1 >> 3] * .5 * +HEAPF64[$1 >> 3] * +HEAPF64[$B >> 3] * +HEAPF64[$B >> 3] + (+HEAPF64[$0 >> 3] + .5) * +HEAPF64[$B >> 3] - +HEAPF64[$psi >> 3] + +HEAPF64[$0 >> 3] / 6.0 * (.25 - +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]));
}
function _swap($base, $size, $i, $j) {
 $base = $base | 0;
 $size = $size | 0;
 $i = $i | 0;
 $j = $j | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $3 = 0, $6 = 0, $a = 0, $b = 0, $s = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $a = sp + 8 | 0;
 $b = sp + 4 | 0;
 $s = sp;
 $tmp = sp + 28 | 0;
 HEAP32[$0 >> 2] = $base;
 HEAP32[$1 >> 2] = $size;
 HEAP32[$2 >> 2] = $i;
 HEAP32[$3 >> 2] = $j;
 $6 = Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$a >> 2] = (HEAP32[$0 >> 2] | 0) + $6;
 $11 = Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[$b >> 2] = (HEAP32[$0 >> 2] | 0) + $11;
 HEAP32[$s >> 2] = HEAP32[$1 >> 2];
 if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$3 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 do {
  HEAP8[$tmp >> 0] = HEAP8[HEAP32[$a >> 2] >> 0] | 0;
  $21 = HEAP8[HEAP32[$b >> 2] >> 0] | 0;
  $22 = HEAP32[$a >> 2] | 0;
  HEAP32[$a >> 2] = $22 + 1;
  HEAP8[$22 >> 0] = $21;
  $24 = HEAP8[$tmp >> 0] | 0;
  $25 = HEAP32[$b >> 2] | 0;
  HEAP32[$b >> 2] = $25 + 1;
  HEAP8[$25 >> 0] = $24;
  $28 = (HEAP32[$s >> 2] | 0) + -1 | 0;
  HEAP32[$s >> 2] = $28;
 } while ($28 >>> 0 > 0);
 STACKTOP = sp;
 return;
}
function _gamma_inc_a_gt_0($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $16 = 0.0, $2 = 0, $22 = 0.0, $28 = 0.0, $30 = 0, $40 = 0, $G = 0, $Q = 0, $stat_G = 0, $stat_Q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 56 | 0;
 $Q = sp + 16 | 0;
 $G = sp;
 $stat_Q = sp + 52 | 0;
 $stat_G = sp + 48 | 0;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$stat_Q >> 2] = _gsl_sf_gamma_inc_Q_e(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], $Q) | 0;
 HEAP32[$stat_G >> 2] = _gsl_sf_gamma_e(+HEAPF64[$0 >> 3], $G) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$G >> 3] * +HEAPF64[$Q >> 3];
 $16 = +Math_abs(+(+HEAPF64[$G >> 3] * +HEAPF64[$Q + 8 >> 3]));
 $22 = $16 + +Math_abs(+(+HEAPF64[$G + 8 >> 3] * +HEAPF64[$Q >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $22;
 $28 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $30 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$30 >> 3] = +HEAPF64[$30 >> 3] + $28;
 if (HEAP32[$stat_G >> 2] | 0) {
  $40 = HEAP32[$stat_G >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 } else {
  $40 = (HEAP32[$stat_Q >> 2] | 0) != 0 ? HEAP32[$stat_Q >> 2] | 0 : 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 return 0;
}
function _gamma_inc_series($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $16 = 0.0, $2 = 0, $22 = 0.0, $28 = 0.0, $30 = 0, $40 = 0, $G = 0, $Q = 0, $stat_G = 0, $stat_Q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 56 | 0;
 $Q = sp + 16 | 0;
 $G = sp;
 $stat_Q = sp + 52 | 0;
 $stat_G = sp + 48 | 0;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$stat_Q >> 2] = _gamma_inc_Q_series(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], $Q) | 0;
 HEAP32[$stat_G >> 2] = _gsl_sf_gamma_e(+HEAPF64[$0 >> 3], $G) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$Q >> 3] * +HEAPF64[$G >> 3];
 $16 = +Math_abs(+(+HEAPF64[$Q >> 3] * +HEAPF64[$G + 8 >> 3]));
 $22 = $16 + +Math_abs(+(+HEAPF64[$Q + 8 >> 3] * +HEAPF64[$G >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $22;
 $28 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $30 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$30 >> 3] = +HEAPF64[$30 >> 3] + $28;
 if (HEAP32[$stat_Q >> 2] | 0) {
  $40 = HEAP32[$stat_Q >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 } else {
  $40 = (HEAP32[$stat_G >> 2] | 0) != 0 ? HEAP32[$stat_G >> 2] | 0 : 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 return 0;
}
function _hyperg_U_origin($a, $b, $result) {
 $a = +$a;
 $b = +$b;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $39 = 0, $factor = 0, $r1 = 0, $r2 = 0, $stat_1 = 0, $stat_2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 64 | 0;
 $r1 = sp + 24 | 0;
 $r2 = sp + 8 | 0;
 $stat_1 = sp + 60 | 0;
 $stat_2 = sp + 56 | 0;
 $factor = sp;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $b;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$stat_1 >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$0 >> 3] + 1.0 - +HEAPF64[$1 >> 3], $r1) | 0;
 HEAP32[$stat_2 >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$1 >> 3], $r2) | 0;
 HEAPF64[$factor >> 3] = 3.141592653589793 / +Math_sin(+(+HEAPF64[$1 >> 3] * 3.141592653589793));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$factor >> 3] * +HEAPF64[$r1 >> 3] * +HEAPF64[$r2 >> 3];
 $21 = +Math_abs(+(+HEAPF64[$factor >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $21 * (+HEAPF64[$r1 + 8 >> 3] + +HEAPF64[$r2 + 8 >> 3]);
 HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = 0;
 if (HEAP32[$stat_1 >> 2] | 0) {
  $39 = HEAP32[$stat_1 >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 } else {
  $39 = (HEAP32[$stat_2 >> 2] | 0) != 0 ? HEAP32[$stat_2 >> 2] | 0 : 0;
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0;
}
function _m_selection_fails($two_ja, $two_jb, $two_jc, $two_ma, $two_mb, $two_mc) {
 $two_ja = $two_ja | 0;
 $two_jb = $two_jb | 0;
 $two_jc = $two_jc | 0;
 $two_ma = $two_ma | 0;
 $two_mb = $two_mb | 0;
 $two_mc = $two_mc | 0;
 var $0 = 0, $1 = 0, $11 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $40 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$0 >> 2] = $two_ja;
 HEAP32[$1 >> 2] = $two_jb;
 HEAP32[$2 >> 2] = $two_jc;
 HEAP32[$3 >> 2] = $two_ma;
 HEAP32[$4 >> 2] = $two_mb;
 HEAP32[$5 >> 2] = $two_mc;
 $7 = Math_abs(HEAP32[$3 >> 2] | 0) | 0;
 if (($7 | 0) > (HEAP32[$0 >> 2] | 0)) $40 = 1; else {
  $11 = Math_abs(HEAP32[$4 >> 2] | 0) | 0;
  if (($11 | 0) > (HEAP32[$1 >> 2] | 0)) $40 = 1; else {
   $15 = Math_abs(HEAP32[$5 >> 2] | 0) | 0;
   if (($15 | 0) > (HEAP32[$2 >> 2] | 0)) $40 = 1; else if ((HEAP32[$0 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) & 1) $40 = 1; else if ((HEAP32[$1 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) & 1) $40 = 1; else if ((HEAP32[$2 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) & 1) $40 = 1; else $40 = ((HEAP32[$3 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0) != 0;
  }
 }
 STACKTOP = sp;
 return $40 & 1 | 0;
}
function _gsl_sf_bessel_Knu_scaled_asympx_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $38 = 0.0, $48 = 0.0, $mu = 0, $mum1 = 0, $mum9 = 0, $pre = 0, $r = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 56 | 0;
 $mu = sp + 32 | 0;
 $mum1 = sp + 24 | 0;
 $mum9 = sp + 16 | 0;
 $pre = sp + 8 | 0;
 $r = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$mu >> 3] = +HEAPF64[$0 >> 3] * 4.0 * +HEAPF64[$0 >> 3];
 HEAPF64[$mum1 >> 3] = +HEAPF64[$mu >> 3] - 1.0;
 HEAPF64[$mum9 >> 3] = +HEAPF64[$mu >> 3] - 9.0;
 HEAPF64[$pre >> 3] = +Math_sqrt(+(3.141592653589793 / (+HEAPF64[$1 >> 3] * 2.0)));
 HEAPF64[$r >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$pre >> 3] * (+HEAPF64[$mum1 >> 3] / (+HEAPF64[$1 >> 3] * 8.0) + 1.0 + +HEAPF64[$mum1 >> 3] * +HEAPF64[$mum9 >> 3] / (+HEAPF64[$1 >> 3] * 128.0 * +HEAPF64[$1 >> 3]));
 $38 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $48 = $38 + +HEAPF64[$pre >> 3] * +Math_abs(+(+HEAPF64[$r >> 3] * .1 * +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $48;
 STACKTOP = sp;
 return 0;
}
function _gamma_frac($r, $a) {
 $r = $r | 0;
 $a = +$a;
 var $0 = 0, $1 = 0, $2 = 0, $34 = 0.0, $38 = 0.0, $p = 0, $q = 0, $u = 0, $v = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 40 | 0;
 $p = sp + 32 | 0;
 $q = sp + 24 | 0;
 $x = sp + 16 | 0;
 $u = sp + 8 | 0;
 $v = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $a;
 if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $38 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$38;
 }
 HEAPF64[$p >> 3] = 2.718281828459045 / (+HEAPF64[$2 >> 3] + 2.718281828459045);
 do {
  HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
  HEAPF64[$v >> 3] = +_gsl_rng_uniform_pos(HEAP32[$1 >> 2] | 0);
  if (+HEAPF64[$u >> 3] < +HEAPF64[$p >> 3]) {
   HEAPF64[$x >> 3] = +Math_exp(+(1.0 / +HEAPF64[$2 >> 3] * +Math_log(+(+HEAPF64[$v >> 3]))));
   HEAPF64[$q >> 3] = +Math_exp(+-+HEAPF64[$x >> 3]);
  } else {
   HEAPF64[$x >> 3] = 1.0 - +Math_log(+(+HEAPF64[$v >> 3]));
   HEAPF64[$q >> 3] = +Math_exp(+((+HEAPF64[$2 >> 3] - 1.0) * +Math_log(+(+HEAPF64[$x >> 3]))));
  }
  $34 = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
 } while ($34 >= +HEAPF64[$q >> 3]);
 HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
 $38 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$38;
}
function _gsl_ran_gaussian_tail($r, $a, $sigma) {
 $r = $r | 0;
 $a = +$a;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $39 = 0.0, $s = 0, $u = 0, $v = 0, $x = 0, $x1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 40 | 0;
 $s = sp + 32 | 0;
 $x = sp + 24 | 0;
 $u = sp + 16 | 0;
 $v = sp + 8 | 0;
 $x1 = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $sigma;
 HEAPF64[$s >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$3 >> 3];
 if (+HEAPF64[$s >> 3] < 1.0) {
  do HEAPF64[$x >> 3] = +_gsl_ran_gaussian(HEAP32[$1 >> 2] | 0, 1.0); while (+HEAPF64[$x >> 3] < +HEAPF64[$s >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3] * +HEAPF64[$3 >> 3];
  $39 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$39;
 }
 do {
  HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
  do HEAPF64[$v >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0); while (+HEAPF64[$v >> 3] == 0.0);
  HEAPF64[$x1 >> 3] = +Math_sqrt(+(+HEAPF64[$s >> 3] * +HEAPF64[$s >> 3] - +Math_log(+(+HEAPF64[$v >> 3])) * 2.0));
 } while (+HEAPF64[$x1 >> 3] * +HEAPF64[$u >> 3] > +HEAPF64[$s >> 3]);
 HEAPF64[$0 >> 3] = +HEAPF64[$x1 >> 3] * +HEAPF64[$3 >> 3];
 $39 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$39;
}
function _ran_get754($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $12 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $8 = 0, $state = 0, $xtmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $xtmp = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$xtmp >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2];
 $8 = _schrage_mult756(271828183, HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0, 2147483647, 46341) | 0;
 $12 = $8 + (_schrage_mult756(1833324378, HEAP32[HEAP32[$state >> 2] >> 2] | 0, 2147483647, 46341) | 0) | 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = $12;
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) >>> 0 < 2147483647) {
  $23 = HEAP32[$xtmp >> 2] | 0;
  $24 = HEAP32[$state >> 2] | 0;
  HEAP32[$24 >> 2] = $23;
  $25 = HEAP32[$state >> 2] | 0;
  $26 = $25 + 4 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  STACKTOP = sp;
  return $27 | 0;
 }
 $20 = (HEAP32[$state >> 2] | 0) + 4 | 0;
 HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) - 2147483647;
 $23 = HEAP32[$xtmp >> 2] | 0;
 $24 = HEAP32[$state >> 2] | 0;
 HEAP32[$24 >> 2] = $23;
 $25 = HEAP32[$state >> 2] | 0;
 $26 = $25 + 4 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 STACKTOP = sp;
 return $27 | 0;
}
function _dilogc_fundamental($r, $x, $y, $real_dl, $imag_dl) {
 $r = +$r;
 $x = +$x;
 $y = +$y;
 $real_dl = $real_dl | 0;
 $imag_dl = $imag_dl | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 HEAPF64[$1 >> 3] = $r;
 HEAPF64[$2 >> 3] = $x;
 HEAPF64[$3 >> 3] = $y;
 HEAP32[$4 >> 2] = $real_dl;
 HEAP32[$5 >> 2] = $imag_dl;
 $8 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] > .98) {
  HEAP32[$0 >> 2] = _dilogc_series_3($8, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 $15 = +HEAPF64[$1 >> 3];
 $16 = +HEAPF64[$2 >> 3];
 $17 = +HEAPF64[$3 >> 3];
 $18 = HEAP32[$4 >> 2] | 0;
 $19 = HEAP32[$5 >> 2] | 0;
 if ($8 > .25) {
  HEAP32[$0 >> 2] = _dilogc_series_2($15, $16, $17, $18, $19) | 0;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 } else {
  HEAP32[$0 >> 2] = _dilogc_series_1($15, $16, $17, $18, $19) | 0;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 return 0;
}
function _gsl_sf_fermi_dirac_inc_0_e($x, $b, $result) {
 $x = +$x;
 $b = +$b;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $26 = 0.0, $3 = 0, $30 = 0, $arg = 0, $f0 = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 44 | 0;
 $arg = sp + 16 | 0;
 $f0 = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $b;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$2 >> 3] < 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(33424, 33392, 1572, 1);
  HEAP32[$0 >> 2] = 1;
  $30 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $30 | 0;
 } else {
  HEAPF64[$arg >> 3] = +HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3];
  HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_0_e(+HEAPF64[$arg >> 3], $f0) | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$f0 >> 3] - +HEAPF64[$arg >> 3];
  $21 = +Math_abs(+(+HEAPF64[$1 >> 3]));
  $26 = +HEAPF64[$f0 + 8 >> 3] + ($21 + +Math_abs(+(+HEAPF64[$2 >> 3]))) * 2.220446049250313e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $26;
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $30 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $30 | 0;
 }
 return 0;
}
function _ran_set732($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $23 = 0, $33 = 0, $34 = 0, $35 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0)) label = 3; else if (!(((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483399 | 0)) label = 3;
 if ((label | 0) == 3) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483399 | 0;
 $23 = HEAP32[HEAP32[$state >> 2] >> 2] | 0;
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  $35 = $23 - (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) | 0;
  $33 = HEAP32[$state >> 2] | 0;
  $34 = $33 + 8 | 0;
  HEAP32[$34 >> 2] = $35;
  STACKTOP = sp;
  return;
 } else {
  $35 = 2147483647 + $23 - (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) | 0;
  $33 = HEAP32[$state >> 2] | 0;
  $34 = $33 + 8 | 0;
  HEAP32[$34 >> 2] = $35;
  STACKTOP = sp;
  return;
 }
}
function _uni32_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $29 = 0, $35 = 0, $38 = 0, $i = 0, $j = 0, $k = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $state = sp + 12 | 0;
 $i = sp + 8 | 0;
 $j = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$i >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2];
 HEAP32[$k >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) >> 2] | 0) - (HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$j >> 2] << 2) >> 2] | 0);
 if ((HEAP32[$k >> 2] | 0) < 0) HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 2147483647;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[$k >> 2];
 $29 = HEAP32[$state >> 2] | 0;
 if (!(HEAP32[$i >> 2] | 0)) HEAP32[$29 >> 2] = 16; else HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + -1;
 $35 = (HEAP32[$state >> 2] | 0) + 4 | 0;
 if (!(HEAP32[$j >> 2] | 0)) {
  HEAP32[$35 >> 2] = 16;
  $38 = HEAP32[$k >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 } else {
  HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + -1;
  $38 = HEAP32[$k >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 }
 return 0;
}
function _gsl_ran_dir_nd($r, $n, $x) {
 $r = $r | 0;
 $n = $n | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $34 = 0, $7 = 0.0, $d = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $d = sp;
 $i = sp + 8 | 0;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $x;
 HEAPF64[$d >> 3] = 0.0;
 do {
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
   $7 = +_gsl_ran_gaussian(HEAP32[$0 >> 2] | 0, 1.0);
   HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] = $7;
   HEAPF64[$d >> 3] = +HEAPF64[$d >> 3] + +HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3] * +HEAPF64[(HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (+HEAPF64[$d >> 3] == 0.0);
 HEAPF64[$d >> 3] = +Math_sqrt(+(+HEAPF64[$d >> 3]));
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  $34 = (HEAP32[$2 >> 2] | 0) + (HEAP32[$i >> 2] << 3) | 0;
  HEAPF64[$34 >> 3] = +HEAPF64[$34 >> 3] / +HEAPF64[$d >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gamma_inc_Q_CF($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $25 = 0.0, $35 = 0.0, $45 = 0, $D = 0, $F = 0, $stat_D = 0, $stat_F = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 56 | 0;
 $D = sp + 16 | 0;
 $F = sp;
 $stat_D = sp + 52 | 0;
 $stat_F = sp + 48 | 0;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$stat_D >> 2] = _gamma_inc_D(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], $D) | 0;
 HEAP32[$stat_F >> 2] = _gamma_inc_F_CF(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], $F) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$D >> 3] * (+HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3]) * +HEAPF64[$F >> 3];
 $25 = +HEAPF64[$D + 8 >> 3] * +Math_abs(+(+HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3] * +HEAPF64[$F >> 3]));
 $35 = $25 + +Math_abs(+(+HEAPF64[$D >> 3] * +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3] * +HEAPF64[$F + 8 >> 3]));
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $35;
 if (HEAP32[$stat_F >> 2] | 0) {
  $45 = HEAP32[$stat_F >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } else {
  $45 = (HEAP32[$stat_D >> 2] | 0) != 0 ? HEAP32[$stat_D >> 2] | 0 : 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 return 0;
}
function _gsl_sf_coupling_6j($two_ja, $two_jb, $two_jc, $two_jd, $two_je, $two_jf) {
 $two_ja = $two_ja | 0;
 $two_jb = $two_jb | 0;
 $two_jc = $two_jc | 0;
 $two_jd = $two_jd | 0;
 $two_je = $two_je | 0;
 $two_jf = $two_jf | 0;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $two_ja;
 HEAP32[$2 >> 2] = $two_jb;
 HEAP32[$3 >> 2] = $two_jc;
 HEAP32[$4 >> 2] = $two_jd;
 HEAP32[$5 >> 2] = $two_je;
 HEAP32[$6 >> 2] = $two_jf;
 HEAP32[$status >> 2] = _gsl_sf_coupling_6j_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(26560, 26448, 432, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 return 0.0;
}
function _gsl_sf_coupling_3j($two_ja, $two_jb, $two_jc, $two_ma, $two_mb, $two_mc) {
 $two_ja = $two_ja | 0;
 $two_jb = $two_jb | 0;
 $two_jc = $two_jc | 0;
 $two_ma = $two_ma | 0;
 $two_mb = $two_mb | 0;
 $two_mc = $two_mc | 0;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $two_ja;
 HEAP32[$2 >> 2] = $two_jb;
 HEAP32[$3 >> 2] = $two_jc;
 HEAP32[$4 >> 2] = $two_ma;
 HEAP32[$5 >> 2] = $two_mb;
 HEAP32[$6 >> 2] = $two_mc;
 HEAP32[$status >> 2] = _gsl_sf_coupling_3j_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(26480, 26448, 414, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 return 0.0;
}
function _uni_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $29 = 0, $35 = 0, $38 = 0, $i = 0, $j = 0, $k = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $state = sp + 12 | 0;
 $i = sp + 8 | 0;
 $j = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$i >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$j >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2];
 HEAP32[$k >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) >> 2] | 0) - (HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$j >> 2] << 2) >> 2] | 0);
 if ((HEAP32[$k >> 2] | 0) < 0) HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 32767;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[$k >> 2];
 $29 = HEAP32[$state >> 2] | 0;
 if (!(HEAP32[$i >> 2] | 0)) HEAP32[$29 >> 2] = 16; else HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + -1;
 $35 = (HEAP32[$state >> 2] | 0) + 4 | 0;
 if (!(HEAP32[$j >> 2] | 0)) {
  HEAP32[$35 >> 2] = 16;
  $38 = HEAP32[$k >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 } else {
  HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + -1;
  $38 = HEAP32[$k >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 }
 return 0;
}
function _inv_cornish_fisher($z, $nu) {
 $z = +$z;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $47 = 0.0, $48 = 0.0, $a = 0, $b = 0, $cf1 = 0, $cf2 = 0, $t = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $a = sp + 40 | 0;
 $b = sp + 32 | 0;
 $cf1 = sp + 24 | 0;
 $cf2 = sp + 16 | 0;
 $y = sp + 8 | 0;
 $t = sp;
 HEAPF64[$0 >> 3] = $z;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$a >> 3] = 1.0 / (+HEAPF64[$1 >> 3] - .5);
 HEAPF64[$b >> 3] = 48.0 / (+HEAPF64[$a >> 3] * +HEAPF64[$a >> 3]);
 HEAPF64[$cf1 >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] + 3.0);
 HEAPF64[$cf2 >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] * 4.0 + 63.0) + 360.0) + 945.0);
 HEAPF64[$y >> 3] = +HEAPF64[$0 >> 3] - +HEAPF64[$cf1 >> 3] / +HEAPF64[$b >> 3] + +HEAPF64[$cf2 >> 3] / (+HEAPF64[$b >> 3] * 10.0 * +HEAPF64[$b >> 3]);
 $47 = +((+HEAPF64[$0 >> 3] >= 0.0 ? 1 : -1) | 0);
 $48 = +HEAPF64[$1 >> 3];
 HEAPF64[$t >> 3] = $47 * +Math_sqrt(+($48 * +_expm1(+(+HEAPF64[$a >> 3] * +HEAPF64[$y >> 3] * +HEAPF64[$y >> 3]))));
 STACKTOP = sp;
 return +(+HEAPF64[$t >> 3]);
}
function _gsl_cdf_ugaussian_Pinv($P) {
 $P = +$P;
 var $0 = 0, $1 = 0, $16 = 0.0, $18 = 0.0, $25 = 0.0, $30 = 0.0, $dP = 0, $pp = 0, $r = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $r = sp + 24 | 0;
 $x = sp + 16 | 0;
 $pp = sp + 8 | 0;
 $dP = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$dP >> 3] = +HEAPF64[$1 >> 3] - .5;
 do if (+HEAPF64[$1 >> 3] == 1.0) HEAPF64[$0 >> 3] = inf; else {
  if (+HEAPF64[$1 >> 3] == 0.0) {
   HEAPF64[$0 >> 3] = -inf;
   break;
  }
  if (+Math_abs(+(+HEAPF64[$dP >> 3])) <= .425) {
   HEAPF64[$x >> 3] = +_small(+HEAPF64[$dP >> 3]);
   HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
   break;
  }
  $16 = +HEAPF64[$1 >> 3];
  if (+HEAPF64[$1 >> 3] < .5) $18 = $16; else $18 = 1.0 - $16;
  HEAPF64[$pp >> 3] = $18;
  HEAPF64[$r >> 3] = +Math_sqrt(+-+Math_log(+(+HEAPF64[$pp >> 3])));
  $25 = +HEAPF64[$r >> 3];
  if (+HEAPF64[$r >> 3] <= 5.0) HEAPF64[$x >> 3] = +_intermediate($25); else HEAPF64[$x >> 3] = +_tail($25);
  $30 = +HEAPF64[$x >> 3];
  if (+HEAPF64[$1 >> 3] < .5) {
   HEAPF64[$0 >> 3] = -$30;
   break;
  } else {
   HEAPF64[$0 >> 3] = $30;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _random_get($i, $j, $n, $x) {
 $i = $i | 0;
 $j = $j | 0;
 $n = $n | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0, $12 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $38 = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $i;
 HEAP32[$1 >> 2] = $j;
 HEAP32[$2 >> 2] = $n;
 HEAP32[$3 >> 2] = $x;
 $12 = (HEAP32[$3 >> 2] | 0) + (HEAP32[HEAP32[$0 >> 2] >> 2] << 2) | 0;
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + (HEAP32[HEAP32[$1 >> 2] >> 2] << 2) >> 2] | 0);
 HEAP32[$k >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + (HEAP32[HEAP32[$0 >> 2] >> 2] << 2) >> 2] >> 1 & 2147483647;
 $22 = HEAP32[$0 >> 2] | 0;
 HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 1;
 if ((HEAP32[HEAP32[$0 >> 2] >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) HEAP32[HEAP32[$0 >> 2] >> 2] = 0;
 $30 = HEAP32[$1 >> 2] | 0;
 HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
 if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) != (HEAP32[$2 >> 2] | 0)) {
  $38 = HEAP32[$k >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 }
 HEAP32[HEAP32[$1 >> 2] >> 2] = 0;
 $38 = HEAP32[$k >> 2] | 0;
 STACKTOP = sp;
 return $38 | 0;
}
function _gsl_sf_bessel_asymp_Mnu_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $35 = 0.0, $38 = 0.0, $Mnu2_c = 0, $r = 0, $r2 = 0, $term1 = 0, $term2 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 64 | 0;
 $r = sp + 40 | 0;
 $r2 = sp + 32 | 0;
 $x2 = sp + 24 | 0;
 $term1 = sp + 16 | 0;
 $term2 = sp + 8 | 0;
 $Mnu2_c = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$r >> 3] = +HEAPF64[$0 >> 3] * 2.0 / +HEAPF64[$1 >> 3];
 HEAPF64[$r2 >> 3] = +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3];
 HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 HEAPF64[$term1 >> 3] = (+HEAPF64[$r2 >> 3] - 1.0 / +HEAPF64[$x2 >> 3]) / 8.0;
 HEAPF64[$term2 >> 3] = (+HEAPF64[$r2 >> 3] - 1.0 / +HEAPF64[$x2 >> 3]) * (+HEAPF64[$r2 >> 3] - 9.0 / +HEAPF64[$x2 >> 3]) * 3.0 / 128.0;
 HEAPF64[$Mnu2_c >> 3] = (+HEAPF64[$term1 >> 3] + 1.0 + +HEAPF64[$term2 >> 3]) * .6366197723675814;
 $35 = +Math_sqrt(+(+HEAPF64[$Mnu2_c >> 3]));
 $38 = $35 / +Math_sqrt(+(+HEAPF64[$1 >> 3]));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = $38;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_bessel_Knu_scaled_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $23 = 0, $24 = 0, $3 = 0, $result_e10 = 0, $status = 0, $status2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 48 | 0;
 $result_e10 = sp;
 $status = sp + 44 | 0;
 $status2 = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$2 >> 3] <= 0.0)) if (!(+HEAPF64[$1 >> 3] < 0.0)) {
  HEAP32[$status >> 2] = _gsl_sf_bessel_Knu_scaled_e10_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result_e10) | 0;
  HEAP32[$status2 >> 2] = _gsl_sf_result_smash_e($result_e10, HEAP32[$3 >> 2] | 0) | 0;
  if (HEAP32[$status >> 2] | 0) $23 = HEAP32[$status >> 2] | 0; else $23 = (HEAP32[$status2 >> 2] | 0) != 0 ? HEAP32[$status2 >> 2] | 0 : 0;
  HEAP32[$0 >> 2] = $23;
  $24 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $24 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(14e3, 14016, 42, 1);
 HEAP32[$0 >> 2] = 1;
 $24 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $24 | 0;
}
function _gsl_sf_rect_to_polar($x, $y, $r, $theta) {
 $x = +$x;
 $y = +$y;
 $r = $r | 0;
 $theta = $theta | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $19 = 0.0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $stat_h = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $stat_h = sp + 16 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $r;
 HEAP32[$4 >> 2] = $theta;
 HEAP32[$stat_h >> 2] = _gsl_sf_hypot_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 if (+HEAPF64[HEAP32[$3 >> 2] >> 3] > 0.0) {
  $14 = +Math_atan2(+(+HEAPF64[$2 >> 3]), +(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$4 >> 2] >> 3] = $14;
  $19 = +Math_abs(+(+HEAPF64[HEAP32[$4 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = $19;
  HEAP32[$0 >> 2] = HEAP32[$stat_h >> 2];
  $26 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 } else {
  HEAPF64[HEAP32[$4 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$4 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(61544, 61536, 528, 1);
  HEAP32[$0 >> 2] = 1;
  $26 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 return 0;
}
function _rand48_advance($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $a = 0, $state = 0, $x0 = 0, $x1 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $state = sp + 16 | 0;
 $x0 = sp + 12 | 0;
 $x1 = sp + 8 | 0;
 $x2 = sp + 4 | 0;
 $a = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x0 >> 2] = HEAPU16[HEAP32[$state >> 2] >> 1];
 HEAP32[$x1 >> 2] = HEAPU16[(HEAP32[$state >> 2] | 0) + 2 >> 1];
 HEAP32[$x2 >> 2] = HEAPU16[(HEAP32[$state >> 2] | 0) + 4 >> 1];
 HEAP32[$a >> 2] = ((HEAP32[$x0 >> 2] | 0) * 58989 | 0) + 11;
 HEAP16[HEAP32[$state >> 2] >> 1] = HEAP32[$a >> 2];
 HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) >>> 16;
 HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (((HEAP32[$x1 >> 2] | 0) * 58989 | 0) + ((HEAP32[$x0 >> 2] | 0) * 57068 | 0));
 HEAP16[(HEAP32[$state >> 2] | 0) + 2 >> 1] = HEAP32[$a >> 2];
 HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) >>> 16;
 HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (((HEAP32[$x2 >> 2] | 0) * 58989 | 0) + ((HEAP32[$x1 >> 2] | 0) * 57068 | 0) + ((HEAP32[$x0 >> 2] | 0) * 5 | 0));
 HEAP16[(HEAP32[$state >> 2] | 0) + 4 >> 1] = HEAP32[$a >> 2];
 STACKTOP = sp;
 return;
}
function _schrage_mult756($a, $b, $m, $sqrtm) {
 $a = $a | 0;
 $b = $b | 0;
 $m = $m | 0;
 $sqrtm = $sqrtm | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0, $29 = 0, $3 = 0, $t = 0, $t0 = 0, $t1 = 0, $t2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $t0 = sp + 12 | 0;
 $t1 = sp + 8 | 0;
 $t2 = sp + 4 | 0;
 $t = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $b;
 HEAP32[$2 >> 2] = $m;
 HEAP32[$3 >> 2] = $sqrtm;
 HEAP32[$t0 >> 2] = _schrage757(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$t1 >> 2] = _schrage757(((HEAP32[$0 >> 2] | 0) >>> 0) / ((HEAP32[$3 >> 2] | 0) >>> 0) | 0, HEAP32[$t0 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$t2 >> 2] = _schrage757(((HEAP32[$0 >> 2] | 0) >>> 0) % ((HEAP32[$3 >> 2] | 0) >>> 0) | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$t >> 2] = (HEAP32[$t1 >> 2] | 0) + (HEAP32[$t2 >> 2] | 0);
 $26 = HEAP32[$t >> 2] | 0;
 if ((HEAP32[$t >> 2] | 0) >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  $29 = $26;
  STACKTOP = sp;
  return $29 | 0;
 }
 $29 = $26 - (HEAP32[$2 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $29 | 0;
}
function _cosh_m1_series($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 88 | 0;
 $y = sp + 72 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[$y >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 HEAPF64[sp + 64 >> 3] = .5;
 HEAPF64[sp + 56 >> 3] = .041666666666666664;
 HEAPF64[sp + 48 >> 3] = .001388888888888889;
 HEAPF64[sp + 40 >> 3] = 248015873015873.0e-19;
 HEAPF64[sp + 32 >> 3] = 2.755731922398589e-7;
 HEAPF64[sp + 24 >> 3] = 2.08767569878681e-9;
 HEAPF64[sp + 16 >> 3] = 1.1470745597729725e-11;
 HEAPF64[sp + 8 >> 3] = 4.779477332387385e-14;
 HEAPF64[sp >> 3] = 1.5619206968586225e-16;
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * 1.5619206968586225e-16 + 4.779477332387385e-14) + 1.1470745597729725e-11) + 2.08767569878681e-9) + 2.755731922398589e-7) + 248015873015873.0e-19) + .001388888888888889) + .041666666666666664) + .5);
 STACKTOP = sp;
 return 0;
}
function _ranf_advance($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $r = 0, $state = 0, $x0 = 0, $x1 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $state = sp + 16 | 0;
 $x0 = sp + 12 | 0;
 $x1 = sp + 8 | 0;
 $x2 = sp + 4 | 0;
 $r = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x0 >> 2] = HEAPU16[HEAP32[$state >> 2] >> 1];
 HEAP32[$x1 >> 2] = HEAPU16[(HEAP32[$state >> 2] | 0) + 2 >> 1];
 HEAP32[$x2 >> 2] = HEAPU16[(HEAP32[$state >> 2] | 0) + 4 >> 1];
 HEAP32[$r >> 2] = (HEAP32[$x0 >> 2] | 0) * 45429;
 HEAP16[HEAP32[$state >> 2] >> 1] = HEAP32[$r >> 2];
 HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) >>> 16;
 HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) + (((HEAP32[$x1 >> 2] | 0) * 45429 | 0) + ((HEAP32[$x0 >> 2] | 0) * 41703 | 0));
 HEAP16[(HEAP32[$state >> 2] | 0) + 2 >> 1] = HEAP32[$r >> 2];
 HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) >>> 16;
 HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) + (((HEAP32[$x2 >> 2] | 0) * 45429 | 0) + ((HEAP32[$x1 >> 2] | 0) * 41703 | 0) + ((HEAP32[$x0 >> 2] | 0) * 10357 | 0));
 HEAP16[(HEAP32[$state >> 2] | 0) + 4 >> 1] = HEAP32[$r >> 2];
 STACKTOP = sp;
 return;
}
function _gsl_ran_dir_3d($r, $x, $y, $z) {
 $r = $r | 0;
 $x = $x | 0;
 $y = $y | 0;
 $z = $z | 0;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $3 = 0, $36 = 0, $40 = 0, $7 = 0.0, $a = 0, $s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $s = sp + 8 | 0;
 $a = sp;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $x;
 HEAP32[$2 >> 2] = $y;
 HEAP32[$3 >> 2] = $z;
 do {
  $7 = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[HEAP32[$1 >> 2] >> 3] = $7;
  $12 = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $12;
  HEAPF64[$s >> 3] = +HEAPF64[HEAP32[$1 >> 2] >> 3] * +HEAPF64[HEAP32[$1 >> 2] >> 3] + +HEAPF64[HEAP32[$2 >> 2] >> 3] * +HEAPF64[HEAP32[$2 >> 2] >> 3];
 } while (+HEAPF64[$s >> 3] > 1.0);
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$s >> 3] * 2.0 + -1.0;
 HEAPF64[$a >> 3] = +Math_sqrt(+(1.0 - +HEAPF64[$s >> 3])) * 2.0;
 $36 = HEAP32[$1 >> 2] | 0;
 HEAPF64[$36 >> 3] = +HEAPF64[$36 >> 3] * +HEAPF64[$a >> 3];
 $40 = HEAP32[$2 >> 2] | 0;
 HEAPF64[$40 >> 3] = +HEAPF64[$40 >> 3] * +HEAPF64[$a >> 3];
 STACKTOP = sp;
 return;
}
function _schrage_mult($a, $b, $m, $sqrtm) {
 $a = $a | 0;
 $b = $b | 0;
 $m = $m | 0;
 $sqrtm = $sqrtm | 0;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0, $29 = 0, $3 = 0, $t = 0, $t0 = 0, $t1 = 0, $t2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $t0 = sp + 12 | 0;
 $t1 = sp + 8 | 0;
 $t2 = sp + 4 | 0;
 $t = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $b;
 HEAP32[$2 >> 2] = $m;
 HEAP32[$3 >> 2] = $sqrtm;
 HEAP32[$t0 >> 2] = _schrage(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$t1 >> 2] = _schrage(((HEAP32[$0 >> 2] | 0) >>> 0) / ((HEAP32[$3 >> 2] | 0) >>> 0) | 0, HEAP32[$t0 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$t2 >> 2] = _schrage(((HEAP32[$0 >> 2] | 0) >>> 0) % ((HEAP32[$3 >> 2] | 0) >>> 0) | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$t >> 2] = (HEAP32[$t1 >> 2] | 0) + (HEAP32[$t2 >> 2] | 0);
 $26 = HEAP32[$t >> 2] | 0;
 if ((HEAP32[$t >> 2] | 0) >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  $29 = $26;
  STACKTOP = sp;
  return $29 | 0;
 }
 $29 = $26 - (HEAP32[$2 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $29 | 0;
}
function _gsl_sf_temme_gamma($nu, $g_1pnu, $g_1mnu, $g1, $g2) {
 $nu = +$nu;
 $g_1pnu = $g_1pnu | 0;
 $g_1mnu = $g_1mnu | 0;
 $g1 = $g1 | 0;
 $g2 = $g2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $anu = 0, $r_g1 = 0, $r_g2 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 68 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 60 | 0;
 $4 = sp + 56 | 0;
 $anu = sp + 40 | 0;
 $x = sp + 32 | 0;
 $r_g1 = sp + 16 | 0;
 $r_g2 = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAP32[$1 >> 2] = $g_1pnu;
 HEAP32[$2 >> 2] = $g_1mnu;
 HEAP32[$3 >> 2] = $g1;
 HEAP32[$4 >> 2] = $g2;
 HEAPF64[$anu >> 3] = +Math_abs(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$x >> 3] = +HEAPF64[$anu >> 3] * 4.0 - 1.0;
 _cheb_eval_e203(19808, +HEAPF64[$x >> 3], $r_g1) | 0;
 _cheb_eval_e203(19664, +HEAPF64[$x >> 3], $r_g2) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$r_g1 >> 3];
 HEAPF64[HEAP32[$4 >> 2] >> 3] = +HEAPF64[$r_g2 >> 3];
 HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 / (+HEAPF64[$r_g2 >> 3] + +HEAPF64[$0 >> 3] * +HEAPF64[$r_g1 >> 3]);
 HEAPF64[HEAP32[$1 >> 2] >> 3] = 1.0 / (+HEAPF64[$r_g2 >> 3] - +HEAPF64[$0 >> 3] * +HEAPF64[$r_g1 >> 3]);
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_hyperg_U_int_e($a, $b, $x, $result) {
 $a = $a | 0;
 $b = $b | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $17 = 0, $2 = 0, $3 = 0, $re = 0, $stat_U = 0, $stat_c = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 40 | 0;
 $re = sp;
 $stat_U = sp + 36 | 0;
 $stat_c = sp + 32 | 0;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $b;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$re + 0 >> 2] = HEAP32[13046];
 HEAP32[$re + 4 >> 2] = HEAP32[13047];
 HEAP32[$re + 8 >> 2] = HEAP32[13048];
 HEAP32[$re + 12 >> 2] = HEAP32[13049];
 HEAP32[$re + 16 >> 2] = HEAP32[13050];
 HEAP32[$re + 20 >> 2] = HEAP32[13051];
 HEAP32[$stat_U >> 2] = _gsl_sf_hyperg_U_int_e10_e(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $re) | 0;
 HEAP32[$stat_c >> 2] = _gsl_sf_result_smash_e($re, HEAP32[$3 >> 2] | 0) | 0;
 if (HEAP32[$stat_c >> 2] | 0) {
  $17 = HEAP32[$stat_c >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  $17 = (HEAP32[$stat_U >> 2] | 0) != 0 ? HEAP32[$stat_U >> 2] | 0 : 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}
function _gauss_medium($x) {
 $x = +$x;
 var $0 = 0, $9 = 0.0, $absx = 0, $i = 0, $result = 0, $temp = 0, $xden = 0, $xnum = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $i = sp + 48 | 0;
 $temp = sp + 32 | 0;
 $result = sp + 24 | 0;
 $xnum = sp + 16 | 0;
 $xden = sp + 8 | 0;
 $absx = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$temp >> 3] = 0.0;
 HEAPF64[$result >> 3] = 0.0;
 HEAPF64[$absx >> 3] = +Math_abs(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$xnum >> 3] = +HEAPF64[55] * +HEAPF64[$absx >> 3];
 HEAPF64[$xden >> 3] = +HEAPF64[$absx >> 3];
 HEAP32[$i >> 2] = 0;
 while (1) {
  $9 = +HEAPF64[$xnum >> 3];
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 7) break;
  HEAPF64[$xnum >> 3] = ($9 + +HEAPF64[376 + (HEAP32[$i >> 2] << 3) >> 3]) * +HEAPF64[$absx >> 3];
  HEAPF64[$xden >> 3] = (+HEAPF64[$xden >> 3] + +HEAPF64[448 + (HEAP32[$i >> 2] << 3) >> 3]) * +HEAPF64[$absx >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$temp >> 3] = ($9 + +HEAPF64[54]) / (+HEAPF64[$xden >> 3] + +HEAPF64[63]);
 HEAPF64[$result >> 3] = +_get_del(+HEAPF64[$0 >> 3], +HEAPF64[$temp >> 3]);
 STACKTOP = sp;
 return +(+HEAPF64[$result >> 3]);
}
function _gsl_ran_bivariate_gaussian_pdf($x, $y, $sigma_x, $sigma_y, $rho) {
 $x = +$x;
 $y = +$y;
 $sigma_x = +$sigma_x;
 $sigma_y = +$sigma_y;
 $rho = +$rho;
 var $0 = 0, $1 = 0, $2 = 0, $22 = 0.0, $3 = 0, $4 = 0, $c = 0, $p = 0, $u = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 32 | 0;
 $u = sp + 24 | 0;
 $v = sp + 16 | 0;
 $c = sp + 8 | 0;
 $p = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $y;
 HEAPF64[$2 >> 3] = $sigma_x;
 HEAPF64[$3 >> 3] = $sigma_y;
 HEAPF64[$4 >> 3] = $rho;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$2 >> 3];
 HEAPF64[$v >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$3 >> 3];
 HEAPF64[$c >> 3] = 1.0 - +HEAPF64[$4 >> 3] * +HEAPF64[$4 >> 3];
 $22 = 1.0 / (+HEAPF64[$2 >> 3] * 6.283185307179586 * +HEAPF64[$3 >> 3] * +Math_sqrt(+(+HEAPF64[$c >> 3])));
 HEAPF64[$p >> 3] = $22 * +Math_exp(+(-(+HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] - +HEAPF64[$4 >> 3] * 2.0 * +HEAPF64[$u >> 3] * +HEAPF64[$v >> 3] + +HEAPF64[$v >> 3] * +HEAPF64[$v >> 3]) / (+HEAPF64[$c >> 3] * 2.0)));
 STACKTOP = sp;
 return +(+HEAPF64[$p >> 3]);
}
function _sinh_series($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 80 | 0;
 $y = sp + 64 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[$y >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 HEAPF64[sp + 56 >> 3] = .16666666666666666;
 HEAPF64[sp + 48 >> 3] = .008333333333333333;
 HEAPF64[sp + 40 >> 3] = .0001984126984126984;
 HEAPF64[sp + 32 >> 3] = 27557319223985893.0e-22;
 HEAPF64[sp + 24 >> 3] = 2.505210838544172e-8;
 HEAPF64[sp + 16 >> 3] = 1.6059043836821613e-10;
 HEAPF64[sp + 8 >> 3] = 7.647163731819816e-13;
 HEAPF64[sp >> 3] = 2.8114572543455206e-15;
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * (+HEAPF64[$y >> 3] * 2.8114572543455206e-15 + 7.647163731819816e-13) + 1.6059043836821613e-10) + 2.505210838544172e-8) + 27557319223985893.0e-22) + .0001984126984126984) + .008333333333333333) + .16666666666666666) + 1.0);
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_coulomb_CL_array($lam_min, $kmax, $eta, $cl) {
 $lam_min = +$lam_min;
 $kmax = $kmax | 0;
 $eta = +$eta;
 $cl = $cl | 0;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $23 = 0.0, $3 = 0, $L = 0, $cl_0 = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 44 | 0;
 $k = sp + 40 | 0;
 $cl_0 = sp + 8 | 0;
 $L = sp;
 HEAPF64[$0 >> 3] = $lam_min;
 HEAP32[$1 >> 2] = $kmax;
 HEAPF64[$2 >> 3] = $eta;
 HEAP32[$3 >> 2] = $cl;
 _gsl_sf_coulomb_CL_e(+HEAPF64[$0 >> 3], +HEAPF64[$2 >> 3], $cl_0) | 0;
 HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$cl_0 >> 3];
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[$L >> 3] = +HEAPF64[$0 >> 3] + +(HEAP32[$k >> 2] | 0);
  $19 = +HEAPF64[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - 1 << 3) >> 3];
  $23 = $19 * +_hypot(+(+HEAPF64[$L >> 3]), +(+HEAPF64[$2 >> 3]));
  HEAPF64[(HEAP32[$3 >> 2] | 0) + (HEAP32[$k >> 2] << 3) >> 3] = $23 / (+HEAPF64[$L >> 3] * (+HEAPF64[$L >> 3] * 2.0 + 1.0));
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return 0;
}
function _ran1_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $16 = 0, $h = 0, $j = 0, $state = 0, $t = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $state = sp + 16 | 0;
 $x = sp + 12 | 0;
 $h = sp + 8 | 0;
 $t = sp + 4 | 0;
 $j = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$h >> 2] = ((HEAP32[$x >> 2] | 0) >>> 0) / 127773 | 0;
 HEAP32[$t >> 2] = (((HEAP32[$x >> 2] | 0) - ((HEAP32[$h >> 2] | 0) * 127773 | 0) | 0) * 16807 | 0) - ((HEAP32[$h >> 2] | 0) * 2836 | 0);
 $16 = HEAP32[$t >> 2] | 0;
 if ((HEAP32[$t >> 2] | 0) < 0) HEAP32[HEAP32[$state >> 2] >> 2] = $16 + 2147483647; else HEAP32[HEAP32[$state >> 2] >> 2] = $16;
 HEAP32[$j >> 2] = ((HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) >>> 0) / 67108864 | 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$j >> 2] << 2) >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 STACKTOP = sp;
 return HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0;
}
function _gsl_sf_exp_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $19 = 0.0, $2 = 0, $22 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] > 709.782712893384) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(31008, 31024, 110, 16);
  HEAP32[$0 >> 2] = 16;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 if (+HEAPF64[$1 >> 3] < -708.3964185322641) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 2.2250738585072014e-308;
  _gsl_error(31032, 31024, 113, 15);
  HEAP32[$0 >> 2] = 15;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 } else {
  $14 = +Math_exp(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $14;
  $19 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $19;
  HEAP32[$0 >> 2] = 0;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 return 0;
}
function _gsl_cdf_beta_Qinv($Q, $a, $b) {
 $Q = +$Q;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $18 = 0.0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 do if (+HEAPF64[$1 >> 3] < 0.0 | +HEAPF64[$1 >> 3] > 1.0) {
  _gsl_error(104, 40, 194, 1);
  HEAPF64[$0 >> 3] = nan;
 } else {
  if (+HEAPF64[$2 >> 3] < 0.0) {
   _gsl_error(56, 40, 199, 1);
   HEAPF64[$0 >> 3] = nan;
   break;
  }
  if (+HEAPF64[$3 >> 3] < 0.0) {
   _gsl_error(64, 40, 204, 1);
   HEAPF64[$0 >> 3] = nan;
   break;
  }
  if (+HEAPF64[$1 >> 3] == 0.0) {
   HEAPF64[$0 >> 3] = 1.0;
   break;
  }
  if (+HEAPF64[$1 >> 3] == 1.0) {
   HEAPF64[$0 >> 3] = 0.0;
   break;
  }
  $18 = +HEAPF64[$1 >> 3];
  if (+HEAPF64[$1 >> 3] > .5) {
   HEAPF64[$0 >> 3] = +_gsl_cdf_beta_Pinv(1.0 - $18, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3]);
   break;
  } else {
   HEAPF64[$0 >> 3] = 1.0 - +_gsl_cdf_beta_Pinv($18, +HEAPF64[$3 >> 3], +HEAPF64[$2 >> 3]);
   break;
  }
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _gsl_sf_hyperg_U_e($a, $b, $x, $result) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $17 = 0, $2 = 0, $3 = 0, $re = 0, $stat_U = 0, $stat_c = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 56 | 0;
 $re = sp;
 $stat_U = sp + 52 | 0;
 $stat_c = sp + 48 | 0;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $b;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$re + 0 >> 2] = HEAP32[13052];
 HEAP32[$re + 4 >> 2] = HEAP32[13053];
 HEAP32[$re + 8 >> 2] = HEAP32[13054];
 HEAP32[$re + 12 >> 2] = HEAP32[13055];
 HEAP32[$re + 16 >> 2] = HEAP32[13056];
 HEAP32[$re + 20 >> 2] = HEAP32[13057];
 HEAP32[$stat_U >> 2] = _gsl_sf_hyperg_U_e10_e(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $re) | 0;
 HEAP32[$stat_c >> 2] = _gsl_sf_result_smash_e($re, HEAP32[$3 >> 2] | 0) | 0;
 if (HEAP32[$stat_c >> 2] | 0) {
  $17 = HEAP32[$stat_c >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  $17 = (HEAP32[$stat_U >> 2] | 0) != 0 ? HEAP32[$stat_U >> 2] | 0 : 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}
function _gsl_sf_doublefact_e($n, $result) {
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $27 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $result;
 $5 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 26) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[38872 + ($5 * 24 | 0) >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $27 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $27 | 0;
 }
 if ($5 >>> 0 <= 297) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[38872 + ((HEAP32[$1 >> 2] | 0) * 24 | 0) >> 3];
  $21 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $21;
  HEAP32[$0 >> 2] = 0;
  $27 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $27 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(38472, 38400, 1509, 16);
  HEAP32[$0 >> 2] = 16;
  $27 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $27 | 0;
 }
 return 0;
}
function _gsl_sf_fact_e($n, $result) {
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $27 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $result;
 $5 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 18) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[46024 + ($5 * 24 | 0) >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $27 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $27 | 0;
 }
 if ($5 >>> 0 <= 170) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[46024 + ((HEAP32[$1 >> 2] | 0) * 24 | 0) >> 3];
  $21 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $21;
  HEAP32[$0 >> 2] = 0;
  $27 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $27 | 0;
 } else {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = inf;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = inf;
  _gsl_error(38472, 38400, 1489, 16);
  HEAP32[$0 >> 2] = 16;
  $27 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $27 | 0;
 }
 return 0;
}
function _gsl_sf_coulomb_CL_e($lam, $eta, $result) {
 $lam = +$lam;
 $eta = +$eta;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $25 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = sp + 16 | 0;
 HEAPF64[$1 >> 3] = $lam;
 HEAPF64[$2 >> 3] = $eta;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= -1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(26224, 26240, 110, 1);
  HEAP32[$0 >> 2] = 1;
  $25 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 if (+Math_abs(+(+HEAPF64[$1 >> 3])) < 2.220446049250313e-16) {
  $14 = +Math_sqrt(+(+_C0sq(+HEAPF64[$2 >> 3])));
  HEAPF64[HEAP32[$3 >> 2] >> 3] = $14;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = +HEAPF64[HEAP32[$3 >> 2] >> 3] * 4.440892098500626e-16;
  HEAP32[$0 >> 2] = 0;
  $25 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 } else {
  HEAP32[$0 >> 2] = _CLeta(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $25 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0;
}
function _zuf_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $21 = 0, $33 = 0, $m = 0, $n = 0, $state = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $state = sp + 12 | 0;
 $n = sp + 8 | 0;
 $m = sp + 4 | 0;
 $t = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$n >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$m >> 2] = ((HEAP32[$n >> 2] | 0) - 273 + 607 | 0) % 607 | 0;
 HEAP32[$t >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$n >> 2] << 2) >> 2] | 0) + (HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$m >> 2] << 2) >> 2] | 0);
 while (1) {
  $21 = HEAP32[$t >> 2] | 0;
  if ((HEAP32[$t >> 2] | 0) >>> 0 <= 16777216) break;
  HEAP32[$t >> 2] = $21 - 16777216;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$n >> 2] << 2) >> 2] = $21;
 if ((HEAP32[$n >> 2] | 0) == 606) {
  HEAP32[HEAP32[$state >> 2] >> 2] = 0;
  $33 = HEAP32[$t >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 } else {
  HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  $33 = HEAP32[$t >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 return 0;
}
function _legendre_Pmm($m, $x) {
 $m = $m | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $26 = 0.0, $7 = 0.0, $fact_coeff = 0, $i = 0, $p_mm = 0, $root_factor = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 24 | 0;
 $p_mm = sp + 16 | 0;
 $root_factor = sp + 8 | 0;
 $fact_coeff = sp;
 $i = sp + 40 | 0;
 HEAP32[$1 >> 2] = $m;
 HEAPF64[$2 >> 3] = $x;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAPF64[$0 >> 3] = 1.0;
  $26 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$26;
 }
 HEAPF64[$p_mm >> 3] = 1.0;
 $7 = +Math_sqrt(+(1.0 - +HEAPF64[$2 >> 3]));
 HEAPF64[$root_factor >> 3] = $7 * +Math_sqrt(+(+HEAPF64[$2 >> 3] + 1.0));
 HEAPF64[$fact_coeff >> 3] = 1.0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > (HEAP32[$1 >> 2] | 0)) break;
  HEAPF64[$p_mm >> 3] = +HEAPF64[$p_mm >> 3] * -+HEAPF64[$fact_coeff >> 3] * +HEAPF64[$root_factor >> 3];
  HEAPF64[$fact_coeff >> 3] = +HEAPF64[$fact_coeff >> 3] + 2.0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$0 >> 3] = +HEAPF64[$p_mm >> 3];
 $26 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$26;
}
function _copy($dest, $i, $src, $j, $size) {
 $dest = $dest | 0;
 $i = $i | 0;
 $src = $src | 0;
 $j = $j | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $a = 0, $b = 0, $s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $a = sp + 8 | 0;
 $b = sp + 4 | 0;
 $s = sp;
 HEAP32[$0 >> 2] = $dest;
 HEAP32[$1 >> 2] = $i;
 HEAP32[$2 >> 2] = $src;
 HEAP32[$3 >> 2] = $j;
 HEAP32[$4 >> 2] = $size;
 $7 = Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
 HEAP32[$a >> 2] = (HEAP32[$0 >> 2] | 0) + $7;
 $12 = Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[$b >> 2] = (HEAP32[$2 >> 2] | 0) + $12;
 HEAP32[$s >> 2] = HEAP32[$4 >> 2];
 do {
  $16 = HEAP32[$b >> 2] | 0;
  HEAP32[$b >> 2] = $16 + 1;
  $18 = HEAP8[$16 >> 0] | 0;
  $19 = HEAP32[$a >> 2] | 0;
  HEAP32[$a >> 2] = $19 + 1;
  HEAP8[$19 >> 0] = $18;
  $22 = (HEAP32[$s >> 2] | 0) + -1 | 0;
  HEAP32[$s >> 2] = $22;
 } while ($22 >>> 0 > 0);
 STACKTOP = sp;
 return;
}
function _gsl_ran_weibull_pdf($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $16 = 0.0, $2 = 0, $27 = 0.0, $3 = 0, $9 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $p = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 do if (+HEAPF64[$1 >> 3] < 0.0) HEAPF64[$0 >> 3] = 0.0; else {
  $9 = +HEAPF64[$3 >> 3] == 1.0;
  if (+HEAPF64[$1 >> 3] == 0.0) if ($9) {
   HEAPF64[$0 >> 3] = 1.0 / +HEAPF64[$2 >> 3];
   break;
  } else {
   HEAPF64[$0 >> 3] = 0.0;
   break;
  } else if ($9) {
   $16 = +Math_exp(+(-+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3]));
   HEAPF64[$0 >> 3] = $16 / +HEAPF64[$2 >> 3];
   break;
  } else {
   $27 = -+Math_pow(+(+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3]), +(+HEAPF64[$3 >> 3]));
   HEAPF64[$p >> 3] = +HEAPF64[$3 >> 3] / +HEAPF64[$2 >> 3] * +Math_exp(+($27 + (+HEAPF64[$3 >> 3] - 1.0) * +Math_log(+(+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3]))));
   HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
   break;
  }
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _hyperg_1F1_1_int($b, $x, $result) {
 $b = $b | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$1 >> 2] = $b;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 do if ((HEAP32[$1 >> 2] | 0) < 1) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(51664, 51680, 322, 1);
  HEAP32[$0 >> 2] = 1;
 } else {
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAP32[$0 >> 2] = _gsl_sf_exp_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   HEAP32[$0 >> 2] = _gsl_sf_exprel_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
  if ((HEAP32[$1 >> 2] | 0) == 3) {
   HEAP32[$0 >> 2] = _gsl_sf_exprel_2_e(+HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  } else {
   HEAP32[$0 >> 2] = _gsl_sf_exprel_n_e((HEAP32[$1 >> 2] | 0) - 1 | 0, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}
function _gsl_ran_gaussian_tail_pdf($x, $a, $sigma) {
 $x = +$x;
 $a = +$a;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $32 = 0.0, $N = 0, $f = 0, $p = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $N = sp + 24 | 0;
 $p = sp + 16 | 0;
 $u = sp + 8 | 0;
 $f = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $sigma;
 if (+HEAPF64[$1 >> 3] < +HEAPF64[$2 >> 3]) {
  HEAPF64[$0 >> 3] = 0.0;
  $32 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$32;
 } else {
  HEAPF64[$u >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$3 >> 3];
  $11 = +Math_sqrt(2.0);
  HEAPF64[$f >> 3] = +_gsl_sf_erfc(+HEAPF64[$2 >> 3] / ($11 * +HEAPF64[$3 >> 3]));
  HEAPF64[$N >> 3] = +HEAPF64[$f >> 3] * .5;
  $20 = +HEAPF64[$N >> 3] * +Math_sqrt(6.283185307179586);
  HEAPF64[$p >> 3] = 1.0 / ($20 * +HEAPF64[$3 >> 3]) * +Math_exp(+(-+HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] / 2.0));
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $32 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$32;
 }
 return 0.0;
}
function _gsl_sf_erf_Z_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $17 = 0.0, $2 = 0, $23 = 0.0, $25 = 0, $32 = 0, $ex2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 $ex2 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$ex2 >> 3] = +Math_exp(+(-+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] / 2.0));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$ex2 >> 3] / 2.5066282746310007;
 $17 = +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $17;
 $23 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 $25 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$25 >> 3] = +HEAPF64[$25 >> 3] + $23;
 if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(30072, 30088, 384, 15);
  HEAP32[$0 >> 2] = 15;
  $32 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $32 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $32 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $32 | 0;
 }
 return 0;
}
function _gsl_ran_discrete($r, $g) {
 $r = $r | 0;
 $g = $g | 0;
 var $0 = 0, $1 = 0, $2 = 0, $23 = 0, $29 = 0, $c = 0, $f = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $c = sp + 16 | 0;
 $u = sp + 8 | 0;
 $f = sp;
 HEAP32[$1 >> 2] = $r;
 HEAP32[$2 >> 2] = $g;
 HEAP32[$c >> 2] = 0;
 HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
 HEAP32[$c >> 2] = ~~(+HEAPF64[$u >> 3] * +((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0)) >>> 0;
 HEAPF64[$f >> 3] = +HEAPF64[(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$c >> 2] << 3) >> 3];
 if (+HEAPF64[$f >> 3] == 1.0) {
  HEAP32[$0 >> 2] = HEAP32[$c >> 2];
  $29 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $29 | 0;
 }
 $23 = HEAP32[$c >> 2] | 0;
 if (+HEAPF64[$u >> 3] < +HEAPF64[$f >> 3]) {
  HEAP32[$0 >> 2] = $23;
  $29 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $29 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) + ($23 << 2) >> 2];
  $29 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $29 | 0;
 }
 return 0;
}
function _gsl_rng_clone($q) {
 $q = $q | 0;
 var $0 = 0, $1 = 0, $31 = 0, $9 = 0, $r = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $r = sp;
 HEAP32[$1 >> 2] = $q;
 HEAP32[$r >> 2] = _malloc(8) | 0;
 if (!(HEAP32[$r >> 2] | 0)) {
  _gsl_error(80192, 80232, 77, 8);
  HEAP32[$0 >> 2] = 0;
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 $9 = _malloc(HEAP32[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 12 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$r >> 2] | 0) + 4 >> 2] = $9;
 if (!(HEAP32[(HEAP32[$r >> 2] | 0) + 4 >> 2] | 0)) {
  _free(HEAP32[$r >> 2] | 0);
  _gsl_error(80240, 80232, 87, 8);
  HEAP32[$0 >> 2] = 0;
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 } else {
  HEAP32[HEAP32[$r >> 2] >> 2] = HEAP32[HEAP32[$1 >> 2] >> 2];
  _memcpy(HEAP32[(HEAP32[$r >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 12 >> 2] | 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$r >> 2];
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 return 0;
}
function _mt_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $21 = 0, $29 = 0, $9 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 4357;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 HEAP32[$i >> 2] = 1;
 while (1) {
  $9 = HEAP32[$i >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= 624) break;
  $21 = Math_imul(1812433253, HEAP32[(HEAP32[$state >> 2] | 0) + ($9 - 1 << 2) >> 2] ^ (HEAP32[(HEAP32[$state >> 2] | 0) + ((HEAP32[$i >> 2] | 0) - 1 << 2) >> 2] | 0) >>> 30) | 0;
  HEAP32[(HEAP32[$state >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $21 + (HEAP32[$i >> 2] | 0);
  $29 = (HEAP32[$state >> 2] | 0) + (HEAP32[$i >> 2] << 2) | 0;
  HEAP32[$29 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 2496 >> 2] = $9;
 STACKTOP = sp;
 return;
}
function _gsl_sf_bessel_Kn_array($nmin, $nmax, $x, $result_array) {
 $nmin = $nmin | 0;
 $nmax = $nmax | 0;
 $x = +$x;
 $result_array = $result_array | 0;
 var $0 = 0, $1 = 0, $2 = 0, $20 = 0, $3 = 0, $ex = 0, $i = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 24 | 0;
 $status = sp + 20 | 0;
 $ex = sp;
 $i = sp + 16 | 0;
 HEAP32[$0 >> 2] = $nmin;
 HEAP32[$1 >> 2] = $nmax;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result_array;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Kn_scaled_array(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$2 >> 3]);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > ((HEAP32[$1 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0)) break;
  $20 = (HEAP32[$3 >> 2] | 0) + (HEAP32[$i >> 2] << 3) | 0;
  HEAPF64[$20 >> 3] = +HEAPF64[$20 >> 3] * +HEAPF64[$ex >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$status >> 2] | 0;
}
function _gsl_cdf_fdist_Q($x, $nu1, $nu2) {
 $x = +$x;
 $nu1 = +$nu1;
 $nu2 = +$nu2;
 var $0 = 0, $1 = 0, $2 = 0, $31 = 0.0, $Q = 0, $r = 0, $u = 0, $u1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $Q = sp + 24 | 0;
 $r = sp + 16 | 0;
 $u = sp + 8 | 0;
 $u1 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $nu1;
 HEAPF64[$2 >> 3] = $nu2;
 HEAPF64[$r >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$1 >> 3];
 if (+HEAPF64[$0 >> 3] < +HEAPF64[$r >> 3]) {
  HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / (+HEAPF64[$r >> 3] + +HEAPF64[$0 >> 3]);
  HEAPF64[$Q >> 3] = +_beta_inc_AXPY8(-1.0, 1.0, +HEAPF64[$1 >> 3] / 2.0, +HEAPF64[$2 >> 3] / 2.0, +HEAPF64[$u >> 3]);
  $31 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$31;
 } else {
  HEAPF64[$u1 >> 3] = +HEAPF64[$r >> 3] / (+HEAPF64[$r >> 3] + +HEAPF64[$0 >> 3]);
  HEAPF64[$Q >> 3] = +_beta_inc_AXPY8(1.0, 0.0, +HEAPF64[$2 >> 3] / 2.0, +HEAPF64[$1 >> 3] / 2.0, +HEAPF64[$u1 >> 3]);
  $31 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$31;
 }
 return 0.0;
}
function _gsl_cdf_fdist_P($x, $nu1, $nu2) {
 $x = +$x;
 $nu1 = +$nu1;
 $nu2 = +$nu2;
 var $0 = 0, $1 = 0, $2 = 0, $31 = 0.0, $P = 0, $r = 0, $u = 0, $u1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $P = sp + 24 | 0;
 $r = sp + 16 | 0;
 $u = sp + 8 | 0;
 $u1 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $nu1;
 HEAPF64[$2 >> 3] = $nu2;
 HEAPF64[$r >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$1 >> 3];
 if (+HEAPF64[$0 >> 3] < +HEAPF64[$r >> 3]) {
  HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / (+HEAPF64[$r >> 3] + +HEAPF64[$0 >> 3]);
  HEAPF64[$P >> 3] = +_beta_inc_AXPY8(1.0, 0.0, +HEAPF64[$1 >> 3] / 2.0, +HEAPF64[$2 >> 3] / 2.0, +HEAPF64[$u >> 3]);
  $31 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$31;
 } else {
  HEAPF64[$u1 >> 3] = +HEAPF64[$r >> 3] / (+HEAPF64[$r >> 3] + +HEAPF64[$0 >> 3]);
  HEAPF64[$P >> 3] = +_beta_inc_AXPY8(-1.0, 1.0, +HEAPF64[$2 >> 3] / 2.0, +HEAPF64[$1 >> 3] / 2.0, +HEAPF64[$u1 >> 3]);
  $31 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$31;
 }
 return 0.0;
}
function _gsl_ran_lognormal($r, $zeta, $sigma) {
 $r = $r | 0;
 $zeta = +$zeta;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $2 = 0, $25 = 0.0, $normal = 0, $r2 = 0, $u = 0, $v = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $u = sp + 32 | 0;
 $v = sp + 24 | 0;
 $r2 = sp + 16 | 0;
 $normal = sp + 8 | 0;
 $z = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $zeta;
 HEAPF64[$2 >> 3] = $sigma;
 do {
  HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[$v >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[$r2 >> 3] = +HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] + +HEAPF64[$v >> 3] * +HEAPF64[$v >> 3];
 } while (+HEAPF64[$r2 >> 3] > 1.0 | +HEAPF64[$r2 >> 3] == 0.0);
 $25 = +Math_log(+(+HEAPF64[$r2 >> 3])) * -2.0;
 HEAPF64[$normal >> 3] = +HEAPF64[$u >> 3] * +Math_sqrt(+($25 / +HEAPF64[$r2 >> 3]));
 HEAPF64[$z >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3] * +HEAPF64[$normal >> 3] + +HEAPF64[$1 >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$z >> 3]);
}
function _olver_Bsum($nu, $z, $abs_zeta) {
 $nu = +$nu;
 $z = +$z;
 $abs_zeta = +$abs_zeta;
 var $0 = 0, $1 = 0, $2 = 0, $B0 = 0, $B1 = 0, $B2 = 0, $B3 = 0, $nu2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $nu2 = sp + 32 | 0;
 $B0 = sp + 24 | 0;
 $B1 = sp + 16 | 0;
 $B2 = sp + 8 | 0;
 $B3 = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $z;
 HEAPF64[$2 >> 3] = $abs_zeta;
 HEAPF64[$nu2 >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 HEAPF64[$B0 >> 3] = +_olver_B0(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3]);
 HEAPF64[$B1 >> 3] = +_olver_B1(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3]);
 HEAPF64[$B2 >> 3] = +_olver_B2(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3]);
 HEAPF64[$B3 >> 3] = +_olver_B3(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3]);
 STACKTOP = sp;
 return +(+HEAPF64[$B0 >> 3] + +HEAPF64[$B1 >> 3] / +HEAPF64[$nu2 >> 3] + +HEAPF64[$B2 >> 3] / (+HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3]) + +HEAPF64[$B3 >> 3] / (+HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3] * +HEAPF64[$nu2 >> 3]));
}
function _erfseries($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $32 = 0.0, $coef = 0, $del = 0, $e = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $coef = sp + 16 | 0;
 $e = sp + 8 | 0;
 $del = sp;
 $k = sp + 32 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[$coef >> 3] = +HEAPF64[$0 >> 3];
 HEAPF64[$e >> 3] = +HEAPF64[$coef >> 3];
 HEAP32[$k >> 2] = 1;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 30) break;
  HEAPF64[$coef >> 3] = +HEAPF64[$coef >> 3] * (-+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] / +(HEAP32[$k >> 2] | 0));
  HEAPF64[$del >> 3] = +HEAPF64[$coef >> 3] / (+(HEAP32[$k >> 2] | 0) * 2.0 + 1.0);
  HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] + +HEAPF64[$del >> 3];
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$e >> 3] * 1.1283791670955126;
 $32 = (+Math_abs(+(+HEAPF64[$del >> 3])) + 2.220446049250313e-16) * 1.1283791670955126;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $32;
 STACKTOP = sp;
 return 0;
}
function _gsl_cdf_geometric_P($k, $p) {
 $k = $k | 0;
 $p = +$p;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $27 = 0.0, $P = 0, $a = 0, $q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $P = sp + 16 | 0;
 $a = sp + 8 | 0;
 $q = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 if (+HEAPF64[$2 >> 3] > 1.0 | +HEAPF64[$2 >> 3] < 0.0) {
  _gsl_error(968, 984, 39, 1);
  HEAPF64[$0 >> 3] = nan;
  $27 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$27;
 }
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 1) {
  HEAPF64[$0 >> 3] = 0.0;
  $27 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$27;
 }
 HEAPF64[$q >> 3] = 1.0 - +HEAPF64[$2 >> 3];
 HEAPF64[$a >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0);
 if (+HEAPF64[$2 >> 3] < .5) {
  $15 = +HEAPF64[$a >> 3];
  HEAPF64[$P >> 3] = -+_expm1(+($15 * +_log1p(+-+HEAPF64[$2 >> 3])));
 } else HEAPF64[$P >> 3] = 1.0 - +Math_pow(+(+HEAPF64[$q >> 3]), +(+HEAPF64[$a >> 3]));
 HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
 $27 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$27;
}
function _glibc2_initialize($x, $n, $s) {
 $x = $x | 0;
 $n = $n | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $22 = 0, $h = 0, $i = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $i = sp + 8 | 0;
 $h = sp + 4 | 0;
 $t = sp;
 HEAP32[$0 >> 2] = $x;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) == 0 ? 1 : $s;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$2 >> 2];
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
  HEAP32[$h >> 2] = ((HEAP32[$2 >> 2] | 0) >>> 0) / 127773 | 0;
  HEAP32[$t >> 2] = (((HEAP32[$2 >> 2] | 0) - ((HEAP32[$h >> 2] | 0) * 127773 | 0) | 0) * 16807 | 0) - ((HEAP32[$h >> 2] | 0) * 2836 | 0);
  $22 = HEAP32[$t >> 2] | 0;
  if ((HEAP32[$t >> 2] | 0) < 0) HEAP32[$2 >> 2] = $22 + 2147483647; else HEAP32[$2 >> 2] = $22;
  HEAP32[(HEAP32[$0 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$2 >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gsl_cdf_negative_binomial_Q($k, $p, $n) {
 $k = $k | 0;
 $p = +$p;
 $n = +$n;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $3 = 0, $Q = 0, $a = 0, $b = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $Q = sp + 16 | 0;
 $a = sp + 8 | 0;
 $b = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 HEAPF64[$3 >> 3] = $n;
 if (+HEAPF64[$2 >> 3] > 1.0 | +HEAPF64[$2 >> 3] < 0.0) {
  _gsl_error(1056, 1072, 70, 1);
  HEAPF64[$0 >> 3] = nan;
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 if (+HEAPF64[$3 >> 3] < 0.0) {
  _gsl_error(1088, 1072, 75, 1);
  HEAPF64[$0 >> 3] = nan;
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 } else {
  HEAPF64[$a >> 3] = +HEAPF64[$3 >> 3];
  HEAPF64[$b >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0) + 1.0;
  HEAPF64[$Q >> 3] = +_gsl_cdf_beta_Q(+HEAPF64[$2 >> 3], +HEAPF64[$a >> 3], +HEAPF64[$b >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 return 0.0;
}
function _gsl_cdf_negative_binomial_P($k, $p, $n) {
 $k = $k | 0;
 $p = +$p;
 $n = +$n;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $3 = 0, $P = 0, $a = 0, $b = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $P = sp + 16 | 0;
 $a = sp + 8 | 0;
 $b = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 HEAPF64[$3 >> 3] = $n;
 if (+HEAPF64[$2 >> 3] > 1.0 | +HEAPF64[$2 >> 3] < 0.0) {
  _gsl_error(1056, 1072, 42, 1);
  HEAPF64[$0 >> 3] = nan;
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 if (+HEAPF64[$3 >> 3] < 0.0) {
  _gsl_error(1088, 1072, 47, 1);
  HEAPF64[$0 >> 3] = nan;
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 } else {
  HEAPF64[$a >> 3] = +HEAPF64[$3 >> 3];
  HEAPF64[$b >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0) + 1.0;
  HEAPF64[$P >> 3] = +_gsl_cdf_beta_P(+HEAPF64[$2 >> 3], +HEAPF64[$a >> 3], +HEAPF64[$b >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 return 0.0;
}
function _gsl_sf_bessel_k0_scaled_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $22 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(16032, 16048, 89, 1);
  HEAP32[$0 >> 2] = 1;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = 3.141592653589793 / (+HEAPF64[$1 >> 3] * 2.0);
 $15 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $15;
 if (+Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) < 2.2250738585072014e-308) {
  _gsl_error(16064, 16048, 94, 15);
  HEAP32[$0 >> 2] = 15;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 return 0;
}
function _gsl_cdf_geometric_Q($k, $p) {
 $k = $k | 0;
 $p = +$p;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $25 = 0.0, $Q = 0, $a = 0, $q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $Q = sp + 16 | 0;
 $a = sp + 8 | 0;
 $q = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 if (+HEAPF64[$2 >> 3] > 1.0 | +HEAPF64[$2 >> 3] < 0.0) {
  _gsl_error(968, 984, 69, 1);
  HEAPF64[$0 >> 3] = nan;
  $25 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$25;
 }
 if ((HEAP32[$1 >> 2] | 0) >>> 0 < 1) {
  HEAPF64[$0 >> 3] = 1.0;
  $25 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$25;
 }
 HEAPF64[$q >> 3] = 1.0 - +HEAPF64[$2 >> 3];
 HEAPF64[$a >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0);
 if (+HEAPF64[$2 >> 3] < .5) {
  $15 = +HEAPF64[$a >> 3];
  HEAPF64[$Q >> 3] = +Math_exp(+($15 * +_log1p(+-+HEAPF64[$2 >> 3])));
 } else HEAPF64[$Q >> 3] = +Math_pow(+(+HEAPF64[$q >> 3]), +(+HEAPF64[$a >> 3]));
 HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
 $25 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$25;
}
function _tt_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $5 = 0, $i = 0, $state = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = HEAP32[$state >> 2] | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  dest = $5 + 0 | 0;
  src = 80624 | 0;
  stop = dest + 104 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 25) break;
  HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) - 1 << 2) >> 2] | 0) * 69069;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _r250_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $31 = 0, $6 = 0, $i = 0, $j = 0, $k = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $state = sp + 12 | 0;
 $k = sp + 8 | 0;
 $j = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$i >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 $6 = HEAP32[$i >> 2] | 0;
 if ((HEAP32[$i >> 2] | 0) >= 147) HEAP32[$j >> 2] = $6 - 147; else HEAP32[$j >> 2] = $6 + 103;
 HEAP32[$k >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] ^ HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$j >> 2] << 2) >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$k >> 2];
 if ((HEAP32[$i >> 2] | 0) >= 249) {
  HEAP32[HEAP32[$state >> 2] >> 2] = 0;
  $31 = HEAP32[$k >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 } else {
  HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  $31 = HEAP32[$k >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_asymp_thetanu_corr_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $r = 0, $r2 = 0, $term1 = 0, $term2 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 56 | 0;
 $r = sp + 32 | 0;
 $r2 = sp + 24 | 0;
 $x2 = sp + 16 | 0;
 $term1 = sp + 8 | 0;
 $term2 = sp;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$r >> 3] = +HEAPF64[$0 >> 3] * 2.0 / +HEAPF64[$1 >> 3];
 HEAPF64[$r2 >> 3] = +HEAPF64[$r >> 3] * +HEAPF64[$r >> 3];
 HEAPF64[$x2 >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3];
 HEAPF64[$term1 >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$r2 >> 3] - 1.0 / +HEAPF64[$x2 >> 3]) / 8.0;
 HEAPF64[$term2 >> 3] = +HEAPF64[$1 >> 3] * (+HEAPF64[$r2 >> 3] - 1.0 / +HEAPF64[$x2 >> 3]) * (+HEAPF64[$r2 >> 3] - 25.0 / +HEAPF64[$x2 >> 3]) / 384.0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$term1 >> 3] + -.7853981633974483 + +HEAPF64[$term2 >> 3];
 STACKTOP = sp;
 return 0;
}
function _clenshaw($c, $N, $u) {
 $c = $c | 0;
 $N = $N | 0;
 $u = +$u;
 var $0 = 0, $1 = 0, $2 = 0, $B_n = 0, $B_nm1 = 0, $B_np1 = 0, $n = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 24 | 0;
 $B_np1 = sp + 16 | 0;
 $B_n = sp + 8 | 0;
 $B_nm1 = sp;
 $n = sp + 32 | 0;
 HEAP32[$0 >> 2] = $c;
 HEAP32[$1 >> 2] = $N;
 HEAPF64[$2 >> 3] = $u;
 HEAPF64[$B_np1 >> 3] = 0.0;
 HEAPF64[$B_n >> 3] = +HEAPF64[(HEAP32[$0 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3];
 HEAP32[$n >> 2] = HEAP32[$1 >> 2];
 while (1) {
  if ((HEAP32[$n >> 2] | 0) <= 0) break;
  HEAPF64[$B_nm1 >> 3] = (+HEAPF64[$2 >> 3] * 2.0 - 1.0) * 2.0 * +HEAPF64[$B_n >> 3] - +HEAPF64[$B_np1 >> 3] + +HEAPF64[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$n >> 2] | 0) - 1 << 3) >> 3];
  HEAPF64[$B_np1 >> 3] = +HEAPF64[$B_n >> 3];
  HEAPF64[$B_n >> 3] = +HEAPF64[$B_nm1 >> 3];
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + -1;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$B_n >> 3] - (+HEAPF64[$2 >> 3] * 2.0 - 1.0) * +HEAPF64[$B_np1 >> 3]);
}
function _gauss_small($x) {
 $x = +$x;
 var $0 = 0, $i = 0, $result = 0, $xden = 0, $xnum = 0, $xsq = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $i = sp + 40 | 0;
 $result = sp + 24 | 0;
 $xsq = sp + 16 | 0;
 $xnum = sp + 8 | 0;
 $xden = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$result >> 3] = 0.0;
 HEAPF64[$xsq >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 HEAPF64[$xnum >> 3] = +HEAPF64[68] * +HEAPF64[$xsq >> 3];
 HEAPF64[$xden >> 3] = +HEAPF64[$xsq >> 3];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 3) break;
  HEAPF64[$xnum >> 3] = (+HEAPF64[$xnum >> 3] + +HEAPF64[512 + (HEAP32[$i >> 2] << 3) >> 3]) * +HEAPF64[$xsq >> 3];
  HEAPF64[$xden >> 3] = (+HEAPF64[$xden >> 3] + +HEAPF64[552 + (HEAP32[$i >> 2] << 3) >> 3]) * +HEAPF64[$xsq >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$result >> 3] = +HEAPF64[$0 >> 3] * (+HEAPF64[$xnum >> 3] + +HEAPF64[67]) / (+HEAPF64[$xden >> 3] + +HEAPF64[72]);
 STACKTOP = sp;
 return +(+HEAPF64[$result >> 3]);
}
function _slatec_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $state = 0, $y0 = 0, $y1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $y0 = sp + 8 | 0;
 $y1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$y0 >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] | 0) * 1029;
 HEAP32[$y1 >> 2] = ((HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) * 1536 | 0) + (((HEAP32[HEAP32[$state >> 2] >> 2] | 0) - (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) | 0) * 507 | 0) + (HEAP32[$y0 >> 2] | 0);
 HEAP32[$y0 >> 2] = (HEAP32[$y0 >> 2] | 0) + 1731;
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[$y0 >> 2] | 0) % 2048 | 0;
 HEAP32[$y1 >> 2] = (HEAP32[$y1 >> 2] | 0) + (((HEAP32[$y0 >> 2] | 0) - (HEAP32[HEAP32[$state >> 2] >> 2] | 0) | 0) / 2048 | 0);
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = (HEAP32[$y1 >> 2] | 0) % 2048 | 0;
 STACKTOP = sp;
 return (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] << 11) + (HEAP32[HEAP32[$state >> 2] >> 2] | 0) | 0;
}
function _gsl_sf_erf_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $21 = 0, $24 = 0, $5 = 0, $6 = 0.0, $result_erfc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 24 | 0;
 $result_erfc = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $5 = +Math_abs(+(+HEAPF64[$1 >> 3])) < 1.0;
 $6 = +HEAPF64[$1 >> 3];
 if ($5) {
  HEAP32[$0 >> 2] = _erfseries($6, HEAP32[$2 >> 2] | 0) | 0;
  $24 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $24 | 0;
 } else {
  _gsl_sf_erfc_e($6, $result_erfc) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = 1.0 - +HEAPF64[$result_erfc >> 3];
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_erfc + 8 >> 3];
  $19 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  $21 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAPF64[$21 >> 3] = +HEAPF64[$21 >> 3] + $19;
  HEAP32[$0 >> 2] = 0;
  $24 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $24 | 0;
 }
 return 0;
}
function _gsl_sf_ellint_RJ($x, $y, $z, $p, $mode) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $p = +$p;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 60 | 0;
 $result = sp;
 $status = sp + 56 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAPF64[$3 >> 3] = $z;
 HEAPF64[$4 >> 3] = $p;
 HEAP32[$5 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_RJ_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], HEAP32[$5 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29992, 29392, 650, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 return 0.0;
}
function _gsl_cdf_binomial_Q($k, $p, $n) {
 $k = $k | 0;
 $p = +$p;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $3 = 0, $Q = 0, $a = 0, $b = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 40 | 0;
 $Q = sp + 16 | 0;
 $a = sp + 8 | 0;
 $b = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 HEAP32[$3 >> 2] = $n;
 if (+HEAPF64[$2 >> 3] > 1.0 | +HEAPF64[$2 >> 3] < 0.0) {
  _gsl_error(144, 160, 93, 1);
  HEAPF64[$0 >> 3] = nan;
  $24 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$24;
 }
 if ((HEAP32[$1 >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) HEAPF64[$Q >> 3] = 0.0; else {
  HEAPF64[$a >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0) + 1.0;
  HEAPF64[$b >> 3] = +((HEAP32[$3 >> 2] | 0) >>> 0) - +((HEAP32[$1 >> 2] | 0) >>> 0);
  HEAPF64[$Q >> 3] = +_gsl_cdf_beta_P(+HEAPF64[$2 >> 3], +HEAPF64[$a >> 3], +HEAPF64[$b >> 3]);
 }
 HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
 $24 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$24;
}
function _gsl_cdf_binomial_P($k, $p, $n) {
 $k = $k | 0;
 $p = +$p;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $3 = 0, $P = 0, $a = 0, $b = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 40 | 0;
 $P = sp + 16 | 0;
 $a = sp + 8 | 0;
 $b = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 HEAP32[$3 >> 2] = $n;
 if (+HEAPF64[$2 >> 3] > 1.0 | +HEAPF64[$2 >> 3] < 0.0) {
  _gsl_error(144, 160, 67, 1);
  HEAPF64[$0 >> 3] = nan;
  $24 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$24;
 }
 if ((HEAP32[$1 >> 2] | 0) >>> 0 >= (HEAP32[$3 >> 2] | 0) >>> 0) HEAPF64[$P >> 3] = 1.0; else {
  HEAPF64[$a >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0) + 1.0;
  HEAPF64[$b >> 3] = +((HEAP32[$3 >> 2] | 0) >>> 0) - +((HEAP32[$1 >> 2] | 0) >>> 0);
  HEAPF64[$P >> 3] = +_gsl_cdf_beta_Q(+HEAPF64[$2 >> 3], +HEAPF64[$a >> 3], +HEAPF64[$b >> 3]);
 }
 HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
 $24 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$24;
}
function _ranlux_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $23 = 0, $8 = 0, $i = 0, $r = 0, $skip = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $state = sp + 12 | 0;
 $skip = sp + 8 | 0;
 $r = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$skip >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2];
 HEAP32[$r >> 2] = _increment_state(HEAP32[$state >> 2] | 0) | 0;
 $8 = (HEAP32[$state >> 2] | 0) + 8 | 0;
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] | 0) != 24) {
  $23 = HEAP32[$r >> 2] | 0;
  STACKTOP = sp;
  return $23 | 0;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$skip >> 2] | 0) >>> 0) break;
  _increment_state(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $23 = HEAP32[$r >> 2] | 0;
 STACKTOP = sp;
 return $23 | 0;
}
function _gsl_sf_lnpoch_e($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $22 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = sp + 16 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (!(+HEAPF64[$1 >> 3] <= 0.0)) if (!(+HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3] <= 0.0)) if (+HEAPF64[$2 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = 0.0;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = 0.0;
  HEAP32[$0 >> 2] = 0;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 } else {
  HEAP32[$0 >> 2] = _lnpoch_pos(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
  $22 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
 HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
 _gsl_error(55192, 55208, 287, 1);
 HEAP32[$0 >> 2] = 1;
 $22 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $22 | 0;
}
function _gsl_sf_gegenpoly_1_e($lambda, $x, $result) {
 $lambda = +$lambda;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $23 = 0.0, $26 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = sp + 16 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$2 >> 3] * 2.0;
  $12 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $12;
  HEAP32[$0 >> 2] = 0;
  $26 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 } else {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = +HEAPF64[$1 >> 3] * 2.0 * +HEAPF64[$2 >> 3];
  $23 = +Math_abs(+(+HEAPF64[HEAP32[$3 >> 2] >> 3])) * 8.881784197001252e-16;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = $23;
  HEAP32[$0 >> 2] = 0;
  $26 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 return 0;
}
function _airy_aie($x, $mode, $result) {
 $x = +$x;
 $mode = $mode | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $27 = 0.0, $result_c = 0, $sqx = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $sqx = sp + 32 | 0;
 $z = sp + 24 | 0;
 $y = sp + 16 | 0;
 $result_c = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $mode;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[$sqx >> 3] = +Math_sqrt(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$z >> 3] = 2.0 / (+HEAPF64[$0 >> 3] * +HEAPF64[$sqx >> 3]) - 1.0;
 HEAPF64[$y >> 3] = +Math_sqrt(+(+HEAPF64[$sqx >> 3]));
 _cheb_eval_mode_e(2808, +HEAPF64[$z >> 3], HEAP32[$1 >> 2] | 0, $result_c) | 0;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = (+HEAPF64[$result_c >> 3] + .28125) / +HEAPF64[$y >> 3];
 $27 = +HEAPF64[$result_c + 8 >> 3] / +HEAPF64[$y >> 3] + +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $27;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_bessel_Kn_e($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $11 = 0, $16 = 0, $2 = 0, $24 = 0.0, $26 = 0, $ex = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 20 | 0;
 $status = sp + 16 | 0;
 $ex = sp;
 HEAP32[$0 >> 2] = $n;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Kn_scaled_e(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0) | 0;
 HEAPF64[$ex >> 3] = +Math_exp(+-+HEAPF64[$1 >> 3]);
 $11 = HEAP32[$2 >> 2] | 0;
 HEAPF64[$11 >> 3] = +HEAPF64[$11 >> 3] * +HEAPF64[$ex >> 3];
 $16 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$16 >> 3] = +HEAPF64[$16 >> 3] * +HEAPF64[$ex >> 3];
 $24 = +HEAPF64[$1 >> 3] * 2.220446049250313e-16 * +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3]));
 $26 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$26 >> 3] = +HEAPF64[$26 >> 3] + $24;
 STACKTOP = sp;
 return HEAP32[$status >> 2] | 0;
}
function _gsl_sf_zetam1_e($s, $result) {
 $s = +$s;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $15 = 0, $18 = 0, $2 = 0, $5 = 0.0, $stat = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp;
 $2 = sp + 12 | 0;
 $stat = sp + 8 | 0;
 HEAPF64[$1 >> 3] = $s;
 HEAP32[$2 >> 2] = $result;
 $5 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] <= 5.0) {
  HEAP32[$stat >> 2] = _gsl_sf_zeta_e($5, HEAP32[$2 >> 2] | 0) | 0;
  HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[HEAP32[$2 >> 2] >> 3] - 1.0;
  HEAP32[$0 >> 2] = HEAP32[$stat >> 2];
  $18 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 $14 = +HEAPF64[$1 >> 3];
 $15 = HEAP32[$2 >> 2] | 0;
 if ($5 < 15.0) {
  HEAP32[$0 >> 2] = _riemann_zeta_minus_1_intermediate_s($14, $15) | 0;
  $18 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  HEAP32[$0 >> 2] = _riemann_zeta_minus1_large_s($14, $15) | 0;
  $18 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}
function _pow_omx($x, $p, $result) {
 $x = +$x;
 $p = +$p;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $31 = 0.0, $33 = 0, $5 = 0, $6 = 0.0, $ln_omx = 0, $ln_result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 32 | 0;
 $ln_omx = sp + 8 | 0;
 $ln_result = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $p;
 HEAP32[$2 >> 2] = $result;
 $5 = +Math_abs(+(+HEAPF64[$0 >> 3])) < .000740095979741405;
 $6 = +HEAPF64[$0 >> 3];
 if ($5) HEAPF64[$ln_omx >> 3] = -$6 * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] * (+HEAPF64[$0 >> 3] / 4.0 + .3333333333333333 + +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] / 5.0) + .5) + 1.0); else HEAPF64[$ln_omx >> 3] = +Math_log(+(1.0 - $6));
 HEAPF64[$ln_result >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$ln_omx >> 3];
 $31 = +Math_abs(+(+HEAPF64[$ln_result >> 3])) * 2.220446049250313e-16;
 $33 = _gsl_sf_exp_err_e(+HEAPF64[$ln_result >> 3], $31, HEAP32[$2 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $33 | 0;
}
function _zero_g($z) {
 $z = +$z;
 var $0 = 0, $pre = 0, $t1 = 0, $t2 = 0, $t3 = 0, $t4 = 0, $zi2 = 0, $zi4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $pre = sp + 48 | 0;
 $zi2 = sp + 40 | 0;
 $zi4 = sp + 32 | 0;
 $t1 = sp + 24 | 0;
 $t2 = sp + 16 | 0;
 $t3 = sp + 8 | 0;
 $t4 = sp;
 HEAPF64[$0 >> 3] = $z;
 HEAPF64[$pre >> 3] = +Math_pow(+(+HEAPF64[$0 >> 3]), .6666666666666666);
 HEAPF64[$zi2 >> 3] = 1.0 / (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]);
 HEAPF64[$zi4 >> 3] = +HEAPF64[$zi2 >> 3] * +HEAPF64[$zi2 >> 3];
 HEAPF64[$t1 >> 3] = +HEAPF64[$zi2 >> 3] * -.14583333333333334;
 HEAPF64[$t2 >> 3] = +HEAPF64[$zi4 >> 3] * .12152777777777778;
 HEAPF64[$t3 >> 3] = +HEAPF64[$zi4 >> 3] * -.8739535108024692 * +HEAPF64[$zi2 >> 3];
 HEAPF64[$t4 >> 3] = +HEAPF64[$zi4 >> 3] * 15.016855549125514 * +HEAPF64[$zi4 >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$pre >> 3] * (+HEAPF64[$t1 >> 3] + 1.0 + +HEAPF64[$t2 >> 3] + +HEAPF64[$t3 >> 3] + +HEAPF64[$t4 >> 3]));
}
function _gamma_large($r, $a) {
 $r = $r | 0;
 $a = +$a;
 var $0 = 0, $1 = 0, $32 = 0.0, $sqa = 0, $v = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $sqa = sp + 24 | 0;
 $x = sp + 16 | 0;
 $y = sp + 8 | 0;
 $v = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$sqa >> 3] = +Math_sqrt(+(+HEAPF64[$1 >> 3] * 2.0 - 1.0));
 while (1) {
  HEAPF64[$y >> 3] = +Math_tan(+(+_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 3.141592653589793));
  HEAPF64[$x >> 3] = +HEAPF64[$sqa >> 3] * +HEAPF64[$y >> 3] + +HEAPF64[$1 >> 3] - 1.0;
  if (+HEAPF64[$x >> 3] <= 0.0) continue;
  HEAPF64[$v >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0);
  $32 = (+HEAPF64[$1 >> 3] - 1.0) * +Math_log(+(+HEAPF64[$x >> 3] / (+HEAPF64[$1 >> 3] - 1.0)));
  if (!(+HEAPF64[$v >> 3] > (+HEAPF64[$y >> 3] * +HEAPF64[$y >> 3] + 1.0) * +Math_exp(+($32 - +HEAPF64[$sqa >> 3] * +HEAPF64[$y >> 3])))) break;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$x >> 3]);
}
function _zero_f($z) {
 $z = +$z;
 var $0 = 0, $pre = 0, $t1 = 0, $t2 = 0, $t3 = 0, $t4 = 0, $zi2 = 0, $zi4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 56 | 0;
 $pre = sp + 48 | 0;
 $zi2 = sp + 40 | 0;
 $zi4 = sp + 32 | 0;
 $t1 = sp + 24 | 0;
 $t2 = sp + 16 | 0;
 $t3 = sp + 8 | 0;
 $t4 = sp;
 HEAPF64[$0 >> 3] = $z;
 HEAPF64[$pre >> 3] = +Math_pow(+(+HEAPF64[$0 >> 3]), .6666666666666666);
 HEAPF64[$zi2 >> 3] = 1.0 / (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]);
 HEAPF64[$zi4 >> 3] = +HEAPF64[$zi2 >> 3] * +HEAPF64[$zi2 >> 3];
 HEAPF64[$t1 >> 3] = +HEAPF64[$zi2 >> 3] * .10416666666666667;
 HEAPF64[$t2 >> 3] = +HEAPF64[$zi4 >> 3] * -.1388888888888889;
 HEAPF64[$t3 >> 3] = +HEAPF64[$zi4 >> 3] * .9298442322530864 * +HEAPF64[$zi2 >> 3];
 HEAPF64[$t4 >> 3] = +HEAPF64[$zi4 >> 3] * -15.509155201673648 * +HEAPF64[$zi4 >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$pre >> 3] * (+HEAPF64[$t1 >> 3] + 1.0 + +HEAPF64[$t2 >> 3] + +HEAPF64[$t3 >> 3] + +HEAPF64[$t4 >> 3]));
}
function _gsl_cdf_exppow_Q($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $24 = 0.0, $3 = 0, $Q = 0, $Q1 = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $u = sp + 16 | 0;
 $Q = sp + 8 | 0;
 $Q1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 HEAPF64[$u >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3];
 $10 = 1.0 / +HEAPF64[$3 >> 3];
 $11 = +HEAPF64[$u >> 3];
 if (+HEAPF64[$u >> 3] < 0.0) {
  HEAPF64[$Q >> 3] = (+_gsl_sf_gamma_inc_P($10, +Math_pow(+-$11, +(+HEAPF64[$3 >> 3]))) + 1.0) * .5;
  HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
  $24 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$24;
 } else {
  HEAPF64[$Q1 >> 3] = +_gsl_sf_gamma_inc_Q($10, +Math_pow(+$11, +(+HEAPF64[$3 >> 3]))) * .5;
  HEAPF64[$0 >> 3] = +HEAPF64[$Q1 >> 3];
  $24 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$24;
 }
 return 0.0;
}
function _gsl_cdf_exppow_P($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $24 = 0.0, $3 = 0, $P = 0, $P1 = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $u = sp + 16 | 0;
 $P = sp + 8 | 0;
 $P1 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 HEAPF64[$u >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3];
 $10 = 1.0 / +HEAPF64[$3 >> 3];
 $11 = +HEAPF64[$u >> 3];
 if (+HEAPF64[$u >> 3] < 0.0) {
  HEAPF64[$P >> 3] = +_gsl_sf_gamma_inc_Q($10, +Math_pow(+-$11, +(+HEAPF64[$3 >> 3]))) * .5;
  HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
  $24 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$24;
 } else {
  HEAPF64[$P1 >> 3] = (+_gsl_sf_gamma_inc_P($10, +Math_pow(+$11, +(+HEAPF64[$3 >> 3]))) + 1.0) * .5;
  HEAPF64[$0 >> 3] = +HEAPF64[$P1 >> 3];
  $24 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$24;
 }
 return 0.0;
}
function _gsl_ran_chisq_pdf($x, $nu) {
 $x = +$x;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $30 = 0.0, $lngamma = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $p = sp + 8 | 0;
 $lngamma = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $nu;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $30 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$30;
 }
 if (+HEAPF64[$2 >> 3] == 2.0) {
  HEAPF64[$0 >> 3] = +Math_exp(+(-+HEAPF64[$1 >> 3] / 2.0)) / 2.0;
  $30 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$30;
 } else {
  HEAPF64[$lngamma >> 3] = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3] / 2.0);
  $21 = (+HEAPF64[$2 >> 3] / 2.0 - 1.0) * +Math_log(+(+HEAPF64[$1 >> 3] / 2.0));
  HEAPF64[$p >> 3] = +Math_exp(+($21 - +HEAPF64[$1 >> 3] / 2.0 - +HEAPF64[$lngamma >> 3])) / 2.0;
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $30 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$30;
 }
 return 0.0;
}
function _gsl_ran_sample($r, $dest, $k, $src, $n, $size) {
 $r = $r | 0;
 $dest = $dest | 0;
 $k = $k | 0;
 $src = $src | 0;
 $n = $n | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i = 0, $j = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $i = sp + 4 | 0;
 $j = sp;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $dest;
 HEAP32[$2 >> 2] = $k;
 HEAP32[$3 >> 2] = $src;
 HEAP32[$4 >> 2] = $n;
 HEAP32[$5 >> 2] = $size;
 HEAP32[$j >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$2 >> 2] | 0) >>> 0) break;
  HEAP32[$j >> 2] = _gsl_rng_uniform_int(HEAP32[$0 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  _copy(HEAP32[$1 >> 2] | 0, HEAP32[$i >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$j >> 2] | 0, HEAP32[$5 >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _minstd_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $16 = 0, $20 = 0, $21 = 0, $h = 0, $state = 0, $t = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $state = sp + 12 | 0;
 $x = sp + 8 | 0;
 $h = sp + 4 | 0;
 $t = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$h >> 2] = ((HEAP32[$x >> 2] | 0) >>> 0) / 127773 | 0;
 HEAP32[$t >> 2] = (((HEAP32[$x >> 2] | 0) - ((HEAP32[$h >> 2] | 0) * 127773 | 0) | 0) * 16807 | 0) - ((HEAP32[$h >> 2] | 0) * 2836 | 0);
 $16 = HEAP32[$t >> 2] | 0;
 if ((HEAP32[$t >> 2] | 0) < 0) {
  HEAP32[HEAP32[$state >> 2] >> 2] = $16 + 2147483647;
  $20 = HEAP32[$state >> 2] | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 } else {
  HEAP32[HEAP32[$state >> 2] >> 2] = $16;
  $20 = HEAP32[$state >> 2] | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0;
}
function _ran_get728($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $16 = 0, $20 = 0, $21 = 0, $h = 0, $state = 0, $t = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $state = sp + 12 | 0;
 $x = sp + 8 | 0;
 $h = sp + 4 | 0;
 $t = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$h >> 2] = ((HEAP32[$x >> 2] | 0) >>> 0) / 44488 | 0;
 HEAP32[$t >> 2] = (((HEAP32[$x >> 2] | 0) - ((HEAP32[$h >> 2] | 0) * 44488 | 0) | 0) * 48271 | 0) - ((HEAP32[$h >> 2] | 0) * 3399 | 0);
 $16 = HEAP32[$t >> 2] | 0;
 if ((HEAP32[$t >> 2] | 0) < 0) {
  HEAP32[HEAP32[$state >> 2] >> 2] = $16 + 2147483647;
  $20 = HEAP32[$state >> 2] | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 } else {
  HEAP32[HEAP32[$state >> 2] >> 2] = $16;
  $20 = HEAP32[$state >> 2] | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0;
}
function _ran0_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $16 = 0, $20 = 0, $21 = 0, $h = 0, $state = 0, $t = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $state = sp + 12 | 0;
 $x = sp + 8 | 0;
 $h = sp + 4 | 0;
 $t = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$h >> 2] = ((HEAP32[$x >> 2] | 0) >>> 0) / 127773 | 0;
 HEAP32[$t >> 2] = (((HEAP32[$x >> 2] | 0) - ((HEAP32[$h >> 2] | 0) * 127773 | 0) | 0) * 16807 | 0) - ((HEAP32[$h >> 2] | 0) * 2836 | 0);
 $16 = HEAP32[$t >> 2] | 0;
 if ((HEAP32[$t >> 2] | 0) < 0) {
  HEAP32[HEAP32[$state >> 2] >> 2] = $16 + 2147483647;
  $20 = HEAP32[$state >> 2] | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 } else {
  HEAP32[HEAP32[$state >> 2] >> 2] = $16;
  $20 = HEAP32[$state >> 2] | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0;
}
function _gsl_sf_complex_dilog_e($r, $theta, $real_dl, $imag_dl) {
 $r = +$r;
 $theta = +$theta;
 $real_dl = $real_dl | 0;
 $imag_dl = $imag_dl | 0;
 var $0 = 0, $1 = 0, $18 = 0, $2 = 0, $3 = 0, $cos_theta = 0, $sin_theta = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $cos_theta = sp + 24 | 0;
 $sin_theta = sp + 16 | 0;
 $x = sp + 8 | 0;
 $y = sp;
 HEAPF64[$0 >> 3] = $r;
 HEAPF64[$1 >> 3] = $theta;
 HEAP32[$2 >> 2] = $real_dl;
 HEAP32[$3 >> 2] = $imag_dl;
 HEAPF64[$cos_theta >> 3] = +Math_cos(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$sin_theta >> 3] = +Math_sin(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$x >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$cos_theta >> 3];
 HEAPF64[$y >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$sin_theta >> 3];
 $18 = _gsl_sf_complex_dilog_xy_e(+HEAPF64[$x >> 3], +HEAPF64[$y >> 3], HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $18 | 0;
}
function _taus_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] & -2) << 12 ^ (HEAP32[HEAP32[$state >> 2] >> 2] << 13 ^ HEAP32[HEAP32[$state >> 2] >> 2]) >>> 19;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] & -8) << 4 ^ (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] << 2 ^ HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2]) >>> 25;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] & -16) << 17 ^ (HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] << 3 ^ HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2]) >>> 11;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] ^ HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] ^ HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] | 0;
}
function _mt_1999_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $20 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 4357;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 624) break;
  HEAP32[(HEAP32[$state >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$1 >> 2] & -65536;
  HEAP32[$1 >> 2] = ((HEAP32[$1 >> 2] | 0) * 69069 | 0) + 1;
  $20 = (HEAP32[$state >> 2] | 0) + (HEAP32[$i >> 2] << 2) | 0;
  HEAP32[$20 >> 2] = HEAP32[$20 >> 2] | (HEAP32[$1 >> 2] & -65536) >>> 16;
  HEAP32[$1 >> 2] = ((HEAP32[$1 >> 2] | 0) * 69069 | 0) + 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 2496 >> 2] = HEAP32[$i >> 2];
 STACKTOP = sp;
 return;
}
function _gsl_ran_lognormal_pdf($x, $zeta, $sigma) {
 $x = +$x;
 $zeta = +$zeta;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $18 = 0.0, $2 = 0, $27 = 0.0, $3 = 0, $7 = 0.0, $p = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $p = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $zeta;
 HEAPF64[$3 >> 3] = $sigma;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $27 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$27;
 } else {
  $7 = +Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$u >> 3] = ($7 - +HEAPF64[$2 >> 3]) / +HEAPF64[$3 >> 3];
  $18 = 1.0 / (+HEAPF64[$1 >> 3] * +Math_abs(+(+HEAPF64[$3 >> 3])) * +Math_sqrt(6.283185307179586));
  HEAPF64[$p >> 3] = $18 * +Math_exp(+(-(+HEAPF64[$u >> 3] * +HEAPF64[$u >> 3]) / 2.0));
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $27 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$27;
 }
 return 0.0;
}
function _gsl_ran_rayleigh_tail_pdf($x, $a, $sigma) {
 $x = +$x;
 $a = +$a;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $2 = 0, $27 = 0.0, $3 = 0, $p = 0, $u = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $u = sp + 16 | 0;
 $v = sp + 8 | 0;
 $p = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $sigma;
 if (+HEAPF64[$1 >> 3] < +HEAPF64[$2 >> 3]) {
  HEAPF64[$0 >> 3] = 0.0;
  $27 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$27;
 } else {
  HEAPF64[$u >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$3 >> 3];
  HEAPF64[$v >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$3 >> 3];
  HEAPF64[$p >> 3] = +HEAPF64[$u >> 3] / +HEAPF64[$3 >> 3] * +Math_exp(+((+HEAPF64[$v >> 3] + +HEAPF64[$u >> 3]) * (+HEAPF64[$v >> 3] - +HEAPF64[$u >> 3]) / 2.0));
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $27 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$27;
 }
 return 0.0;
}
function _gsl_sf_bessel_Inu_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $22 = 0, $9 = 0.0, $b = 0, $stat_I = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 40 | 0;
 $b = sp;
 $stat_I = sp + 36 | 0;
 $stat_e = sp + 32 | 0;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$stat_I >> 2] = _gsl_sf_bessel_Inu_scaled_e(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], $b) | 0;
 $9 = +Math_abs(+(+HEAPF64[$1 >> 3] * 2.220446049250313e-16));
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(+HEAPF64[$1 >> 3], $9, +HEAPF64[$b >> 3], +HEAPF64[$b + 8 >> 3], HEAP32[$2 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) {
  $22 = HEAP32[$stat_e >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 } else {
  $22 = (HEAP32[$stat_I >> 2] | 0) != 0 ? HEAP32[$stat_I >> 2] | 0 : 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 return 0;
}
function _gsl_rng_alloc($T) {
 $T = $T | 0;
 var $0 = 0, $1 = 0, $21 = 0, $8 = 0, $r = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $r = sp;
 HEAP32[$1 >> 2] = $T;
 HEAP32[$r >> 2] = _malloc(8) | 0;
 if (!(HEAP32[$r >> 2] | 0)) {
  _gsl_error(80192, 80232, 36, 8);
  HEAP32[$0 >> 2] = 0;
  $21 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 $8 = _calloc(1, HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$r >> 2] | 0) + 4 >> 2] = $8;
 if (!(HEAP32[(HEAP32[$r >> 2] | 0) + 4 >> 2] | 0)) {
  _free(HEAP32[$r >> 2] | 0);
  _gsl_error(80240, 80232, 46, 8);
  HEAP32[$0 >> 2] = 0;
  $21 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 } else {
  HEAP32[HEAP32[$r >> 2] >> 2] = HEAP32[$1 >> 2];
  _gsl_rng_set(HEAP32[$r >> 2] | 0, HEAP32[19514] | 0);
  HEAP32[$0 >> 2] = HEAP32[$r >> 2];
  $21 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0;
}
function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $18 = 0.0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0, sp = 0;
 sp = STACKTOP;
 if (($n | 0) > 1023) {
  $1 = $x * 8.98846567431158e+307;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8.98846567431158e+307;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -1022) {
  $8 = $x * 2.2250738585072014e-308;
  $9 = $n + 1022 | 0;
  if (($9 | 0) < -1022) {
   $12 = $n + 2044 | 0;
   $$0 = ($12 | 0) < -1022 ? -1022 : $12;
   $y$0 = $8 * 2.2250738585072014e-308;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 $18 = $y$0 * +HEAPF64[tempDoublePtr >> 3];
 STACKTOP = sp;
 return +$18;
}
function _gsl_sf_hyperg_2F1_conj_renorm($aR, $aI, $c, $x) {
 $aR = +$aR;
 $aI = +$aI;
 $c = +$c;
 $x = +$x;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $result = sp;
 $status = sp + 56 | 0;
 HEAPF64[$1 >> 3] = $aR;
 HEAPF64[$2 >> 3] = $aI;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_2F1_conj_renorm_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52064, 51896, 945, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _locMin5($a, $b, $c, $d, $e) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $d = $d | 0;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, $g = 0, $h = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $f = sp + 8 | 0;
 $g = sp + 4 | 0;
 $h = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $b;
 HEAP32[$2 >> 2] = $c;
 HEAP32[$3 >> 2] = $d;
 HEAP32[$4 >> 2] = $e;
 HEAP32[$f >> 2] = (HEAP32[$0 >> 2] | 0) < (HEAP32[$1 >> 2] | 0) ? HEAP32[$0 >> 2] | 0 : HEAP32[$1 >> 2] | 0;
 HEAP32[$g >> 2] = (HEAP32[$2 >> 2] | 0) < (HEAP32[$3 >> 2] | 0) ? HEAP32[$2 >> 2] | 0 : HEAP32[$3 >> 2] | 0;
 HEAP32[$h >> 2] = (HEAP32[$f >> 2] | 0) < (HEAP32[$g >> 2] | 0) ? HEAP32[$f >> 2] | 0 : HEAP32[$g >> 2] | 0;
 STACKTOP = sp;
 return ((HEAP32[$4 >> 2] | 0) < (HEAP32[$h >> 2] | 0) ? HEAP32[$4 >> 2] | 0 : HEAP32[$h >> 2] | 0) | 0;
}
function _gsl_sf_ellint_P($phi, $k, $n, $mode) {
 $phi = +$phi;
 $k = +$k;
 $n = +$n;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 52 | 0;
 $result = sp;
 $status = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $phi;
 HEAPF64[$2 >> 3] = $k;
 HEAPF64[$3 >> 3] = $n;
 HEAP32[$4 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_P_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29760, 29392, 625, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _gsl_sf_ellint_D($phi, $k, $n, $mode) {
 $phi = +$phi;
 $k = +$k;
 $n = +$n;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 52 | 0;
 $result = sp;
 $status = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $phi;
 HEAPF64[$2 >> 3] = $k;
 HEAPF64[$3 >> 3] = $n;
 HEAP32[$4 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_D_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29808, 29392, 630, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _gsl_sf_hyperg_2F1_conj($aR, $aI, $c, $x) {
 $aR = +$aR;
 $aI = +$aI;
 $c = +$c;
 $x = +$x;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $result = sp;
 $status = sp + 56 | 0;
 HEAPF64[$1 >> 3] = $aR;
 HEAPF64[$2 >> 3] = $aI;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_2F1_conj_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51968, 51896, 935, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _gsl_ran_dir_2d($r, $x, $y) {
 $r = $r | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $2 = 0, $s = 0, $u = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 24 | 0;
 $u = sp + 16 | 0;
 $v = sp + 8 | 0;
 $s = sp;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $x;
 HEAP32[$2 >> 2] = $y;
 do {
  HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[$v >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[$s >> 3] = +HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] + +HEAPF64[$v >> 3] * +HEAPF64[$v >> 3];
 } while (+HEAPF64[$s >> 3] > 1.0 | +HEAPF64[$s >> 3] == 0.0);
 HEAPF64[HEAP32[$1 >> 2] >> 3] = (+HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] - +HEAPF64[$v >> 3] * +HEAPF64[$v >> 3]) / +HEAPF64[$s >> 3];
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$u >> 3] * 2.0 * +HEAPF64[$v >> 3] / +HEAPF64[$s >> 3];
 STACKTOP = sp;
 return;
}
function _gsl_sf_hyperg_2F1_renorm($a, $b, $c, $x) {
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $x = +$x;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $result = sp;
 $status = sp + 56 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_2F1_renorm_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52016, 51896, 940, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _gsl_sf_ellint_RF($x, $y, $z, $mode) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 52 | 0;
 $result = sp;
 $status = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAPF64[$3 >> 3] = $z;
 HEAP32[$4 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_RF_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29944, 29392, 645, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _gsl_sf_ellint_RD($x, $y, $z, $mode) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 52 | 0;
 $result = sp;
 $status = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAPF64[$3 >> 3] = $z;
 HEAP32[$4 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_RD_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], HEAP32[$4 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29896, 29392, 640, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _gsl_sf_hydrogenicR($n, $l, $Z, $r) {
 $n = $n | 0;
 $l = $l | 0;
 $Z = +$Z;
 $r = +$r;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $l;
 HEAPF64[$3 >> 3] = $Z;
 HEAPF64[$4 >> 3] = $r;
 HEAP32[$status >> 2] = _gsl_sf_hydrogenicR_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(26384, 26312, 119, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _gsl_cdf_lognormal_Qinv($Q, $zeta, $sigma) {
 $Q = +$Q;
 $zeta = +$zeta;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $17 = 0.0, $2 = 0, $3 = 0, $u = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $x = sp + 8 | 0;
 $u = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $zeta;
 HEAPF64[$3 >> 3] = $sigma;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 } else {
  HEAPF64[$u >> 3] = +_gsl_cdf_ugaussian_Qinv(+HEAPF64[$1 >> 3]);
  HEAPF64[$x >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3] * +HEAPF64[$u >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 return 0.0;
}
function _gsl_cdf_lognormal_Pinv($P, $zeta, $sigma) {
 $P = +$P;
 $zeta = +$zeta;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $17 = 0.0, $2 = 0, $3 = 0, $u = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $x = sp + 8 | 0;
 $u = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $zeta;
 HEAPF64[$3 >> 3] = $sigma;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = inf;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 } else {
  HEAPF64[$u >> 3] = +_gsl_cdf_ugaussian_Pinv(+HEAPF64[$1 >> 3]);
  HEAPF64[$x >> 3] = +Math_exp(+(+HEAPF64[$2 >> 3] + +HEAPF64[$3 >> 3] * +HEAPF64[$u >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 return 0.0;
}
function _gsl_ran_negative_binomial_pdf($k, $p, $n) {
 $k = $k | 0;
 $p = +$p;
 $n = +$n;
 var $0 = 0, $1 = 0, $2 = 0, $23 = 0.0, $25 = 0.0, $P = 0, $a = 0, $b = 0, $f = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $P = sp + 24 | 0;
 $f = sp + 16 | 0;
 $a = sp + 8 | 0;
 $b = sp;
 HEAP32[$0 >> 2] = $k;
 HEAPF64[$1 >> 3] = $p;
 HEAPF64[$2 >> 3] = $n;
 HEAPF64[$f >> 3] = +_gsl_sf_lngamma(+((HEAP32[$0 >> 2] | 0) >>> 0) + +HEAPF64[$2 >> 3]);
 HEAPF64[$a >> 3] = +_gsl_sf_lngamma(+HEAPF64[$2 >> 3]);
 HEAPF64[$b >> 3] = +_gsl_sf_lngamma(+((HEAP32[$0 >> 2] | 0) >>> 0) + 1.0);
 $23 = +HEAPF64[$f >> 3] - +HEAPF64[$a >> 3] - +HEAPF64[$b >> 3] + +HEAPF64[$2 >> 3] * +Math_log(+(+HEAPF64[$1 >> 3]));
 $25 = +((HEAP32[$0 >> 2] | 0) >>> 0);
 HEAPF64[$P >> 3] = +Math_exp(+($23 + $25 * +_log1p(+-+HEAPF64[$1 >> 3])));
 STACKTOP = sp;
 return +(+HEAPF64[$P >> 3]);
}
function _gsl_sf_hyperg_2F1($a, $b, $c, $x) {
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $x = +$x;
 var $0 = 0, $1 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $result = sp;
 $status = sp + 56 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $c;
 HEAPF64[$4 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_2F1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$4 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51920, 51896, 930, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $15 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _gsl_ran_gamma_int($r, $a) {
 $r = $r | 0;
 $a = $a | 0;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $9 = 0.0, $i = 0, $prod = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $i = sp + 16 | 0;
 $prod = sp;
 HEAP32[$1 >> 2] = $r;
 HEAP32[$2 >> 2] = $a;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 >= 12) {
  HEAPF64[$0 >> 3] = +_gamma_large(HEAP32[$1 >> 2] | 0, +((HEAP32[$2 >> 2] | 0) >>> 0));
  $21 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$21;
 }
 HEAPF64[$prod >> 3] = 1.0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$2 >> 2] | 0) >>> 0) break;
  $9 = +_gsl_rng_uniform_pos(HEAP32[$1 >> 2] | 0);
  HEAPF64[$prod >> 3] = +HEAPF64[$prod >> 3] * $9;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$0 >> 3] = -+Math_log(+(+HEAPF64[$prod >> 3]));
 $21 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$21;
}
function _gfsr4_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $41 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] | 0) + 1 & 16383;
 $41 = HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (((HEAP32[HEAP32[$state >> 2] >> 2] | 0) + 15913 & 16383) << 2) >> 2] ^ HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (((HEAP32[HEAP32[$state >> 2] >> 2] | 0) + 14798 & 16383) << 2) >> 2] ^ HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (((HEAP32[HEAP32[$state >> 2] >> 2] | 0) + 9396 & 16383) << 2) >> 2] ^ HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (((HEAP32[HEAP32[$state >> 2] >> 2] | 0) + 6695 & 16383) << 2) >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[HEAP32[$state >> 2] >> 2] << 2) >> 2] = $41;
 STACKTOP = sp;
 return $41 | 0;
}
function _erfc8_sum($x) {
 $x = +$x;
 var $0 = 0, $den = 0, $i = 0, $num = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $num = sp + 8 | 0;
 $den = sp;
 $i = sp + 24 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$num >> 3] = 0.0;
 HEAPF64[$den >> 3] = 0.0;
 HEAPF64[$num >> 3] = +HEAPF64[3791];
 HEAP32[$i >> 2] = 4;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) < 0) break;
  HEAPF64[$num >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$num >> 3] + +HEAPF64[30288 + (HEAP32[$i >> 2] << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 HEAPF64[$den >> 3] = +HEAPF64[3798];
 HEAP32[$i >> 2] = 5;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) < 0) break;
  HEAPF64[$den >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$den >> 3] + +HEAPF64[30336 + (HEAP32[$i >> 2] << 3) >> 3];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 STACKTOP = sp;
 return +(+HEAPF64[$num >> 3] / +HEAPF64[$den >> 3]);
}
function _gsl_rng_fwrite($stream, $r) {
 $stream = $stream | 0;
 $r = $r | 0;
 var $0 = 0, $1 = 0, $17 = 0, $2 = 0, $items = 0, $n = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $n = sp + 8 | 0;
 $state = sp + 4 | 0;
 $items = sp;
 HEAP32[$1 >> 2] = $stream;
 HEAP32[$2 >> 2] = $r;
 HEAP32[$n >> 2] = HEAP32[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 12 >> 2];
 HEAP32[$state >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2];
 HEAP32[$items >> 2] = _fwrite(HEAP32[$state >> 2] | 0, 1, HEAP32[$n >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
 if ((HEAP32[$items >> 2] | 0) != (HEAP32[$n >> 2] | 0)) {
  _gsl_error(77296, 77288, 53, 5);
  HEAP32[$0 >> 2] = 5;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}
function _gsl_rng_fread($stream, $r) {
 $stream = $stream | 0;
 $r = $r | 0;
 var $0 = 0, $1 = 0, $17 = 0, $2 = 0, $items = 0, $n = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $n = sp + 8 | 0;
 $state = sp + 4 | 0;
 $items = sp;
 HEAP32[$1 >> 2] = $stream;
 HEAP32[$2 >> 2] = $r;
 HEAP32[$n >> 2] = HEAP32[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 12 >> 2];
 HEAP32[$state >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2];
 HEAP32[$items >> 2] = _fread(HEAP32[$state >> 2] | 0, 1, HEAP32[$n >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
 if ((HEAP32[$items >> 2] | 0) != (HEAP32[$n >> 2] | 0)) {
  _gsl_error(77272, 77288, 36, 5);
  HEAP32[$0 >> 2] = 5;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}
function _gsl_sf_lnbeta_e($x, $y, $result) {
 $x = +$x;
 $y = +$y;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0, $2 = 0, $3 = 0, $sgn = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 28 | 0;
 $sgn = sp;
 $status = sp + 24 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $result;
 HEAP32[$status >> 2] = _gsl_sf_lnbeta_sgn_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, $sgn) | 0;
 if (+HEAPF64[$sgn >> 3] == -1.0) {
  HEAPF64[HEAP32[$3 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$3 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(25840, 25856, 44, 1);
  HEAP32[$0 >> 2] = 1;
  $14 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$status >> 2];
  $14 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 return 0;
}
function _gsl_sf_bessel_Knu_e($nu, $x, $result) {
 $nu = +$nu;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $20 = 0, $b = 0, $stat_K = 0, $stat_e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 40 | 0;
 $b = sp;
 $stat_K = sp + 36 | 0;
 $stat_e = sp + 32 | 0;
 HEAPF64[$0 >> 3] = $nu;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$stat_K >> 2] = _gsl_sf_bessel_Knu_scaled_e(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], $b) | 0;
 HEAP32[$stat_e >> 2] = _gsl_sf_exp_mult_err_e(-+HEAPF64[$1 >> 3], 0.0, +HEAPF64[$b >> 3], +HEAPF64[$b + 8 >> 3], HEAP32[$2 >> 2] | 0) | 0;
 if (HEAP32[$stat_e >> 2] | 0) {
  $20 = HEAP32[$stat_e >> 2] | 0;
  STACKTOP = sp;
  return $20 | 0;
 } else {
  $20 = (HEAP32[$stat_K >> 2] | 0) != 0 ? HEAP32[$stat_K >> 2] | 0 : 0;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0;
}
function _get_del($x, $rational) {
 $x = +$x;
 $rational = +$rational;
 var $0 = 0, $1 = 0, $19 = 0.0, $23 = 0.0, $del = 0, $result = 0, $xsq = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $xsq = sp + 16 | 0;
 $del = sp + 8 | 0;
 $result = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $rational;
 HEAPF64[$xsq >> 3] = 0.0;
 HEAPF64[$del >> 3] = 0.0;
 HEAPF64[$result >> 3] = 0.0;
 HEAPF64[$xsq >> 3] = +Math_floor(+(+HEAPF64[$0 >> 3] * 16.0)) / 16.0;
 HEAPF64[$del >> 3] = (+HEAPF64[$0 >> 3] - +HEAPF64[$xsq >> 3]) * (+HEAPF64[$0 >> 3] + +HEAPF64[$xsq >> 3]);
 HEAPF64[$del >> 3] = +HEAPF64[$del >> 3] * .5;
 $19 = +Math_exp(+(+HEAPF64[$xsq >> 3] * -.5 * +HEAPF64[$xsq >> 3]));
 $23 = $19 * +Math_exp(+(+HEAPF64[$del >> 3] * -1.0));
 HEAPF64[$result >> 3] = $23 * +HEAPF64[$1 >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$result >> 3]);
}
function _taus_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[$1 >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] | 0) * 69069;
 HEAP32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0) * 69069;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 _taus_get(HEAP32[$state >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}
function _gsl_sf_multiply_err_e($x, $dx, $y, $dy, $result) {
 $x = +$x;
 $dx = +$dx;
 $y = +$y;
 $dy = +$dy;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $12 = 0.0, $17 = 0.0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $4 = sp + 36 | 0;
 $status = sp + 32 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $dx;
 HEAPF64[$2 >> 3] = $y;
 HEAPF64[$3 >> 3] = $dy;
 HEAP32[$4 >> 2] = $result;
 HEAP32[$status >> 2] = _gsl_sf_multiply_e(+HEAPF64[$0 >> 3], +HEAPF64[$2 >> 3], HEAP32[$4 >> 2] | 0) | 0;
 $12 = +Math_abs(+(+HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3]));
 $17 = $12 + +Math_abs(+(+HEAPF64[$3 >> 3] * +HEAPF64[$0 >> 3]));
 $19 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAPF64[$19 >> 3] = +HEAPF64[$19 >> 3] + $17;
 STACKTOP = sp;
 return HEAP32[$status >> 2] | 0;
}
function _gsl_cdf_gamma_Q($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $12 = 0.0, $13 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $Q = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $Q = sp + 8 | 0;
 $y = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 HEAPF64[$y >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$3 >> 3];
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[$0 >> 3] = 1.0;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 $12 = +HEAPF64[$2 >> 3];
 $13 = +HEAPF64[$y >> 3];
 if (+HEAPF64[$y >> 3] < +HEAPF64[$2 >> 3]) HEAPF64[$Q >> 3] = 1.0 - +_gsl_sf_gamma_inc_P($12, $13); else HEAPF64[$Q >> 3] = +_gsl_sf_gamma_inc_Q($12, $13);
 HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
 $18 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$18;
}
function _gsl_cdf_gamma_P($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $12 = 0.0, $13 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $P = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $P = sp + 8 | 0;
 $y = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 HEAPF64[$y >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$3 >> 3];
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 $12 = +HEAPF64[$2 >> 3];
 $13 = +HEAPF64[$y >> 3];
 if (+HEAPF64[$y >> 3] > +HEAPF64[$2 >> 3]) HEAPF64[$P >> 3] = 1.0 - +_gsl_sf_gamma_inc_Q($12, $13); else HEAPF64[$P >> 3] = +_gsl_sf_gamma_inc_P($12, $13);
 HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
 $18 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$18;
}
function _gsl_sf_conicalP_sph_reg($l, $lambda, $x) {
 $l = $l | 0;
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_conicalP_sph_reg_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53376, 53184, 1368, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_conicalP_cyl_reg($m, $lambda, $x) {
 $m = $m | 0;
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAP32[$1 >> 2] = $m;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_conicalP_cyl_reg_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53432, 53184, 1373, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_legendre_H3d($l, $lambda, $eta) {
 $l = $l | 0;
 $lambda = +$lambda;
 $eta = +$eta;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $eta;
 HEAP32[$status >> 2] = _gsl_sf_legendre_H3d_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52936, 52808, 567, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_log_abs_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $15 = 0.0, $18 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(53872, 53888, 132, 1);
  HEAP32[$0 >> 2] = 1;
  $18 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  $10 = +Math_log(+(+Math_abs(+(+HEAPF64[$1 >> 3]))));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $10;
  $15 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $15;
  HEAP32[$0 >> 2] = 0;
  $18 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}
function _gsl_cdf_weibull_Pinv($P, $a, $b) {
 $P = +$P;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $12 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $8 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = inf;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 } else {
  $8 = +HEAPF64[$2 >> 3];
  $12 = -+_log1p(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$x >> 3] = $8 * +Math_pow(+$12, +(1.0 / +HEAPF64[$3 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 return 0.0;
}
function _gsl_cdf_gumbel2_Qinv($Q, $a, $b) {
 $Q = +$Q;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $13 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $8 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 } else {
  $8 = +HEAPF64[$3 >> 3];
  $13 = $8 / -+_log1p(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$x >> 3] = +Math_pow(+$13, +(1.0 / +HEAPF64[$2 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 return 0.0;
}
function _gsl_sf_mathieu_free($workspace) {
 $workspace = $workspace | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $workspace;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _gsl_vector_free(HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0);
 _gsl_matrix_free(HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0);
 _gsl_eigen_symmv_free(HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function _gsl_cdf_gumbel1_Qinv($Q, $a, $b) {
 $Q = +$Q;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $14 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $9 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = -inf;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 } else {
  $9 = -+HEAPF64[$3 >> 3];
  $14 = +Math_log(+($9 / +_log1p(+-+HEAPF64[$1 >> 3])));
  HEAPF64[$x >> 3] = $14 / +HEAPF64[$2 >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 return 0.0;
}
function _gsl_cdf_pareto_Qinv($Q, $a, $b) {
 $Q = +$Q;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $11 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $8 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 $8 = +HEAPF64[$3 >> 3];
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = $8;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 } else {
  $11 = -+Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$x >> 3] = $8 * +Math_exp(+($11 / +HEAPF64[$2 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 return 0.0;
}
function _gsl_sf_gegenpoly_n($n, $lambda, $x) {
 $n = $n | 0;
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $lambda;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gegenpoly_n_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51424, 51264, 193, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_cdf_pareto_Pinv($P, $a, $b) {
 $P = +$P;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $12 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $8 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = inf;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 $8 = +HEAPF64[$3 >> 3];
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = $8;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 } else {
  $12 = -+_log1p(+-+HEAPF64[$1 >> 3]);
  HEAPF64[$x >> 3] = $8 * +Math_exp(+($12 / +HEAPF64[$2 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 return 0.0;
}
function _gsl_cdf_cauchy_Qinv($Q, $a) {
 $Q = +$Q;
 $a = +$a;
 var $0 = 0, $1 = 0, $10 = 0.0, $19 = 0.0, $2 = 0, $9 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = -inf;
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 $9 = +HEAPF64[$2 >> 3];
 $10 = +HEAPF64[$1 >> 3];
 if (+HEAPF64[$1 >> 3] > .5) HEAPF64[$x >> 3] = $9 * +Math_tan(+((.5 - $10) * 3.141592653589793)); else HEAPF64[$x >> 3] = $9 / +Math_tan(+(3.141592653589793 * $10));
 HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
 $19 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$19;
}
function _gsl_sf_lnfact_e($n, $result) {
 $n = $n | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $20 = 0, $5 = 0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $result;
 $5 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 <= 170) {
  $9 = +Math_log(+(+HEAPF64[46024 + ($5 * 24 | 0) >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $9;
  $14 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $14;
  HEAP32[$0 >> 2] = 0;
  $20 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $20 | 0;
 } else {
  _gsl_sf_lngamma_e(+($5 >>> 0) + 1.0, HEAP32[$2 >> 2] | 0) | 0;
  HEAP32[$0 >> 2] = 0;
  $20 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0;
}
function _gsl_sf_sin_err_e($x, $dx, $result) {
 $x = +$x;
 $dx = +$dx;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $12 = 0, $18 = 0.0, $2 = 0, $20 = 0, $7 = 0.0, $stat_s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = sp + 20 | 0;
 $stat_s = sp + 16 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $dx;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$stat_s >> 2] = _gsl_sf_sin_e(+HEAPF64[$0 >> 3], HEAP32[$2 >> 2] | 0) | 0;
 $7 = +Math_cos(+(+HEAPF64[$0 >> 3]));
 $10 = +Math_abs(+($7 * +HEAPF64[$1 >> 3]));
 $12 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$12 >> 3] = +HEAPF64[$12 >> 3] + $10;
 $18 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
 $20 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$20 >> 3] = +HEAPF64[$20 >> 3] + $18;
 STACKTOP = sp;
 return HEAP32[$stat_s >> 2] | 0;
}
function _gsl_sf_cos_err_e($x, $dx, $result) {
 $x = +$x;
 $dx = +$dx;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $12 = 0, $18 = 0.0, $2 = 0, $20 = 0, $7 = 0.0, $stat_c = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = sp + 20 | 0;
 $stat_c = sp + 16 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $dx;
 HEAP32[$2 >> 2] = $result;
 HEAP32[$stat_c >> 2] = _gsl_sf_cos_e(+HEAPF64[$0 >> 3], HEAP32[$2 >> 2] | 0) | 0;
 $7 = +Math_sin(+(+HEAPF64[$0 >> 3]));
 $10 = +Math_abs(+($7 * +HEAPF64[$1 >> 3]));
 $12 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$12 >> 3] = +HEAPF64[$12 >> 3] + $10;
 $18 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 2.220446049250313e-16;
 $20 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAPF64[$20 >> 3] = +HEAPF64[$20 >> 3] + $18;
 STACKTOP = sp;
 return HEAP32[$stat_c >> 2] | 0;
}
function _gsl_sf_ellint_Pcomp($k, $n, $mode) {
 $k = +$k;
 $n = +$n;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 44 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $k;
 HEAPF64[$2 >> 3] = $n;
 HEAP32[$3 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_Pcomp_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29616, 29392, 605, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_ellint_F($phi, $k, $mode) {
 $phi = +$phi;
 $k = +$k;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 44 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $phi;
 HEAPF64[$2 >> 3] = $k;
 HEAP32[$3 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_F_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29664, 29392, 615, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_ellint_E($phi, $k, $mode) {
 $phi = +$phi;
 $k = +$k;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 44 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $phi;
 HEAPF64[$2 >> 3] = $k;
 HEAP32[$3 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_E_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29712, 29392, 620, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_legendre_sphPlm($l, $m, $x) {
 $l = $l | 0;
 $m = $m | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAP32[$2 >> 2] = $m;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_legendre_sphPlm_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53824, 53512, 777, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_hyperg_1F1_int($m, $n, $x) {
 $m = $m | 0;
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $m;
 HEAP32[$2 >> 2] = $n;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_1F1_int_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51696, 51680, 2059, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_cdf_weibull_Qinv($Q, $a, $b) {
 $Q = +$Q;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $11 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 } else {
  $11 = -+Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$x >> 3] = +HEAPF64[$2 >> 3] * +Math_pow(+$11, +(1.0 / +HEAPF64[$3 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 return 0.0;
}
function _gsl_cdf_gumbel2_Pinv($P, $a, $b) {
 $P = +$P;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $12 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = inf;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 } else {
  $12 = +HEAPF64[$3 >> 3] / -+Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[$x >> 3] = +Math_pow(+$12, +(1.0 / +HEAPF64[$2 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 return 0.0;
}
function _gsl_cdf_cauchy_Pinv($P, $a) {
 $P = +$P;
 $a = +$a;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $9 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = inf;
  $21 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$21;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = -inf;
  $21 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$21;
 }
 $9 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$1 >> 3] > .5) HEAPF64[$x >> 3] = $9 * +Math_tan(+((+HEAPF64[$1 >> 3] - .5) * 3.141592653589793)); else HEAPF64[$x >> 3] = -$9 / +Math_tan(+(+HEAPF64[$1 >> 3] * 3.141592653589793));
 HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
 $21 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$21;
}
function _gsl_sf_ellint_RC($x, $y, $mode) {
 $x = +$x;
 $y = +$y;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 44 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$3 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_RC_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29856, 29392, 635, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_log_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $14 = 0.0, $17 = 0, $2 = 0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[HEAP32[$2 >> 2] >> 3] = nan;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = nan;
  _gsl_error(53872, 53888, 116, 1);
  HEAP32[$0 >> 2] = 1;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  $9 = +Math_log(+(+HEAPF64[$1 >> 3]));
  HEAPF64[HEAP32[$2 >> 2] >> 3] = $9;
  $14 = +Math_abs(+(+HEAPF64[HEAP32[$2 >> 2] >> 3])) * 4.440892098500626e-16;
  HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $14;
  HEAP32[$0 >> 2] = 0;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}
function _gsl_sf_hyperg_U_int($a, $b, $x) {
 $a = $a | 0;
 $b = $b | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $a;
 HEAP32[$2 >> 2] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_U_int_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52232, 52168, 1740, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_legendre_Plm($l, $m, $x) {
 $l = $l | 0;
 $m = $m | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAP32[$2 >> 2] = $m;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_legendre_Plm_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53784, 53512, 772, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_cdf_gumbel1_Pinv($P, $a, $b) {
 $P = +$P;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $13 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = inf;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = -inf;
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 } else {
  $13 = +Math_log(+(-+HEAPF64[$3 >> 3] / +Math_log(+(+HEAPF64[$1 >> 3]))));
  HEAPF64[$x >> 3] = $13 / +HEAPF64[$2 >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $17 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$17;
 }
 return 0.0;
}
function _gsl_cdf_flat_Qinv($Q, $a, $b) {
 $Q = +$Q;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $3 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$3 >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 } else {
  HEAPF64[$x >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3] + (1.0 - +HEAPF64[$1 >> 3]) * +HEAPF64[$3 >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 return 0.0;
}
function _gsl_cdf_flat_Pinv($P, $a, $b) {
 $P = +$P;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $3 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$3 >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 } else {
  HEAPF64[$x >> 3] = (1.0 - +HEAPF64[$1 >> 3]) * +HEAPF64[$2 >> 3] + +HEAPF64[$1 >> 3] * +HEAPF64[$3 >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 return 0.0;
}
function _gsl_sf_laguerre_n($n, $a, $x) {
 $n = $n | 0;
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_laguerre_n_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52568, 52432, 334, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_hyperg_1F1($a, $b, $x) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_1F1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51744, 51680, 2064, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _poly_eval($c, $n, $x) {
 $c = $c | 0;
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $i = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 8 | 0;
 $i = sp + 16 | 0;
 $y = sp;
 HEAP32[$0 >> 2] = $c;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAPF64[$y >> 3] = +HEAPF64[HEAP32[$0 >> 2] >> 3] * +HEAPF64[$2 >> 3];
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) break;
  HEAPF64[$y >> 3] = +HEAPF64[$2 >> 3] * (+HEAPF64[$y >> 3] + +HEAPF64[(HEAP32[$0 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 3]);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAPF64[$y >> 3] = +HEAPF64[$y >> 3] + +HEAPF64[(HEAP32[$0 >> 2] | 0) + (HEAP32[$1 >> 2] << 3) >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$y >> 3]);
}
function _gsl_sf_hyperg_2F0($a, $b, $x) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_2F0_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51840, 51824, 62, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_hyperg_U($a, $b, $x) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_U_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52272, 52168, 1745, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_beta_inc($a, $b, $x) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $3 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $result = sp;
 $status = sp + 48 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$3 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_beta_inc_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(25984, 25944, 209, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_ran_gaussian($r, $sigma) {
 $r = $r | 0;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $26 = 0.0, $30 = 0.0, $r2 = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $x = sp + 16 | 0;
 $y = sp + 8 | 0;
 $r2 = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $sigma;
 do {
  HEAPF64[$x >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[$y >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0) * 2.0 + -1.0;
  HEAPF64[$r2 >> 3] = +HEAPF64[$x >> 3] * +HEAPF64[$x >> 3] + +HEAPF64[$y >> 3] * +HEAPF64[$y >> 3];
 } while (+HEAPF64[$r2 >> 3] > 1.0 | +HEAPF64[$r2 >> 3] == 0.0);
 $26 = +Math_log(+(+HEAPF64[$r2 >> 3])) * -2.0;
 $30 = +HEAPF64[$1 >> 3] * +HEAPF64[$y >> 3] * +Math_sqrt(+($26 / +HEAPF64[$r2 >> 3]));
 STACKTOP = sp;
 return +$30;
}
function _series_eval($r) {
 $r = +$r;
 var $0 = 0, $t_1 = 0, $t_5 = 0, $t_8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $t_8 = sp + 16 | 0;
 $t_5 = sp + 8 | 0;
 $t_1 = sp;
 HEAPF64[$0 >> 3] = $r;
 HEAPF64[$t_8 >> 3] = +HEAPF64[6595] + +HEAPF64[$0 >> 3] * (+HEAPF64[6596] + +HEAPF64[$0 >> 3] * (+HEAPF64[6597] + +HEAPF64[$0 >> 3] * +HEAPF64[6598]));
 HEAPF64[$t_5 >> 3] = +HEAPF64[6592] + +HEAPF64[$0 >> 3] * (+HEAPF64[6593] + +HEAPF64[$0 >> 3] * (+HEAPF64[6594] + +HEAPF64[$0 >> 3] * +HEAPF64[$t_8 >> 3]));
 HEAPF64[$t_1 >> 3] = +HEAPF64[6588] + +HEAPF64[$0 >> 3] * (+HEAPF64[6589] + +HEAPF64[$0 >> 3] * (+HEAPF64[6590] + +HEAPF64[$0 >> 3] * (+HEAPF64[6591] + +HEAPF64[$0 >> 3] * +HEAPF64[$t_5 >> 3])));
 STACKTOP = sp;
 return +(+HEAPF64[6587] + +HEAPF64[$0 >> 3] * +HEAPF64[$t_1 >> 3]);
}
function _gsl_ran_gumbel2_pdf($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $25 = 0.0, $3 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $p = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $25 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$25;
 } else {
  $14 = +HEAPF64[$3 >> 3] * +HEAPF64[$2 >> 3] * +Math_pow(+(+HEAPF64[$1 >> 3]), +-(+HEAPF64[$2 >> 3] + 1.0));
  HEAPF64[$p >> 3] = $14 * +Math_exp(+(-+HEAPF64[$3 >> 3] * +Math_pow(+(+HEAPF64[$1 >> 3]), +-+HEAPF64[$2 >> 3])));
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $25 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$25;
 }
 return 0.0;
}
function _triangle_selection_fails($two_ja, $two_jb, $two_jc) {
 $two_ja = $two_ja | 0;
 $two_jb = $two_jb | 0;
 $two_jc = $two_jc | 0;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0, $22 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = $two_ja;
 HEAP32[$1 >> 2] = $two_jb;
 HEAP32[$2 >> 2] = $two_jc;
 if ((HEAP32[$1 >> 2] | 0) < (Math_abs((HEAP32[$0 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) | 0)) {
  $22 = 1;
  $21 = $22 & 1;
  STACKTOP = sp;
  return $21 | 0;
 }
 if ((HEAP32[$1 >> 2] | 0) > ((HEAP32[$0 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0)) {
  $22 = 1;
  $21 = $22 & 1;
  STACKTOP = sp;
  return $21 | 0;
 }
 $22 = ((HEAP32[$0 >> 2] | 0) + (HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) & 1 | 0) != 0;
 $21 = $22 & 1;
 STACKTOP = sp;
 return $21 | 0;
}
function _C0sq($eta) {
 $eta = +$eta;
 var $0 = 0, $1 = 0, $13 = 0.0, $scale = 0, $twopieta = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $twopieta = sp + 16 | 0;
 $scale = sp;
 HEAPF64[$1 >> 3] = $eta;
 HEAPF64[$twopieta >> 3] = +HEAPF64[$1 >> 3] * 6.283185307179586;
 if (+Math_abs(+(+HEAPF64[$1 >> 3])) < 2.220446049250313e-16) {
  HEAPF64[$0 >> 3] = 1.0;
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 if (+HEAPF64[$twopieta >> 3] > 709.782712893384) {
  HEAPF64[$0 >> 3] = 0.0;
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  _gsl_sf_expm1_e(+HEAPF64[$twopieta >> 3], $scale) | 0;
  HEAPF64[$0 >> 3] = +HEAPF64[$twopieta >> 3] / +HEAPF64[$scale >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_cdf_laplace_Qinv($Q, $a) {
 $Q = +$Q;
 $a = +$a;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $9 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = inf;
  $21 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$21;
 }
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = -inf;
  $21 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$21;
 }
 $9 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$1 >> 3] < .5) HEAPF64[$x >> 3] = -$9 * +Math_log(+(+HEAPF64[$1 >> 3] * 2.0)); else HEAPF64[$x >> 3] = $9 * +Math_log(+((1.0 - +HEAPF64[$1 >> 3]) * 2.0));
 HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
 $21 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$21;
}
function _gsl_cdf_laplace_Pinv($P, $a) {
 $P = +$P;
 $a = +$a;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0.0, $9 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = inf;
  $21 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$21;
 }
 if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = -inf;
  $21 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$21;
 }
 $9 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$1 >> 3] < .5) HEAPF64[$x >> 3] = $9 * +Math_log(+(+HEAPF64[$1 >> 3] * 2.0)); else HEAPF64[$x >> 3] = -$9 * +Math_log(+((1.0 - +HEAPF64[$1 >> 3]) * 2.0));
 HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
 $21 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$21;
}
function _mt_1998_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 4357;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 HEAP32[$i >> 2] = 1;
 while (1) {
  $9 = HEAP32[$i >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= 624) break;
  HEAP32[(HEAP32[$state >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$state >> 2] | 0) + ($9 - 1 << 2) >> 2] | 0) * 69069;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$state >> 2] | 0) + 2496 >> 2] = $9;
 STACKTOP = sp;
 return;
}
function _gsl_cdf_gumbel1_Q($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $24 = 0.0, $P = 0, $Q = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $u = sp + 16 | 0;
 $Q = sp + 8 | 0;
 $P = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$u >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$0 >> 3] - +Math_log(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$P >> 3] = +Math_exp(+-+Math_exp(+-+HEAPF64[$u >> 3]));
 if (+HEAPF64[$P >> 3] < .5) {
  HEAPF64[$Q >> 3] = 1.0 - +HEAPF64[$P >> 3];
  $24 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$24;
 } else {
  HEAPF64[$Q >> 3] = -+_expm1(+-+Math_exp(+-+HEAPF64[$u >> 3]));
  $24 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$24;
 }
 return 0.0;
}
function _gsl_ran_shuffle($r, $base, $n, $size) {
 $r = $r | 0;
 $base = $base | 0;
 $n = $n | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $i = 0, $j = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $i = sp + 4 | 0;
 $j = sp;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $base;
 HEAP32[$2 >> 2] = $n;
 HEAP32[$3 >> 2] = $size;
 HEAP32[$i >> 2] = (HEAP32[$2 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 <= 0) break;
  HEAP32[$j >> 2] = _gsl_rng_uniform_int(HEAP32[$0 >> 2] | 0, (HEAP32[$i >> 2] | 0) + 1 | 0) | 0;
  _swap(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$i >> 2] | 0, HEAP32[$j >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 STACKTOP = sp;
 return;
}
function _libc5_initialize($x, $n, $s) {
 $x = $x | 0;
 $n = $n | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $16 = 0, $2 = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $x;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) == 0 ? 1 : $s;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$2 >> 2];
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
  $16 = (Math_imul(1103515145, HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) - 1 << 2) >> 2] | 0) | 0) + 12345 | 0;
  HEAP32[(HEAP32[$0 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $16;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gsl_sf_erf_Q_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $16 = 0.0, $18 = 0, $result_erfc = 0, $stat = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result_erfc = sp;
 $stat = sp + 24 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAP32[$stat >> 2] = _gsl_sf_erfc_e(+HEAPF64[$0 >> 3] / 1.4142135623730951, $result_erfc) | 0;
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$result_erfc >> 3] * .5;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = +HEAPF64[$result_erfc + 8 >> 3] * .5;
 $16 = +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3])) * 4.440892098500626e-16;
 $18 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
 HEAPF64[$18 >> 3] = +HEAPF64[$18 >> 3] + $16;
 STACKTOP = sp;
 return HEAP32[$stat >> 2] | 0;
}
function _bsd_initialize($x, $n, $s) {
 $x = $x | 0;
 $n = $n | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $16 = 0, $2 = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $x;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) == 0 ? 1 : $s;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$2 >> 2];
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$1 >> 2] | 0)) break;
  $16 = (Math_imul(1103515245, HEAP32[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) - 1 << 2) >> 2] | 0) | 0) + 12345 | 0;
  HEAP32[(HEAP32[$0 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $16;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gsl_sf_legendre_H3d_1($lambda, $eta) {
 $lambda = +$lambda;
 $eta = +$eta;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $eta;
 HEAP32[$status >> 2] = _gsl_sf_legendre_H3d_1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52888, 52808, 562, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_legendre_H3d_0($lambda, $eta) {
 $lambda = +$lambda;
 $eta = +$eta;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $eta;
 HEAP32[$status >> 2] = _gsl_sf_legendre_H3d_0_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52840, 52808, 557, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_ran_tdist_pdf($x, $nu) {
 $x = +$x;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $12 = 0.0, $16 = 0.0, $lg1 = 0, $lg2 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $p = sp + 16 | 0;
 $lg1 = sp + 8 | 0;
 $lg2 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$lg1 >> 3] = +_gsl_sf_lngamma(+HEAPF64[$1 >> 3] / 2.0);
 HEAPF64[$lg2 >> 3] = +_gsl_sf_lngamma((+HEAPF64[$1 >> 3] + 1.0) / 2.0);
 $12 = +Math_exp(+(+HEAPF64[$lg2 >> 3] - +HEAPF64[$lg1 >> 3]));
 $16 = $12 / +Math_sqrt(+(+HEAPF64[$1 >> 3] * 3.141592653589793));
 HEAPF64[$p >> 3] = $16 * +Math_pow(+(+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3] + 1.0), +(-(+HEAPF64[$1 >> 3] + 1.0) / 2.0));
 STACKTOP = sp;
 return +(+HEAPF64[$p >> 3]);
}
function _gsl_sf_airy_Bi_deriv_scaled($x, $mode) {
 $x = +$x;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_airy_Bi_deriv_scaled_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(4440, 4312, 882, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_airy_Ai_deriv_scaled($x, $mode) {
 $x = +$x;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_airy_Ai_deriv_scaled_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(4344, 4312, 872, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_conicalP_mhalf($lambda, $x) {
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_conicalP_mhalf_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53328, 53184, 1363, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_conicalP_half($lambda, $x) {
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_conicalP_half_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53280, 53184, 1358, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _push_stack($s, $v) {
 $s = $s | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $18 = 0, $2 = 0, $21 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$2 >> 2] = $v;
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = -1;
  $21 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 } else {
  HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] << 2) >> 2] = HEAP32[$2 >> 2];
  $18 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
  HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
  HEAP32[$0 >> 2] = 0;
  $21 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0;
}
function _gsl_sf_gegenpoly_3($lambda, $x) {
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gegenpoly_3_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51376, 51264, 188, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_gegenpoly_2($lambda, $x) {
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gegenpoly_2_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51328, 51264, 183, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_gegenpoly_1($lambda, $x) {
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gegenpoly_1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51280, 51264, 178, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_airy_Bi_scaled($x, $mode) {
 $x = +$x;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_airy_Bi_scaled_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(1560, 1408, 866, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_airy_Ai_scaled($x, $mode) {
 $x = +$x;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_airy_Ai_scaled_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(1472, 1408, 856, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_conicalP_1($lambda, $x) {
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_conicalP_1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53240, 53184, 1353, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_conicalP_0($lambda, $x) {
 $lambda = +$lambda;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $lambda;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_conicalP_0_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53200, 53184, 1348, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_ellint_Kcomp($k, $mode) {
 $k = +$k;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $k;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_Kcomp_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29536, 29392, 595, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_ellint_Ecomp($k, $mode) {
 $k = +$k;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $k;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_ellint_Ecomp_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29576, 29392, 600, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_airy_Bi_deriv($x, $mode) {
 $x = +$x;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_airy_Bi_deriv_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(4488, 4312, 887, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_airy_Ai_deriv($x, $mode) {
 $x = +$x;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_airy_Ai_deriv_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(4392, 4312, 877, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_zero_Jnu($nu, $s) {
 $nu = +$nu;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_bessel_zero_Jnu_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(20600, 20040, 1218, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Knu_scaled($nu, $x) {
 $nu = +$nu;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Knu_scaled_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(14032, 14016, 178, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Inu_scaled($nu, $x) {
 $nu = +$nu;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Inu_scaled_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12160, 12144, 115, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_kl_scaled($l, $x) {
 $l = $l | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_kl_scaled_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(16216, 16048, 245, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_il_scaled($l, $x) {
 $l = $l | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_il_scaled_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(15784, 15632, 327, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Kn_scaled($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Kn_scaled_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(13904, 13872, 234, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_In_scaled($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_In_scaled_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12040, 12008, 219, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_int($j, $x) {
 $j = $j | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $j;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_int_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(33600, 33392, 1612, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_inc_0($x, $b) {
 $x = +$x;
 $b = +$b;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $b;
 HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_inc_0_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(33760, 33392, 1632, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_lnKnu($nu, $x) {
 $nu = +$nu;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_lnKnu_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(14120, 14016, 188, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_airy_Bi($x, $mode) {
 $x = +$x;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_airy_Bi_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(1520, 1408, 861, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_airy_Ai($x, $mode) {
 $x = +$x;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $mode;
 HEAP32[$status >> 2] = _gsl_sf_airy_Ai_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(1432, 1408, 851, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_taylorcoeff($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_taylorcoeff_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38752, 38400, 1674, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_legendre_Ql($l, $x) {
 $l = $l | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_legendre_Ql_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53120, 53008, 365, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_legendre_Pl($l, $x) {
 $l = $l | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_legendre_Pl_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53744, 53512, 767, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_hydrogenicR_1($Z, $r) {
 $Z = +$Z;
 $r = +$r;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $Z;
 HEAPF64[$2 >> 3] = $r;
 HEAP32[$status >> 2] = _gsl_sf_hydrogenicR_1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(26344, 26312, 113, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_lnchoose($n, $m) {
 $n = $n | 0;
 $m = $m | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $m;
 HEAP32[$status >> 2] = _gsl_sf_lnchoose_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38824, 38400, 1684, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Ynu($nu, $x) {
 $nu = +$nu;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Ynu_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(14728, 14712, 130, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Knu($nu, $x) {
 $nu = +$nu;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Knu_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(14080, 14016, 183, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Jnu($nu, $x) {
 $nu = +$nu;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Jnu_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12728, 12712, 184, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Inu($nu, $x) {
 $nu = +$nu;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Inu_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12208, 12144, 121, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_gamma_inc_Q($a, $x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gamma_inc_Q_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51032, 50976, 715, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_gamma_inc_P($a, $x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gamma_inc_P_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(50992, 50976, 710, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_expint_En($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_expint_En_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31360, 31312, 565, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_yl($l, $x) {
 $l = $l | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_yl_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(19992, 19856, 289, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_jl($l, $x) {
 $l = $l | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $l;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_jl_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(15992, 15856, 394, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Yn($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Yn_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(14656, 14632, 215, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Kn($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Kn_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(13952, 13872, 239, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_Jn($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Jn_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12656, 12640, 198, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_bessel_In($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_In_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12088, 12008, 224, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_choose($n, $m) {
 $n = $n | 0;
 $m = $m | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$2 >> 2] = $m;
 HEAP32[$status >> 2] = _gsl_sf_choose_e(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38792, 38400, 1679, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_laguerre_3($a, $x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_laguerre_3_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52528, 52432, 329, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_laguerre_2($a, $x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_laguerre_2_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52488, 52432, 324, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_laguerre_1($a, $x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_laguerre_1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52448, 52432, 319, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_hyperg_0F1($c, $x) {
 $c = +$c;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $c;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hyperg_0F1_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51608, 51592, 177, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_exprel_n($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_exprel_n_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31232, 31024, 613, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_gamma_inc($a, $x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gamma_inc_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(51072, 50976, 720, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_ran_rayleigh_pdf($x, $sigma) {
 $x = +$x;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $p = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $p = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $sigma;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 } else {
  HEAPF64[$u >> 3] = +HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3];
  HEAPF64[$p >> 3] = +HEAPF64[$u >> 3] / +HEAPF64[$2 >> 3] * +Math_exp(+(-+HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] / 2.0));
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $19 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$19;
 }
 return 0.0;
}
function _gsl_sf_pow_int($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 36 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $n;
 HEAP32[$status >> 2] = _gsl_sf_pow_int_e(+HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(55536, 55520, 73, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_exp_mult($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$status >> 2] = _gsl_sf_exp_mult_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31096, 31024, 593, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_rng_memcpy($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 var $0 = 0, $1 = 0, $18 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $dest;
 HEAP32[$2 >> 2] = $src;
 if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) {
  _gsl_error(80280, 80232, 61, 4);
  HEAP32[$0 >> 2] = 4;
  $18 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  _memcpy(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 12 >> 2] | 0) | 0;
  HEAP32[$0 >> 2] = 0;
  $18 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}
function _gsl_ran_pareto_pdf($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $18 = 0.0, $2 = 0, $3 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $p = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] >= +HEAPF64[$3 >> 3]) {
  HEAPF64[$p >> 3] = +HEAPF64[$2 >> 3] / +HEAPF64[$3 >> 3] / +Math_pow(+(+HEAPF64[$1 >> 3] / +HEAPF64[$3 >> 3]), +(+HEAPF64[$2 >> 3] + 1.0));
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 } else {
  HEAPF64[$0 >> 3] = 0.0;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 return 0.0;
}
function _gsl_sf_psi_n($n, $x) {
 $n = $n | 0;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_psi_n_e(HEAP32[$1 >> 2] | 0, +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(57368, 55584, 865, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_pochrel($a, $x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_pochrel_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(55296, 55208, 464, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_lnpoch($a, $x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_lnpoch_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(55232, 55208, 454, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_lnbeta($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$status >> 2] = _gsl_sf_lnbeta_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(25864, 25856, 163, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_hzeta($s, $a) {
 $s = +$s;
 $a = +$a;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $s;
 HEAPF64[$2 >> 3] = $a;
 HEAP32[$status >> 2] = _gsl_sf_hzeta_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(65024, 62272, 1024, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_hypot($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$status >> 2] = _gsl_sf_hypot_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(61632, 61536, 736, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_poch($a, $x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_poch_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(55264, 55208, 459, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_sf_beta($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $result = sp;
 $status = sp + 40 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $y;
 HEAP32[$status >> 2] = _gsl_sf_beta_e(+HEAPF64[$1 >> 3], +HEAPF64[$2 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(25896, 25856, 168, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_cdf_poisson_Q($k, $mu) {
 $k = $k | 0;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $Q = 0, $a = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 16 | 0;
 $Q = sp + 8 | 0;
 $a = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $mu;
 if (+HEAPF64[$2 >> 3] <= 0.0) {
  _gsl_error(1096, 1104, 77, 1);
  HEAPF64[$0 >> 3] = nan;
  $12 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$12;
 } else {
  HEAPF64[$a >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0) + 1.0;
  HEAPF64[$Q >> 3] = +_gsl_cdf_gamma_P(+HEAPF64[$2 >> 3], +HEAPF64[$a >> 3], 1.0);
  HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
  $12 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$12;
 }
 return 0.0;
}
function _gsl_cdf_poisson_P($k, $mu) {
 $k = $k | 0;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $P = 0, $a = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 16 | 0;
 $P = sp + 8 | 0;
 $a = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $mu;
 if (+HEAPF64[$2 >> 3] <= 0.0) {
  _gsl_error(1096, 1104, 56, 1);
  HEAPF64[$0 >> 3] = nan;
  $12 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$12;
 } else {
  HEAPF64[$a >> 3] = +((HEAP32[$1 >> 2] | 0) >>> 0) + 1.0;
  HEAPF64[$P >> 3] = +_gsl_cdf_gamma_Q(+HEAPF64[$2 >> 3], +HEAPF64[$a >> 3], 1.0);
  HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
  $12 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$12;
 }
 return 0.0;
}
function _gsl_ran_laplace($r, $a) {
 $r = $r | 0;
 $a = +$a;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $20 = 0.0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 8 | 0;
 $u = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $a;
 do HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0) * 2.0 - 1.0; while (+HEAPF64[$u >> 3] == 0.0);
 $11 = +HEAPF64[$2 >> 3];
 if (+HEAPF64[$u >> 3] < 0.0) {
  HEAPF64[$0 >> 3] = $11 * +Math_log(+-+HEAPF64[$u >> 3]);
  $20 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$20;
 } else {
  HEAPF64[$0 >> 3] = -$11 * +Math_log(+(+HEAPF64[$u >> 3]));
  $20 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$20;
 }
 return 0.0;
}
function _gsl_ran_logarithmic_pdf($k, $p) {
 $k = $k | 0;
 $p = +$p;
 var $0 = 0, $1 = 0, $18 = 0.0, $2 = 0, $8 = 0.0, $P = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 8 | 0;
 $P = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAPF64[$0 >> 3] = 0.0;
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 } else {
  $8 = +Math_pow(+(+HEAPF64[$2 >> 3]), +(+((HEAP32[$1 >> 2] | 0) >>> 0)));
  HEAPF64[$P >> 3] = $8 / +((HEAP32[$1 >> 2] | 0) >>> 0) / +Math_log(+(1.0 / (1.0 - +HEAPF64[$2 >> 3])));
  HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 return 0.0;
}
function _gsl_sf_angle_restrict_symm($theta) {
 $theta = +$theta;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAPF64[$1 >> 3] = $theta;
 HEAPF64[$result >> 3] = +HEAPF64[$1 >> 3];
 HEAP32[$status >> 2] = _gsl_sf_angle_restrict_symm_e($result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(61728, 61536, 752, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _rand48_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $4 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $4 = (HEAP32[$1 >> 2] | 0) == 0;
 HEAP16[HEAP32[$state >> 2] >> 1] = 13070;
 if ($4) {
  HEAP16[(HEAP32[$state >> 2] | 0) + 2 >> 1] = -21555;
  HEAP16[(HEAP32[$state >> 2] | 0) + 4 >> 1] = 4660;
  STACKTOP = sp;
  return;
 } else {
  HEAP16[(HEAP32[$state >> 2] | 0) + 2 >> 1] = HEAP32[$1 >> 2];
  HEAP16[(HEAP32[$state >> 2] | 0) + 4 >> 1] = (HEAP32[$1 >> 2] | 0) >>> 16;
  STACKTOP = sp;
  return;
 }
}
function _gsl_sf_angle_restrict_pos($theta) {
 $theta = +$theta;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAPF64[$1 >> 3] = $theta;
 HEAPF64[$result >> 3] = +HEAPF64[$1 >> 3];
 HEAP32[$status >> 2] = _gsl_sf_angle_restrict_pos_e($result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(61768, 61536, 758, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _riemann_zeta_minus_1_intermediate_s($s, $result) {
 $s = +$s;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $7 = 0.0, $c = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 32 | 0;
 $t = sp + 16 | 0;
 $c = sp;
 HEAPF64[$0 >> 3] = $s;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[$t >> 3] = (+HEAPF64[$0 >> 3] - 10.0) / 5.0;
 _cheb_eval_e673(65408, +HEAPF64[$t >> 3], $c) | 0;
 $7 = +Math_exp(+(+HEAPF64[$c >> 3]));
 $11 = $7 + +Math_pow(2.0, +-+HEAPF64[$0 >> 3]);
 HEAPF64[HEAP32[$1 >> 2] >> 3] = $11;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = (+HEAPF64[$c + 8 >> 3] + 4.440892098500626e-16) * +HEAPF64[HEAP32[$1 >> 2] >> 3];
 STACKTOP = sp;
 return 0;
}
function _ranlxd_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $ir = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $ir = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$ir >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 104 >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 104 >> 2] = HEAP32[79800 + (HEAP32[$ir >> 2] << 2) >> 2];
 if ((HEAP32[(HEAP32[$state >> 2] | 0) + 104 >> 2] | 0) == (HEAP32[(HEAP32[$state >> 2] | 0) + 112 >> 2] | 0)) _increment_state814(HEAP32[$state >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[(HEAP32[$state >> 2] | 0) + (HEAP32[(HEAP32[$state >> 2] | 0) + 104 >> 2] << 3) >> 3]);
}
function _random256_glibc2_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _glibc2_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 63, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 1;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 630) break;
  _random256_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _random128_glibc2_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _glibc2_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 31, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 3;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 310) break;
  _random128_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _random64_glibc2_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _glibc2_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 15, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 1;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 150) break;
  _random64_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _random256_libc5_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _libc5_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 63, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 1;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 630) break;
  _random256_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _random128_libc5_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _libc5_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 31, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 3;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 310) break;
  _random128_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _locMAX4($x, $y, $z, $w) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $w = +$w;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $xy = 0, $xyz = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $xy = sp + 8 | 0;
 $xyz = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $y;
 HEAPF64[$2 >> 3] = $z;
 HEAPF64[$3 >> 3] = $w;
 HEAPF64[$xy >> 3] = +HEAPF64[$0 >> 3] > +HEAPF64[$1 >> 3] ? +HEAPF64[$0 >> 3] : +HEAPF64[$1 >> 3];
 HEAPF64[$xyz >> 3] = +HEAPF64[$xy >> 3] > +HEAPF64[$2 >> 3] ? +HEAPF64[$xy >> 3] : +HEAPF64[$2 >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$xyz >> 3] > +HEAPF64[$3 >> 3] ? +HEAPF64[$xyz >> 3] : +HEAPF64[$3 >> 3]);
}
function _random64_libc5_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _libc5_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 15, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 1;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 150) break;
  _random64_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _random32_glibc2_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _glibc2_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 7, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 3;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 70) break;
  _random32_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function runPostSets() {}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}
function _gsl_ran_fdist($r, $nu1, $nu2) {
 $r = $r | 0;
 $nu1 = +$nu1;
 $nu2 = +$nu2;
 var $0 = 0, $1 = 0, $2 = 0, $Y1 = 0, $Y2 = 0, $f = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $Y1 = sp + 16 | 0;
 $Y2 = sp + 8 | 0;
 $f = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $nu1;
 HEAPF64[$2 >> 3] = $nu2;
 HEAPF64[$Y1 >> 3] = +_gsl_ran_gamma(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3] / 2.0, 2.0);
 HEAPF64[$Y2 >> 3] = +_gsl_ran_gamma(HEAP32[$0 >> 2] | 0, +HEAPF64[$2 >> 3] / 2.0, 2.0);
 HEAPF64[$f >> 3] = +HEAPF64[$Y1 >> 3] * +HEAPF64[$2 >> 3] / (+HEAPF64[$Y2 >> 3] * +HEAPF64[$1 >> 3]);
 STACKTOP = sp;
 return +(+HEAPF64[$f >> 3]);
}
function _gsl_cdf_logistic_P($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $12 = 0.0, $17 = 0.0, $7 = 0.0, $P = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $P = sp + 8 | 0;
 $u = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 $7 = +HEAPF64[$u >> 3];
 if (+HEAPF64[$u >> 3] >= 0.0) {
  HEAPF64[$P >> 3] = 1.0 / (+Math_exp(+-$7) + 1.0);
  $17 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$17;
 } else {
  $12 = +Math_exp(+$7);
  HEAPF64[$P >> 3] = $12 / (+Math_exp(+(+HEAPF64[$u >> 3])) + 1.0);
  $17 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$17;
 }
 return 0.0;
}
function _random32_libc5_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _libc5_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 7, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 3;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 70) break;
  _random32_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _random256_bsd_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _bsd_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 63, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 1;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 630) break;
  _random256_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _random128_bsd_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _bsd_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 31, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 3;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 310) break;
  _random128_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _random64_bsd_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _bsd_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 15, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 1;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 150) break;
  _random64_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _ran_get768($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $r = 0, $state = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $state = sp + 8 | 0;
 $y = sp + 4 | 0;
 $r = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$y >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 HEAP32[$r >> 2] = ((HEAP32[$y >> 2] | 0) / 52774 | 0) * 3791;
 HEAP32[$y >> 2] = (((HEAP32[$y >> 2] | 0) % 52774 | 0) * 40692 | 0) - (HEAP32[$r >> 2] | 0);
 if ((HEAP32[$y >> 2] | 0) < 0) HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 2147483399;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$y >> 2];
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _gsl_cdf_logistic_Q($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $18 = 0.0, $7 = 0.0, $9 = 0.0, $Q = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $Q = sp + 8 | 0;
 $u = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 $7 = +HEAPF64[$u >> 3];
 if (+HEAPF64[$u >> 3] >= 0.0) {
  $9 = +Math_exp(+-$7);
  HEAPF64[$Q >> 3] = $9 / (+Math_exp(+-+HEAPF64[$u >> 3]) + 1.0);
  $18 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$18;
 } else {
  HEAPF64[$Q >> 3] = 1.0 / (+Math_exp(+$7) + 1.0);
  $18 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$18;
 }
 return 0.0;
}
function _random32_bsd_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _bsd_initialize((HEAP32[$state >> 2] | 0) + 8 | 0, 7, HEAP32[$1 >> 2] | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = 3;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 70) break;
  _random32_get(HEAP32[$state >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}
function _gsl_cdf_gumbel2_P($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $P = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $P = sp + 8 | 0;
 $u = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 if (+HEAPF64[$0 >> 3] == 0.0) {
  HEAPF64[$P >> 3] = 0.0;
  $13 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$u >> 3] = +Math_pow(+(+HEAPF64[$0 >> 3]), +(+HEAPF64[$1 >> 3]));
  HEAPF64[$P >> 3] = +Math_exp(+(-+HEAPF64[$2 >> 3] / +HEAPF64[$u >> 3]));
  $13 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_cdf_gumbel2_Q($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $Q = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $Q = sp + 8 | 0;
 $u = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 if (+HEAPF64[$0 >> 3] == 0.0) {
  HEAPF64[$Q >> 3] = 1.0;
  $14 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$14;
 } else {
  HEAPF64[$u >> 3] = +Math_pow(+(+HEAPF64[$0 >> 3]), +(+HEAPF64[$1 >> 3]));
  HEAPF64[$Q >> 3] = -+_expm1(+(-+HEAPF64[$2 >> 3] / +HEAPF64[$u >> 3]));
  $14 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$14;
 }
 return 0.0;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}
function _gsl_ran_exppow_pdf($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $13 = 0.0, $16 = 0.0, $2 = 0, $lngamma = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $p = sp + 8 | 0;
 $lngamma = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$lngamma >> 3] = +_gsl_sf_lngamma(1.0 / +HEAPF64[$2 >> 3] + 1.0);
 $13 = +Math_abs(+(+HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3]));
 $16 = -+Math_pow(+$13, +(+HEAPF64[$2 >> 3]));
 HEAPF64[$p >> 3] = 1.0 / (+HEAPF64[$1 >> 3] * 2.0) * +Math_exp(+($16 - +HEAPF64[$lngamma >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$p >> 3]);
}
function _ranlxs_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $is = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $is = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$is >> 2] = HEAP32[79984 + (HEAP32[(HEAP32[$state >> 2] | 0) + 304 >> 2] << 2) >> 2];
 HEAP32[(HEAP32[$state >> 2] | 0) + 304 >> 2] = HEAP32[$is >> 2];
 if ((HEAP32[$is >> 2] | 0) == (HEAP32[(HEAP32[$state >> 2] | 0) + 308 >> 2] | 0)) _increment_state819(HEAP32[$state >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF32[(HEAP32[$state >> 2] | 0) + 200 + (HEAP32[(HEAP32[$state >> 2] | 0) + 304 >> 2] << 2) >> 2]);
}
function _ran_get761($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $i = 0, $state = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $state = sp + 8 | 0;
 $i = sp + 4 | 0;
 $v = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$i >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 if (!(HEAP32[$i >> 2] | 0)) _ran_array763((HEAP32[$state >> 2] | 0) + 4 | 0, 1009, (HEAP32[$state >> 2] | 0) + 4040 | 0);
 HEAP32[$v >> 2] = HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = (((HEAP32[$i >> 2] | 0) + 1 | 0) >>> 0) % 100 | 0;
 STACKTOP = sp;
 return HEAP32[$v >> 2] | 0;
}
function _gsl_cdf_beta_Q($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $Q = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 do if (+HEAPF64[$1 >> 3] >= 1.0) HEAPF64[$0 >> 3] = 0.0; else if (+HEAPF64[$1 >> 3] <= 0.0) {
  HEAPF64[$0 >> 3] = 1.0;
  break;
 } else {
  HEAPF64[$Q >> 3] = +_beta_inc_AXPY(-1.0, 1.0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$1 >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
  break;
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _gsl_cdf_beta_P($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $P = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $P = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 do if (+HEAPF64[$1 >> 3] <= 0.0) HEAPF64[$0 >> 3] = 0.0; else if (+HEAPF64[$1 >> 3] >= 1.0) {
  HEAPF64[$0 >> 3] = 1.0;
  break;
 } else {
  HEAPF64[$P >> 3] = +_beta_inc_AXPY(1.0, 0.0, +HEAPF64[$2 >> 3], +HEAPF64[$3 >> 3], +HEAPF64[$1 >> 3]);
  HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
  break;
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _gsl_ran_geometric($r, $p) {
 $r = $r | 0;
 $p = +$p;
 var $0 = 0, $1 = 0, $14 = 0, $7 = 0.0, $k = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $u = sp;
 $k = sp + 16 | 0;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $p;
 HEAPF64[$u >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0);
 if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAP32[$k >> 2] = 1;
  $14 = HEAP32[$k >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 } else {
  $7 = +Math_log(+(+HEAPF64[$u >> 3]));
  HEAP32[$k >> 2] = ~~($7 / +Math_log(+(1.0 - +HEAPF64[$1 >> 3])) + 1.0) >>> 0;
  $14 = HEAP32[$k >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 return 0;
}
function _gsl_sf_airy_zero_Bi_deriv($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_airy_zero_Bi_deriv_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(10376, 7408, 545, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_airy_zero_Ai_deriv($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_airy_zero_Ai_deriv_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(10336, 7408, 540, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_cdf_cauchy_P($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $14 = 0.0, $7 = 0.0, $P = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $P = sp + 8 | 0;
 $u = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 $7 = +HEAPF64[$u >> 3];
 if (+HEAPF64[$u >> 3] > -1.0) {
  HEAPF64[$P >> 3] = +Math_atan(+$7) / 3.141592653589793 + .5;
  $14 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$14;
 } else {
  HEAPF64[$P >> 3] = +Math_atan(+(-1.0 / $7)) / 3.141592653589793;
  $14 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$14;
 }
 return 0.0;
}
function _ran_set705($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0, $diff = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $diff = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$diff >> 2] = (((((HEAP32[$1 >> 2] | 0) >>> 0) % 4 | 0) - 2 | 0) >>> 0) % 4294967295 | 0;
 $9 = HEAP32[$1 >> 2] | 0;
 if (HEAP32[$diff >> 2] | 0) {
  HEAP32[HEAP32[$state >> 2] >> 2] = $9 - (HEAP32[$diff >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  HEAP32[HEAP32[$state >> 2] >> 2] = $9;
  STACKTOP = sp;
  return;
 }
}
function _gsl_ran_geometric_pdf($k, $p) {
 $k = $k | 0;
 $p = +$p;
 var $0 = 0, $1 = 0, $2 = 0, $7 = 0.0, $P = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 8 | 0;
 $P = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 do if (!(HEAP32[$1 >> 2] | 0)) HEAPF64[$0 >> 3] = 0.0; else {
  $7 = +HEAPF64[$2 >> 3];
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   HEAPF64[$0 >> 3] = $7;
   break;
  } else {
   HEAPF64[$P >> 3] = $7 * +Math_pow(+(1.0 - +HEAPF64[$2 >> 3]), +(+((HEAP32[$1 >> 2] | 0) >>> 0) - 1.0));
   HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
   break;
  }
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _gsl_cdf_cauchy_Q($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $14 = 0.0, $7 = 0.0, $Q = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $Q = sp + 8 | 0;
 $u = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 $7 = +HEAPF64[$u >> 3];
 if (+HEAPF64[$u >> 3] < 1.0) {
  HEAPF64[$Q >> 3] = .5 - +Math_atan(+$7) / 3.141592653589793;
  $14 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$14;
 } else {
  HEAPF64[$Q >> 3] = +Math_atan(+(1.0 / $7)) / 3.141592653589793;
  $14 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$14;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_mhalf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_mhalf_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(33640, 33392, 1617, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_3half($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_3half_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(33720, 33392, 1627, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_half($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_half_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(33680, 33392, 1622, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_zero_J1($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_bessel_zero_J1_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(20560, 20040, 1213, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_zero_J0($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_bessel_zero_J0_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(20520, 20040, 1208, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_k2_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_k2_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(16176, 16048, 240, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_k1_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_k1_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(16136, 16048, 235, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_k0_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_k0_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(16096, 16048, 230, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_i2_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_i2_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(15744, 15632, 322, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_i1_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_i1_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(15704, 15632, 317, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_i0_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_i0_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(15664, 15632, 312, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_K1_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_K1_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(13352, 13320, 214, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_K0_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_K0_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12800, 12784, 207, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_I1_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_I1_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(11392, 11360, 252, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_I0_scaled($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_I0_scaled_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(10736, 10720, 226, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _ran2_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $x = 0, $x_max = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp;
 $1 = sp + 16 | 0;
 $x_max = sp + 12 | 0;
 $x = sp + 8 | 0;
 HEAP32[$1 >> 2] = $vstate;
 HEAPF32[$x_max >> 2] = .9999998807907104;
 HEAPF32[$x >> 2] = +((_ran2_get(HEAP32[$1 >> 2] | 0) | 0) >>> 0) / 2147483520.0;
 if (+HEAPF32[$x >> 2] > +HEAPF32[$x_max >> 2]) {
  HEAPF64[$0 >> 3] = +HEAPF32[$x_max >> 2];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF32[$x >> 2];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _ran1_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $x = 0, $x_max = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp;
 $1 = sp + 16 | 0;
 $x_max = sp + 12 | 0;
 $x = sp + 8 | 0;
 HEAP32[$1 >> 2] = $vstate;
 HEAPF32[$x_max >> 2] = .9999998807907104;
 HEAPF32[$x >> 2] = +((_ran1_get(HEAP32[$1 >> 2] | 0) | 0) >>> 0) / 2147483648.0;
 if (+HEAPF32[$x >> 2] > +HEAPF32[$x_max >> 2]) {
  HEAPF64[$0 >> 3] = +HEAPF32[$x_max >> 2];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF32[$x >> 2];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_sf_lndoublefact($n) {
 $n = $n | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$status >> 2] = _gsl_sf_lndoublefact_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38584, 38400, 1649, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_m1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_m1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(33440, 33392, 1592, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_legendre_P3_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $13 = 0.0, $16 = 0.0, $25 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$0 >> 3] * .5 * (+HEAPF64[$0 >> 3] * 5.0 * +HEAPF64[$0 >> 3] - 3.0);
 $13 = +Math_abs(+(+HEAPF64[HEAP32[$1 >> 2] >> 3]));
 $16 = +Math_abs(+(+HEAPF64[$0 >> 3])) * .5;
 $25 = ($13 + $16 * (+Math_abs(+(+HEAPF64[$0 >> 3] * 5.0 * +HEAPF64[$0 >> 3])) + 3.0)) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $25;
 STACKTOP = sp;
 return 0;
}
function _gsl_sf_fermi_dirac_2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_2_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(33560, 33392, 1607, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(33520, 33392, 1602, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_fermi_dirac_0($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_fermi_dirac_0_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(33480, 33392, 1597, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_airy_zero_Bi($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_airy_zero_Bi_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(10296, 7408, 535, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_airy_zero_Ai($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_airy_zero_Ai_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(10256, 7408, 530, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_synchrotron_2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_synchrotron_2_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(59648, 59576, 284, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_synchrotron_1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_synchrotron_1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(59608, 59576, 279, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_log_1plusx_mx($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_log_1plusx_mx_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53992, 53888, 265, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_zetam1_int($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_zetam1_int_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(65120, 62272, 1039, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_doublefact($n) {
 $n = $n | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$status >> 2] = _gsl_sf_doublefact_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38552, 38400, 1644, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_cdf_rayleigh_Pinv($P, $sigma) {
 $P = +$P;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $2 = 0, $8 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $sigma;
 do if (+HEAPF64[$1 >> 3] == 1.0) HEAPF64[$0 >> 3] = inf; else if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  break;
 } else {
  $8 = +HEAPF64[$2 >> 3] * 1.4142135623730951;
  HEAPF64[$x >> 3] = $8 * +Math_sqrt(+-+_log1p(+-+HEAPF64[$1 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  break;
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _pop_stack($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $18 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $s;
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0)) {
  _gsl_error(66064, 65904, 191, 7);
  HEAP32[$0 >> 2] = 7;
  $18 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  $7 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) - 1;
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] << 2) >> 2];
  $18 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}
function _gsl_sf_transport_5($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_transport_5_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(60776, 60624, 491, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_transport_4($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_transport_4_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(60736, 60624, 486, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_transport_3($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_transport_3_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(60696, 60624, 481, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_transport_2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_transport_2_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(60656, 60624, 476, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_psi_1_int($n) {
 $n = $n | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$status >> 2] = _gsl_sf_psi_1_int_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(57304, 55584, 855, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_legendre_Q1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_legendre_Q1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53080, 53008, 360, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_legendre_Q0($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_legendre_Q0_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53040, 53008, 355, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_legendre_P3($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_legendre_P3_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53704, 53512, 762, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_legendre_P2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_legendre_P2_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53664, 53512, 757, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_legendre_P1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_legendre_P1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53624, 53512, 752, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_lambert_Wm1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_lambert_Wm1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52656, 52640, 230, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_zeta_int($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_zeta_int_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(65056, 62272, 1029, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_log_1plusx($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_log_1plusx_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53960, 53888, 260, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_lambert_W0($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_lambert_W0_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(52608, 52640, 225, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_gammastar($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gammastar_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38688, 38400, 1664, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_eta_int($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$status >> 2] = _gsl_sf_eta_int_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(65152, 62272, 1044, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_psi_int($n) {
 $n = $n | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$status >> 2] = _gsl_sf_psi_int_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(57208, 55584, 840, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_expint_Ei($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_expint_Ei_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31400, 31312, 575, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_expint_E2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_expint_E2_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31328, 31312, 555, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_expint_E1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_expint_E1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31280, 31312, 545, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_y2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_y2_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(19960, 19856, 284, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_y1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_y1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(19928, 19856, 279, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_y0($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_y0_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(19896, 19856, 274, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_j2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_j2_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(15960, 15856, 389, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_j1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_j1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(15928, 15856, 384, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_j0($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_j0_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(15896, 15856, 379, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_Y1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Y1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(14440, 14392, 136, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_Y0($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_Y0_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(14208, 14176, 121, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_K1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_K1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(13392, 13320, 219, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_K0($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_K0_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12840, 12784, 212, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_J1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_J1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12464, 12448, 127, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_J0($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_J0_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(12248, 12280, 110, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_I1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_I1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(11432, 11360, 257, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_bessel_I0($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_bessel_I0_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(10776, 10720, 231, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_lnfact($n) {
 $n = $n | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$status >> 2] = _gsl_sf_lnfact_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38520, 38400, 1639, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_gammainv($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gammainv_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38720, 38400, 1669, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_psi_1piy($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_psi_1piy_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(57272, 55584, 850, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_log_erfc($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_log_erfc_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(30128, 30088, 443, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_exprel_2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_exprel_2_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31200, 31024, 608, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_expint_3($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_expint_3_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(32904, 32888, 145, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_lngamma($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_lngamma_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38624, 38400, 1654, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_log_abs($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_log_abs_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53928, 53888, 255, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_debye_6($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_debye_6_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(28232, 28048, 565, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_debye_5($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_debye_5_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(28200, 28048, 560, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_debye_4($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_debye_4_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(28168, 28048, 555, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_debye_3($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_debye_3_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(28136, 28048, 550, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_debye_2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_debye_2_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(28104, 28048, 545, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_debye_1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_debye_1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(28072, 28048, 540, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_clausen($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_clausen_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(26024, 26056, 110, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_atanint($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_atanint_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(10416, 10448, 114, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_zetam1($s) {
 $s = +$s;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $s;
 HEAP32[$status >> 2] = _gsl_sf_zetam1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(65088, 62272, 1034, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_fact($n) {
 $n = $n | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $result = sp;
 $status = sp + 24 | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$status >> 2] = _gsl_sf_fact_e(HEAP32[$1 >> 2] | 0, $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38488, 38400, 1634, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_lnsinh($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_lnsinh_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(61664, 61536, 741, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_lncosh($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_lncosh_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(61696, 61536, 746, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_hazard($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_hazard_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(30256, 30088, 463, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_exprel($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_exprel_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31168, 31024, 603, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_dawson($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_dawson_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(26776, 26760, 280, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_gamma($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_gamma_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(38656, 38400, 1659, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_psi_1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_psi_1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(57336, 55584, 860, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_expm1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_expm1_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31136, 31024, 598, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_erf_Z($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_erf_Z_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(30192, 30088, 453, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_erf_Q($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_erf_Q_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(30224, 30088, 458, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_dilog($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_dilog_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(29280, 29312, 661, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_zeta($s) {
 $s = +$s;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $s;
 HEAP32[$status >> 2] = _gsl_sf_zeta_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(64992, 62272, 1019, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_sinc($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_sinc_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(61808, 61536, 770, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_erfc($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_erfc_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(30096, 30088, 438, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_eta($s) {
 $s = +$s;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $s;
 HEAP32[$status >> 2] = _gsl_sf_eta_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(65184, 62272, 1049, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_ran_exponential_pdf($x, $mu) {
 $x = +$x;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $13 = 0.0, $2 = 0, $9 = 0.0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $p = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $mu;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 } else {
  $9 = +Math_exp(+(-+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3]));
  HEAPF64[$p >> 3] = $9 / +HEAPF64[$2 >> 3];
  HEAPF64[$0 >> 3] = +HEAPF64[$p >> 3];
  $13 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$13;
 }
 return 0.0;
}
function _gsl_cdf_laplace_P($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $15 = 0.0, $7 = 0.0, $P = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $P = sp + 8 | 0;
 $u = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 $7 = +HEAPF64[$u >> 3];
 if (+HEAPF64[$u >> 3] > 0.0) {
  HEAPF64[$P >> 3] = (1.0 - +Math_exp(+-$7)) * .5 + .5;
  $15 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$15;
 } else {
  HEAPF64[$P >> 3] = +Math_exp(+$7) * .5;
  $15 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$15;
 }
 return 0.0;
}
function _gsl_sf_sin($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_sin_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(61568, 61536, 726, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_psi($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_psi_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(57240, 55584, 845, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_log($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_log_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(53896, 53888, 250, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_exp($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_exp_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(31064, 31024, 588, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_erf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_erf_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(30160, 30088, 448, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_cos($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_cos_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(61600, 61536, 731, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_Shi($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_Shi_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(58104, 58064, 129, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_Chi($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_Chi_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(58136, 58064, 134, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_cdf_rayleigh_Qinv($Q, $sigma) {
 $Q = +$Q;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $2 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $sigma;
 do if (+HEAPF64[$1 >> 3] == 0.0) HEAPF64[$0 >> 3] = inf; else if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = 0.0;
  break;
 } else {
  HEAPF64[$x >> 3] = +HEAPF64[$2 >> 3] * 1.4142135623730951 * +Math_sqrt(+-+Math_log(+(+HEAPF64[$1 >> 3])));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  break;
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _gsl_sf_Si($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_Si_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(58288, 58272, 396, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _gsl_sf_Ci($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $9 = 0.0, $result = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $result = sp;
 $status = sp + 32 | 0;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$status >> 2] = _gsl_sf_Ci_e(+HEAPF64[$1 >> 3], $result) | 0;
 if (HEAP32[$status >> 2] | 0) {
  _gsl_error(58312, 58272, 401, HEAP32[$status >> 2] | 0);
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 } else {
  HEAPF64[$0 >> 3] = +HEAPF64[$result >> 3];
  $9 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$9;
 }
 return 0.0;
}
function _slatec_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$1 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 8 | 0;
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] << 19;
 HEAP32[HEAP32[$state >> 2] >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2048 | 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = (((HEAP32[$1 >> 2] | 0) - (HEAP32[HEAP32[$state >> 2] >> 2] | 0) | 0) >>> 0) / 2048 | 0;
 STACKTOP = sp;
 return;
}
function _gsl_cdf_flat_Q($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $Q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $Q = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 do if (+HEAPF64[$0 >> 3] < +HEAPF64[$1 >> 3]) HEAPF64[$Q >> 3] = 1.0; else if (+HEAPF64[$0 >> 3] > +HEAPF64[$2 >> 3]) {
  HEAPF64[$Q >> 3] = 0.0;
  break;
 } else {
  HEAPF64[$Q >> 3] = (+HEAPF64[$2 >> 3] - +HEAPF64[$0 >> 3]) / (+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]);
  break;
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$Q >> 3]);
}
function _gsl_cdf_flat_P($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $P = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $P = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 do if (+HEAPF64[$0 >> 3] < +HEAPF64[$1 >> 3]) HEAPF64[$P >> 3] = 0.0; else if (+HEAPF64[$0 >> 3] > +HEAPF64[$2 >> 3]) {
  HEAPF64[$P >> 3] = 1.0;
  break;
 } else {
  HEAPF64[$P >> 3] = (+HEAPF64[$0 >> 3] - +HEAPF64[$1 >> 3]) / (+HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3]);
  break;
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$P >> 3]);
}
function _gsl_cdf_laplace_Q($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $14 = 0.0, $7 = 0.0, $Q = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $Q = sp + 8 | 0;
 $u = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 $7 = +HEAPF64[$u >> 3];
 if (+HEAPF64[$u >> 3] > 0.0) {
  HEAPF64[$Q >> 3] = +Math_exp(+-$7) * .5;
  $14 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$14;
 } else {
  HEAPF64[$Q >> 3] = 1.0 - +Math_exp(+$7) * .5;
  $14 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$14;
 }
 return 0.0;
}
function _gsl_cdf_pareto_P($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $P = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $P = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 if (+HEAPF64[$0 >> 3] < +HEAPF64[$2 >> 3]) {
  HEAPF64[$P >> 3] = 0.0;
  $12 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$12;
 } else {
  HEAPF64[$P >> 3] = 1.0 - +Math_pow(+(+HEAPF64[$2 >> 3] / +HEAPF64[$0 >> 3]), +(+HEAPF64[$1 >> 3]));
  $12 = +HEAPF64[$P >> 3];
  STACKTOP = sp;
  return +$12;
 }
 return 0.0;
}
function _gsl_cdf_pareto_Q($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $Q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $Q = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 if (+HEAPF64[$0 >> 3] < +HEAPF64[$2 >> 3]) {
  HEAPF64[$Q >> 3] = 1.0;
  $11 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$Q >> 3] = +Math_pow(+(+HEAPF64[$2 >> 3] / +HEAPF64[$0 >> 3]), +(+HEAPF64[$1 >> 3]));
  $11 = +HEAPF64[$Q >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_cdf_logistic_Qinv($Q, $a) {
 $Q = +$Q;
 $a = +$a;
 var $0 = 0, $1 = 0, $2 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $Q;
 HEAPF64[$2 >> 3] = $a;
 do if (+HEAPF64[$1 >> 3] == 0.0) HEAPF64[$0 >> 3] = inf; else if (+HEAPF64[$1 >> 3] == 1.0) {
  HEAPF64[$0 >> 3] = -inf;
  break;
 } else {
  HEAPF64[$x >> 3] = +HEAPF64[$2 >> 3] * +Math_log(+((1.0 - +HEAPF64[$1 >> 3]) / +HEAPF64[$1 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  break;
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _gsl_cdf_logistic_Pinv($P, $a) {
 $P = +$P;
 $a = +$a;
 var $0 = 0, $1 = 0, $2 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$1 >> 3] = $P;
 HEAPF64[$2 >> 3] = $a;
 do if (+HEAPF64[$1 >> 3] == 1.0) HEAPF64[$0 >> 3] = inf; else if (+HEAPF64[$1 >> 3] == 0.0) {
  HEAPF64[$0 >> 3] = -inf;
  break;
 } else {
  HEAPF64[$x >> 3] = +HEAPF64[$2 >> 3] * +Math_log(+(+HEAPF64[$1 >> 3] / (1.0 - +HEAPF64[$1 >> 3])));
  HEAPF64[$0 >> 3] = +HEAPF64[$x >> 3];
  break;
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _ran_get749($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $i = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$i >> 2] = HEAP32[HEAP32[$state >> 2] >> 2];
 if (!(HEAP32[$i >> 2] | 0)) _ran_array((HEAP32[$state >> 2] | 0) + 4 | 0, 2009, (HEAP32[$state >> 2] | 0) + 8040 | 0);
 HEAP32[HEAP32[$state >> 2] >> 2] = (((HEAP32[$i >> 2] | 0) + 1 | 0) >>> 0) % 2009 | 0;
 STACKTOP = sp;
 return HEAP32[(HEAP32[$state >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] | 0;
}
function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $1 = 0, $6 = 0, $req$0 = 0, sp = 0;
 sp = STACKTOP;
 if (!$n_elements) $req$0 = 0; else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($1 >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $1 : -1; else $req$0 = $1;
 }
 $6 = _malloc($req$0) | 0;
 if (!$6) {
  STACKTOP = sp;
  return $6 | 0;
 }
 if (!(HEAP32[$6 + -4 >> 2] & 3)) {
  STACKTOP = sp;
  return $6 | 0;
 }
 _memset($6 | 0, 0, $req$0 | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}
function _gsl_ran_flat_pdf($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $14 = 0.0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $a;
 HEAPF64[$3 >> 3] = $b;
 if (+HEAPF64[$1 >> 3] < +HEAPF64[$3 >> 3]) if (+HEAPF64[$1 >> 3] >= +HEAPF64[$2 >> 3]) {
  HEAPF64[$0 >> 3] = 1.0 / (+HEAPF64[$3 >> 3] - +HEAPF64[$2 >> 3]);
  $14 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$14;
 }
 HEAPF64[$0 >> 3] = 0.0;
 $14 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$14;
}
function _gsl_ran_gumbel1($r, $a, $b) {
 $r = $r | 0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $6 = 0.0, $x = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $x = sp + 8 | 0;
 $z = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$x >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0);
 $6 = +Math_log(+(+HEAPF64[$2 >> 3]));
 $11 = $6 - +Math_log(+-+Math_log(+(+HEAPF64[$x >> 3])));
 HEAPF64[$z >> 3] = $11 / +HEAPF64[$1 >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$z >> 3]);
}
function _gsl_cdf_exponential_Q($x, $mu) {
 $x = +$x;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $11 = 0.0, $2 = 0, $Q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $Q = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $mu;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[$0 >> 3] = 1.0;
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 } else {
  HEAPF64[$Q >> 3] = +Math_exp(+(-+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$Q >> 3];
  $11 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$11;
 }
 return 0.0;
}
function _gsl_ran_gaussian_pdf($x, $sigma) {
 $x = +$x;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $10 = 0.0, $6 = 0.0, $p = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $p = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $sigma;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +Math_abs(+(+HEAPF64[$1 >> 3]));
 $6 = +Math_sqrt(6.283185307179586);
 $10 = 1.0 / ($6 * +Math_abs(+(+HEAPF64[$1 >> 3])));
 HEAPF64[$p >> 3] = $10 * +Math_exp(+(-+HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] / 2.0));
 STACKTOP = sp;
 return +(+HEAPF64[$p >> 3]);
}
function _gsl_cdf_exponential_P($x, $mu) {
 $x = +$x;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $P = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $P = sp;
 HEAPF64[$1 >> 3] = $x;
 HEAPF64[$2 >> 3] = $mu;
 if (+HEAPF64[$1 >> 3] < 0.0) {
  HEAPF64[$0 >> 3] = 0.0;
  $12 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$12;
 } else {
  HEAPF64[$P >> 3] = -+_expm1(+(-+HEAPF64[$1 >> 3] / +HEAPF64[$2 >> 3]));
  HEAPF64[$0 >> 3] = +HEAPF64[$P >> 3];
  $12 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$12;
 }
 return 0.0;
}
function _gsl_ran_dir_2d_trig_method($r, $x, $y) {
 $r = $r | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $7 = 0.0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $t = sp;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $x;
 HEAP32[$2 >> 2] = $y;
 HEAPF64[$t >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0) * 6.283185307179586;
 $7 = +Math_cos(+(+HEAPF64[$t >> 3]));
 HEAPF64[HEAP32[$1 >> 2] >> 3] = $7;
 $10 = +Math_sin(+(+HEAPF64[$t >> 3]));
 HEAPF64[HEAP32[$2 >> 2] >> 3] = $10;
 STACKTOP = sp;
 return;
}
function _gsl_ran_negative_binomial($r, $p, $n) {
 $r = $r | 0;
 $p = +$p;
 $n = +$n;
 var $0 = 0, $1 = 0, $2 = 0, $X = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $X = sp;
 $k = sp + 24 | 0;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $p;
 HEAPF64[$2 >> 3] = $n;
 HEAPF64[$X >> 3] = +_gsl_ran_gamma(HEAP32[$0 >> 2] | 0, +HEAPF64[$2 >> 3], 1.0);
 HEAP32[$k >> 2] = _gsl_ran_poisson(HEAP32[$0 >> 2] | 0, +HEAPF64[$X >> 3] * (1.0 - +HEAPF64[$1 >> 3]) / +HEAPF64[$1 >> 3]) | 0;
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}
function _gsl_sf_laguerre_1_e($a, $x, $result) {
 $a = +$a;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $14 = 0.0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = sp + 16 | 0;
 HEAPF64[$0 >> 3] = $a;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$0 >> 3] + 1.0 - +HEAPF64[$1 >> 3];
 $10 = +Math_abs(+(+HEAPF64[$0 >> 3])) + 1.0;
 $14 = ($10 + +Math_abs(+(+HEAPF64[$1 >> 3]))) * 4.440892098500626e-16;
 HEAPF64[(HEAP32[$2 >> 2] | 0) + 8 >> 3] = $14;
 STACKTOP = sp;
 return 0;
}
function _gsl_ran_beta($r, $a, $b) {
 $r = $r | 0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $x1 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $x1 = sp + 8 | 0;
 $x2 = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$x1 >> 3] = +_gsl_ran_gamma(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3], 1.0);
 HEAPF64[$x2 >> 3] = +_gsl_ran_gamma(HEAP32[$0 >> 2] | 0, +HEAPF64[$2 >> 3], 1.0);
 STACKTOP = sp;
 return +(+HEAPF64[$x1 >> 3] / (+HEAPF64[$x1 >> 3] + +HEAPF64[$x2 >> 3]));
}
function _gsl_cdf_lognormal_Q($x, $zeta, $sigma) {
 $x = +$x;
 $zeta = +$zeta;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0.0, $Q = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $Q = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $zeta;
 HEAPF64[$2 >> 3] = $sigma;
 $4 = +Math_log(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$u >> 3] = ($4 - +HEAPF64[$1 >> 3]) / +HEAPF64[$2 >> 3];
 HEAPF64[$Q >> 3] = +_gsl_cdf_ugaussian_Q(+HEAPF64[$u >> 3]);
 STACKTOP = sp;
 return +(+HEAPF64[$Q >> 3]);
}
function _gsl_cdf_lognormal_P($x, $zeta, $sigma) {
 $x = +$x;
 $zeta = +$zeta;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0.0, $P = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $P = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $zeta;
 HEAPF64[$2 >> 3] = $sigma;
 $4 = +Math_log(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$u >> 3] = ($4 - +HEAPF64[$1 >> 3]) / +HEAPF64[$2 >> 3];
 HEAPF64[$P >> 3] = +_gsl_cdf_ugaussian_P(+HEAPF64[$u >> 3]);
 STACKTOP = sp;
 return +(+HEAPF64[$P >> 3]);
}
function _ran_set753($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 STACKTOP = sp;
 return;
}
function _gsl_ran_logistic_pdf($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $10 = 0.0, $4 = 0.0, $p = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $p = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 $4 = -+Math_abs(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$u >> 3] = +Math_exp(+($4 / +HEAPF64[$1 >> 3]));
 $10 = +Math_abs(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$p >> 3] = +HEAPF64[$u >> 3] / ($10 * (+HEAPF64[$u >> 3] + 1.0) * (+HEAPF64[$u >> 3] + 1.0));
 STACKTOP = sp;
 return +(+HEAPF64[$p >> 3]);
}
function _gsl_ran_weibull($r, $a, $b) {
 $r = $r | 0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $7 = 0.0, $x = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $x = sp + 8 | 0;
 $z = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$x >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0);
 $7 = -+Math_log(+(+HEAPF64[$x >> 3]));
 HEAPF64[$z >> 3] = +Math_pow(+$7, +(1.0 / +HEAPF64[$2 >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$1 >> 3] * +HEAPF64[$z >> 3]);
}
function _gsl_ran_gumbel2($r, $a, $b) {
 $r = $r | 0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $9 = 0.0, $x = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $x = sp + 8 | 0;
 $z = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$x >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0);
 $9 = -+HEAPF64[$2 >> 3] / +Math_log(+(+HEAPF64[$x >> 3]));
 HEAPF64[$z >> 3] = +Math_pow(+$9, +(1.0 / +HEAPF64[$1 >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$z >> 3]);
}
function _gsl_ran_bernoulli($r, $p) {
 $r = $r | 0;
 $p = +$p;
 var $0 = 0, $1 = 0, $2 = 0, $8 = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $u = sp;
 HEAP32[$1 >> 2] = $r;
 HEAPF64[$2 >> 3] = $p;
 HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$1 >> 2] | 0);
 if (+HEAPF64[$u >> 3] < +HEAPF64[$2 >> 3]) {
  HEAP32[$0 >> 2] = 1;
  $8 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $8 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0;
}
function _gsl_ran_rayleigh_tail($r, $a, $sigma) {
 $r = $r | 0;
 $a = +$a;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $16 = 0.0, $2 = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $u = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $sigma;
 HEAPF64[$u >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0);
 $16 = +Math_sqrt(+(+HEAPF64[$1 >> 3] * +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3] * 2.0 * +HEAPF64[$2 >> 3] * +Math_log(+(+HEAPF64[$u >> 3]))));
 STACKTOP = sp;
 return +$16;
}
function _olver_f1($z, $minus_zeta) {
 $z = +$z;
 $minus_zeta = +$minus_zeta;
 var $0 = 0, $1 = 0, $b0 = 0, $h2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $b0 = sp + 8 | 0;
 $h2 = sp;
 HEAPF64[$0 >> 3] = $z;
 HEAPF64[$1 >> 3] = $minus_zeta;
 HEAPF64[$b0 >> 3] = +_olver_b0(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3]);
 HEAPF64[$h2 >> 3] = +Math_sqrt(+(+HEAPF64[$1 >> 3] * 4.0 / (+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3] - 1.0)));
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3] * .5 * +HEAPF64[$h2 >> 3] * +HEAPF64[$b0 >> 3]);
}
function _rand48_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $13 = 0.0, $18 = 0.0, $7 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _rand48_advance(HEAP32[$state >> 2] | 0);
 $7 = +_ldexp(+(HEAPU16[(HEAP32[$state >> 2] | 0) + 4 >> 1] | 0), -16);
 $13 = $7 + +_ldexp(+(HEAPU16[(HEAP32[$state >> 2] | 0) + 2 >> 1] | 0), -32);
 $18 = $13 + +_ldexp(+(HEAPU16[HEAP32[$state >> 2] >> 1] | 0), -48);
 STACKTOP = sp;
 return +$18;
}
function _gsl_ran_gumbel1_pdf($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $12 = 0.0, $2 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $p = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 $12 = +HEAPF64[$2 >> 3] * +Math_exp(+(-+HEAPF64[$1 >> 3] * +HEAPF64[$0 >> 3]));
 HEAPF64[$p >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$2 >> 3] * +Math_exp(+-($12 + +HEAPF64[$1 >> 3] * +HEAPF64[$0 >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$p >> 3]);
}
function _ranf_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $13 = 0.0, $18 = 0.0, $7 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _ranf_advance(HEAP32[$state >> 2] | 0);
 $7 = +_ldexp(+(HEAPU16[(HEAP32[$state >> 2] | 0) + 4 >> 1] | 0), -16);
 $13 = $7 + +_ldexp(+(HEAPU16[(HEAP32[$state >> 2] | 0) + 2 >> 1] | 0), -32);
 $18 = $13 + +_ldexp(+(HEAPU16[HEAP32[$state >> 2] >> 1] | 0), -48);
 STACKTOP = sp;
 return +$18;
}
function _debye_u5($tpow) {
 $tpow = $tpow | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $tpow;
 STACKTOP = sp;
 return +((+HEAPF64[(HEAP32[$0 >> 2] | 0) + 40 >> 3] * 1519035525.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 56 >> 3] * 49286948607.0 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + 72 >> 3] * 284499769554.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 88 >> 3] * 614135872350.0 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + 104 >> 3] * 566098157625.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 120 >> 3] * 188699385875.0) / 6688604160.0);
}
function _rand48_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $state = 0, $x1 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $x1 = sp + 8 | 0;
 $x2 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _rand48_advance(HEAP32[$state >> 2] | 0);
 HEAP32[$x2 >> 2] = HEAPU16[(HEAP32[$state >> 2] | 0) + 4 >> 1];
 HEAP32[$x1 >> 2] = HEAPU16[(HEAP32[$state >> 2] | 0) + 2 >> 1];
 STACKTOP = sp;
 return (HEAP32[$x2 >> 2] << 16) + (HEAP32[$x1 >> 2] | 0) | 0;
}
function _gsl_ran_pareto($r, $a, $b) {
 $r = $r | 0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $x = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $x = sp + 8 | 0;
 $z = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$x >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0);
 HEAPF64[$z >> 3] = +Math_pow(+(+HEAPF64[$x >> 3]), +(-1.0 / +HEAPF64[$1 >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$2 >> 3] * +HEAPF64[$z >> 3]);
}
function _gsl_ran_poisson_pdf($k, $mu) {
 $k = $k | 0;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $5 = 0.0, $lf = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $p = sp + 8 | 0;
 $lf = sp;
 HEAP32[$0 >> 2] = $k;
 HEAPF64[$1 >> 3] = $mu;
 HEAPF64[$lf >> 3] = +_gsl_sf_lnfact(HEAP32[$0 >> 2] | 0);
 $5 = +Math_log(+(+HEAPF64[$1 >> 3]));
 HEAPF64[$p >> 3] = +Math_exp(+($5 * +((HEAP32[$0 >> 2] | 0) >>> 0) - +HEAPF64[$lf >> 3] - +HEAPF64[$1 >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$p >> 3]);
}
function _ranf_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $state = 0, $x1 = 0, $x2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $x1 = sp + 8 | 0;
 $x2 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 _ranf_advance(HEAP32[$state >> 2] | 0);
 HEAP32[$x1 >> 2] = HEAPU16[(HEAP32[$state >> 2] | 0) + 2 >> 1];
 HEAP32[$x2 >> 2] = HEAPU16[(HEAP32[$state >> 2] | 0) + 4 >> 1];
 STACKTOP = sp;
 return (HEAP32[$x2 >> 2] << 16) + (HEAP32[$x1 >> 2] | 0) | 0;
}
function _gsl_cdf_gumbel1_P($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $P = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $P = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$u >> 3] = +HEAPF64[$1 >> 3] * +HEAPF64[$0 >> 3] - +Math_log(+(+HEAPF64[$2 >> 3]));
 HEAPF64[$P >> 3] = +Math_exp(+-+Math_exp(+-+HEAPF64[$u >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$P >> 3]);
}
function _locMin3($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $d = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $d = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $b;
 HEAP32[$2 >> 2] = $c;
 HEAP32[$d >> 2] = (HEAP32[$0 >> 2] | 0) < (HEAP32[$1 >> 2] | 0) ? HEAP32[$0 >> 2] | 0 : HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return ((HEAP32[$d >> 2] | 0) < (HEAP32[$2 >> 2] | 0) ? HEAP32[$d >> 2] | 0 : HEAP32[$2 >> 2] | 0) | 0;
}
function _locMax3($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $d = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $d = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $b;
 HEAP32[$2 >> 2] = $c;
 HEAP32[$d >> 2] = (HEAP32[$0 >> 2] | 0) > (HEAP32[$1 >> 2] | 0) ? HEAP32[$0 >> 2] | 0 : HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return ((HEAP32[$d >> 2] | 0) > (HEAP32[$2 >> 2] | 0) ? HEAP32[$d >> 2] | 0 : HEAP32[$2 >> 2] | 0) | 0;
}
function _hyperg_U_int_negx($a, $b, $x, $result) {
 $a = $a | 0;
 $b = $b | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $b;
 HEAPF64[$2 >> 3] = $x;
 HEAP32[$3 >> 2] = $result;
 $10 = _hyperg_U_negx(+(HEAP32[$0 >> 2] | 0), +(HEAP32[$1 >> 2] | 0), +HEAPF64[$2 >> 3], HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $10 | 0;
}
function _gsl_ran_logistic($r, $a) {
 $r = $r | 0;
 $a = +$a;
 var $0 = 0, $1 = 0, $x = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $x = sp + 8 | 0;
 $z = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 do HEAPF64[$x >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0); while (+HEAPF64[$x >> 3] == 1.0);
 HEAPF64[$z >> 3] = +Math_log(+(+HEAPF64[$x >> 3] / (1.0 - +HEAPF64[$x >> 3])));
 STACKTOP = sp;
 return +(+HEAPF64[$1 >> 3] * +HEAPF64[$z >> 3]);
}
function _gsl_ran_bernoulli_pdf($k, $p) {
 $k = $k | 0;
 $p = +$p;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $k;
 HEAPF64[$2 >> 3] = $p;
 do if (!(HEAP32[$1 >> 2] | 0)) HEAPF64[$0 >> 3] = 1.0 - +HEAPF64[$2 >> 3]; else if ((HEAP32[$1 >> 2] | 0) == 1) {
  HEAPF64[$0 >> 3] = +HEAPF64[$2 >> 3];
  break;
 } else {
  HEAPF64[$0 >> 3] = 0.0;
  break;
 } while (0);
 STACKTOP = sp;
 return +(+HEAPF64[$0 >> 3]);
}
function _ran0_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if ((HEAP32[$1 >> 2] | 0) == 123459876) {
  _gsl_error(78200, 78240, 83, 4);
  STACKTOP = sp;
  return;
 } else {
  HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2] ^ 123459876;
  STACKTOP = sp;
  return;
 }
}
function _gsl_sf_legendre_P2_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $15 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[HEAP32[$1 >> 2] >> 3] = (+HEAPF64[$0 >> 3] * 3.0 * +HEAPF64[$0 >> 3] - 1.0) * .5;
 $15 = (+Math_abs(+(+HEAPF64[$0 >> 3] * 3.0 * +HEAPF64[$0 >> 3])) + 1.0) * 2.220446049250313e-16;
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = $15;
 STACKTOP = sp;
 return 0;
}
function _locMAX3($x, $y, $z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0, $2 = 0, $xy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $xy = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $y;
 HEAPF64[$2 >> 3] = $z;
 HEAPF64[$xy >> 3] = +HEAPF64[$0 >> 3] > +HEAPF64[$1 >> 3] ? +HEAPF64[$0 >> 3] : +HEAPF64[$1 >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$xy >> 3] > +HEAPF64[$2 >> 3] ? +HEAPF64[$xy >> 3] : +HEAPF64[$2 >> 3]);
}
function _ran_set767($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483399 | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483399 | 0;
 STACKTOP = sp;
 return;
}
function _ran_set722($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = ((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0;
 STACKTOP = sp;
 return;
}
function _gsl_ran_cauchy_pdf($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $p = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $p = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[$p >> 3] = 1.0 / (+HEAPF64[$1 >> 3] * 3.141592653589793) / (+HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] + 1.0);
 STACKTOP = sp;
 return +(+HEAPF64[$p >> 3]);
}
function _Stirling($y1) {
 $y1 = +$y1;
 var $0 = 0, $s = 0, $y2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $y2 = sp + 8 | 0;
 $s = sp;
 HEAPF64[$0 >> 3] = $y1;
 HEAPF64[$y2 >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 HEAPF64[$s >> 3] = (13860.0 - (462.0 - (132.0 - (99.0 - 140.0 / +HEAPF64[$y2 >> 3]) / +HEAPF64[$y2 >> 3]) / +HEAPF64[$y2 >> 3]) / +HEAPF64[$y2 >> 3]) / +HEAPF64[$0 >> 3] / 166320.0;
 STACKTOP = sp;
 return +(+HEAPF64[$s >> 3]);
}
function _gsl_ran_pascal_pdf($k, $p, $n) {
 $k = $k | 0;
 $p = +$p;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $P = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 $P = sp;
 HEAP32[$0 >> 2] = $k;
 HEAPF64[$1 >> 3] = $p;
 HEAP32[$2 >> 2] = $n;
 HEAPF64[$P >> 3] = +_gsl_ran_negative_binomial_pdf(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3], +((HEAP32[$2 >> 2] | 0) >>> 0));
 STACKTOP = sp;
 return +(+HEAPF64[$P >> 3]);
}
function _debye_u4($tpow) {
 $tpow = $tpow | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $tpow;
 STACKTOP = sp;
 return +((+HEAPF64[(HEAP32[$0 >> 2] | 0) + 32 >> 3] * 4465125.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 48 >> 3] * 94121676.0 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + 64 >> 3] * 349922430.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 80 >> 3] * 446185740.0 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + 96 >> 3] * 185910725.0) / 39813120.0);
}
function _gsl_sf_expint_Ei_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $status = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = sp + 12 | 0;
 $status = sp + 8 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAP32[$status >> 2] = _gsl_sf_expint_E1_e(-+HEAPF64[$0 >> 3], HEAP32[$1 >> 2] | 0) | 0;
 HEAPF64[HEAP32[$1 >> 2] >> 3] = -+HEAPF64[HEAP32[$1 >> 2] >> 3];
 STACKTOP = sp;
 return HEAP32[$status >> 2] | 0;
}
function _gsl_cdf_pascal_Q($k, $p, $n) {
 $k = $k | 0;
 $p = +$p;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $Q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 $Q = sp;
 HEAP32[$0 >> 2] = $k;
 HEAPF64[$1 >> 3] = $p;
 HEAP32[$2 >> 2] = $n;
 HEAPF64[$Q >> 3] = +_gsl_cdf_negative_binomial_Q(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3], +((HEAP32[$2 >> 2] | 0) >>> 0));
 STACKTOP = sp;
 return +(+HEAPF64[$Q >> 3]);
}
function _gsl_cdf_pascal_P($k, $p, $n) {
 $k = $k | 0;
 $p = +$p;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $P = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 $P = sp;
 HEAP32[$0 >> 2] = $k;
 HEAPF64[$1 >> 3] = $p;
 HEAP32[$2 >> 2] = $n;
 HEAPF64[$P >> 3] = +_gsl_cdf_negative_binomial_P(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3], +((HEAP32[$2 >> 2] | 0) >>> 0));
 STACKTOP = sp;
 return +(+HEAPF64[$P >> 3]);
}
function _gsl_ran_flat($r, $a, $b) {
 $r = $r | 0;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $u = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[$1 >> 3] * (1.0 - +HEAPF64[$u >> 3]) + +HEAPF64[$2 >> 3] * +HEAPF64[$u >> 3]);
}
function _gsl_ran_pascal($r, $p, $n) {
 $r = $r | 0;
 $p = +$p;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp;
 $2 = sp + 12 | 0;
 $k = sp + 8 | 0;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $p;
 HEAP32[$2 >> 2] = $n;
 HEAP32[$k >> 2] = _gsl_ran_negative_binomial(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3], +((HEAP32[$2 >> 2] | 0) >>> 0)) | 0;
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}
function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}
function _ran_set727($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(((HEAP32[$1 >> 2] | 0) >>> 0) % 2147483647 | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2] & 2147483647;
 STACKTOP = sp;
 return;
}
function _gsl_ran_dirichlet_pdf($K, $alpha, $theta) {
 $K = $K | 0;
 $alpha = $alpha | 0;
 $theta = $theta | 0;
 var $0 = 0, $1 = 0, $2 = 0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = $K;
 HEAP32[$1 >> 2] = $alpha;
 HEAP32[$2 >> 2] = $theta;
 $7 = +Math_exp(+(+_gsl_ran_dirichlet_lnpdf(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0)));
 STACKTOP = sp;
 return +$7;
}
function _gsl_cdf_rayleigh_Q($x, $sigma) {
 $x = +$x;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $Q = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $Q = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $sigma;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[$Q >> 3] = +Math_exp(+(-+HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] / 2.0));
 STACKTOP = sp;
 return +(+HEAPF64[$Q >> 3]);
}
function _gsl_cdf_rayleigh_P($x, $sigma) {
 $x = +$x;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $P = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $u = sp + 8 | 0;
 $P = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $sigma;
 HEAPF64[$u >> 3] = +HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3];
 HEAPF64[$P >> 3] = -+_expm1(+(-+HEAPF64[$u >> 3] * +HEAPF64[$u >> 3] / 2.0));
 STACKTOP = sp;
 return +(+HEAPF64[$P >> 3]);
}
function _gsl_cdf_weibull_Q($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $Q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $Q = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$Q >> 3] = +Math_exp(+-+Math_pow(+(+HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3]), +(+HEAPF64[$2 >> 3])));
 STACKTOP = sp;
 return +(+HEAPF64[$Q >> 3]);
}
function _gsl_cdf_weibull_P($x, $a, $b) {
 $x = +$x;
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0, $2 = 0, $P = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $P = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 HEAPF64[$2 >> 3] = $b;
 HEAPF64[$P >> 3] = -+_expm1(+-+Math_pow(+(+HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3]), +(+HEAPF64[$2 >> 3])));
 STACKTOP = sp;
 return +(+HEAPF64[$P >> 3]);
}
function _gsl_ran_cauchy($r, $a) {
 $r = $r | 0;
 $a = +$a;
 var $0 = 0, $1 = 0, $10 = 0.0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $u = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 do HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0); while (+HEAPF64[$u >> 3] == .5);
 $10 = +HEAPF64[$1 >> 3] * +Math_tan(+(+HEAPF64[$u >> 3] * 3.141592653589793));
 STACKTOP = sp;
 return +$10;
}
function _ran_get706($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $7 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $7 = Math_imul(HEAP32[HEAP32[$state >> 2] >> 2] | 0, (HEAP32[HEAP32[$state >> 2] >> 2] | 0) + 1 | 0) | 0;
 HEAP32[HEAP32[$state >> 2] >> 2] = $7;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _random256_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $k = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$k >> 2] = _random_get(HEAP32[$state >> 2] | 0, (HEAP32[$state >> 2] | 0) + 4 | 0, 63, (HEAP32[$state >> 2] | 0) + 8 | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}
function _random128_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $k = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$k >> 2] = _random_get(HEAP32[$state >> 2] | 0, (HEAP32[$state >> 2] | 0) + 4 | 0, 31, (HEAP32[$state >> 2] | 0) + 8 | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}
function _random64_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $k = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$k >> 2] = _random_get(HEAP32[$state >> 2] | 0, (HEAP32[$state >> 2] | 0) + 4 | 0, 15, (HEAP32[$state >> 2] | 0) + 8 | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}
function _random32_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $k = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $state = sp + 4 | 0;
 $k = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[$k >> 2] = _random_get(HEAP32[$state >> 2] | 0, (HEAP32[$state >> 2] | 0) + 4 | 0, 7, (HEAP32[$state >> 2] | 0) + 8 | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}
function _hyperg_U_int_origin($a, $b, $result) {
 $a = $a | 0;
 $b = $b | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $b;
 HEAP32[$2 >> 2] = $result;
 $8 = _hyperg_U_origin(+(HEAP32[$0 >> 2] | 0), +(HEAP32[$1 >> 2] | 0), HEAP32[$2 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $8 | 0;
}
function _random8_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $6 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $6 = (Math_imul(1103515245, HEAP32[HEAP32[$state >> 2] >> 2] | 0) | 0) + 12345 & 2147483647;
 HEAP32[HEAP32[$state >> 2] >> 2] = $6;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _gsl_ran_rayleigh($r, $sigma) {
 $r = $r | 0;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $9 = 0.0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $u = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $sigma;
 HEAPF64[$u >> 3] = +_gsl_rng_uniform_pos(HEAP32[$0 >> 2] | 0);
 $9 = +HEAPF64[$1 >> 3] * +Math_sqrt(+(+Math_log(+(+HEAPF64[$u >> 3])) * -2.0));
 STACKTOP = sp;
 return +$9;
}
function _gsl_ran_multinomial_pdf($K, $p, $n) {
 $K = $K | 0;
 $p = $p | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = $K;
 HEAP32[$1 >> 2] = $p;
 HEAP32[$2 >> 2] = $n;
 $7 = +Math_exp(+(+_gsl_ran_multinomial_lnpdf(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0)));
 STACKTOP = sp;
 return +$7;
}
function _random8_glibc2_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _random8_libc5_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _rand_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $6 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $6 = (Math_imul(1103515245, HEAP32[HEAP32[$state >> 2] >> 2] | 0) | 0) + 12345 & 2147483647;
 HEAP32[HEAP32[$state >> 2] >> 2] = $6;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _ran_get723($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $4 = _schrage_mult(62089911, HEAP32[HEAP32[$state >> 2] >> 2] | 0, 2147483647, 46341) | 0;
 HEAP32[HEAP32[$state >> 2] >> 2] = $4;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _new_stack($N) {
 $N = $N | 0;
 var $0 = 0, $8 = 0, $s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $s = sp;
 HEAP32[$0 >> 2] = $N;
 HEAP32[$s >> 2] = _malloc(12) | 0;
 HEAP32[HEAP32[$s >> 2] >> 2] = HEAP32[$0 >> 2];
 HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = 0;
 $8 = _malloc(HEAP32[$0 >> 2] << 2) | 0;
 HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] = $8;
 STACKTOP = sp;
 return HEAP32[$s >> 2] | 0;
}
function _random8_bsd_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _transputer_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _gsl_sf_expint_En_e($n, $x, $result) {
 $n = $n | 0;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAP32[$0 >> 2] = $n;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $6 = _expint_En_impl(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}
function _gsl_sf_angle_restrict_symm_e($theta) {
 $theta = $theta | 0;
 var $0 = 0, $r = 0, $stat = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $r = sp;
 $stat = sp + 16 | 0;
 HEAP32[$0 >> 2] = $theta;
 HEAP32[$stat >> 2] = _gsl_sf_angle_restrict_symm_err_e(+HEAPF64[HEAP32[$0 >> 2] >> 3], $r) | 0;
 HEAPF64[HEAP32[$0 >> 2] >> 3] = +HEAPF64[$r >> 3];
 STACKTOP = sp;
 return HEAP32[$stat >> 2] | 0;
}
function _ran_set847($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _minstd_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _gsl_sf_angle_restrict_pos_e($theta) {
 $theta = $theta | 0;
 var $0 = 0, $r = 0, $stat = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 20 | 0;
 $r = sp;
 $stat = sp + 16 | 0;
 HEAP32[$0 >> 2] = $theta;
 HEAP32[$stat >> 2] = _gsl_sf_angle_restrict_pos_err_e(+HEAPF64[HEAP32[$0 >> 2] >> 3], $r) | 0;
 HEAPF64[HEAP32[$0 >> 2] >> 3] = +HEAPF64[$r >> 3];
 STACKTOP = sp;
 return HEAP32[$stat >> 2] | 0;
}
function _randu_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _olver_B0_xi($mu, $xi) {
 $mu = +$mu;
 $xi = +$xi;
 var $0 = 0, $1 = 0, $12 = 0.0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAPF64[$0 >> 3] = $mu;
 HEAPF64[$1 >> 3] = $xi;
 $9 = (1.0 - +HEAPF64[$0 >> 3] * 4.0 * +HEAPF64[$0 >> 3]) / (+HEAPF64[$1 >> 3] * 8.0);
 $12 = 1.0 / +_tanh(+(+HEAPF64[$1 >> 3]));
 STACKTOP = sp;
 return +($9 * ($12 - 1.0 / +HEAPF64[$1 >> 3]));
}
function _gsl_ran_laplace_pdf($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $7 = 0.0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $p = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 $7 = -+Math_abs(+(+HEAPF64[$0 >> 3]));
 HEAPF64[$p >> 3] = 1.0 / (+HEAPF64[$1 >> 3] * 2.0) * +Math_exp(+($7 / +HEAPF64[$1 >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$p >> 3]);
}
function _ran_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 if (!(HEAP32[$1 >> 2] | 0)) HEAP32[$1 >> 2] = 1;
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _gsl_sf_exprel_n_CF_e($N, $x, $result) {
 $N = +$N;
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = sp + 16 | 0;
 HEAPF64[$0 >> 3] = $N;
 HEAPF64[$1 >> 3] = $x;
 HEAP32[$2 >> 2] = $result;
 $6 = _exprel_n_CF(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], HEAP32[$2 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}
function _gsl_ran_exponential($r, $mu) {
 $r = $r | 0;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $5 = 0.0, $9 = 0.0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $u = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $mu;
 HEAPF64[$u >> 3] = +_gsl_rng_uniform(HEAP32[$0 >> 2] | 0);
 $5 = -+HEAPF64[$1 >> 3];
 $9 = $5 * +_log1p(+-+HEAPF64[$u >> 3]);
 STACKTOP = sp;
 return +$9;
}
function _transputer_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $4 = Math_imul(1664525, HEAP32[HEAP32[$state >> 2] >> 2] | 0) | 0;
 HEAP32[HEAP32[$state >> 2] >> 2] = $4;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _ran_get848($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $4 = Math_imul(1566083941, HEAP32[HEAP32[$state >> 2] >> 2] | 0) | 0;
 HEAP32[HEAP32[$state >> 2] >> 2] = $4;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _ran_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $4 = Math_imul(1812433253, HEAP32[HEAP32[$state >> 2] >> 2] | 0) | 0;
 HEAP32[HEAP32[$state >> 2] >> 2] = $4;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _small($q) {
 $q = +$q;
 var $0 = 0, $5 = 0.0, $r = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $r = sp + 8 | 0;
 $x = sp;
 HEAPF64[$0 >> 3] = $q;
 HEAPF64[$r >> 3] = .180625 - +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 $5 = +HEAPF64[$0 >> 3];
 HEAPF64[$x >> 3] = $5 * +_rat_eval(840, 8, 904, 8, +HEAPF64[$r >> 3]);
 STACKTOP = sp;
 return +(+HEAPF64[$x >> 3]);
}
function _debye_u3($tpow) {
 $tpow = $tpow | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $tpow;
 STACKTOP = sp;
 return +((+HEAPF64[(HEAP32[$0 >> 2] | 0) + 24 >> 3] * 30375.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 40 >> 3] * 369603.0 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + 56 >> 3] * 765765.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 72 >> 3] * 425425.0) / 414720.0);
}
function _gsl_rng_uniform_pos($r) {
 $r = $r | 0;
 var $0 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $x = sp;
 HEAP32[$0 >> 2] = $r;
 do HEAPF64[$x >> 3] = +FUNCTION_TABLE_di[HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 24 >> 2] & 63](HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0); while (+HEAPF64[$x >> 3] == 0.0);
 STACKTOP = sp;
 return +(+HEAPF64[$x >> 3]);
}
function _gsl_ran_chisq($r, $nu) {
 $r = $r | 0;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $chisq = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $chisq = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $nu;
 HEAPF64[$chisq >> 3] = +_gsl_ran_gamma(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3] / 2.0, 1.0) * 2.0;
 STACKTOP = sp;
 return +(+HEAPF64[$chisq >> 3]);
}
function _randu_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = (HEAP32[HEAP32[$state >> 2] >> 2] | 0) * 65539 & 2147483647;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _gsl_rng_set($r, $seed) {
 $r = $r | 0;
 $seed = $seed | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $r;
 HEAP32[$1 >> 2] = $seed;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 16 >> 2] & 63](HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0, HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function _vax_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) * 69069 | 0) + 1;
 STACKTOP = sp;
 return HEAP32[HEAP32[$state >> 2] >> 2] | 0;
}
function _gsl_cdf_exponential_Pinv($P, $mu) {
 $P = +$P;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $3 = 0.0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$0 >> 3] = $P;
 HEAPF64[$1 >> 3] = $mu;
 $3 = -+HEAPF64[$1 >> 3];
 HEAPF64[$x >> 3] = $3 * +_log1p(+-+HEAPF64[$0 >> 3]);
 STACKTOP = sp;
 return +(+HEAPF64[$x >> 3]);
}
function _rand_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _vax_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 HEAP32[HEAP32[$state >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}
function _log_erfc8($x) {
 $x = +$x;
 var $0 = 0, $4 = 0.0, $e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $e = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$e >> 3] = +_erfc8_sum(+HEAPF64[$0 >> 3]);
 $4 = +Math_log(+(+HEAPF64[$e >> 3]));
 HEAPF64[$e >> 3] = $4 - +HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +(+HEAPF64[$e >> 3]);
}
function _erfc8($x) {
 $x = +$x;
 var $0 = 0, $7 = 0.0, $e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $e = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$e >> 3] = +_erfc8_sum(+HEAPF64[$0 >> 3]);
 $7 = +Math_exp(+(-+HEAPF64[$0 >> 3] * +HEAPF64[$0 >> 3]));
 HEAPF64[$e >> 3] = +HEAPF64[$e >> 3] * $7;
 STACKTOP = sp;
 return +(+HEAPF64[$e >> 3]);
}
function _gsl_ran_discrete_free($g) {
 $g = $g | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $g;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function _gsl_cdf_exponential_Qinv($Q, $mu) {
 $Q = +$Q;
 $mu = +$mu;
 var $0 = 0, $1 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$0 >> 3] = $Q;
 HEAPF64[$1 >> 3] = $mu;
 HEAPF64[$x >> 3] = -+HEAPF64[$1 >> 3] * +Math_log(+(+HEAPF64[$0 >> 3]));
 STACKTOP = sp;
 return +(+HEAPF64[$x >> 3]);
}
function _gsl_sf_legendre_P1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 HEAPF64[HEAP32[$1 >> 2] >> 3] = +HEAPF64[$0 >> 3];
 HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3] = 0.0;
 STACKTOP = sp;
 return 0;
}
function _gsl_cdf_gaussian_Qinv($Q, $sigma) {
 $Q = +$Q;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $2 = 0.0, $5 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAPF64[$0 >> 3] = $Q;
 HEAPF64[$1 >> 3] = $sigma;
 $2 = +HEAPF64[$1 >> 3];
 $5 = $2 * +_gsl_cdf_ugaussian_Qinv(+HEAPF64[$0 >> 3]);
 STACKTOP = sp;
 return +$5;
}
function _gsl_cdf_gaussian_Pinv($P, $sigma) {
 $P = +$P;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $2 = 0.0, $5 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAPF64[$0 >> 3] = $P;
 HEAPF64[$1 >> 3] = $sigma;
 $2 = +HEAPF64[$1 >> 3];
 $5 = $2 * +_gsl_cdf_ugaussian_Pinv(+HEAPF64[$0 >> 3]);
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double849($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get848(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double769($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get768(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 2147483399.0;
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double762($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get761(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 1073741824.0;
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double755($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get754(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 2147483647.0;
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double750($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get749(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 1073741824.0;
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double734($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get733(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 2147483647.0;
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double729($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get728(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 2147483647.0;
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double724($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get723(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 2147483647.0;
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double707($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get706(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$5;
}
function _ran_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $5 = 0.0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $state = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$state >> 2] = HEAP32[$0 >> 2];
 $5 = +((_ran_get(HEAP32[$state >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$5;
}
function _gsl_sf_expint_E2_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 $4 = _expint_E2_impl(+HEAPF64[$0 >> 3], HEAP32[$1 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _gsl_sf_expint_E1_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 $4 = _expint_E1_impl(+HEAPF64[$0 >> 3], HEAP32[$1 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _debye_u2($tpow) {
 $tpow = $tpow | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $tpow;
 STACKTOP = sp;
 return +((+HEAPF64[(HEAP32[$0 >> 2] | 0) + 16 >> 3] * 81.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 32 >> 3] * 462.0 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + 48 >> 3] * 385.0) / 1152.0);
}
function _gsl_ran_ugaussian_tail_pdf($x, $a) {
 $x = +$x;
 $a = +$a;
 var $0 = 0, $1 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $a;
 $4 = +_gsl_ran_gaussian_tail_pdf(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3], 1.0);
 STACKTOP = sp;
 return +$4;
}
function _gsl_cdf_gaussian_Q($x, $sigma) {
 $x = +$x;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $5 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $sigma;
 $5 = +_gsl_cdf_ugaussian_Q(+HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3]);
 STACKTOP = sp;
 return +$5;
}
function _gsl_cdf_gaussian_P($x, $sigma) {
 $x = +$x;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $5 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $sigma;
 $5 = +_gsl_cdf_ugaussian_P(+HEAPF64[$0 >> 3] / +HEAPF64[$1 >> 3]);
 STACKTOP = sp;
 return +$5;
}
function _gsl_ran_ugaussian_tail($r, $a) {
 $r = $r | 0;
 $a = +$a;
 var $0 = 0, $1 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $r;
 HEAPF64[$1 >> 3] = $a;
 $4 = +_gsl_ran_gaussian_tail(HEAP32[$0 >> 2] | 0, +HEAPF64[$1 >> 3], 1.0);
 STACKTOP = sp;
 return +$4;
}
function _gsl_cdf_chisq_Qinv($Q, $nu) {
 $Q = +$Q;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $5 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAPF64[$0 >> 3] = $Q;
 HEAPF64[$1 >> 3] = $nu;
 $5 = +_gsl_cdf_gamma_Qinv(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3] / 2.0, 2.0);
 STACKTOP = sp;
 return +$5;
}
function _gsl_cdf_chisq_Pinv($P, $nu) {
 $P = +$P;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $5 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAPF64[$0 >> 3] = $P;
 HEAPF64[$1 >> 3] = $nu;
 $5 = +_gsl_cdf_gamma_Pinv(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3] / 2.0, 2.0);
 STACKTOP = sp;
 return +$5;
}
function _gsl_sf_psi_e($x, $result) {
 $x = +$x;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAPF64[$0 >> 3] = $x;
 HEAP32[$1 >> 2] = $result;
 $4 = _psi_x(+HEAPF64[$0 >> 3], HEAP32[$1 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _gsl_cdf_chisq_Q($x, $nu) {
 $x = +$x;
 $nu = +$nu;
 var $0 = 0, $1 = 0, $5 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAPF64[$0 >> 3] = $x;
 HEAPF64[$1 >> 3] = $nu;
 $5 = +_gsl_cdf_gamma_Q(+HEAPF64[$0 >> 3], +HEAPF64[$1 >> 3] / 2.0, 2.0);
 STACKTOP = sp;
 return +$5;
}
function _ranlux389_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 _ranlux_set_lux(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 389);
 STACKTOP = sp;
 return;
}
function _ranlxs2_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 _ranlxs_set_lux(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 397);
 STACKTOP = sp;
 return;
}
function _ranlxs1_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 _ranlxs_set_lux(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 202);
 STACKTOP = sp;
 return;
}
function _ranlxs0_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 _ranlxs_set_lux(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 109);
 STACKTOP = sp;
 return;
}
function _ranlxd2_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 _ranlxd_set_lux(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 397);
 STACKTOP = sp;
 return;
}
function _ranlxd1_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 _ranlxd_set_lux(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 202);
 STACKTOP = sp;
 return;
}
function _ranlux_set($vstate, $s) {
 $vstate = $vstate | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $vstate;
 HEAP32[$1 >> 2] = $s;
 _ranlux_set_lux(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 223);
 STACKTOP = sp;
 return;
}
function _gsl_sf_legendre_array_size($lmax, $m) {
 $lmax = $lmax | 0;
 $m = $m | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $lmax;
 HEAP32[$1 >> 2] = $m;
 STACKTOP = sp;
 return (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + 1 | 0;
}
function _gsl_rng_uniform($r) {
 $r = $r | 0;
 var $0 = 0, $8 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 $8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 24 >> 2] & 63](HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0);
 STACKTOP = sp;
 return +$8;
}
function _gsl_rng_get($r) {
 $r = $r | 0;
 var $0 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 $8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 20 >> 2] & 63](HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $8 | 0;
}
function _gsl_rng_free($r) {
 $r = $r | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function _isnegint234($x) {
 $x = +$x;
 var $0 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAPF64[$0 >> 3] = $x;
 if (+HEAPF64[$0 >> 3] < 0.0) $8 = +HEAPF64[$0 >> 3] == +Math_floor(+(+HEAPF64[$0 >> 3])); else $8 = 0;
 STACKTOP = sp;
 return +(+($8 & 1 | 0));
}
function _isnegint($x) {
 $x = +$x;
 var $0 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAPF64[$0 >> 3] = $x;
 if (+HEAPF64[$0 >> 3] < 0.0) $8 = +HEAPF64[$0 >> 3] == +Math_floor(+(+HEAPF64[$0 >> 3])); else $8 = 0;
 STACKTOP = sp;
 return +(+($8 & 1 | 0));
}
function _intermediate($r) {
 $r = +$r;
 var $0 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$0 >> 3] = $r;
 HEAPF64[$x >> 3] = +_rat_eval(712, 8, 776, 8, +HEAPF64[$0 >> 3] - 1.6);
 STACKTOP = sp;
 return +(+HEAPF64[$x >> 3]);
}
function _transputer_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_transputer_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$4;
}
function _debye_u1($tpow) {
 $tpow = $tpow | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $tpow;
 STACKTOP = sp;
 return +((+HEAPF64[(HEAP32[$0 >> 2] | 0) + 8 >> 3] * 3.0 - +HEAPF64[(HEAP32[$0 >> 2] | 0) + 24 >> 3] * 5.0) / 24.0);
}
function _random256_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_random256_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483648.0;
 STACKTOP = sp;
 return +$4;
}
function _random128_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_random128_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483648.0;
 STACKTOP = sp;
 return +$4;
}
function _random64_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_random64_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483648.0;
 STACKTOP = sp;
 return +$4;
}
function _random32_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_random32_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483648.0;
 STACKTOP = sp;
 return +$4;
}
function _taus113_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_taus113_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$4;
}
function _random8_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_random8_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483648.0;
 STACKTOP = sp;
 return +$4;
}
function _tail($r) {
 $r = +$r;
 var $0 = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $x = sp;
 HEAPF64[$0 >> 3] = $r;
 HEAPF64[$x >> 3] = +_rat_eval(584, 8, 648, 8, +HEAPF64[$0 >> 3] - 5.0);
 STACKTOP = sp;
 return +(+HEAPF64[$x >> 3]);
}
function _minstd_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_minstd_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483647.0;
 STACKTOP = sp;
 return +$4;
}
function _uni32_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_uni32_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483647.0;
 STACKTOP = sp;
 return +$4;
}
function _ranmar_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_ranmar_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 16777216.0;
 STACKTOP = sp;
 return +$4;
}
function _ranlux_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_ranlux_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 16777216.0;
 STACKTOP = sp;
 return +$4;
}
function _randu_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_randu_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483648.0;
 STACKTOP = sp;
 return +$4;
}
function _gfsr4_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_gfsr4_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$4;
}
function _slatec_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_slatec_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 4194304.0;
 STACKTOP = sp;
 return +$4;
}
function _ranlxd_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = ~~(+_ranlxd_get_double(HEAP32[$0 >> 2] | 0) * 4294967296.0) >>> 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _taus_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_taus_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$4;
}
function _rand_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_rand_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483648.0;
 STACKTOP = sp;
 return +$4;
}
function _ran0_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_ran0_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483647.0;
 STACKTOP = sp;
 return +$4;
}
function _r250_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_r250_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$4;
}
function _cmrg_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_cmrg_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483647.0;
 STACKTOP = sp;
 return +$4;
}
function _ranlxs_get($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = ~~(+_ranlxs_get_double(HEAP32[$0 >> 2] | 0) * 16777216.0) >>> 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _vax_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_vax_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$4;
}
function _mrg_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_mrg_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 2147483647.0;
 STACKTOP = sp;
 return +$4;
}
function _zuf_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_zuf_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 16777216.0;
 STACKTOP = sp;
 return +$4;
}
function _tt_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_tt_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$4;
}
function _mt_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_mt_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 4294967296.0;
 STACKTOP = sp;
 return +$4;
}
function _uni_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_uni_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 32767.0;
 STACKTOP = sp;
 return +$4;
}
function _ran3_get_double($vstate) {
 $vstate = $vstate | 0;
 var $0 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $vstate;
 $4 = +((_ran3_get(HEAP32[$0 >> 2] | 0) | 0) >>> 0) / 1.0e9;
 STACKTOP = sp;
 return +$4;
}
function _gsl_ran_ugaussian_ratio_method($r) {
 $r = $r | 0;
 var $0 = 0, $2 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 $2 = +_gsl_ran_gaussian_ratio_method(HEAP32[$0 >> 2] | 0, 1.0);
 STACKTOP = sp;
 return +$2;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}
function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}
function _free_stack($s) {
 $s = $s | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $s;
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function _gsl_ran_ugaussian_pdf($x) {
 $x = +$x;
 var $0 = 0, $2 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAPF64[$0 >> 3] = $x;
 $2 = +_gsl_ran_gaussian_pdf(+HEAPF64[$0 >> 3], 1.0);
 STACKTOP = sp;
 return +$2;
}
function _gsl_ran_ugaussian($r) {
 $r = $r | 0;
 var $0 = 0, $2 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 $2 = +_gsl_ran_gaussian(HEAP32[$0 >> 2] | 0, 1.0);
 STACKTOP = sp;
 return +$2;
}
function _gsl_rng_size($r) {
 $r = $r | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 STACKTOP = sp;
 return HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 12 >> 2] | 0;
}
function _gsl_rng_min($r) {
 $r = $r | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 STACKTOP = sp;
 return HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 8 >> 2] | 0;
}
function _gsl_rng_max($r) {
 $r = $r | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 STACKTOP = sp;
 return HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 4 >> 2] | 0;
}
function _gsl_rng_name($r) {
 $r = $r | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 STACKTOP = sp;
 return HEAP32[HEAP32[HEAP32[$0 >> 2] >> 2] >> 2] | 0;
}
function _gsl_rng_state($r) {
 $r = $r | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $r;
 STACKTOP = sp;
 return HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0;
}
function _size_stack($s) {
 $s = $s | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $s;
 STACKTOP = sp;
 return HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}
function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr >> 0] | 0) curr = curr + 1 | 0;
 return curr - ptr | 0;
}
function _ldexp($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $0 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = +_scalbn($x, $n);
 STACKTOP = sp;
 return +$0;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0);
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 63](a1 | 0) | 0;
}
function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[index & 63](a1 | 0);
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}
function b1(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(1);
}
function b2(p0) {
 p0 = p0 | 0;
 abort(2);
 return 0.0;
}
function b0(p0) {
 p0 = p0 | 0;
 abort(0);
 return 0;
}
function getTempRet0() {
 return tempRet0 | 0;
}
function stackSave() {
 return STACKTOP | 0;
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,_ran_get,_cmrg_get,_ran_get706,_ran_get723,_ran_get728,_ran_get733,_gfsr4_get,_ran_get749,_ran_get754,_ran_get761,_ran_get768,_minstd_get,_mrg_get,_mt_get,_r250_get,_ran0_get,_ran1_get,_ran2_get,_ran3_get,_rand_get,_rand48_get,_random128_get,_random8_get,_random32_get,_random64_get,_random256_get,_randu_get,_ranf_get
  ,_ranlux_get,_ranlxd_get,_ranlxs_get,_ranmar_get,_slatec_get,_taus_get,_taus113_get,_transputer_get,_tt_get,_uni_get,_uni32_get,_vax_get,_ran_get848,_zuf_get,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_vii = [b1,_ran_set,_cmrg_set,_ran_set705,_ran_set722,_ran_set727,_ran_set732,_gfsr4_set,_ran_set748,_ran_set753,_ran_set760,_ran_set767,_minstd_set,_mrg_set,_mt_set,_mt_1999_set,_mt_1998_set,_r250_set,_ran0_set,_ran1_set,_ran2_set,_ran3_set,_rand_set,_rand48_set,_random128_libc5_set,_random8_libc5_set,_random32_libc5_set,_random64_libc5_set,_random256_libc5_set
  ,_random128_glibc2_set,_random8_glibc2_set,_random32_glibc2_set,_random64_glibc2_set,_random256_glibc2_set,_random128_bsd_set,_random8_bsd_set,_random32_bsd_set,_random64_bsd_set,_random256_bsd_set,_randu_set,_ranf_set,_ranlux_set,_ranlux389_set,_ranlxd1_set,_ranlxd2_set,_ranlxs0_set,_ranlxs1_set,_ranlxs2_set,_ranmar_set,_slatec_set,_taus_set,_taus2_set,_taus113_set,_transputer_set,_tt_set,_uni_set,_uni32_set,_vax_set,_ran_set847
  ,_zuf_set,b1,b1,b1,b1];
  var FUNCTION_TABLE_di = [b2,_ran_get_double,_cmrg_get_double,_ran_get_double707,_ran_get_double724,_ran_get_double729,_ran_get_double734,_gfsr4_get_double,_ran_get_double750,_ran_get_double755,_ran_get_double762,_ran_get_double769,_minstd_get_double,_mrg_get_double,_mt_get_double,_r250_get_double,_ran0_get_double,_ran1_get_double,_ran2_get_double,_ran3_get_double,_rand_get_double,_rand48_get_double,_random128_get_double,_random8_get_double,_random32_get_double,_random64_get_double,_random256_get_double,_randu_get_double,_ranf_get_double
  ,_ranlux_get_double,_ranlxd_get_double,_ranlxs_get_double,_ranmar_get_double,_slatec_get_double,_taus_get_double,_taus113_get_double,_transputer_get_double,_tt_get_double,_uni_get_double,_uni32_get_double,_vax_get_double,_ran_get_double849,_zuf_get_double,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2];

  return { _gsl_sf_zetam1_e: _gsl_sf_zetam1_e, _gsl_sf_doublefact: _gsl_sf_doublefact, _gsl_sf_sin_err_e: _gsl_sf_sin_err_e, _gsl_sf_lnpoch_e: _gsl_sf_lnpoch_e, _gsl_sf_eta: _gsl_sf_eta, _gsl_ran_negative_binomial_pdf: _gsl_ran_negative_binomial_pdf, _gsl_ran_gumbel1_pdf: _gsl_ran_gumbel1_pdf, _gsl_sf_exp_mult_err_e10_e: _gsl_sf_exp_mult_err_e10_e, _gsl_sf_hyperg_1F1: _gsl_sf_hyperg_1F1, _gsl_sf_exprel_n_e: _gsl_sf_exprel_n_e, _gsl_ran_tdist_pdf: _gsl_ran_tdist_pdf, _gsl_sf_coulomb_wave_sphF_array: _gsl_sf_coulomb_wave_sphF_array, _gsl_sf_hydrogenicR_1_e: _gsl_sf_hydrogenicR_1_e, _gsl_sf_hypot_e: _gsl_sf_hypot_e, _gsl_sf_ellint_Ecomp: _gsl_sf_ellint_Ecomp, _gsl_sf_mathieu_b_array: _gsl_sf_mathieu_b_array, _gsl_sf_bessel_k1_scaled_e: _gsl_sf_bessel_k1_scaled_e, _gsl_sf_hyperg_1F1_int: _gsl_sf_hyperg_1F1_int, _gsl_cdf_gamma_Qinv: _gsl_cdf_gamma_Qinv, _gsl_sf_ellint_RD_e: _gsl_sf_ellint_RD_e, _gsl_sf_Shi_e: _gsl_sf_Shi_e, _gsl_sf_airy_zero_Bi_deriv_e: _gsl_sf_airy_zero_Bi_deriv_e, _gsl_cdf_weibull_Qinv: _gsl_cdf_weibull_Qinv, _gsl_cdf_gaussian_Qinv: _gsl_cdf_gaussian_Qinv, _gsl_sf_lambert_Wm1: _gsl_sf_lambert_Wm1, _gsl_ran_negative_binomial: _gsl_ran_negative_binomial, _gsl_sf_ellint_RF_e: _gsl_sf_ellint_RF_e, _gsl_ran_logarithmic: _gsl_ran_logarithmic, _gsl_sf_coupling_3j: _gsl_sf_coupling_3j, _gsl_cdf_beta_Qinv: _gsl_cdf_beta_Qinv, _gsl_cdf_pareto_Qinv: _gsl_cdf_pareto_Qinv, _gsl_sf_legendre_H3d_0_e: _gsl_sf_legendre_H3d_0_e, _gsl_ran_shuffle: _gsl_ran_shuffle, _gsl_sf_log_e: _gsl_sf_log_e, _gsl_ran_dirichlet: _gsl_ran_dirichlet, _gsl_ran_poisson_pdf: _gsl_ran_poisson_pdf, _gsl_ran_bivariate_gaussian: _gsl_ran_bivariate_gaussian, _gsl_rng_clone: _gsl_rng_clone, _gsl_sf_eta_int: _gsl_sf_eta_int, _gsl_ran_dir_3d: _gsl_ran_dir_3d, _gsl_sf_exp_err_e10_e: _gsl_sf_exp_err_e10_e, _gsl_sf_bessel_zero_J0: _gsl_sf_bessel_zero_J0, _gsl_sf_clausen_e: _gsl_sf_clausen_e, _gsl_sf_legendre_H3d: _gsl_sf_legendre_H3d, _gsl_ran_hypergeometric_pdf: _gsl_ran_hypergeometric_pdf, _gsl_sf_laguerre_n: _gsl_sf_laguerre_n, _gsl_ran_chisq: _gsl_ran_chisq, _gsl_sf_airy_zero_Bi: _gsl_sf_airy_zero_Bi, _gsl_sf_mathieu_Mc_array: _gsl_sf_mathieu_Mc_array, _gsl_sf_gamma_e: _gsl_sf_gamma_e, _gsl_sf_bessel_k2_scaled: _gsl_sf_bessel_k2_scaled, _gsl_ran_ugaussian_pdf: _gsl_ran_ugaussian_pdf, _gsl_sf_legendre_P3: _gsl_sf_legendre_P3, _gsl_sf_fact: _gsl_sf_fact, _gsl_sf_pochrel: _gsl_sf_pochrel, _gsl_sf_hyperg_1F1_e: _gsl_sf_hyperg_1F1_e, _gsl_cdf_flat_Pinv: _gsl_cdf_flat_Pinv, _gsl_sf_zeta: _gsl_sf_zeta, _gsl_sf_bessel_j1_e: _gsl_sf_bessel_j1_e, _gsl_sf_laguerre_2: _gsl_sf_laguerre_2, _gsl_sf_laguerre_3: _gsl_sf_laguerre_3, _gsl_sf_taylorcoeff: _gsl_sf_taylorcoeff, _gsl_ran_laplace_pdf: _gsl_ran_laplace_pdf, _gsl_ran_multinomial: _gsl_ran_multinomial, _gsl_sf_bessel_Inu_e: _gsl_sf_bessel_Inu_e, _gsl_sf_expint_Ei_e: _gsl_sf_expint_Ei_e, _gsl_sf_legendre_Q0_e: _gsl_sf_legendre_Q0_e, _gsl_sf_hzeta_e: _gsl_sf_hzeta_e, _gsl_sf_debye_5: _gsl_sf_debye_5, _gsl_sf_debye_4: _gsl_sf_debye_4, _gsl_sf_debye_6: _gsl_sf_debye_6, _gsl_sf_debye_1: _gsl_sf_debye_1, _gsl_sf_debye_3: _gsl_sf_debye_3, _gsl_sf_debye_2: _gsl_sf_debye_2, _gsl_sf_hyperg_2F1_conj_e: _gsl_sf_hyperg_2F1_conj_e, _gsl_sf_zetam1_int_e: _gsl_sf_zetam1_int_e, _gsl_ran_gumbel2_pdf: _gsl_ran_gumbel2_pdf, _gsl_sf_bessel_Kn_scaled_e: _gsl_sf_bessel_Kn_scaled_e, _gsl_sf_beta_inc: _gsl_sf_beta_inc, _gsl_sf_exp_err_e: _gsl_sf_exp_err_e, _gsl_sf_conicalP_0: _gsl_sf_conicalP_0, _gsl_sf_conicalP_1: _gsl_sf_conicalP_1, _gsl_sf_bessel_i1_scaled: _gsl_sf_bessel_i1_scaled, _gsl_sf_lnchoose: _gsl_sf_lnchoose, _gsl_sf_lnpoch_sgn_e: _gsl_sf_lnpoch_sgn_e, _gsl_sf_fermi_dirac_3half: _gsl_sf_fermi_dirac_3half, _gsl_ran_hypergeometric: _gsl_ran_hypergeometric, _gsl_rng_memcpy: _gsl_rng_memcpy, _gsl_sf_hyperg_U_int: _gsl_sf_hyperg_U_int, _gsl_ran_bernoulli_pdf: _gsl_ran_bernoulli_pdf, _gsl_sf_dawson: _gsl_sf_dawson, _gsl_sf_legendre_Q0: _gsl_sf_legendre_Q0, _gsl_sf_bessel_jl: _gsl_sf_bessel_jl, _gsl_sf_airy_Bi_scaled_e: _gsl_sf_airy_Bi_scaled_e, _gsl_ran_gaussian_ratio_method: _gsl_ran_gaussian_ratio_method, _gsl_sf_bessel_J0: _gsl_sf_bessel_J0, _gsl_sf_bessel_J1: _gsl_sf_bessel_J1, _gsl_cdf_gumbel2_Pinv: _gsl_cdf_gumbel2_Pinv, _gsl_ran_fdist: _gsl_ran_fdist, _gsl_rng_max: _gsl_rng_max, _gsl_sf_transport_3_e: _gsl_sf_transport_3_e, _gsl_sf_fermi_dirac_mhalf_e: _gsl_sf_fermi_dirac_mhalf_e, _gsl_sf_coupling_3j_e: _gsl_sf_coupling_3j_e, _gsl_ran_bivariate_gaussian_pdf: _gsl_ran_bivariate_gaussian_pdf, _gsl_sf_expint_Ei: _gsl_sf_expint_Ei, _gsl_sf_lngamma: _gsl_sf_lngamma, _gsl_sf_expint_En: _gsl_sf_expint_En, _gsl_sf_bessel_j2: _gsl_sf_bessel_j2, _gsl_sf_bessel_jl_e: _gsl_sf_bessel_jl_e, _gsl_sf_bessel_j0: _gsl_sf_bessel_j0, _gsl_sf_bessel_In_e: _gsl_sf_bessel_In_e, _gsl_sf_legendre_Ql: _gsl_sf_legendre_Ql, _gsl_sf_expint_En_e: _gsl_sf_expint_En_e, _gsl_sf_lnpoch: _gsl_sf_lnpoch, _gsl_rng_set: _gsl_rng_set, _gsl_sf_bessel_k1_scaled: _gsl_sf_bessel_k1_scaled, _gsl_sf_bessel_lnKnu_e: _gsl_sf_bessel_lnKnu_e, _gsl_sf_choose: _gsl_sf_choose, _gsl_cdf_pascal_Q: _gsl_cdf_pascal_Q, _gsl_ran_beta: _gsl_ran_beta, _gsl_sf_choose_e: _gsl_sf_choose_e, _gsl_sf_expint_E1: _gsl_sf_expint_E1, _gsl_sf_expint_E2: _gsl_sf_expint_E2, _gsl_sf_conicalP_mhalf: _gsl_sf_conicalP_mhalf, _gsl_sf_elljac_e: _gsl_sf_elljac_e, _gsl_rng_min: _gsl_rng_min, _gsl_ran_cauchy_pdf: _gsl_ran_cauchy_pdf, _gsl_sf_bessel_J1_e: _gsl_sf_bessel_J1_e, _malloc: _malloc, _gsl_ran_rayleigh_pdf: _gsl_ran_rayleigh_pdf, _gsl_sf_lambert_Wm1_e: _gsl_sf_lambert_Wm1_e, _gsl_sf_log_1plusx_mx_e: _gsl_sf_log_1plusx_mx_e, _gsl_ran_dir_nd: _gsl_ran_dir_nd, _gsl_cdf_logistic_Pinv: _gsl_cdf_logistic_Pinv, _gsl_ran_exponential: _gsl_ran_exponential, _gsl_ran_ugaussian: _gsl_ran_ugaussian, _gsl_sf_hydrogenicR_e: _gsl_sf_hydrogenicR_e, _gsl_sf_bessel_Jn: _gsl_sf_bessel_Jn, _gsl_sf_ellint_RJ_e: _gsl_sf_ellint_RJ_e, _gsl_sf_coupling_9j: _gsl_sf_coupling_9j, _gsl_sf_bessel_lnKnu: _gsl_sf_bessel_lnKnu, _gsl_sf_bessel_Ynu_e: _gsl_sf_bessel_Ynu_e, _gsl_cdf_pareto_Q: _gsl_cdf_pareto_Q, _gsl_cdf_pareto_P: _gsl_cdf_pareto_P, _gsl_cdf_gumbel1_Qinv: _gsl_cdf_gumbel1_Qinv, _gsl_cdf_cauchy_Qinv: _gsl_cdf_cauchy_Qinv, _gsl_sf_coulomb_wave_FG_array: _gsl_sf_coulomb_wave_FG_array, _gsl_ran_lognormal: _gsl_ran_lognormal, _gsl_ran_rayleigh: _gsl_ran_rayleigh, _gsl_rng_state: _gsl_rng_state, _gsl_sf_coupling_6j_e: _gsl_sf_coupling_6j_e, _gsl_cdf_cauchy_Q: _gsl_cdf_cauchy_Q, _gsl_cdf_cauchy_P: _gsl_cdf_cauchy_P, _gsl_sf_conicalP_mhalf_e: _gsl_sf_conicalP_mhalf_e, _gsl_sf_erf_Z_e: _gsl_sf_erf_Z_e, _gsl_sf_lnfact: _gsl_sf_lnfact, _gsl_sf_fermi_dirac_m1_e: _gsl_sf_fermi_dirac_m1_e, _gsl_sf_angle_restrict_symm: _gsl_sf_angle_restrict_symm, _gsl_sf_gamma_inc: _gsl_sf_gamma_inc, _gsl_ran_logarithmic_pdf: _gsl_ran_logarithmic_pdf, _gsl_sf_bessel_Kn_scaled_array: _gsl_sf_bessel_Kn_scaled_array, _gsl_cdf_logistic_P: _gsl_cdf_logistic_P, _gsl_cdf_logistic_Q: _gsl_cdf_logistic_Q, _gsl_ran_rayleigh_tail_pdf: _gsl_ran_rayleigh_tail_pdf, _gsl_sf_complex_logsin_e: _gsl_sf_complex_logsin_e, _gsl_rng_size: _gsl_rng_size, _gsl_sf_hyperg_2F0: _gsl_sf_hyperg_2F0, _gsl_sf_hyperg_2F1: _gsl_sf_hyperg_2F1, _gsl_sf_bessel_Jnu: _gsl_sf_bessel_Jnu, _gsl_sf_coulomb_CL_e: _gsl_sf_coulomb_CL_e, _gsl_sf_legendre_H3d_1_e: _gsl_sf_legendre_H3d_1_e, _gsl_sf_gegenpoly_array: _gsl_sf_gegenpoly_array, _gsl_sf_bessel_I0_scaled: _gsl_sf_bessel_I0_scaled, _gsl_sf_ellint_RC_e: _gsl_sf_ellint_RC_e, _gsl_sf_bessel_Knu_scaled_e: _gsl_sf_bessel_Knu_scaled_e, _gsl_ran_gumbel2: _gsl_ran_gumbel2, _gsl_cdf_fdist_Pinv: _gsl_cdf_fdist_Pinv, _gsl_ran_gumbel1: _gsl_ran_gumbel1, _gsl_ran_gaussian_tail_pdf: _gsl_ran_gaussian_tail_pdf, _gsl_sf_bessel_i2_scaled_e: _gsl_sf_bessel_i2_scaled_e, _gsl_sf_airy_Bi_deriv_scaled: _gsl_sf_airy_Bi_deriv_scaled, _gsl_sf_cos_err_e: _gsl_sf_cos_err_e, _gsl_sf_lndoublefact_e: _gsl_sf_lndoublefact_e, _gsl_sf_expint_E2_e: _gsl_sf_expint_E2_e, _gsl_cdf_gaussian_Q: _gsl_cdf_gaussian_Q, _gsl_cdf_gaussian_P: _gsl_cdf_gaussian_P, _gsl_sf_bessel_Kn_array: _gsl_sf_bessel_Kn_array, _gsl_sf_legendre_Pl: _gsl_sf_legendre_Pl, _gsl_sf_legendre_sphPlm_deriv_array: _gsl_sf_legendre_sphPlm_deriv_array, _gsl_sf_erf_Q_e: _gsl_sf_erf_Q_e, _gsl_sf_legendre_P3_e: _gsl_sf_legendre_P3_e, _gsl_sf_hyperg_2F1_renorm_e: _gsl_sf_hyperg_2F1_renorm_e, _gsl_sf_coulomb_wave_FGp_array: _gsl_sf_coulomb_wave_FGp_array, _gsl_ran_tdist: _gsl_ran_tdist, _gsl_sf_bessel_j2_e: _gsl_sf_bessel_j2_e, _gsl_sf_legendre_P1_e: _gsl_sf_legendre_P1_e, _gsl_cdf_chisq_Qinv: _gsl_cdf_chisq_Qinv, _gsl_sf_bessel_Yn: _gsl_sf_bessel_Yn, _gsl_rng_get: _gsl_rng_get, _gsl_sf_bessel_il_scaled_e: _gsl_sf_bessel_il_scaled_e, _gsl_ran_cauchy: _gsl_ran_cauchy, _gsl_sf_lambert_W0_e: _gsl_sf_lambert_W0_e, _gsl_cdf_exponential_Qinv: _gsl_cdf_exponential_Qinv, _gsl_sf_airy_Bi: _gsl_sf_airy_Bi, _gsl_sf_bessel_j0_e: _gsl_sf_bessel_j0_e, _gsl_ran_poisson: _gsl_ran_poisson, _gsl_ran_levy: _gsl_ran_levy, _gsl_sf_gammainv_e: _gsl_sf_gammainv_e, _gsl_sf_bessel_Knu_e: _gsl_sf_bessel_Knu_e, _gsl_cdf_cauchy_Pinv: _gsl_cdf_cauchy_Pinv, _gsl_sf_exp_e: _gsl_sf_exp_e, _free: _free, _gsl_sf_bessel_sequence_Jnu_e: _gsl_sf_bessel_sequence_Jnu_e, _gsl_sf_lndoublefact: _gsl_sf_lndoublefact, _gsl_sf_airy_Ai_e: _gsl_sf_airy_Ai_e, _gsl_sf_expm1: _gsl_sf_expm1, _gsl_sf_gegenpoly_3_e: _gsl_sf_gegenpoly_3_e, _gsl_sf_bessel_Inu_scaled: _gsl_sf_bessel_Inu_scaled, _gsl_sf_hydrogenicR: _gsl_sf_hydrogenicR, _gsl_sf_psi_1_int: _gsl_sf_psi_1_int, _gsl_sf_hzeta: _gsl_sf_hzeta, _gsl_sf_airy_Bi_deriv_e: _gsl_sf_airy_Bi_deriv_e, _gsl_rng_types_setup: _gsl_rng_types_setup, _gsl_cdf_rayleigh_Pinv: _gsl_cdf_rayleigh_Pinv, _gsl_cdf_tdist_Qinv: _gsl_cdf_tdist_Qinv, _gsl_sf_angle_restrict_pos: _gsl_sf_angle_restrict_pos, _gsl_sf_lnbeta: _gsl_sf_lnbeta, _gsl_sf_bessel_zero_J1: _gsl_sf_bessel_zero_J1, _gsl_sf_lngamma_e: _gsl_sf_lngamma_e, _gsl_sf_fermi_dirac_int_e: _gsl_sf_fermi_dirac_int_e, _gsl_sf_fermi_dirac_inc_0: _gsl_sf_fermi_dirac_inc_0, _gsl_sf_bessel_Kn_e: _gsl_sf_bessel_Kn_e, _gsl_sf_ellint_Pcomp_e: _gsl_sf_ellint_Pcomp_e, _gsl_sf_mathieu_Mc: _gsl_sf_mathieu_Mc, _gsl_ran_bernoulli: _gsl_ran_bernoulli, _gsl_sf_log_1plusx: _gsl_sf_log_1plusx, _gsl_sf_Ci_e: _gsl_sf_Ci_e, _gsl_sf_mathieu_Ms: _gsl_sf_mathieu_Ms, _gsl_sf_pow_int_e: _gsl_sf_pow_int_e, _gsl_sf_gegenpoly_2_e: _gsl_sf_gegenpoly_2_e, _gsl_ran_ugaussian_ratio_method: _gsl_ran_ugaussian_ratio_method, _gsl_sf_gegenpoly_n: _gsl_sf_gegenpoly_n, _gsl_sf_fermi_dirac_2: _gsl_sf_fermi_dirac_2, _gsl_cdf_negative_binomial_P: _gsl_cdf_negative_binomial_P, _gsl_cdf_negative_binomial_Q: _gsl_cdf_negative_binomial_Q, _gsl_sf_zeta_int: _gsl_sf_zeta_int, _gsl_ran_weibull: _gsl_ran_weibull, _gsl_ran_gaussian_ziggurat: _gsl_ran_gaussian_ziggurat, _gsl_sf_legendre_Pl_e: _gsl_sf_legendre_Pl_e, _gsl_sf_bessel_i2_scaled: _gsl_sf_bessel_i2_scaled, _gsl_sf_hyperg_2F1_renorm: _gsl_sf_hyperg_2F1_renorm, _gsl_sf_bessel_il_scaled: _gsl_sf_bessel_il_scaled, _gsl_sf_expint_E1_e: _gsl_sf_expint_E1_e, _gsl_sf_bessel_In_array: _gsl_sf_bessel_In_array, _gsl_sf_bessel_K0_e: _gsl_sf_bessel_K0_e, _gsl_sf_legendre_H3d_1: _gsl_sf_legendre_H3d_1, _gsl_sf_bessel_Inu: _gsl_sf_bessel_Inu, _gsl_sf_airy_Bi_e: _gsl_sf_airy_Bi_e, _gsl_sf_exprel_2_e: _gsl_sf_exprel_2_e, _gsl_sf_laguerre_n_e: _gsl_sf_laguerre_n_e, _gsl_sf_bessel_Ynu: _gsl_sf_bessel_Ynu, _gsl_sf_bessel_In: _gsl_sf_bessel_In, _gsl_cdf_lognormal_P: _gsl_cdf_lognormal_P, _gsl_cdf_lognormal_Q: _gsl_cdf_lognormal_Q, _gsl_sf_legendre_H3d_e: _gsl_sf_legendre_H3d_e, _gsl_sf_fermi_dirac_half: _gsl_sf_fermi_dirac_half, _gsl_cdf_laplace_Pinv: _gsl_cdf_laplace_Pinv, _gsl_sf_legendre_P1: _gsl_sf_legendre_P1, _gsl_sf_bessel_I1_scaled_e: _gsl_sf_bessel_I1_scaled_e, _gsl_sf_airy_Bi_deriv: _gsl_sf_airy_Bi_deriv, _gsl_sf_conicalP_half_e: _gsl_sf_conicalP_half_e, _gsl_ran_lognormal_pdf: _gsl_ran_lognormal_pdf, _gsl_sf_airy_zero_Ai: _gsl_sf_airy_zero_Ai, _gsl_sf_bessel_jl_array: _gsl_sf_bessel_jl_array, _gsl_cdf_gamma_P: _gsl_cdf_gamma_P, _gsl_sf_lngamma_complex_e: _gsl_sf_lngamma_complex_e, _gsl_sf_bessel_I1: _gsl_sf_bessel_I1, _gsl_sf_bessel_I0: _gsl_sf_bessel_I0, _gsl_sf_airy_Ai_deriv_scaled: _gsl_sf_airy_Ai_deriv_scaled, _gsl_sf_erf: _gsl_sf_erf, _gsl_sf_coupling_9j_e: _gsl_sf_coupling_9j_e, _gsl_sf_synchrotron_2: _gsl_sf_synchrotron_2, _gsl_sf_synchrotron_1: _gsl_sf_synchrotron_1, _gsl_sf_eta_int_e: _gsl_sf_eta_int_e, _gsl_sf_coulomb_wave_FG_e: _gsl_sf_coulomb_wave_FG_e, _gsl_cdf_ugaussian_Pinv: _gsl_cdf_ugaussian_Pinv, _gsl_sf_sinc: _gsl_sf_sinc, _gsl_sf_gamma_inc_P_e: _gsl_sf_gamma_inc_P_e, _gsl_rng_uniform_pos: _gsl_rng_uniform_pos, _gsl_sf_bessel_y1_e: _gsl_sf_bessel_y1_e, _gsl_sf_transport_5_e: _gsl_sf_transport_5_e, _gsl_sf_zeta_e: _gsl_sf_zeta_e, _gsl_sf_legendre_sphPlm_array: _gsl_sf_legendre_sphPlm_array, _gsl_sf_psi_int_e: _gsl_sf_psi_int_e, _gsl_sf_fermi_dirac_m1: _gsl_sf_fermi_dirac_m1, _gsl_sf_conicalP_cyl_reg: _gsl_sf_conicalP_cyl_reg, _gsl_rng_alloc: _gsl_rng_alloc, _gsl_sf_mathieu_a_array: _gsl_sf_mathieu_a_array, _gsl_sf_multiply_e: _gsl_sf_multiply_e, _gsl_sf_log_abs: _gsl_sf_log_abs, _gsl_sf_log_erfc_e: _gsl_sf_log_erfc_e, _gsl_cdf_flat_Qinv: _gsl_cdf_flat_Qinv, _gsl_sf_legendre_P2_e: _gsl_sf_legendre_P2_e, _gsl_sf_dilog_e: _gsl_sf_dilog_e, _gsl_sf_coupling_6j: _gsl_sf_coupling_6j, _gsl_sf_clausen: _gsl_sf_clausen, _gsl_sf_Si: _gsl_sf_Si, _gsl_sf_Ci: _gsl_sf_Ci, _gsl_sf_synchrotron_1_e: _gsl_sf_synchrotron_1_e, _gsl_sf_bessel_k2_scaled_e: _gsl_sf_bessel_k2_scaled_e, _gsl_sf_cos_e: _gsl_sf_cos_e, _gsl_sf_exp_mult_e10_e: _gsl_sf_exp_mult_e10_e, _gsl_sf_lnsinh_e: _gsl_sf_lnsinh_e, _gsl_ran_dirichlet_lnpdf: _gsl_ran_dirichlet_lnpdf, _gsl_ran_discrete_free: _gsl_ran_discrete_free, _gsl_sf_psi_1_e: _gsl_sf_psi_1_e, _gsl_sf_hyperg_2F1_conj: _gsl_sf_hyperg_2F1_conj, _gsl_sf_exp: _gsl_sf_exp, _gsl_sf_mathieu_a: _gsl_sf_mathieu_a, _gsl_sf_gamma_inc_P: _gsl_sf_gamma_inc_P, _gsl_sf_mathieu_b: _gsl_sf_mathieu_b, _gsl_sf_bessel_Knu: _gsl_sf_bessel_Knu, _gsl_sf_ellint_RD: _gsl_sf_ellint_RD, _gsl_sf_ellint_RF: _gsl_sf_ellint_RF, _gsl_sf_atanint_e: _gsl_sf_atanint_e, _gsl_sf_ellint_RC: _gsl_sf_ellint_RC, _gsl_ran_pascal_pdf: _gsl_ran_pascal_pdf, _gsl_sf_airy_Ai_scaled_e: _gsl_sf_airy_Ai_scaled_e, _gsl_sf_ellint_RJ: _gsl_sf_ellint_RJ, _gsl_sf_bessel_I0_e: _gsl_sf_bessel_I0_e, _strlen: _strlen, _gsl_cdf_ugaussian_Q: _gsl_cdf_ugaussian_Q, _gsl_cdf_ugaussian_P: _gsl_cdf_ugaussian_P, _gsl_sf_airy_zero_Ai_e: _gsl_sf_airy_zero_Ai_e, _gsl_ran_logistic_pdf: _gsl_ran_logistic_pdf, _gsl_ran_rayleigh_tail: _gsl_ran_rayleigh_tail, _gsl_sf_ellint_Pcomp: _gsl_sf_ellint_Pcomp, _gsl_sf_ellint_Kcomp: _gsl_sf_ellint_Kcomp, _gsl_sf_legendre_P2: _gsl_sf_legendre_P2, _gsl_sf_psi_int: _gsl_sf_psi_int, _gsl_sf_gegenpoly_2: _gsl_sf_gegenpoly_2, _gsl_sf_gegenpoly_3: _gsl_sf_gegenpoly_3, _gsl_cdf_binomial_Q: _gsl_cdf_binomial_Q, _gsl_cdf_binomial_P: _gsl_cdf_binomial_P, _gsl_sf_bessel_K0_scaled: _gsl_sf_bessel_K0_scaled, _gsl_sf_bessel_k0_scaled_e: _gsl_sf_bessel_k0_scaled_e, _gsl_sf_hyperg_U_e: _gsl_sf_hyperg_U_e, _gsl_sf_bessel_Inu_scaled_e: _gsl_sf_bessel_Inu_scaled_e, _gsl_cdf_gamma_Pinv: _gsl_cdf_gamma_Pinv, _gsl_sf_psi_1_int_e: _gsl_sf_psi_1_int_e, _gsl_sf_legendre_H3d_array: _gsl_sf_legendre_H3d_array, _gsl_cdf_weibull_Pinv: _gsl_cdf_weibull_Pinv, _gsl_sf_complex_sin_e: _gsl_sf_complex_sin_e, _gsl_sf_ellint_D_e: _gsl_sf_ellint_D_e, _gsl_sf_exprel: _gsl_sf_exprel, _gsl_ran_binomial: _gsl_ran_binomial, _gsl_sf_fermi_dirac_half_e: _gsl_sf_fermi_dirac_half_e, _gsl_sf_psi_1piy_e: _gsl_sf_psi_1piy_e, _gsl_sf_zeta_int_e: _gsl_sf_zeta_int_e, _gsl_sf_ellint_F_e: _gsl_sf_ellint_F_e, _gsl_sf_legendre_Plm_array: _gsl_sf_legendre_Plm_array, _gsl_sf_exp_e10_e: _gsl_sf_exp_e10_e, _gsl_sf_gegenpoly_1_e: _gsl_sf_gegenpoly_1_e, _gsl_cdf_gamma_Q: _gsl_cdf_gamma_Q, _gsl_rng_fwrite: _gsl_rng_fwrite, _gsl_sf_polar_to_rect: _gsl_sf_polar_to_rect, _gsl_sf_beta: _gsl_sf_beta, _gsl_sf_bessel_yl_e: _gsl_sf_bessel_yl_e, _gsl_sf_poch: _gsl_sf_poch, _gsl_sf_legendre_array_size: _gsl_sf_legendre_array_size, _gsl_sf_bessel_jl_steed_array: _gsl_sf_bessel_jl_steed_array, _gsl_sf_hydrogenicR_1: _gsl_sf_hydrogenicR_1, _gsl_sf_taylorcoeff_e: _gsl_sf_taylorcoeff_e, _gsl_sf_rect_to_polar: _gsl_sf_rect_to_polar, _gsl_sf_bessel_K1_scaled: _gsl_sf_bessel_K1_scaled, _gsl_sf_coulomb_wave_F_array: _gsl_sf_coulomb_wave_F_array, _gsl_sf_expm1_e: _gsl_sf_expm1_e, _gsl_sf_transport_4_e: _gsl_sf_transport_4_e, _gsl_sf_beta_inc_e: _gsl_sf_beta_inc_e, _gsl_sf_exp_mult_e: _gsl_sf_exp_mult_e, _gsl_sf_sin: _gsl_sf_sin, _gsl_sf_conicalP_sph_reg_e: _gsl_sf_conicalP_sph_reg_e, _gsl_sf_bessel_K1_e: _gsl_sf_bessel_K1_e, _gsl_sf_beta_e: _gsl_sf_beta_e, _gsl_sf_mathieu_ce_array: _gsl_sf_mathieu_ce_array, _gsl_ran_ugaussian_tail: _gsl_ran_ugaussian_tail, _gsl_sf_debye_3_e: _gsl_sf_debye_3_e, _gsl_ran_pascal: _gsl_ran_pascal, _gsl_sf_bessel_In_scaled: _gsl_sf_bessel_In_scaled, _gsl_sf_hyperg_2F0_e: _gsl_sf_hyperg_2F0_e, _gsl_cdf_lognormal_Qinv: _gsl_cdf_lognormal_Qinv, _gsl_sf_airy_Ai_deriv: _gsl_sf_airy_Ai_deriv, _gsl_cdf_fdist_Q: _gsl_cdf_fdist_Q, _gsl_cdf_fdist_P: _gsl_cdf_fdist_P, _gsl_cdf_pareto_Pinv: _gsl_cdf_pareto_Pinv, _gsl_sf_exprel_n: _gsl_sf_exprel_n, _gsl_sf_airy_zero_Bi_deriv: _gsl_sf_airy_zero_Bi_deriv, _gsl_sf_exprel_e: _gsl_sf_exprel_e, _gsl_rng_fread: _gsl_rng_fread, _gsl_sf_zetam1: _gsl_sf_zetam1, _gsl_sf_hypot: _gsl_sf_hypot, _gsl_sf_complex_cos_e: _gsl_sf_complex_cos_e, _gsl_ran_flat: _gsl_ran_flat, _gsl_sf_gammainv: _gsl_sf_gammainv, _gsl_sf_legendre_sphPlm_e: _gsl_sf_legendre_sphPlm_e, _gsl_sf_laguerre_1: _gsl_sf_laguerre_1, _gsl_sf_hyperg_U_e10_e: _gsl_sf_hyperg_U_e10_e, _gsl_ran_gamma_knuth: _gsl_ran_gamma_knuth, _gsl_cdf_hypergeometric_Q: _gsl_cdf_hypergeometric_Q, _gsl_cdf_hypergeometric_P: _gsl_cdf_hypergeometric_P, _gsl_sf_conicalP_half: _gsl_sf_conicalP_half, _gsl_ran_discrete: _gsl_ran_discrete, _gsl_sf_exprel_2: _gsl_sf_exprel_2, _gsl_ran_laplace: _gsl_ran_laplace, _gsl_ran_logistic: _gsl_ran_logistic, _gsl_cdf_beta_Pinv: _gsl_cdf_beta_Pinv, _gsl_sf_mathieu_se: _gsl_sf_mathieu_se, _gsl_sf_hyperg_0F1: _gsl_sf_hyperg_0F1, _gsl_ran_gamma_pdf: _gsl_ran_gamma_pdf, _gsl_sf_bessel_k0_scaled: _gsl_sf_bessel_k0_scaled, _gsl_ran_gaussian_pdf: _gsl_ran_gaussian_pdf, _gsl_sf_debye_4_e: _gsl_sf_debye_4_e, _gsl_ran_landau_pdf: _gsl_ran_landau_pdf, _gsl_sf_hyperg_U: _gsl_sf_hyperg_U, _gsl_sf_sinc_e: _gsl_sf_sinc_e, _gsl_sf_doublefact_e: _gsl_sf_doublefact_e, _gsl_ran_pareto: _gsl_ran_pareto, _gsl_sf_legendre_Ql_e: _gsl_sf_legendre_Ql_e, _gsl_sf_fermi_dirac_int: _gsl_sf_fermi_dirac_int, _gsl_sf_bessel_yl_array: _gsl_sf_bessel_yl_array, _gsl_sf_angle_restrict_symm_e: _gsl_sf_angle_restrict_symm_e, _gsl_ran_weibull_pdf: _gsl_ran_weibull_pdf, _gsl_ran_dir_2d_trig_method: _gsl_ran_dir_2d_trig_method, _gsl_sf_legendre_Pl_deriv_array: _gsl_sf_legendre_Pl_deriv_array, _gsl_sf_mathieu_se_array: _gsl_sf_mathieu_se_array, _gsl_cdf_fdist_Qinv: _gsl_cdf_fdist_Qinv, _gsl_sf_airy_zero_Bi_e: _gsl_sf_airy_zero_Bi_e, _gsl_cdf_exponential_P: _gsl_cdf_exponential_P, _gsl_cdf_exponential_Q: _gsl_cdf_exponential_Q, _gsl_sf_synchrotron_2_e: _gsl_sf_synchrotron_2_e, _gsl_sf_conicalP_sph_reg: _gsl_sf_conicalP_sph_reg, _gsl_sf_gamma_inc_Q_e: _gsl_sf_gamma_inc_Q_e, _gsl_cdf_pascal_P: _gsl_cdf_pascal_P, _gsl_sf_bessel_il_scaled_array: _gsl_sf_bessel_il_scaled_array, _gsl_sf_bessel_kl_scaled_array: _gsl_sf_bessel_kl_scaled_array, _gsl_cdf_chisq_Q: _gsl_cdf_chisq_Q, _gsl_sf_bessel_zero_Jnu_e: _gsl_sf_bessel_zero_Jnu_e, _gsl_sf_lncosh_e: _gsl_sf_lncosh_e, _gsl_sf_bessel_Yn_e: _gsl_sf_bessel_Yn_e, _gsl_sf_laguerre_3_e: _gsl_sf_laguerre_3_e, _gsl_rng_uniform: _gsl_rng_uniform, _gsl_sf_zetam1_int: _gsl_sf_zetam1_int, _gsl_sf_legendre_Plm: _gsl_sf_legendre_Plm, _gsl_cdf_exponential_Pinv: _gsl_cdf_exponential_Pinv, _gsl_sf_expint_3_e: _gsl_sf_expint_3_e, _gsl_sf_legendre_Pl_array: _gsl_sf_legendre_Pl_array, _gsl_ran_levy_skew: _gsl_ran_levy_skew, _gsl_cdf_logistic_Qinv: _gsl_cdf_logistic_Qinv, _gsl_sf_poch_e: _gsl_sf_poch_e, _gsl_cdf_lognormal_Pinv: _gsl_cdf_lognormal_Pinv, _gsl_sf_psi: _gsl_sf_psi, _gsl_ran_gaussian: _gsl_ran_gaussian, _gsl_sf_log_1plusx_e: _gsl_sf_log_1plusx_e, _gsl_sf_bessel_I1_e: _gsl_sf_bessel_I1_e, _gsl_sf_bessel_kl_scaled: _gsl_sf_bessel_kl_scaled, _gsl_sf_bessel_K1_scaled_e: _gsl_sf_bessel_K1_scaled_e, _gsl_sf_fact_e: _gsl_sf_fact_e, _gsl_sf_bessel_Kn_scaled: _gsl_sf_bessel_Kn_scaled, _gsl_sf_bessel_Yn_array: _gsl_sf_bessel_Yn_array, _gsl_sf_expint_3: _gsl_sf_expint_3, _gsl_sf_hazard_e: _gsl_sf_hazard_e, _gsl_ran_pareto_pdf: _gsl_ran_pareto_pdf, _gsl_sf_psi_1piy: _gsl_sf_psi_1piy, _gsl_sf_bessel_In_scaled_array: _gsl_sf_bessel_In_scaled_array, _calloc: _calloc, _gsl_ran_geometric_pdf: _gsl_ran_geometric_pdf, _gsl_sf_ellint_P_e: _gsl_sf_ellint_P_e, _bitshift64Shl: _bitshift64Shl, _gsl_ran_beta_pdf: _gsl_ran_beta_pdf, _gsl_sf_gamma_inc_e: _gsl_sf_gamma_inc_e, _gsl_sf_ellint_E_e: _gsl_sf_ellint_E_e, _gsl_sf_laguerre_1_e: _gsl_sf_laguerre_1_e, _gsl_sf_bessel_In_scaled_e: _gsl_sf_bessel_In_scaled_e, _gsl_sf_legendre_sphPlm: _gsl_sf_legendre_sphPlm, _gsl_sf_Chi_e: _gsl_sf_Chi_e, _gsl_sf_fermi_dirac_1_e: _gsl_sf_fermi_dirac_1_e, _gsl_cdf_gumbel1_Pinv: _gsl_cdf_gumbel1_Pinv, _gsl_ran_exppow: _gsl_ran_exppow, _gsl_sf_conicalP_0_e: _gsl_sf_conicalP_0_e, _gsl_sf_laguerre_2_e: _gsl_sf_laguerre_2_e, _gsl_sf_debye_6_e: _gsl_sf_debye_6_e, _gsl_cdf_gumbel2_Qinv: _gsl_cdf_gumbel2_Qinv, _gsl_ran_multinomial_lnpdf: _gsl_ran_multinomial_lnpdf, _gsl_sf_bessel_y2_e: _gsl_sf_bessel_y2_e, _gsl_ran_gaussian_tail: _gsl_ran_gaussian_tail, _gsl_sf_bessel_y0_e: _gsl_sf_bessel_y0_e, _gsl_sf_lnfact_e: _gsl_sf_lnfact_e, _gsl_sf_gamma_inc_Q: _gsl_sf_gamma_inc_Q, _gsl_cdf_gumbel1_P: _gsl_cdf_gumbel1_P, _gsl_cdf_gumbel1_Q: _gsl_cdf_gumbel1_Q, _gsl_sf_dilog: _gsl_sf_dilog, _gsl_sf_debye_2_e: _gsl_sf_debye_2_e, _gsl_sf_exp_mult: _gsl_sf_exp_mult, _gsl_sf_bessel_yl: _gsl_sf_bessel_yl, _gsl_sf_lnbeta_e: _gsl_sf_lnbeta_e, _gsl_sf_mathieu_Ms_array: _gsl_sf_mathieu_Ms_array, _gsl_sf_gegenpoly_n_e: _gsl_sf_gegenpoly_n_e, _gsl_ran_chisq_pdf: _gsl_ran_chisq_pdf, _gsl_rng_name: _gsl_rng_name, _gsl_ran_flat_pdf: _gsl_ran_flat_pdf, _gsl_sf_log_erfc: _gsl_sf_log_erfc, _gsl_cdf_geometric_P: _gsl_cdf_geometric_P, _gsl_cdf_geometric_Q: _gsl_cdf_geometric_Q, _gsl_sf_angle_restrict_pos_e: _gsl_sf_angle_restrict_pos_e, _gsl_sf_bessel_Y0_e: _gsl_sf_bessel_Y0_e, _gsl_sf_hyperg_2F1_conj_renorm_e: _gsl_sf_hyperg_2F1_conj_renorm_e, _gsl_sf_lnchoose_e: _gsl_sf_lnchoose_e, _gsl_sf_pochrel_e: _gsl_sf_pochrel_e, _gsl_sf_conicalP_cyl_reg_e: _gsl_sf_conicalP_cyl_reg_e, _gsl_ran_exppow_pdf: _gsl_ran_exppow_pdf, _gsl_sf_log: _gsl_sf_log, _gsl_cdf_exppow_Q: _gsl_cdf_exppow_Q, _gsl_cdf_exppow_P: _gsl_cdf_exppow_P, _gsl_sf_bessel_Jnu_e: _gsl_sf_bessel_Jnu_e, _gsl_sf_airy_Ai_deriv_scaled_e: _gsl_sf_airy_Ai_deriv_scaled_e, _gsl_sf_hyperg_U_int_e: _gsl_sf_hyperg_U_int_e, _gsl_sf_hyperg_2F1_conj_renorm: _gsl_sf_hyperg_2F1_conj_renorm, _memcpy: _memcpy, _gsl_cdf_laplace_Q: _gsl_cdf_laplace_Q, _gsl_cdf_laplace_P: _gsl_cdf_laplace_P, _gsl_sf_hyperg_2F1_e: _gsl_sf_hyperg_2F1_e, _gsl_cdf_chisq_Pinv: _gsl_cdf_chisq_Pinv, _gsl_sf_hyperg_1F1_int_e: _gsl_sf_hyperg_1F1_int_e, _gsl_sf_bessel_i0_scaled: _gsl_sf_bessel_i0_scaled, _gsl_ran_binomial_pdf: _gsl_ran_binomial_pdf, _gsl_sf_gammastar_e: _gsl_sf_gammastar_e, _gsl_sf_bessel_zero_J0_e: _gsl_sf_bessel_zero_J0_e, _gsl_sf_transport_2_e: _gsl_sf_transport_2_e, _gsl_sf_Chi: _gsl_sf_Chi, _gsl_sf_airy_zero_Ai_deriv: _gsl_sf_airy_zero_Ai_deriv, _gsl_sf_erfc: _gsl_sf_erfc, _gsl_sf_airy_Bi_deriv_scaled_e: _gsl_sf_airy_Bi_deriv_scaled_e, _gsl_sf_Shi: _gsl_sf_Shi, _gsl_sf_eta_e: _gsl_sf_eta_e, _gsl_cdf_weibull_Q: _gsl_cdf_weibull_Q, _gsl_cdf_weibull_P: _gsl_cdf_weibull_P, _gsl_sf_psi_n_e: _gsl_sf_psi_n_e, _gsl_sf_bessel_zero_Jnu: _gsl_sf_bessel_zero_Jnu, _gsl_sf_gegenpoly_1: _gsl_sf_gegenpoly_1, _gsl_cdf_tdist_Q: _gsl_cdf_tdist_Q, _gsl_cdf_tdist_P: _gsl_cdf_tdist_P, _gsl_sf_legendre_Plm_e: _gsl_sf_legendre_Plm_e, _gsl_sf_bessel_Knu_scaled: _gsl_sf_bessel_Knu_scaled, _gsl_sf_airy_Bi_scaled: _gsl_sf_airy_Bi_scaled, _gsl_ran_sample: _gsl_ran_sample, _gsl_sf_legendre_Q1: _gsl_sf_legendre_Q1, _gsl_sf_bessel_I1_scaled: _gsl_sf_bessel_I1_scaled, _gsl_sf_bessel_kl_scaled_e: _gsl_sf_bessel_kl_scaled_e, _gsl_sf_complex_log_e: _gsl_sf_complex_log_e, _gsl_cdf_flat_Q: _gsl_cdf_flat_Q, _gsl_cdf_flat_P: _gsl_cdf_flat_P, _gsl_sf_mathieu_alloc: _gsl_sf_mathieu_alloc, _gsl_sf_ellint_Ecomp_e: _gsl_sf_ellint_Ecomp_e, _gsl_sf_bessel_Kn: _gsl_sf_bessel_Kn, _gsl_cdf_laplace_Qinv: _gsl_cdf_laplace_Qinv, _gsl_ran_landau: _gsl_ran_landau, _gsl_sf_legendre_Plm_deriv_array: _gsl_sf_legendre_Plm_deriv_array, _gsl_cdf_poisson_P: _gsl_cdf_poisson_P, _gsl_cdf_poisson_Q: _gsl_cdf_poisson_Q, _gsl_cdf_rayleigh_Qinv: _gsl_cdf_rayleigh_Qinv, _gsl_ran_discrete_preproc: _gsl_ran_discrete_preproc, _gsl_ran_discrete_pdf: _gsl_ran_discrete_pdf, _gsl_sf_bessel_K1: _gsl_sf_bessel_K1, _gsl_sf_bessel_K0: _gsl_sf_bessel_K0, _gsl_ran_ugaussian_tail_pdf: _gsl_ran_ugaussian_tail_pdf, _gsl_ran_dirichlet_pdf: _gsl_ran_dirichlet_pdf, _gsl_sf_legendre_Q1_e: _gsl_sf_legendre_Q1_e, _gsl_ran_fdist_pdf: _gsl_ran_fdist_pdf, _gsl_sf_Si_e: _gsl_sf_Si_e, _gsl_ran_dir_2d: _gsl_ran_dir_2d, _gsl_sf_log_abs_e: _gsl_sf_log_abs_e, _gsl_cdf_tdist_Pinv: _gsl_cdf_tdist_Pinv, _gsl_rng_free: _gsl_rng_free, _gsl_cdf_gaussian_Pinv: _gsl_cdf_gaussian_Pinv, _gsl_sf_multiply_err_e: _gsl_sf_multiply_err_e, _gsl_sf_debye_5_e: _gsl_sf_debye_5_e, _gsl_sf_hazard: _gsl_sf_hazard, _gsl_cdf_rayleigh_Q: _gsl_cdf_rayleigh_Q, _gsl_cdf_rayleigh_P: _gsl_cdf_rayleigh_P, _gsl_sf_pow_int: _gsl_sf_pow_int, _gsl_sf_fermi_dirac_1: _gsl_sf_fermi_dirac_1, _gsl_sf_fermi_dirac_0: _gsl_sf_fermi_dirac_0, _gsl_sf_ellint_Kcomp_e: _gsl_sf_ellint_Kcomp_e, _gsl_sf_airy_zero_Ai_deriv_e: _gsl_sf_airy_zero_Ai_deriv_e, _gsl_sf_bessel_K0_scaled_e: _gsl_sf_bessel_K0_scaled_e, _memset: _memset, _gsl_sf_complex_dilog_e: _gsl_sf_complex_dilog_e, _gsl_cdf_ugaussian_Qinv: _gsl_cdf_ugaussian_Qinv, _gsl_ran_choose: _gsl_ran_choose, _gsl_cdf_beta_P: _gsl_cdf_beta_P, _gsl_cdf_beta_Q: _gsl_cdf_beta_Q, _gsl_sf_bessel_i0_scaled_e: _gsl_sf_bessel_i0_scaled_e, _gsl_sf_sin_e: _gsl_sf_sin_e, _gsl_ran_geometric: _gsl_ran_geometric, _gsl_sf_bessel_Y1: _gsl_sf_bessel_Y1, _gsl_sf_bessel_Y0: _gsl_sf_bessel_Y0, _gsl_sf_atanint: _gsl_sf_atanint, _gsl_sf_fermi_dirac_0_e: _gsl_sf_fermi_dirac_0_e, _gsl_sf_transport_5: _gsl_sf_transport_5, _gsl_sf_transport_4: _gsl_sf_transport_4, _gsl_sf_transport_3: _gsl_sf_transport_3, _gsl_sf_transport_2: _gsl_sf_transport_2, _gsl_ran_multinomial_pdf: _gsl_ran_multinomial_pdf, _gsl_sf_fermi_dirac_2_e: _gsl_sf_fermi_dirac_2_e, _gsl_sf_debye_1_e: _gsl_sf_debye_1_e, _gsl_cdf_gumbel2_Q: _gsl_cdf_gumbel2_Q, _gsl_cdf_gumbel2_P: _gsl_cdf_gumbel2_P, _gsl_sf_log_1plusx_mx: _gsl_sf_log_1plusx_mx, _gsl_sf_lambert_W0: _gsl_sf_lambert_W0, _gsl_sf_conicalP_1_e: _gsl_sf_conicalP_1_e, _gsl_sf_bessel_i1_scaled_e: _gsl_sf_bessel_i1_scaled_e, _gsl_rng_uniform_int: _gsl_rng_uniform_int, _gsl_sf_airy_Ai: _gsl_sf_airy_Ai, _gsl_sf_fermi_dirac_mhalf: _gsl_sf_fermi_dirac_mhalf, _gsl_sf_legendre_H3d_0: _gsl_sf_legendre_H3d_0, _gsl_sf_gamma: _gsl_sf_gamma, _gsl_sf_bessel_j1: _gsl_sf_bessel_j1, _gsl_sf_erf_e: _gsl_sf_erf_e, _gsl_sf_coulomb_CL_array: _gsl_sf_coulomb_CL_array, _gsl_sf_dawson_e: _gsl_sf_dawson_e, _gsl_sf_erfc_e: _gsl_sf_erfc_e, _gsl_sf_erf_Q: _gsl_sf_erf_Q, _gsl_sf_exp_mult_err_e: _gsl_sf_exp_mult_err_e, _gsl_sf_bessel_Y1_e: _gsl_sf_bessel_Y1_e, _gsl_sf_lngamma_sgn_e: _gsl_sf_lngamma_sgn_e, _gsl_sf_erf_Z: _gsl_sf_erf_Z, _gsl_sf_bessel_I0_scaled_e: _gsl_sf_bessel_I0_scaled_e, _gsl_sf_psi_1: _gsl_sf_psi_1, _gsl_sf_fermi_dirac_inc_0_e: _gsl_sf_fermi_dirac_inc_0_e, _gsl_ran_gamma: _gsl_ran_gamma, _gsl_sf_mathieu_free: _gsl_sf_mathieu_free, _gsl_sf_lnsinh: _gsl_sf_lnsinh, _gsl_sf_airy_Ai_scaled: _gsl_sf_airy_Ai_scaled, _gsl_sf_cos: _gsl_sf_cos, _gsl_sf_mathieu_ce: _gsl_sf_mathieu_ce, _gsl_ran_exponential_pdf: _gsl_ran_exponential_pdf, _gsl_sf_bessel_zero_J1_e: _gsl_sf_bessel_zero_J1_e, _gsl_sf_lncosh: _gsl_sf_lncosh, _gsl_sf_bessel_Jn_array: _gsl_sf_bessel_Jn_array, _gsl_sf_bessel_J0_e: _gsl_sf_bessel_J0_e, _gsl_sf_ellint_P: _gsl_sf_ellint_P, _gsl_sf_psi_n: _gsl_sf_psi_n, _gsl_sf_bessel_Jn_e: _gsl_sf_bessel_Jn_e, _gsl_sf_fermi_dirac_3half_e: _gsl_sf_fermi_dirac_3half_e, _gsl_sf_psi_e: _gsl_sf_psi_e, _gsl_sf_gammastar: _gsl_sf_gammastar, _gsl_sf_ellint_E: _gsl_sf_ellint_E, _gsl_sf_ellint_D: _gsl_sf_ellint_D, _gsl_sf_ellint_F: _gsl_sf_ellint_F, _gsl_sf_bessel_y2: _gsl_sf_bessel_y2, _gsl_sf_bessel_y1: _gsl_sf_bessel_y1, _gsl_sf_bessel_y0: _gsl_sf_bessel_y0, _gsl_sf_airy_Ai_deriv_e: _gsl_sf_airy_Ai_deriv_e, _gsl_sf_hyperg_0F1_e: _gsl_sf_hyperg_0F1_e, _gsl_sf_hyperg_U_int_e10_e: _gsl_sf_hyperg_U_int_e10_e, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_vii: dynCall_vii, dynCall_di: dynCall_di };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _gsl_sf_zetam1_e = Module["_gsl_sf_zetam1_e"] = asm["_gsl_sf_zetam1_e"];
var _gsl_sf_doublefact = Module["_gsl_sf_doublefact"] = asm["_gsl_sf_doublefact"];
var _gsl_sf_sin_err_e = Module["_gsl_sf_sin_err_e"] = asm["_gsl_sf_sin_err_e"];
var _gsl_sf_lnpoch_e = Module["_gsl_sf_lnpoch_e"] = asm["_gsl_sf_lnpoch_e"];
var _gsl_sf_eta = Module["_gsl_sf_eta"] = asm["_gsl_sf_eta"];
var _gsl_ran_negative_binomial_pdf = Module["_gsl_ran_negative_binomial_pdf"] = asm["_gsl_ran_negative_binomial_pdf"];
var _gsl_ran_gumbel1_pdf = Module["_gsl_ran_gumbel1_pdf"] = asm["_gsl_ran_gumbel1_pdf"];
var _gsl_sf_exp_mult_err_e10_e = Module["_gsl_sf_exp_mult_err_e10_e"] = asm["_gsl_sf_exp_mult_err_e10_e"];
var _gsl_sf_hyperg_1F1 = Module["_gsl_sf_hyperg_1F1"] = asm["_gsl_sf_hyperg_1F1"];
var _gsl_sf_exprel_n_e = Module["_gsl_sf_exprel_n_e"] = asm["_gsl_sf_exprel_n_e"];
var _gsl_ran_tdist_pdf = Module["_gsl_ran_tdist_pdf"] = asm["_gsl_ran_tdist_pdf"];
var _gsl_sf_coulomb_wave_sphF_array = Module["_gsl_sf_coulomb_wave_sphF_array"] = asm["_gsl_sf_coulomb_wave_sphF_array"];
var _gsl_sf_hydrogenicR_1_e = Module["_gsl_sf_hydrogenicR_1_e"] = asm["_gsl_sf_hydrogenicR_1_e"];
var _gsl_sf_hypot_e = Module["_gsl_sf_hypot_e"] = asm["_gsl_sf_hypot_e"];
var _gsl_sf_ellint_Ecomp = Module["_gsl_sf_ellint_Ecomp"] = asm["_gsl_sf_ellint_Ecomp"];
var _gsl_sf_mathieu_b_array = Module["_gsl_sf_mathieu_b_array"] = asm["_gsl_sf_mathieu_b_array"];
var _gsl_sf_bessel_k1_scaled_e = Module["_gsl_sf_bessel_k1_scaled_e"] = asm["_gsl_sf_bessel_k1_scaled_e"];
var _gsl_sf_hyperg_1F1_int = Module["_gsl_sf_hyperg_1F1_int"] = asm["_gsl_sf_hyperg_1F1_int"];
var _gsl_cdf_gamma_Qinv = Module["_gsl_cdf_gamma_Qinv"] = asm["_gsl_cdf_gamma_Qinv"];
var _gsl_sf_ellint_RD_e = Module["_gsl_sf_ellint_RD_e"] = asm["_gsl_sf_ellint_RD_e"];
var _gsl_sf_Shi_e = Module["_gsl_sf_Shi_e"] = asm["_gsl_sf_Shi_e"];
var _gsl_sf_airy_zero_Bi_deriv_e = Module["_gsl_sf_airy_zero_Bi_deriv_e"] = asm["_gsl_sf_airy_zero_Bi_deriv_e"];
var _gsl_cdf_weibull_Qinv = Module["_gsl_cdf_weibull_Qinv"] = asm["_gsl_cdf_weibull_Qinv"];
var _gsl_cdf_gaussian_Qinv = Module["_gsl_cdf_gaussian_Qinv"] = asm["_gsl_cdf_gaussian_Qinv"];
var _gsl_sf_lambert_Wm1 = Module["_gsl_sf_lambert_Wm1"] = asm["_gsl_sf_lambert_Wm1"];
var _gsl_ran_negative_binomial = Module["_gsl_ran_negative_binomial"] = asm["_gsl_ran_negative_binomial"];
var _gsl_sf_ellint_RF_e = Module["_gsl_sf_ellint_RF_e"] = asm["_gsl_sf_ellint_RF_e"];
var _gsl_ran_logarithmic = Module["_gsl_ran_logarithmic"] = asm["_gsl_ran_logarithmic"];
var _gsl_sf_coupling_3j = Module["_gsl_sf_coupling_3j"] = asm["_gsl_sf_coupling_3j"];
var _gsl_cdf_beta_Qinv = Module["_gsl_cdf_beta_Qinv"] = asm["_gsl_cdf_beta_Qinv"];
var _gsl_cdf_pareto_Qinv = Module["_gsl_cdf_pareto_Qinv"] = asm["_gsl_cdf_pareto_Qinv"];
var _gsl_sf_legendre_H3d_0_e = Module["_gsl_sf_legendre_H3d_0_e"] = asm["_gsl_sf_legendre_H3d_0_e"];
var _gsl_ran_shuffle = Module["_gsl_ran_shuffle"] = asm["_gsl_ran_shuffle"];
var _gsl_sf_log_e = Module["_gsl_sf_log_e"] = asm["_gsl_sf_log_e"];
var _gsl_ran_dirichlet = Module["_gsl_ran_dirichlet"] = asm["_gsl_ran_dirichlet"];
var _gsl_ran_poisson_pdf = Module["_gsl_ran_poisson_pdf"] = asm["_gsl_ran_poisson_pdf"];
var _gsl_ran_bivariate_gaussian = Module["_gsl_ran_bivariate_gaussian"] = asm["_gsl_ran_bivariate_gaussian"];
var _gsl_rng_clone = Module["_gsl_rng_clone"] = asm["_gsl_rng_clone"];
var _gsl_sf_eta_int = Module["_gsl_sf_eta_int"] = asm["_gsl_sf_eta_int"];
var _gsl_ran_dir_3d = Module["_gsl_ran_dir_3d"] = asm["_gsl_ran_dir_3d"];
var _gsl_sf_exp_err_e10_e = Module["_gsl_sf_exp_err_e10_e"] = asm["_gsl_sf_exp_err_e10_e"];
var _gsl_sf_bessel_zero_J0 = Module["_gsl_sf_bessel_zero_J0"] = asm["_gsl_sf_bessel_zero_J0"];
var _gsl_sf_clausen_e = Module["_gsl_sf_clausen_e"] = asm["_gsl_sf_clausen_e"];
var _gsl_sf_legendre_H3d = Module["_gsl_sf_legendre_H3d"] = asm["_gsl_sf_legendre_H3d"];
var _gsl_ran_hypergeometric_pdf = Module["_gsl_ran_hypergeometric_pdf"] = asm["_gsl_ran_hypergeometric_pdf"];
var _gsl_sf_laguerre_n = Module["_gsl_sf_laguerre_n"] = asm["_gsl_sf_laguerre_n"];
var _gsl_ran_chisq = Module["_gsl_ran_chisq"] = asm["_gsl_ran_chisq"];
var _gsl_sf_airy_zero_Bi = Module["_gsl_sf_airy_zero_Bi"] = asm["_gsl_sf_airy_zero_Bi"];
var _gsl_sf_mathieu_Mc_array = Module["_gsl_sf_mathieu_Mc_array"] = asm["_gsl_sf_mathieu_Mc_array"];
var _gsl_sf_gamma_e = Module["_gsl_sf_gamma_e"] = asm["_gsl_sf_gamma_e"];
var _gsl_sf_bessel_k2_scaled = Module["_gsl_sf_bessel_k2_scaled"] = asm["_gsl_sf_bessel_k2_scaled"];
var _gsl_ran_ugaussian_pdf = Module["_gsl_ran_ugaussian_pdf"] = asm["_gsl_ran_ugaussian_pdf"];
var _gsl_sf_legendre_P3 = Module["_gsl_sf_legendre_P3"] = asm["_gsl_sf_legendre_P3"];
var _gsl_sf_fact = Module["_gsl_sf_fact"] = asm["_gsl_sf_fact"];
var _gsl_sf_pochrel = Module["_gsl_sf_pochrel"] = asm["_gsl_sf_pochrel"];
var _gsl_sf_hyperg_1F1_e = Module["_gsl_sf_hyperg_1F1_e"] = asm["_gsl_sf_hyperg_1F1_e"];
var _gsl_cdf_flat_Pinv = Module["_gsl_cdf_flat_Pinv"] = asm["_gsl_cdf_flat_Pinv"];
var _gsl_sf_zeta = Module["_gsl_sf_zeta"] = asm["_gsl_sf_zeta"];
var _gsl_sf_bessel_j1_e = Module["_gsl_sf_bessel_j1_e"] = asm["_gsl_sf_bessel_j1_e"];
var _gsl_sf_laguerre_2 = Module["_gsl_sf_laguerre_2"] = asm["_gsl_sf_laguerre_2"];
var _gsl_sf_laguerre_3 = Module["_gsl_sf_laguerre_3"] = asm["_gsl_sf_laguerre_3"];
var _gsl_sf_taylorcoeff = Module["_gsl_sf_taylorcoeff"] = asm["_gsl_sf_taylorcoeff"];
var _gsl_ran_laplace_pdf = Module["_gsl_ran_laplace_pdf"] = asm["_gsl_ran_laplace_pdf"];
var _gsl_ran_multinomial = Module["_gsl_ran_multinomial"] = asm["_gsl_ran_multinomial"];
var _gsl_sf_bessel_Inu_e = Module["_gsl_sf_bessel_Inu_e"] = asm["_gsl_sf_bessel_Inu_e"];
var _gsl_sf_expint_Ei_e = Module["_gsl_sf_expint_Ei_e"] = asm["_gsl_sf_expint_Ei_e"];
var _gsl_sf_legendre_Q0_e = Module["_gsl_sf_legendre_Q0_e"] = asm["_gsl_sf_legendre_Q0_e"];
var _gsl_sf_hzeta_e = Module["_gsl_sf_hzeta_e"] = asm["_gsl_sf_hzeta_e"];
var _gsl_sf_debye_5 = Module["_gsl_sf_debye_5"] = asm["_gsl_sf_debye_5"];
var _gsl_sf_debye_4 = Module["_gsl_sf_debye_4"] = asm["_gsl_sf_debye_4"];
var _gsl_sf_debye_6 = Module["_gsl_sf_debye_6"] = asm["_gsl_sf_debye_6"];
var _gsl_sf_debye_1 = Module["_gsl_sf_debye_1"] = asm["_gsl_sf_debye_1"];
var _gsl_sf_debye_3 = Module["_gsl_sf_debye_3"] = asm["_gsl_sf_debye_3"];
var _gsl_sf_debye_2 = Module["_gsl_sf_debye_2"] = asm["_gsl_sf_debye_2"];
var _gsl_sf_hyperg_2F1_conj_e = Module["_gsl_sf_hyperg_2F1_conj_e"] = asm["_gsl_sf_hyperg_2F1_conj_e"];
var _gsl_sf_zetam1_int_e = Module["_gsl_sf_zetam1_int_e"] = asm["_gsl_sf_zetam1_int_e"];
var _gsl_ran_gumbel2_pdf = Module["_gsl_ran_gumbel2_pdf"] = asm["_gsl_ran_gumbel2_pdf"];
var _gsl_sf_bessel_Kn_scaled_e = Module["_gsl_sf_bessel_Kn_scaled_e"] = asm["_gsl_sf_bessel_Kn_scaled_e"];
var _gsl_sf_beta_inc = Module["_gsl_sf_beta_inc"] = asm["_gsl_sf_beta_inc"];
var _gsl_sf_exp_err_e = Module["_gsl_sf_exp_err_e"] = asm["_gsl_sf_exp_err_e"];
var _gsl_sf_conicalP_0 = Module["_gsl_sf_conicalP_0"] = asm["_gsl_sf_conicalP_0"];
var _gsl_sf_conicalP_1 = Module["_gsl_sf_conicalP_1"] = asm["_gsl_sf_conicalP_1"];
var _gsl_sf_bessel_i1_scaled = Module["_gsl_sf_bessel_i1_scaled"] = asm["_gsl_sf_bessel_i1_scaled"];
var _gsl_sf_lnchoose = Module["_gsl_sf_lnchoose"] = asm["_gsl_sf_lnchoose"];
var _gsl_sf_lnpoch_sgn_e = Module["_gsl_sf_lnpoch_sgn_e"] = asm["_gsl_sf_lnpoch_sgn_e"];
var _gsl_sf_fermi_dirac_3half = Module["_gsl_sf_fermi_dirac_3half"] = asm["_gsl_sf_fermi_dirac_3half"];
var _gsl_ran_hypergeometric = Module["_gsl_ran_hypergeometric"] = asm["_gsl_ran_hypergeometric"];
var _gsl_rng_memcpy = Module["_gsl_rng_memcpy"] = asm["_gsl_rng_memcpy"];
var _gsl_sf_hyperg_U_int = Module["_gsl_sf_hyperg_U_int"] = asm["_gsl_sf_hyperg_U_int"];
var _gsl_ran_bernoulli_pdf = Module["_gsl_ran_bernoulli_pdf"] = asm["_gsl_ran_bernoulli_pdf"];
var _gsl_sf_dawson = Module["_gsl_sf_dawson"] = asm["_gsl_sf_dawson"];
var _gsl_sf_legendre_Q0 = Module["_gsl_sf_legendre_Q0"] = asm["_gsl_sf_legendre_Q0"];
var _gsl_sf_bessel_jl = Module["_gsl_sf_bessel_jl"] = asm["_gsl_sf_bessel_jl"];
var _gsl_sf_airy_Bi_scaled_e = Module["_gsl_sf_airy_Bi_scaled_e"] = asm["_gsl_sf_airy_Bi_scaled_e"];
var _gsl_ran_gaussian_ratio_method = Module["_gsl_ran_gaussian_ratio_method"] = asm["_gsl_ran_gaussian_ratio_method"];
var _gsl_sf_bessel_J0 = Module["_gsl_sf_bessel_J0"] = asm["_gsl_sf_bessel_J0"];
var _gsl_sf_bessel_J1 = Module["_gsl_sf_bessel_J1"] = asm["_gsl_sf_bessel_J1"];
var _gsl_cdf_gumbel2_Pinv = Module["_gsl_cdf_gumbel2_Pinv"] = asm["_gsl_cdf_gumbel2_Pinv"];
var _gsl_ran_fdist = Module["_gsl_ran_fdist"] = asm["_gsl_ran_fdist"];
var _gsl_rng_max = Module["_gsl_rng_max"] = asm["_gsl_rng_max"];
var _gsl_sf_transport_3_e = Module["_gsl_sf_transport_3_e"] = asm["_gsl_sf_transport_3_e"];
var _gsl_sf_fermi_dirac_mhalf_e = Module["_gsl_sf_fermi_dirac_mhalf_e"] = asm["_gsl_sf_fermi_dirac_mhalf_e"];
var _gsl_sf_coupling_3j_e = Module["_gsl_sf_coupling_3j_e"] = asm["_gsl_sf_coupling_3j_e"];
var _gsl_ran_bivariate_gaussian_pdf = Module["_gsl_ran_bivariate_gaussian_pdf"] = asm["_gsl_ran_bivariate_gaussian_pdf"];
var _gsl_sf_expint_Ei = Module["_gsl_sf_expint_Ei"] = asm["_gsl_sf_expint_Ei"];
var _gsl_sf_lngamma = Module["_gsl_sf_lngamma"] = asm["_gsl_sf_lngamma"];
var _gsl_sf_expint_En = Module["_gsl_sf_expint_En"] = asm["_gsl_sf_expint_En"];
var _gsl_sf_bessel_j2 = Module["_gsl_sf_bessel_j2"] = asm["_gsl_sf_bessel_j2"];
var _gsl_sf_bessel_jl_e = Module["_gsl_sf_bessel_jl_e"] = asm["_gsl_sf_bessel_jl_e"];
var _gsl_sf_bessel_j0 = Module["_gsl_sf_bessel_j0"] = asm["_gsl_sf_bessel_j0"];
var _gsl_sf_bessel_In_e = Module["_gsl_sf_bessel_In_e"] = asm["_gsl_sf_bessel_In_e"];
var _gsl_sf_legendre_Ql = Module["_gsl_sf_legendre_Ql"] = asm["_gsl_sf_legendre_Ql"];
var _gsl_sf_expint_En_e = Module["_gsl_sf_expint_En_e"] = asm["_gsl_sf_expint_En_e"];
var _gsl_sf_lnpoch = Module["_gsl_sf_lnpoch"] = asm["_gsl_sf_lnpoch"];
var _gsl_rng_set = Module["_gsl_rng_set"] = asm["_gsl_rng_set"];
var _gsl_sf_bessel_k1_scaled = Module["_gsl_sf_bessel_k1_scaled"] = asm["_gsl_sf_bessel_k1_scaled"];
var _gsl_sf_bessel_lnKnu_e = Module["_gsl_sf_bessel_lnKnu_e"] = asm["_gsl_sf_bessel_lnKnu_e"];
var _gsl_sf_choose = Module["_gsl_sf_choose"] = asm["_gsl_sf_choose"];
var _gsl_cdf_pascal_Q = Module["_gsl_cdf_pascal_Q"] = asm["_gsl_cdf_pascal_Q"];
var _gsl_ran_beta = Module["_gsl_ran_beta"] = asm["_gsl_ran_beta"];
var _gsl_sf_choose_e = Module["_gsl_sf_choose_e"] = asm["_gsl_sf_choose_e"];
var _gsl_sf_expint_E1 = Module["_gsl_sf_expint_E1"] = asm["_gsl_sf_expint_E1"];
var _gsl_sf_expint_E2 = Module["_gsl_sf_expint_E2"] = asm["_gsl_sf_expint_E2"];
var _gsl_sf_conicalP_mhalf = Module["_gsl_sf_conicalP_mhalf"] = asm["_gsl_sf_conicalP_mhalf"];
var _gsl_sf_elljac_e = Module["_gsl_sf_elljac_e"] = asm["_gsl_sf_elljac_e"];
var _gsl_rng_min = Module["_gsl_rng_min"] = asm["_gsl_rng_min"];
var _gsl_ran_cauchy_pdf = Module["_gsl_ran_cauchy_pdf"] = asm["_gsl_ran_cauchy_pdf"];
var _gsl_sf_bessel_J1_e = Module["_gsl_sf_bessel_J1_e"] = asm["_gsl_sf_bessel_J1_e"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _gsl_ran_rayleigh_pdf = Module["_gsl_ran_rayleigh_pdf"] = asm["_gsl_ran_rayleigh_pdf"];
var _gsl_sf_lambert_Wm1_e = Module["_gsl_sf_lambert_Wm1_e"] = asm["_gsl_sf_lambert_Wm1_e"];
var _gsl_sf_log_1plusx_mx_e = Module["_gsl_sf_log_1plusx_mx_e"] = asm["_gsl_sf_log_1plusx_mx_e"];
var _gsl_ran_dir_nd = Module["_gsl_ran_dir_nd"] = asm["_gsl_ran_dir_nd"];
var _gsl_cdf_logistic_Pinv = Module["_gsl_cdf_logistic_Pinv"] = asm["_gsl_cdf_logistic_Pinv"];
var _gsl_ran_exponential = Module["_gsl_ran_exponential"] = asm["_gsl_ran_exponential"];
var _gsl_ran_ugaussian = Module["_gsl_ran_ugaussian"] = asm["_gsl_ran_ugaussian"];
var _gsl_sf_hydrogenicR_e = Module["_gsl_sf_hydrogenicR_e"] = asm["_gsl_sf_hydrogenicR_e"];
var _gsl_sf_bessel_Jn = Module["_gsl_sf_bessel_Jn"] = asm["_gsl_sf_bessel_Jn"];
var _gsl_sf_ellint_RJ_e = Module["_gsl_sf_ellint_RJ_e"] = asm["_gsl_sf_ellint_RJ_e"];
var _gsl_sf_coupling_9j = Module["_gsl_sf_coupling_9j"] = asm["_gsl_sf_coupling_9j"];
var _gsl_sf_bessel_lnKnu = Module["_gsl_sf_bessel_lnKnu"] = asm["_gsl_sf_bessel_lnKnu"];
var _gsl_sf_bessel_Ynu_e = Module["_gsl_sf_bessel_Ynu_e"] = asm["_gsl_sf_bessel_Ynu_e"];
var _gsl_cdf_pareto_Q = Module["_gsl_cdf_pareto_Q"] = asm["_gsl_cdf_pareto_Q"];
var _gsl_cdf_pareto_P = Module["_gsl_cdf_pareto_P"] = asm["_gsl_cdf_pareto_P"];
var _gsl_cdf_gumbel1_Qinv = Module["_gsl_cdf_gumbel1_Qinv"] = asm["_gsl_cdf_gumbel1_Qinv"];
var _gsl_cdf_cauchy_Qinv = Module["_gsl_cdf_cauchy_Qinv"] = asm["_gsl_cdf_cauchy_Qinv"];
var _gsl_sf_coulomb_wave_FG_array = Module["_gsl_sf_coulomb_wave_FG_array"] = asm["_gsl_sf_coulomb_wave_FG_array"];
var _gsl_ran_lognormal = Module["_gsl_ran_lognormal"] = asm["_gsl_ran_lognormal"];
var _gsl_ran_rayleigh = Module["_gsl_ran_rayleigh"] = asm["_gsl_ran_rayleigh"];
var _gsl_rng_state = Module["_gsl_rng_state"] = asm["_gsl_rng_state"];
var _gsl_sf_coupling_6j_e = Module["_gsl_sf_coupling_6j_e"] = asm["_gsl_sf_coupling_6j_e"];
var _gsl_cdf_cauchy_Q = Module["_gsl_cdf_cauchy_Q"] = asm["_gsl_cdf_cauchy_Q"];
var _gsl_cdf_cauchy_P = Module["_gsl_cdf_cauchy_P"] = asm["_gsl_cdf_cauchy_P"];
var _gsl_sf_conicalP_mhalf_e = Module["_gsl_sf_conicalP_mhalf_e"] = asm["_gsl_sf_conicalP_mhalf_e"];
var _gsl_sf_erf_Z_e = Module["_gsl_sf_erf_Z_e"] = asm["_gsl_sf_erf_Z_e"];
var _gsl_sf_lnfact = Module["_gsl_sf_lnfact"] = asm["_gsl_sf_lnfact"];
var _gsl_sf_fermi_dirac_m1_e = Module["_gsl_sf_fermi_dirac_m1_e"] = asm["_gsl_sf_fermi_dirac_m1_e"];
var _gsl_sf_angle_restrict_symm = Module["_gsl_sf_angle_restrict_symm"] = asm["_gsl_sf_angle_restrict_symm"];
var _gsl_sf_gamma_inc = Module["_gsl_sf_gamma_inc"] = asm["_gsl_sf_gamma_inc"];
var _gsl_ran_logarithmic_pdf = Module["_gsl_ran_logarithmic_pdf"] = asm["_gsl_ran_logarithmic_pdf"];
var _gsl_sf_bessel_Kn_scaled_array = Module["_gsl_sf_bessel_Kn_scaled_array"] = asm["_gsl_sf_bessel_Kn_scaled_array"];
var _gsl_cdf_logistic_P = Module["_gsl_cdf_logistic_P"] = asm["_gsl_cdf_logistic_P"];
var _gsl_cdf_logistic_Q = Module["_gsl_cdf_logistic_Q"] = asm["_gsl_cdf_logistic_Q"];
var _gsl_ran_rayleigh_tail_pdf = Module["_gsl_ran_rayleigh_tail_pdf"] = asm["_gsl_ran_rayleigh_tail_pdf"];
var _gsl_sf_complex_logsin_e = Module["_gsl_sf_complex_logsin_e"] = asm["_gsl_sf_complex_logsin_e"];
var _gsl_rng_size = Module["_gsl_rng_size"] = asm["_gsl_rng_size"];
var _gsl_sf_hyperg_2F0 = Module["_gsl_sf_hyperg_2F0"] = asm["_gsl_sf_hyperg_2F0"];
var _gsl_sf_hyperg_2F1 = Module["_gsl_sf_hyperg_2F1"] = asm["_gsl_sf_hyperg_2F1"];
var _gsl_sf_bessel_Jnu = Module["_gsl_sf_bessel_Jnu"] = asm["_gsl_sf_bessel_Jnu"];
var _gsl_sf_coulomb_CL_e = Module["_gsl_sf_coulomb_CL_e"] = asm["_gsl_sf_coulomb_CL_e"];
var _gsl_sf_legendre_H3d_1_e = Module["_gsl_sf_legendre_H3d_1_e"] = asm["_gsl_sf_legendre_H3d_1_e"];
var _gsl_sf_gegenpoly_array = Module["_gsl_sf_gegenpoly_array"] = asm["_gsl_sf_gegenpoly_array"];
var _gsl_sf_bessel_I0_scaled = Module["_gsl_sf_bessel_I0_scaled"] = asm["_gsl_sf_bessel_I0_scaled"];
var _gsl_sf_ellint_RC_e = Module["_gsl_sf_ellint_RC_e"] = asm["_gsl_sf_ellint_RC_e"];
var _gsl_sf_bessel_Knu_scaled_e = Module["_gsl_sf_bessel_Knu_scaled_e"] = asm["_gsl_sf_bessel_Knu_scaled_e"];
var _gsl_ran_gumbel2 = Module["_gsl_ran_gumbel2"] = asm["_gsl_ran_gumbel2"];
var _gsl_cdf_fdist_Pinv = Module["_gsl_cdf_fdist_Pinv"] = asm["_gsl_cdf_fdist_Pinv"];
var _gsl_ran_gumbel1 = Module["_gsl_ran_gumbel1"] = asm["_gsl_ran_gumbel1"];
var _gsl_ran_gaussian_tail_pdf = Module["_gsl_ran_gaussian_tail_pdf"] = asm["_gsl_ran_gaussian_tail_pdf"];
var _gsl_sf_bessel_i2_scaled_e = Module["_gsl_sf_bessel_i2_scaled_e"] = asm["_gsl_sf_bessel_i2_scaled_e"];
var _gsl_sf_airy_Bi_deriv_scaled = Module["_gsl_sf_airy_Bi_deriv_scaled"] = asm["_gsl_sf_airy_Bi_deriv_scaled"];
var _gsl_sf_cos_err_e = Module["_gsl_sf_cos_err_e"] = asm["_gsl_sf_cos_err_e"];
var _gsl_sf_lndoublefact_e = Module["_gsl_sf_lndoublefact_e"] = asm["_gsl_sf_lndoublefact_e"];
var _gsl_sf_expint_E2_e = Module["_gsl_sf_expint_E2_e"] = asm["_gsl_sf_expint_E2_e"];
var _gsl_cdf_gaussian_Q = Module["_gsl_cdf_gaussian_Q"] = asm["_gsl_cdf_gaussian_Q"];
var _gsl_cdf_gaussian_P = Module["_gsl_cdf_gaussian_P"] = asm["_gsl_cdf_gaussian_P"];
var _gsl_sf_bessel_Kn_array = Module["_gsl_sf_bessel_Kn_array"] = asm["_gsl_sf_bessel_Kn_array"];
var _gsl_sf_legendre_Pl = Module["_gsl_sf_legendre_Pl"] = asm["_gsl_sf_legendre_Pl"];
var _gsl_sf_legendre_sphPlm_deriv_array = Module["_gsl_sf_legendre_sphPlm_deriv_array"] = asm["_gsl_sf_legendre_sphPlm_deriv_array"];
var _gsl_sf_erf_Q_e = Module["_gsl_sf_erf_Q_e"] = asm["_gsl_sf_erf_Q_e"];
var _gsl_sf_legendre_P3_e = Module["_gsl_sf_legendre_P3_e"] = asm["_gsl_sf_legendre_P3_e"];
var _gsl_sf_hyperg_2F1_renorm_e = Module["_gsl_sf_hyperg_2F1_renorm_e"] = asm["_gsl_sf_hyperg_2F1_renorm_e"];
var _gsl_sf_coulomb_wave_FGp_array = Module["_gsl_sf_coulomb_wave_FGp_array"] = asm["_gsl_sf_coulomb_wave_FGp_array"];
var _gsl_ran_tdist = Module["_gsl_ran_tdist"] = asm["_gsl_ran_tdist"];
var _gsl_sf_bessel_j2_e = Module["_gsl_sf_bessel_j2_e"] = asm["_gsl_sf_bessel_j2_e"];
var _gsl_sf_legendre_P1_e = Module["_gsl_sf_legendre_P1_e"] = asm["_gsl_sf_legendre_P1_e"];
var _gsl_cdf_chisq_Qinv = Module["_gsl_cdf_chisq_Qinv"] = asm["_gsl_cdf_chisq_Qinv"];
var _gsl_sf_bessel_Yn = Module["_gsl_sf_bessel_Yn"] = asm["_gsl_sf_bessel_Yn"];
var _gsl_rng_get = Module["_gsl_rng_get"] = asm["_gsl_rng_get"];
var _gsl_sf_bessel_il_scaled_e = Module["_gsl_sf_bessel_il_scaled_e"] = asm["_gsl_sf_bessel_il_scaled_e"];
var _gsl_ran_cauchy = Module["_gsl_ran_cauchy"] = asm["_gsl_ran_cauchy"];
var _gsl_sf_lambert_W0_e = Module["_gsl_sf_lambert_W0_e"] = asm["_gsl_sf_lambert_W0_e"];
var _gsl_cdf_exponential_Qinv = Module["_gsl_cdf_exponential_Qinv"] = asm["_gsl_cdf_exponential_Qinv"];
var _gsl_sf_airy_Bi = Module["_gsl_sf_airy_Bi"] = asm["_gsl_sf_airy_Bi"];
var _gsl_sf_bessel_j0_e = Module["_gsl_sf_bessel_j0_e"] = asm["_gsl_sf_bessel_j0_e"];
var _gsl_ran_poisson = Module["_gsl_ran_poisson"] = asm["_gsl_ran_poisson"];
var _gsl_ran_levy = Module["_gsl_ran_levy"] = asm["_gsl_ran_levy"];
var _gsl_sf_gammainv_e = Module["_gsl_sf_gammainv_e"] = asm["_gsl_sf_gammainv_e"];
var _gsl_sf_bessel_Knu_e = Module["_gsl_sf_bessel_Knu_e"] = asm["_gsl_sf_bessel_Knu_e"];
var _gsl_cdf_cauchy_Pinv = Module["_gsl_cdf_cauchy_Pinv"] = asm["_gsl_cdf_cauchy_Pinv"];
var _gsl_sf_exp_e = Module["_gsl_sf_exp_e"] = asm["_gsl_sf_exp_e"];
var _free = Module["_free"] = asm["_free"];
var _gsl_sf_bessel_sequence_Jnu_e = Module["_gsl_sf_bessel_sequence_Jnu_e"] = asm["_gsl_sf_bessel_sequence_Jnu_e"];
var _gsl_sf_lndoublefact = Module["_gsl_sf_lndoublefact"] = asm["_gsl_sf_lndoublefact"];
var _gsl_sf_airy_Ai_e = Module["_gsl_sf_airy_Ai_e"] = asm["_gsl_sf_airy_Ai_e"];
var _gsl_sf_expm1 = Module["_gsl_sf_expm1"] = asm["_gsl_sf_expm1"];
var _gsl_sf_gegenpoly_3_e = Module["_gsl_sf_gegenpoly_3_e"] = asm["_gsl_sf_gegenpoly_3_e"];
var _gsl_sf_bessel_Inu_scaled = Module["_gsl_sf_bessel_Inu_scaled"] = asm["_gsl_sf_bessel_Inu_scaled"];
var _gsl_sf_hydrogenicR = Module["_gsl_sf_hydrogenicR"] = asm["_gsl_sf_hydrogenicR"];
var _gsl_sf_psi_1_int = Module["_gsl_sf_psi_1_int"] = asm["_gsl_sf_psi_1_int"];
var _gsl_sf_hzeta = Module["_gsl_sf_hzeta"] = asm["_gsl_sf_hzeta"];
var _gsl_sf_airy_Bi_deriv_e = Module["_gsl_sf_airy_Bi_deriv_e"] = asm["_gsl_sf_airy_Bi_deriv_e"];
var _gsl_rng_types_setup = Module["_gsl_rng_types_setup"] = asm["_gsl_rng_types_setup"];
var _gsl_cdf_rayleigh_Pinv = Module["_gsl_cdf_rayleigh_Pinv"] = asm["_gsl_cdf_rayleigh_Pinv"];
var _gsl_cdf_tdist_Qinv = Module["_gsl_cdf_tdist_Qinv"] = asm["_gsl_cdf_tdist_Qinv"];
var _gsl_sf_angle_restrict_pos = Module["_gsl_sf_angle_restrict_pos"] = asm["_gsl_sf_angle_restrict_pos"];
var _gsl_sf_lnbeta = Module["_gsl_sf_lnbeta"] = asm["_gsl_sf_lnbeta"];
var _gsl_sf_bessel_zero_J1 = Module["_gsl_sf_bessel_zero_J1"] = asm["_gsl_sf_bessel_zero_J1"];
var _gsl_sf_lngamma_e = Module["_gsl_sf_lngamma_e"] = asm["_gsl_sf_lngamma_e"];
var _gsl_sf_fermi_dirac_int_e = Module["_gsl_sf_fermi_dirac_int_e"] = asm["_gsl_sf_fermi_dirac_int_e"];
var _gsl_sf_fermi_dirac_inc_0 = Module["_gsl_sf_fermi_dirac_inc_0"] = asm["_gsl_sf_fermi_dirac_inc_0"];
var _gsl_sf_bessel_Kn_e = Module["_gsl_sf_bessel_Kn_e"] = asm["_gsl_sf_bessel_Kn_e"];
var _gsl_sf_ellint_Pcomp_e = Module["_gsl_sf_ellint_Pcomp_e"] = asm["_gsl_sf_ellint_Pcomp_e"];
var _gsl_sf_mathieu_Mc = Module["_gsl_sf_mathieu_Mc"] = asm["_gsl_sf_mathieu_Mc"];
var _gsl_ran_bernoulli = Module["_gsl_ran_bernoulli"] = asm["_gsl_ran_bernoulli"];
var _gsl_sf_log_1plusx = Module["_gsl_sf_log_1plusx"] = asm["_gsl_sf_log_1plusx"];
var _gsl_sf_Ci_e = Module["_gsl_sf_Ci_e"] = asm["_gsl_sf_Ci_e"];
var _gsl_sf_mathieu_Ms = Module["_gsl_sf_mathieu_Ms"] = asm["_gsl_sf_mathieu_Ms"];
var _gsl_sf_pow_int_e = Module["_gsl_sf_pow_int_e"] = asm["_gsl_sf_pow_int_e"];
var _gsl_sf_gegenpoly_2_e = Module["_gsl_sf_gegenpoly_2_e"] = asm["_gsl_sf_gegenpoly_2_e"];
var _gsl_ran_ugaussian_ratio_method = Module["_gsl_ran_ugaussian_ratio_method"] = asm["_gsl_ran_ugaussian_ratio_method"];
var _gsl_sf_gegenpoly_n = Module["_gsl_sf_gegenpoly_n"] = asm["_gsl_sf_gegenpoly_n"];
var _gsl_sf_fermi_dirac_2 = Module["_gsl_sf_fermi_dirac_2"] = asm["_gsl_sf_fermi_dirac_2"];
var _gsl_cdf_negative_binomial_P = Module["_gsl_cdf_negative_binomial_P"] = asm["_gsl_cdf_negative_binomial_P"];
var _gsl_cdf_negative_binomial_Q = Module["_gsl_cdf_negative_binomial_Q"] = asm["_gsl_cdf_negative_binomial_Q"];
var _gsl_sf_zeta_int = Module["_gsl_sf_zeta_int"] = asm["_gsl_sf_zeta_int"];
var _gsl_ran_weibull = Module["_gsl_ran_weibull"] = asm["_gsl_ran_weibull"];
var _gsl_ran_gaussian_ziggurat = Module["_gsl_ran_gaussian_ziggurat"] = asm["_gsl_ran_gaussian_ziggurat"];
var _gsl_sf_legendre_Pl_e = Module["_gsl_sf_legendre_Pl_e"] = asm["_gsl_sf_legendre_Pl_e"];
var _gsl_sf_bessel_i2_scaled = Module["_gsl_sf_bessel_i2_scaled"] = asm["_gsl_sf_bessel_i2_scaled"];
var _gsl_sf_hyperg_2F1_renorm = Module["_gsl_sf_hyperg_2F1_renorm"] = asm["_gsl_sf_hyperg_2F1_renorm"];
var _gsl_sf_bessel_il_scaled = Module["_gsl_sf_bessel_il_scaled"] = asm["_gsl_sf_bessel_il_scaled"];
var _gsl_sf_expint_E1_e = Module["_gsl_sf_expint_E1_e"] = asm["_gsl_sf_expint_E1_e"];
var _gsl_sf_bessel_In_array = Module["_gsl_sf_bessel_In_array"] = asm["_gsl_sf_bessel_In_array"];
var _gsl_sf_bessel_K0_e = Module["_gsl_sf_bessel_K0_e"] = asm["_gsl_sf_bessel_K0_e"];
var _gsl_sf_legendre_H3d_1 = Module["_gsl_sf_legendre_H3d_1"] = asm["_gsl_sf_legendre_H3d_1"];
var _gsl_sf_bessel_Inu = Module["_gsl_sf_bessel_Inu"] = asm["_gsl_sf_bessel_Inu"];
var _gsl_sf_airy_Bi_e = Module["_gsl_sf_airy_Bi_e"] = asm["_gsl_sf_airy_Bi_e"];
var _gsl_sf_exprel_2_e = Module["_gsl_sf_exprel_2_e"] = asm["_gsl_sf_exprel_2_e"];
var _gsl_sf_laguerre_n_e = Module["_gsl_sf_laguerre_n_e"] = asm["_gsl_sf_laguerre_n_e"];
var _gsl_sf_bessel_Ynu = Module["_gsl_sf_bessel_Ynu"] = asm["_gsl_sf_bessel_Ynu"];
var _gsl_sf_bessel_In = Module["_gsl_sf_bessel_In"] = asm["_gsl_sf_bessel_In"];
var _gsl_cdf_lognormal_P = Module["_gsl_cdf_lognormal_P"] = asm["_gsl_cdf_lognormal_P"];
var _gsl_cdf_lognormal_Q = Module["_gsl_cdf_lognormal_Q"] = asm["_gsl_cdf_lognormal_Q"];
var _gsl_sf_legendre_H3d_e = Module["_gsl_sf_legendre_H3d_e"] = asm["_gsl_sf_legendre_H3d_e"];
var _gsl_sf_fermi_dirac_half = Module["_gsl_sf_fermi_dirac_half"] = asm["_gsl_sf_fermi_dirac_half"];
var _gsl_cdf_laplace_Pinv = Module["_gsl_cdf_laplace_Pinv"] = asm["_gsl_cdf_laplace_Pinv"];
var _gsl_sf_legendre_P1 = Module["_gsl_sf_legendre_P1"] = asm["_gsl_sf_legendre_P1"];
var _gsl_sf_bessel_I1_scaled_e = Module["_gsl_sf_bessel_I1_scaled_e"] = asm["_gsl_sf_bessel_I1_scaled_e"];
var _gsl_sf_airy_Bi_deriv = Module["_gsl_sf_airy_Bi_deriv"] = asm["_gsl_sf_airy_Bi_deriv"];
var _gsl_sf_conicalP_half_e = Module["_gsl_sf_conicalP_half_e"] = asm["_gsl_sf_conicalP_half_e"];
var _gsl_ran_lognormal_pdf = Module["_gsl_ran_lognormal_pdf"] = asm["_gsl_ran_lognormal_pdf"];
var _gsl_sf_airy_zero_Ai = Module["_gsl_sf_airy_zero_Ai"] = asm["_gsl_sf_airy_zero_Ai"];
var _gsl_sf_bessel_jl_array = Module["_gsl_sf_bessel_jl_array"] = asm["_gsl_sf_bessel_jl_array"];
var _gsl_cdf_gamma_P = Module["_gsl_cdf_gamma_P"] = asm["_gsl_cdf_gamma_P"];
var _gsl_sf_lngamma_complex_e = Module["_gsl_sf_lngamma_complex_e"] = asm["_gsl_sf_lngamma_complex_e"];
var _gsl_sf_bessel_I1 = Module["_gsl_sf_bessel_I1"] = asm["_gsl_sf_bessel_I1"];
var _gsl_sf_bessel_I0 = Module["_gsl_sf_bessel_I0"] = asm["_gsl_sf_bessel_I0"];
var _gsl_sf_airy_Ai_deriv_scaled = Module["_gsl_sf_airy_Ai_deriv_scaled"] = asm["_gsl_sf_airy_Ai_deriv_scaled"];
var _gsl_sf_erf = Module["_gsl_sf_erf"] = asm["_gsl_sf_erf"];
var _gsl_sf_coupling_9j_e = Module["_gsl_sf_coupling_9j_e"] = asm["_gsl_sf_coupling_9j_e"];
var _gsl_sf_synchrotron_2 = Module["_gsl_sf_synchrotron_2"] = asm["_gsl_sf_synchrotron_2"];
var _gsl_sf_synchrotron_1 = Module["_gsl_sf_synchrotron_1"] = asm["_gsl_sf_synchrotron_1"];
var _gsl_sf_eta_int_e = Module["_gsl_sf_eta_int_e"] = asm["_gsl_sf_eta_int_e"];
var _gsl_sf_coulomb_wave_FG_e = Module["_gsl_sf_coulomb_wave_FG_e"] = asm["_gsl_sf_coulomb_wave_FG_e"];
var _gsl_cdf_ugaussian_Pinv = Module["_gsl_cdf_ugaussian_Pinv"] = asm["_gsl_cdf_ugaussian_Pinv"];
var _gsl_sf_sinc = Module["_gsl_sf_sinc"] = asm["_gsl_sf_sinc"];
var _gsl_sf_gamma_inc_P_e = Module["_gsl_sf_gamma_inc_P_e"] = asm["_gsl_sf_gamma_inc_P_e"];
var _gsl_rng_uniform_pos = Module["_gsl_rng_uniform_pos"] = asm["_gsl_rng_uniform_pos"];
var _gsl_sf_bessel_y1_e = Module["_gsl_sf_bessel_y1_e"] = asm["_gsl_sf_bessel_y1_e"];
var _gsl_sf_transport_5_e = Module["_gsl_sf_transport_5_e"] = asm["_gsl_sf_transport_5_e"];
var _gsl_sf_zeta_e = Module["_gsl_sf_zeta_e"] = asm["_gsl_sf_zeta_e"];
var _gsl_sf_legendre_sphPlm_array = Module["_gsl_sf_legendre_sphPlm_array"] = asm["_gsl_sf_legendre_sphPlm_array"];
var _gsl_sf_psi_int_e = Module["_gsl_sf_psi_int_e"] = asm["_gsl_sf_psi_int_e"];
var _gsl_sf_fermi_dirac_m1 = Module["_gsl_sf_fermi_dirac_m1"] = asm["_gsl_sf_fermi_dirac_m1"];
var _gsl_sf_conicalP_cyl_reg = Module["_gsl_sf_conicalP_cyl_reg"] = asm["_gsl_sf_conicalP_cyl_reg"];
var _gsl_rng_alloc = Module["_gsl_rng_alloc"] = asm["_gsl_rng_alloc"];
var _gsl_sf_mathieu_a_array = Module["_gsl_sf_mathieu_a_array"] = asm["_gsl_sf_mathieu_a_array"];
var _gsl_sf_multiply_e = Module["_gsl_sf_multiply_e"] = asm["_gsl_sf_multiply_e"];
var _gsl_sf_log_abs = Module["_gsl_sf_log_abs"] = asm["_gsl_sf_log_abs"];
var _gsl_sf_log_erfc_e = Module["_gsl_sf_log_erfc_e"] = asm["_gsl_sf_log_erfc_e"];
var _gsl_cdf_flat_Qinv = Module["_gsl_cdf_flat_Qinv"] = asm["_gsl_cdf_flat_Qinv"];
var _gsl_sf_legendre_P2_e = Module["_gsl_sf_legendre_P2_e"] = asm["_gsl_sf_legendre_P2_e"];
var _gsl_sf_dilog_e = Module["_gsl_sf_dilog_e"] = asm["_gsl_sf_dilog_e"];
var _gsl_sf_coupling_6j = Module["_gsl_sf_coupling_6j"] = asm["_gsl_sf_coupling_6j"];
var _gsl_sf_clausen = Module["_gsl_sf_clausen"] = asm["_gsl_sf_clausen"];
var _gsl_sf_Si = Module["_gsl_sf_Si"] = asm["_gsl_sf_Si"];
var _gsl_sf_Ci = Module["_gsl_sf_Ci"] = asm["_gsl_sf_Ci"];
var _gsl_sf_synchrotron_1_e = Module["_gsl_sf_synchrotron_1_e"] = asm["_gsl_sf_synchrotron_1_e"];
var _gsl_sf_bessel_k2_scaled_e = Module["_gsl_sf_bessel_k2_scaled_e"] = asm["_gsl_sf_bessel_k2_scaled_e"];
var _gsl_sf_cos_e = Module["_gsl_sf_cos_e"] = asm["_gsl_sf_cos_e"];
var _gsl_sf_exp_mult_e10_e = Module["_gsl_sf_exp_mult_e10_e"] = asm["_gsl_sf_exp_mult_e10_e"];
var _gsl_sf_lnsinh_e = Module["_gsl_sf_lnsinh_e"] = asm["_gsl_sf_lnsinh_e"];
var _gsl_ran_dirichlet_lnpdf = Module["_gsl_ran_dirichlet_lnpdf"] = asm["_gsl_ran_dirichlet_lnpdf"];
var _gsl_ran_discrete_free = Module["_gsl_ran_discrete_free"] = asm["_gsl_ran_discrete_free"];
var _gsl_sf_psi_1_e = Module["_gsl_sf_psi_1_e"] = asm["_gsl_sf_psi_1_e"];
var _gsl_sf_hyperg_2F1_conj = Module["_gsl_sf_hyperg_2F1_conj"] = asm["_gsl_sf_hyperg_2F1_conj"];
var _gsl_sf_exp = Module["_gsl_sf_exp"] = asm["_gsl_sf_exp"];
var _gsl_sf_mathieu_a = Module["_gsl_sf_mathieu_a"] = asm["_gsl_sf_mathieu_a"];
var _gsl_sf_gamma_inc_P = Module["_gsl_sf_gamma_inc_P"] = asm["_gsl_sf_gamma_inc_P"];
var _gsl_sf_mathieu_b = Module["_gsl_sf_mathieu_b"] = asm["_gsl_sf_mathieu_b"];
var _gsl_sf_bessel_Knu = Module["_gsl_sf_bessel_Knu"] = asm["_gsl_sf_bessel_Knu"];
var _gsl_sf_ellint_RD = Module["_gsl_sf_ellint_RD"] = asm["_gsl_sf_ellint_RD"];
var _gsl_sf_ellint_RF = Module["_gsl_sf_ellint_RF"] = asm["_gsl_sf_ellint_RF"];
var _gsl_sf_atanint_e = Module["_gsl_sf_atanint_e"] = asm["_gsl_sf_atanint_e"];
var _gsl_sf_ellint_RC = Module["_gsl_sf_ellint_RC"] = asm["_gsl_sf_ellint_RC"];
var _gsl_ran_pascal_pdf = Module["_gsl_ran_pascal_pdf"] = asm["_gsl_ran_pascal_pdf"];
var _gsl_sf_airy_Ai_scaled_e = Module["_gsl_sf_airy_Ai_scaled_e"] = asm["_gsl_sf_airy_Ai_scaled_e"];
var _gsl_sf_ellint_RJ = Module["_gsl_sf_ellint_RJ"] = asm["_gsl_sf_ellint_RJ"];
var _gsl_sf_bessel_I0_e = Module["_gsl_sf_bessel_I0_e"] = asm["_gsl_sf_bessel_I0_e"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _gsl_cdf_ugaussian_Q = Module["_gsl_cdf_ugaussian_Q"] = asm["_gsl_cdf_ugaussian_Q"];
var _gsl_cdf_ugaussian_P = Module["_gsl_cdf_ugaussian_P"] = asm["_gsl_cdf_ugaussian_P"];
var _gsl_sf_airy_zero_Ai_e = Module["_gsl_sf_airy_zero_Ai_e"] = asm["_gsl_sf_airy_zero_Ai_e"];
var _gsl_ran_logistic_pdf = Module["_gsl_ran_logistic_pdf"] = asm["_gsl_ran_logistic_pdf"];
var _gsl_ran_rayleigh_tail = Module["_gsl_ran_rayleigh_tail"] = asm["_gsl_ran_rayleigh_tail"];
var _gsl_sf_ellint_Pcomp = Module["_gsl_sf_ellint_Pcomp"] = asm["_gsl_sf_ellint_Pcomp"];
var _gsl_sf_ellint_Kcomp = Module["_gsl_sf_ellint_Kcomp"] = asm["_gsl_sf_ellint_Kcomp"];
var _gsl_sf_legendre_P2 = Module["_gsl_sf_legendre_P2"] = asm["_gsl_sf_legendre_P2"];
var _gsl_sf_psi_int = Module["_gsl_sf_psi_int"] = asm["_gsl_sf_psi_int"];
var _gsl_sf_gegenpoly_2 = Module["_gsl_sf_gegenpoly_2"] = asm["_gsl_sf_gegenpoly_2"];
var _gsl_sf_gegenpoly_3 = Module["_gsl_sf_gegenpoly_3"] = asm["_gsl_sf_gegenpoly_3"];
var _gsl_cdf_binomial_Q = Module["_gsl_cdf_binomial_Q"] = asm["_gsl_cdf_binomial_Q"];
var _gsl_cdf_binomial_P = Module["_gsl_cdf_binomial_P"] = asm["_gsl_cdf_binomial_P"];
var _gsl_sf_bessel_K0_scaled = Module["_gsl_sf_bessel_K0_scaled"] = asm["_gsl_sf_bessel_K0_scaled"];
var _gsl_sf_bessel_k0_scaled_e = Module["_gsl_sf_bessel_k0_scaled_e"] = asm["_gsl_sf_bessel_k0_scaled_e"];
var _gsl_sf_hyperg_U_e = Module["_gsl_sf_hyperg_U_e"] = asm["_gsl_sf_hyperg_U_e"];
var _gsl_sf_bessel_Inu_scaled_e = Module["_gsl_sf_bessel_Inu_scaled_e"] = asm["_gsl_sf_bessel_Inu_scaled_e"];
var _gsl_cdf_gamma_Pinv = Module["_gsl_cdf_gamma_Pinv"] = asm["_gsl_cdf_gamma_Pinv"];
var _gsl_sf_psi_1_int_e = Module["_gsl_sf_psi_1_int_e"] = asm["_gsl_sf_psi_1_int_e"];
var _gsl_sf_legendre_H3d_array = Module["_gsl_sf_legendre_H3d_array"] = asm["_gsl_sf_legendre_H3d_array"];
var _gsl_cdf_weibull_Pinv = Module["_gsl_cdf_weibull_Pinv"] = asm["_gsl_cdf_weibull_Pinv"];
var _gsl_sf_complex_sin_e = Module["_gsl_sf_complex_sin_e"] = asm["_gsl_sf_complex_sin_e"];
var _gsl_sf_ellint_D_e = Module["_gsl_sf_ellint_D_e"] = asm["_gsl_sf_ellint_D_e"];
var _gsl_sf_exprel = Module["_gsl_sf_exprel"] = asm["_gsl_sf_exprel"];
var _gsl_ran_binomial = Module["_gsl_ran_binomial"] = asm["_gsl_ran_binomial"];
var _gsl_sf_fermi_dirac_half_e = Module["_gsl_sf_fermi_dirac_half_e"] = asm["_gsl_sf_fermi_dirac_half_e"];
var _gsl_sf_psi_1piy_e = Module["_gsl_sf_psi_1piy_e"] = asm["_gsl_sf_psi_1piy_e"];
var _gsl_sf_zeta_int_e = Module["_gsl_sf_zeta_int_e"] = asm["_gsl_sf_zeta_int_e"];
var _gsl_sf_ellint_F_e = Module["_gsl_sf_ellint_F_e"] = asm["_gsl_sf_ellint_F_e"];
var _gsl_sf_legendre_Plm_array = Module["_gsl_sf_legendre_Plm_array"] = asm["_gsl_sf_legendre_Plm_array"];
var _gsl_sf_exp_e10_e = Module["_gsl_sf_exp_e10_e"] = asm["_gsl_sf_exp_e10_e"];
var _gsl_sf_gegenpoly_1_e = Module["_gsl_sf_gegenpoly_1_e"] = asm["_gsl_sf_gegenpoly_1_e"];
var _gsl_cdf_gamma_Q = Module["_gsl_cdf_gamma_Q"] = asm["_gsl_cdf_gamma_Q"];
var _gsl_rng_fwrite = Module["_gsl_rng_fwrite"] = asm["_gsl_rng_fwrite"];
var _gsl_sf_polar_to_rect = Module["_gsl_sf_polar_to_rect"] = asm["_gsl_sf_polar_to_rect"];
var _gsl_sf_beta = Module["_gsl_sf_beta"] = asm["_gsl_sf_beta"];
var _gsl_sf_bessel_yl_e = Module["_gsl_sf_bessel_yl_e"] = asm["_gsl_sf_bessel_yl_e"];
var _gsl_sf_poch = Module["_gsl_sf_poch"] = asm["_gsl_sf_poch"];
var _gsl_sf_legendre_array_size = Module["_gsl_sf_legendre_array_size"] = asm["_gsl_sf_legendre_array_size"];
var _gsl_sf_bessel_jl_steed_array = Module["_gsl_sf_bessel_jl_steed_array"] = asm["_gsl_sf_bessel_jl_steed_array"];
var _gsl_sf_hydrogenicR_1 = Module["_gsl_sf_hydrogenicR_1"] = asm["_gsl_sf_hydrogenicR_1"];
var _gsl_sf_taylorcoeff_e = Module["_gsl_sf_taylorcoeff_e"] = asm["_gsl_sf_taylorcoeff_e"];
var _gsl_sf_rect_to_polar = Module["_gsl_sf_rect_to_polar"] = asm["_gsl_sf_rect_to_polar"];
var _gsl_sf_bessel_K1_scaled = Module["_gsl_sf_bessel_K1_scaled"] = asm["_gsl_sf_bessel_K1_scaled"];
var _gsl_sf_coulomb_wave_F_array = Module["_gsl_sf_coulomb_wave_F_array"] = asm["_gsl_sf_coulomb_wave_F_array"];
var _gsl_sf_expm1_e = Module["_gsl_sf_expm1_e"] = asm["_gsl_sf_expm1_e"];
var _gsl_sf_transport_4_e = Module["_gsl_sf_transport_4_e"] = asm["_gsl_sf_transport_4_e"];
var _gsl_sf_beta_inc_e = Module["_gsl_sf_beta_inc_e"] = asm["_gsl_sf_beta_inc_e"];
var _gsl_sf_exp_mult_e = Module["_gsl_sf_exp_mult_e"] = asm["_gsl_sf_exp_mult_e"];
var _gsl_sf_sin = Module["_gsl_sf_sin"] = asm["_gsl_sf_sin"];
var _gsl_sf_conicalP_sph_reg_e = Module["_gsl_sf_conicalP_sph_reg_e"] = asm["_gsl_sf_conicalP_sph_reg_e"];
var _gsl_sf_bessel_K1_e = Module["_gsl_sf_bessel_K1_e"] = asm["_gsl_sf_bessel_K1_e"];
var _gsl_sf_beta_e = Module["_gsl_sf_beta_e"] = asm["_gsl_sf_beta_e"];
var _gsl_sf_mathieu_ce_array = Module["_gsl_sf_mathieu_ce_array"] = asm["_gsl_sf_mathieu_ce_array"];
var _gsl_ran_ugaussian_tail = Module["_gsl_ran_ugaussian_tail"] = asm["_gsl_ran_ugaussian_tail"];
var _gsl_sf_debye_3_e = Module["_gsl_sf_debye_3_e"] = asm["_gsl_sf_debye_3_e"];
var _gsl_ran_pascal = Module["_gsl_ran_pascal"] = asm["_gsl_ran_pascal"];
var _gsl_sf_bessel_In_scaled = Module["_gsl_sf_bessel_In_scaled"] = asm["_gsl_sf_bessel_In_scaled"];
var _gsl_sf_hyperg_2F0_e = Module["_gsl_sf_hyperg_2F0_e"] = asm["_gsl_sf_hyperg_2F0_e"];
var _gsl_cdf_lognormal_Qinv = Module["_gsl_cdf_lognormal_Qinv"] = asm["_gsl_cdf_lognormal_Qinv"];
var _gsl_sf_airy_Ai_deriv = Module["_gsl_sf_airy_Ai_deriv"] = asm["_gsl_sf_airy_Ai_deriv"];
var _gsl_cdf_fdist_Q = Module["_gsl_cdf_fdist_Q"] = asm["_gsl_cdf_fdist_Q"];
var _gsl_cdf_fdist_P = Module["_gsl_cdf_fdist_P"] = asm["_gsl_cdf_fdist_P"];
var _gsl_cdf_pareto_Pinv = Module["_gsl_cdf_pareto_Pinv"] = asm["_gsl_cdf_pareto_Pinv"];
var _gsl_sf_exprel_n = Module["_gsl_sf_exprel_n"] = asm["_gsl_sf_exprel_n"];
var _gsl_sf_airy_zero_Bi_deriv = Module["_gsl_sf_airy_zero_Bi_deriv"] = asm["_gsl_sf_airy_zero_Bi_deriv"];
var _gsl_sf_exprel_e = Module["_gsl_sf_exprel_e"] = asm["_gsl_sf_exprel_e"];
var _gsl_rng_fread = Module["_gsl_rng_fread"] = asm["_gsl_rng_fread"];
var _gsl_sf_zetam1 = Module["_gsl_sf_zetam1"] = asm["_gsl_sf_zetam1"];
var _gsl_sf_hypot = Module["_gsl_sf_hypot"] = asm["_gsl_sf_hypot"];
var _gsl_sf_complex_cos_e = Module["_gsl_sf_complex_cos_e"] = asm["_gsl_sf_complex_cos_e"];
var _gsl_ran_flat = Module["_gsl_ran_flat"] = asm["_gsl_ran_flat"];
var _gsl_sf_gammainv = Module["_gsl_sf_gammainv"] = asm["_gsl_sf_gammainv"];
var _gsl_sf_legendre_sphPlm_e = Module["_gsl_sf_legendre_sphPlm_e"] = asm["_gsl_sf_legendre_sphPlm_e"];
var _gsl_sf_laguerre_1 = Module["_gsl_sf_laguerre_1"] = asm["_gsl_sf_laguerre_1"];
var _gsl_sf_hyperg_U_e10_e = Module["_gsl_sf_hyperg_U_e10_e"] = asm["_gsl_sf_hyperg_U_e10_e"];
var _gsl_ran_gamma_knuth = Module["_gsl_ran_gamma_knuth"] = asm["_gsl_ran_gamma_knuth"];
var _gsl_cdf_hypergeometric_Q = Module["_gsl_cdf_hypergeometric_Q"] = asm["_gsl_cdf_hypergeometric_Q"];
var _gsl_cdf_hypergeometric_P = Module["_gsl_cdf_hypergeometric_P"] = asm["_gsl_cdf_hypergeometric_P"];
var _gsl_sf_conicalP_half = Module["_gsl_sf_conicalP_half"] = asm["_gsl_sf_conicalP_half"];
var _gsl_ran_discrete = Module["_gsl_ran_discrete"] = asm["_gsl_ran_discrete"];
var _gsl_sf_exprel_2 = Module["_gsl_sf_exprel_2"] = asm["_gsl_sf_exprel_2"];
var _gsl_ran_laplace = Module["_gsl_ran_laplace"] = asm["_gsl_ran_laplace"];
var _gsl_ran_logistic = Module["_gsl_ran_logistic"] = asm["_gsl_ran_logistic"];
var _gsl_cdf_beta_Pinv = Module["_gsl_cdf_beta_Pinv"] = asm["_gsl_cdf_beta_Pinv"];
var _gsl_sf_mathieu_se = Module["_gsl_sf_mathieu_se"] = asm["_gsl_sf_mathieu_se"];
var _gsl_sf_hyperg_0F1 = Module["_gsl_sf_hyperg_0F1"] = asm["_gsl_sf_hyperg_0F1"];
var _gsl_ran_gamma_pdf = Module["_gsl_ran_gamma_pdf"] = asm["_gsl_ran_gamma_pdf"];
var _gsl_sf_bessel_k0_scaled = Module["_gsl_sf_bessel_k0_scaled"] = asm["_gsl_sf_bessel_k0_scaled"];
var _gsl_ran_gaussian_pdf = Module["_gsl_ran_gaussian_pdf"] = asm["_gsl_ran_gaussian_pdf"];
var _gsl_sf_debye_4_e = Module["_gsl_sf_debye_4_e"] = asm["_gsl_sf_debye_4_e"];
var _gsl_ran_landau_pdf = Module["_gsl_ran_landau_pdf"] = asm["_gsl_ran_landau_pdf"];
var _gsl_sf_hyperg_U = Module["_gsl_sf_hyperg_U"] = asm["_gsl_sf_hyperg_U"];
var _gsl_sf_sinc_e = Module["_gsl_sf_sinc_e"] = asm["_gsl_sf_sinc_e"];
var _gsl_sf_doublefact_e = Module["_gsl_sf_doublefact_e"] = asm["_gsl_sf_doublefact_e"];
var _gsl_ran_pareto = Module["_gsl_ran_pareto"] = asm["_gsl_ran_pareto"];
var _gsl_sf_legendre_Ql_e = Module["_gsl_sf_legendre_Ql_e"] = asm["_gsl_sf_legendre_Ql_e"];
var _gsl_sf_fermi_dirac_int = Module["_gsl_sf_fermi_dirac_int"] = asm["_gsl_sf_fermi_dirac_int"];
var _gsl_sf_bessel_yl_array = Module["_gsl_sf_bessel_yl_array"] = asm["_gsl_sf_bessel_yl_array"];
var _gsl_sf_angle_restrict_symm_e = Module["_gsl_sf_angle_restrict_symm_e"] = asm["_gsl_sf_angle_restrict_symm_e"];
var _gsl_ran_weibull_pdf = Module["_gsl_ran_weibull_pdf"] = asm["_gsl_ran_weibull_pdf"];
var _gsl_ran_dir_2d_trig_method = Module["_gsl_ran_dir_2d_trig_method"] = asm["_gsl_ran_dir_2d_trig_method"];
var _gsl_sf_legendre_Pl_deriv_array = Module["_gsl_sf_legendre_Pl_deriv_array"] = asm["_gsl_sf_legendre_Pl_deriv_array"];
var _gsl_sf_mathieu_se_array = Module["_gsl_sf_mathieu_se_array"] = asm["_gsl_sf_mathieu_se_array"];
var _gsl_cdf_fdist_Qinv = Module["_gsl_cdf_fdist_Qinv"] = asm["_gsl_cdf_fdist_Qinv"];
var _gsl_sf_airy_zero_Bi_e = Module["_gsl_sf_airy_zero_Bi_e"] = asm["_gsl_sf_airy_zero_Bi_e"];
var _gsl_cdf_exponential_P = Module["_gsl_cdf_exponential_P"] = asm["_gsl_cdf_exponential_P"];
var _gsl_cdf_exponential_Q = Module["_gsl_cdf_exponential_Q"] = asm["_gsl_cdf_exponential_Q"];
var _gsl_sf_synchrotron_2_e = Module["_gsl_sf_synchrotron_2_e"] = asm["_gsl_sf_synchrotron_2_e"];
var _gsl_sf_conicalP_sph_reg = Module["_gsl_sf_conicalP_sph_reg"] = asm["_gsl_sf_conicalP_sph_reg"];
var _gsl_sf_gamma_inc_Q_e = Module["_gsl_sf_gamma_inc_Q_e"] = asm["_gsl_sf_gamma_inc_Q_e"];
var _gsl_cdf_pascal_P = Module["_gsl_cdf_pascal_P"] = asm["_gsl_cdf_pascal_P"];
var _gsl_sf_bessel_il_scaled_array = Module["_gsl_sf_bessel_il_scaled_array"] = asm["_gsl_sf_bessel_il_scaled_array"];
var _gsl_sf_bessel_kl_scaled_array = Module["_gsl_sf_bessel_kl_scaled_array"] = asm["_gsl_sf_bessel_kl_scaled_array"];
var _gsl_cdf_chisq_Q = Module["_gsl_cdf_chisq_Q"] = asm["_gsl_cdf_chisq_Q"];
var _gsl_sf_bessel_zero_Jnu_e = Module["_gsl_sf_bessel_zero_Jnu_e"] = asm["_gsl_sf_bessel_zero_Jnu_e"];
var _gsl_sf_lncosh_e = Module["_gsl_sf_lncosh_e"] = asm["_gsl_sf_lncosh_e"];
var _gsl_sf_bessel_Yn_e = Module["_gsl_sf_bessel_Yn_e"] = asm["_gsl_sf_bessel_Yn_e"];
var _gsl_sf_laguerre_3_e = Module["_gsl_sf_laguerre_3_e"] = asm["_gsl_sf_laguerre_3_e"];
var _gsl_rng_uniform = Module["_gsl_rng_uniform"] = asm["_gsl_rng_uniform"];
var _gsl_sf_zetam1_int = Module["_gsl_sf_zetam1_int"] = asm["_gsl_sf_zetam1_int"];
var _gsl_sf_legendre_Plm = Module["_gsl_sf_legendre_Plm"] = asm["_gsl_sf_legendre_Plm"];
var _gsl_cdf_exponential_Pinv = Module["_gsl_cdf_exponential_Pinv"] = asm["_gsl_cdf_exponential_Pinv"];
var _gsl_sf_expint_3_e = Module["_gsl_sf_expint_3_e"] = asm["_gsl_sf_expint_3_e"];
var _gsl_sf_legendre_Pl_array = Module["_gsl_sf_legendre_Pl_array"] = asm["_gsl_sf_legendre_Pl_array"];
var _gsl_ran_levy_skew = Module["_gsl_ran_levy_skew"] = asm["_gsl_ran_levy_skew"];
var _gsl_cdf_logistic_Qinv = Module["_gsl_cdf_logistic_Qinv"] = asm["_gsl_cdf_logistic_Qinv"];
var _gsl_sf_poch_e = Module["_gsl_sf_poch_e"] = asm["_gsl_sf_poch_e"];
var _gsl_cdf_lognormal_Pinv = Module["_gsl_cdf_lognormal_Pinv"] = asm["_gsl_cdf_lognormal_Pinv"];
var _gsl_sf_psi = Module["_gsl_sf_psi"] = asm["_gsl_sf_psi"];
var _gsl_ran_gaussian = Module["_gsl_ran_gaussian"] = asm["_gsl_ran_gaussian"];
var _gsl_sf_log_1plusx_e = Module["_gsl_sf_log_1plusx_e"] = asm["_gsl_sf_log_1plusx_e"];
var _gsl_sf_bessel_I1_e = Module["_gsl_sf_bessel_I1_e"] = asm["_gsl_sf_bessel_I1_e"];
var _gsl_sf_bessel_kl_scaled = Module["_gsl_sf_bessel_kl_scaled"] = asm["_gsl_sf_bessel_kl_scaled"];
var _gsl_sf_bessel_K1_scaled_e = Module["_gsl_sf_bessel_K1_scaled_e"] = asm["_gsl_sf_bessel_K1_scaled_e"];
var _gsl_sf_fact_e = Module["_gsl_sf_fact_e"] = asm["_gsl_sf_fact_e"];
var _gsl_sf_bessel_Kn_scaled = Module["_gsl_sf_bessel_Kn_scaled"] = asm["_gsl_sf_bessel_Kn_scaled"];
var _gsl_sf_bessel_Yn_array = Module["_gsl_sf_bessel_Yn_array"] = asm["_gsl_sf_bessel_Yn_array"];
var _gsl_sf_expint_3 = Module["_gsl_sf_expint_3"] = asm["_gsl_sf_expint_3"];
var _gsl_sf_hazard_e = Module["_gsl_sf_hazard_e"] = asm["_gsl_sf_hazard_e"];
var _gsl_ran_pareto_pdf = Module["_gsl_ran_pareto_pdf"] = asm["_gsl_ran_pareto_pdf"];
var _gsl_sf_psi_1piy = Module["_gsl_sf_psi_1piy"] = asm["_gsl_sf_psi_1piy"];
var _gsl_sf_bessel_In_scaled_array = Module["_gsl_sf_bessel_In_scaled_array"] = asm["_gsl_sf_bessel_In_scaled_array"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _gsl_ran_geometric_pdf = Module["_gsl_ran_geometric_pdf"] = asm["_gsl_ran_geometric_pdf"];
var _gsl_sf_ellint_P_e = Module["_gsl_sf_ellint_P_e"] = asm["_gsl_sf_ellint_P_e"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _gsl_ran_beta_pdf = Module["_gsl_ran_beta_pdf"] = asm["_gsl_ran_beta_pdf"];
var _gsl_sf_gamma_inc_e = Module["_gsl_sf_gamma_inc_e"] = asm["_gsl_sf_gamma_inc_e"];
var _gsl_sf_ellint_E_e = Module["_gsl_sf_ellint_E_e"] = asm["_gsl_sf_ellint_E_e"];
var _gsl_sf_laguerre_1_e = Module["_gsl_sf_laguerre_1_e"] = asm["_gsl_sf_laguerre_1_e"];
var _gsl_sf_bessel_In_scaled_e = Module["_gsl_sf_bessel_In_scaled_e"] = asm["_gsl_sf_bessel_In_scaled_e"];
var _gsl_sf_legendre_sphPlm = Module["_gsl_sf_legendre_sphPlm"] = asm["_gsl_sf_legendre_sphPlm"];
var _gsl_sf_Chi_e = Module["_gsl_sf_Chi_e"] = asm["_gsl_sf_Chi_e"];
var _gsl_sf_fermi_dirac_1_e = Module["_gsl_sf_fermi_dirac_1_e"] = asm["_gsl_sf_fermi_dirac_1_e"];
var _gsl_cdf_gumbel1_Pinv = Module["_gsl_cdf_gumbel1_Pinv"] = asm["_gsl_cdf_gumbel1_Pinv"];
var _gsl_ran_exppow = Module["_gsl_ran_exppow"] = asm["_gsl_ran_exppow"];
var _gsl_sf_conicalP_0_e = Module["_gsl_sf_conicalP_0_e"] = asm["_gsl_sf_conicalP_0_e"];
var _gsl_sf_laguerre_2_e = Module["_gsl_sf_laguerre_2_e"] = asm["_gsl_sf_laguerre_2_e"];
var _gsl_sf_debye_6_e = Module["_gsl_sf_debye_6_e"] = asm["_gsl_sf_debye_6_e"];
var _gsl_cdf_gumbel2_Qinv = Module["_gsl_cdf_gumbel2_Qinv"] = asm["_gsl_cdf_gumbel2_Qinv"];
var _gsl_ran_multinomial_lnpdf = Module["_gsl_ran_multinomial_lnpdf"] = asm["_gsl_ran_multinomial_lnpdf"];
var _gsl_sf_bessel_y2_e = Module["_gsl_sf_bessel_y2_e"] = asm["_gsl_sf_bessel_y2_e"];
var _gsl_ran_gaussian_tail = Module["_gsl_ran_gaussian_tail"] = asm["_gsl_ran_gaussian_tail"];
var _gsl_sf_bessel_y0_e = Module["_gsl_sf_bessel_y0_e"] = asm["_gsl_sf_bessel_y0_e"];
var _gsl_sf_lnfact_e = Module["_gsl_sf_lnfact_e"] = asm["_gsl_sf_lnfact_e"];
var _gsl_sf_gamma_inc_Q = Module["_gsl_sf_gamma_inc_Q"] = asm["_gsl_sf_gamma_inc_Q"];
var _gsl_cdf_gumbel1_P = Module["_gsl_cdf_gumbel1_P"] = asm["_gsl_cdf_gumbel1_P"];
var _gsl_cdf_gumbel1_Q = Module["_gsl_cdf_gumbel1_Q"] = asm["_gsl_cdf_gumbel1_Q"];
var _gsl_sf_dilog = Module["_gsl_sf_dilog"] = asm["_gsl_sf_dilog"];
var _gsl_sf_debye_2_e = Module["_gsl_sf_debye_2_e"] = asm["_gsl_sf_debye_2_e"];
var _gsl_sf_exp_mult = Module["_gsl_sf_exp_mult"] = asm["_gsl_sf_exp_mult"];
var _gsl_sf_bessel_yl = Module["_gsl_sf_bessel_yl"] = asm["_gsl_sf_bessel_yl"];
var _gsl_sf_lnbeta_e = Module["_gsl_sf_lnbeta_e"] = asm["_gsl_sf_lnbeta_e"];
var _gsl_sf_mathieu_Ms_array = Module["_gsl_sf_mathieu_Ms_array"] = asm["_gsl_sf_mathieu_Ms_array"];
var _gsl_sf_gegenpoly_n_e = Module["_gsl_sf_gegenpoly_n_e"] = asm["_gsl_sf_gegenpoly_n_e"];
var _gsl_ran_chisq_pdf = Module["_gsl_ran_chisq_pdf"] = asm["_gsl_ran_chisq_pdf"];
var _gsl_rng_name = Module["_gsl_rng_name"] = asm["_gsl_rng_name"];
var _gsl_ran_flat_pdf = Module["_gsl_ran_flat_pdf"] = asm["_gsl_ran_flat_pdf"];
var _gsl_sf_log_erfc = Module["_gsl_sf_log_erfc"] = asm["_gsl_sf_log_erfc"];
var _gsl_cdf_geometric_P = Module["_gsl_cdf_geometric_P"] = asm["_gsl_cdf_geometric_P"];
var _gsl_cdf_geometric_Q = Module["_gsl_cdf_geometric_Q"] = asm["_gsl_cdf_geometric_Q"];
var _gsl_sf_angle_restrict_pos_e = Module["_gsl_sf_angle_restrict_pos_e"] = asm["_gsl_sf_angle_restrict_pos_e"];
var _gsl_sf_bessel_Y0_e = Module["_gsl_sf_bessel_Y0_e"] = asm["_gsl_sf_bessel_Y0_e"];
var _gsl_sf_hyperg_2F1_conj_renorm_e = Module["_gsl_sf_hyperg_2F1_conj_renorm_e"] = asm["_gsl_sf_hyperg_2F1_conj_renorm_e"];
var _gsl_sf_lnchoose_e = Module["_gsl_sf_lnchoose_e"] = asm["_gsl_sf_lnchoose_e"];
var _gsl_sf_pochrel_e = Module["_gsl_sf_pochrel_e"] = asm["_gsl_sf_pochrel_e"];
var _gsl_sf_conicalP_cyl_reg_e = Module["_gsl_sf_conicalP_cyl_reg_e"] = asm["_gsl_sf_conicalP_cyl_reg_e"];
var _gsl_ran_exppow_pdf = Module["_gsl_ran_exppow_pdf"] = asm["_gsl_ran_exppow_pdf"];
var _gsl_sf_log = Module["_gsl_sf_log"] = asm["_gsl_sf_log"];
var _gsl_cdf_exppow_Q = Module["_gsl_cdf_exppow_Q"] = asm["_gsl_cdf_exppow_Q"];
var _gsl_cdf_exppow_P = Module["_gsl_cdf_exppow_P"] = asm["_gsl_cdf_exppow_P"];
var _gsl_sf_bessel_Jnu_e = Module["_gsl_sf_bessel_Jnu_e"] = asm["_gsl_sf_bessel_Jnu_e"];
var _gsl_sf_airy_Ai_deriv_scaled_e = Module["_gsl_sf_airy_Ai_deriv_scaled_e"] = asm["_gsl_sf_airy_Ai_deriv_scaled_e"];
var _gsl_sf_hyperg_U_int_e = Module["_gsl_sf_hyperg_U_int_e"] = asm["_gsl_sf_hyperg_U_int_e"];
var _gsl_sf_hyperg_2F1_conj_renorm = Module["_gsl_sf_hyperg_2F1_conj_renorm"] = asm["_gsl_sf_hyperg_2F1_conj_renorm"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _gsl_cdf_laplace_Q = Module["_gsl_cdf_laplace_Q"] = asm["_gsl_cdf_laplace_Q"];
var _gsl_cdf_laplace_P = Module["_gsl_cdf_laplace_P"] = asm["_gsl_cdf_laplace_P"];
var _gsl_sf_hyperg_2F1_e = Module["_gsl_sf_hyperg_2F1_e"] = asm["_gsl_sf_hyperg_2F1_e"];
var _gsl_cdf_chisq_Pinv = Module["_gsl_cdf_chisq_Pinv"] = asm["_gsl_cdf_chisq_Pinv"];
var _gsl_sf_hyperg_1F1_int_e = Module["_gsl_sf_hyperg_1F1_int_e"] = asm["_gsl_sf_hyperg_1F1_int_e"];
var _gsl_sf_bessel_i0_scaled = Module["_gsl_sf_bessel_i0_scaled"] = asm["_gsl_sf_bessel_i0_scaled"];
var _gsl_ran_binomial_pdf = Module["_gsl_ran_binomial_pdf"] = asm["_gsl_ran_binomial_pdf"];
var _gsl_sf_gammastar_e = Module["_gsl_sf_gammastar_e"] = asm["_gsl_sf_gammastar_e"];
var _gsl_sf_bessel_zero_J0_e = Module["_gsl_sf_bessel_zero_J0_e"] = asm["_gsl_sf_bessel_zero_J0_e"];
var _gsl_sf_transport_2_e = Module["_gsl_sf_transport_2_e"] = asm["_gsl_sf_transport_2_e"];
var _gsl_sf_Chi = Module["_gsl_sf_Chi"] = asm["_gsl_sf_Chi"];
var _gsl_sf_airy_zero_Ai_deriv = Module["_gsl_sf_airy_zero_Ai_deriv"] = asm["_gsl_sf_airy_zero_Ai_deriv"];
var _gsl_sf_erfc = Module["_gsl_sf_erfc"] = asm["_gsl_sf_erfc"];
var _gsl_sf_airy_Bi_deriv_scaled_e = Module["_gsl_sf_airy_Bi_deriv_scaled_e"] = asm["_gsl_sf_airy_Bi_deriv_scaled_e"];
var _gsl_sf_Shi = Module["_gsl_sf_Shi"] = asm["_gsl_sf_Shi"];
var _gsl_sf_eta_e = Module["_gsl_sf_eta_e"] = asm["_gsl_sf_eta_e"];
var _gsl_cdf_weibull_Q = Module["_gsl_cdf_weibull_Q"] = asm["_gsl_cdf_weibull_Q"];
var _gsl_cdf_weibull_P = Module["_gsl_cdf_weibull_P"] = asm["_gsl_cdf_weibull_P"];
var _gsl_sf_psi_n_e = Module["_gsl_sf_psi_n_e"] = asm["_gsl_sf_psi_n_e"];
var _gsl_sf_bessel_zero_Jnu = Module["_gsl_sf_bessel_zero_Jnu"] = asm["_gsl_sf_bessel_zero_Jnu"];
var _gsl_sf_gegenpoly_1 = Module["_gsl_sf_gegenpoly_1"] = asm["_gsl_sf_gegenpoly_1"];
var _gsl_cdf_tdist_Q = Module["_gsl_cdf_tdist_Q"] = asm["_gsl_cdf_tdist_Q"];
var _gsl_cdf_tdist_P = Module["_gsl_cdf_tdist_P"] = asm["_gsl_cdf_tdist_P"];
var _gsl_sf_legendre_Plm_e = Module["_gsl_sf_legendre_Plm_e"] = asm["_gsl_sf_legendre_Plm_e"];
var _gsl_sf_bessel_Knu_scaled = Module["_gsl_sf_bessel_Knu_scaled"] = asm["_gsl_sf_bessel_Knu_scaled"];
var _gsl_sf_airy_Bi_scaled = Module["_gsl_sf_airy_Bi_scaled"] = asm["_gsl_sf_airy_Bi_scaled"];
var _gsl_ran_sample = Module["_gsl_ran_sample"] = asm["_gsl_ran_sample"];
var _gsl_sf_legendre_Q1 = Module["_gsl_sf_legendre_Q1"] = asm["_gsl_sf_legendre_Q1"];
var _gsl_sf_bessel_I1_scaled = Module["_gsl_sf_bessel_I1_scaled"] = asm["_gsl_sf_bessel_I1_scaled"];
var _gsl_sf_bessel_kl_scaled_e = Module["_gsl_sf_bessel_kl_scaled_e"] = asm["_gsl_sf_bessel_kl_scaled_e"];
var _gsl_sf_complex_log_e = Module["_gsl_sf_complex_log_e"] = asm["_gsl_sf_complex_log_e"];
var _gsl_cdf_flat_Q = Module["_gsl_cdf_flat_Q"] = asm["_gsl_cdf_flat_Q"];
var _gsl_cdf_flat_P = Module["_gsl_cdf_flat_P"] = asm["_gsl_cdf_flat_P"];
var _gsl_sf_mathieu_alloc = Module["_gsl_sf_mathieu_alloc"] = asm["_gsl_sf_mathieu_alloc"];
var _gsl_sf_ellint_Ecomp_e = Module["_gsl_sf_ellint_Ecomp_e"] = asm["_gsl_sf_ellint_Ecomp_e"];
var _gsl_sf_bessel_Kn = Module["_gsl_sf_bessel_Kn"] = asm["_gsl_sf_bessel_Kn"];
var _gsl_cdf_laplace_Qinv = Module["_gsl_cdf_laplace_Qinv"] = asm["_gsl_cdf_laplace_Qinv"];
var _gsl_ran_landau = Module["_gsl_ran_landau"] = asm["_gsl_ran_landau"];
var _gsl_sf_legendre_Plm_deriv_array = Module["_gsl_sf_legendre_Plm_deriv_array"] = asm["_gsl_sf_legendre_Plm_deriv_array"];
var _gsl_cdf_poisson_P = Module["_gsl_cdf_poisson_P"] = asm["_gsl_cdf_poisson_P"];
var _gsl_cdf_poisson_Q = Module["_gsl_cdf_poisson_Q"] = asm["_gsl_cdf_poisson_Q"];
var _gsl_cdf_rayleigh_Qinv = Module["_gsl_cdf_rayleigh_Qinv"] = asm["_gsl_cdf_rayleigh_Qinv"];
var _gsl_ran_discrete_preproc = Module["_gsl_ran_discrete_preproc"] = asm["_gsl_ran_discrete_preproc"];
var _gsl_ran_discrete_pdf = Module["_gsl_ran_discrete_pdf"] = asm["_gsl_ran_discrete_pdf"];
var _gsl_sf_bessel_K1 = Module["_gsl_sf_bessel_K1"] = asm["_gsl_sf_bessel_K1"];
var _gsl_sf_bessel_K0 = Module["_gsl_sf_bessel_K0"] = asm["_gsl_sf_bessel_K0"];
var _gsl_ran_ugaussian_tail_pdf = Module["_gsl_ran_ugaussian_tail_pdf"] = asm["_gsl_ran_ugaussian_tail_pdf"];
var _gsl_ran_dirichlet_pdf = Module["_gsl_ran_dirichlet_pdf"] = asm["_gsl_ran_dirichlet_pdf"];
var _gsl_sf_legendre_Q1_e = Module["_gsl_sf_legendre_Q1_e"] = asm["_gsl_sf_legendre_Q1_e"];
var _gsl_ran_fdist_pdf = Module["_gsl_ran_fdist_pdf"] = asm["_gsl_ran_fdist_pdf"];
var _gsl_sf_Si_e = Module["_gsl_sf_Si_e"] = asm["_gsl_sf_Si_e"];
var _gsl_ran_dir_2d = Module["_gsl_ran_dir_2d"] = asm["_gsl_ran_dir_2d"];
var _gsl_sf_log_abs_e = Module["_gsl_sf_log_abs_e"] = asm["_gsl_sf_log_abs_e"];
var _gsl_cdf_tdist_Pinv = Module["_gsl_cdf_tdist_Pinv"] = asm["_gsl_cdf_tdist_Pinv"];
var _gsl_rng_free = Module["_gsl_rng_free"] = asm["_gsl_rng_free"];
var _gsl_cdf_gaussian_Pinv = Module["_gsl_cdf_gaussian_Pinv"] = asm["_gsl_cdf_gaussian_Pinv"];
var _gsl_sf_multiply_err_e = Module["_gsl_sf_multiply_err_e"] = asm["_gsl_sf_multiply_err_e"];
var _gsl_sf_debye_5_e = Module["_gsl_sf_debye_5_e"] = asm["_gsl_sf_debye_5_e"];
var _gsl_sf_hazard = Module["_gsl_sf_hazard"] = asm["_gsl_sf_hazard"];
var _gsl_cdf_rayleigh_Q = Module["_gsl_cdf_rayleigh_Q"] = asm["_gsl_cdf_rayleigh_Q"];
var _gsl_cdf_rayleigh_P = Module["_gsl_cdf_rayleigh_P"] = asm["_gsl_cdf_rayleigh_P"];
var _gsl_sf_pow_int = Module["_gsl_sf_pow_int"] = asm["_gsl_sf_pow_int"];
var _gsl_sf_fermi_dirac_1 = Module["_gsl_sf_fermi_dirac_1"] = asm["_gsl_sf_fermi_dirac_1"];
var _gsl_sf_fermi_dirac_0 = Module["_gsl_sf_fermi_dirac_0"] = asm["_gsl_sf_fermi_dirac_0"];
var _gsl_sf_ellint_Kcomp_e = Module["_gsl_sf_ellint_Kcomp_e"] = asm["_gsl_sf_ellint_Kcomp_e"];
var _gsl_sf_airy_zero_Ai_deriv_e = Module["_gsl_sf_airy_zero_Ai_deriv_e"] = asm["_gsl_sf_airy_zero_Ai_deriv_e"];
var _gsl_sf_bessel_K0_scaled_e = Module["_gsl_sf_bessel_K0_scaled_e"] = asm["_gsl_sf_bessel_K0_scaled_e"];
var _memset = Module["_memset"] = asm["_memset"];
var _gsl_sf_complex_dilog_e = Module["_gsl_sf_complex_dilog_e"] = asm["_gsl_sf_complex_dilog_e"];
var _gsl_cdf_ugaussian_Qinv = Module["_gsl_cdf_ugaussian_Qinv"] = asm["_gsl_cdf_ugaussian_Qinv"];
var _gsl_ran_choose = Module["_gsl_ran_choose"] = asm["_gsl_ran_choose"];
var _gsl_cdf_beta_P = Module["_gsl_cdf_beta_P"] = asm["_gsl_cdf_beta_P"];
var _gsl_cdf_beta_Q = Module["_gsl_cdf_beta_Q"] = asm["_gsl_cdf_beta_Q"];
var _gsl_sf_bessel_i0_scaled_e = Module["_gsl_sf_bessel_i0_scaled_e"] = asm["_gsl_sf_bessel_i0_scaled_e"];
var _gsl_sf_sin_e = Module["_gsl_sf_sin_e"] = asm["_gsl_sf_sin_e"];
var _gsl_ran_geometric = Module["_gsl_ran_geometric"] = asm["_gsl_ran_geometric"];
var _gsl_sf_bessel_Y1 = Module["_gsl_sf_bessel_Y1"] = asm["_gsl_sf_bessel_Y1"];
var _gsl_sf_bessel_Y0 = Module["_gsl_sf_bessel_Y0"] = asm["_gsl_sf_bessel_Y0"];
var _gsl_sf_atanint = Module["_gsl_sf_atanint"] = asm["_gsl_sf_atanint"];
var _gsl_sf_fermi_dirac_0_e = Module["_gsl_sf_fermi_dirac_0_e"] = asm["_gsl_sf_fermi_dirac_0_e"];
var _gsl_sf_transport_5 = Module["_gsl_sf_transport_5"] = asm["_gsl_sf_transport_5"];
var _gsl_sf_transport_4 = Module["_gsl_sf_transport_4"] = asm["_gsl_sf_transport_4"];
var _gsl_sf_transport_3 = Module["_gsl_sf_transport_3"] = asm["_gsl_sf_transport_3"];
var _gsl_sf_transport_2 = Module["_gsl_sf_transport_2"] = asm["_gsl_sf_transport_2"];
var _gsl_ran_multinomial_pdf = Module["_gsl_ran_multinomial_pdf"] = asm["_gsl_ran_multinomial_pdf"];
var _gsl_sf_fermi_dirac_2_e = Module["_gsl_sf_fermi_dirac_2_e"] = asm["_gsl_sf_fermi_dirac_2_e"];
var _gsl_sf_debye_1_e = Module["_gsl_sf_debye_1_e"] = asm["_gsl_sf_debye_1_e"];
var _gsl_cdf_gumbel2_Q = Module["_gsl_cdf_gumbel2_Q"] = asm["_gsl_cdf_gumbel2_Q"];
var _gsl_cdf_gumbel2_P = Module["_gsl_cdf_gumbel2_P"] = asm["_gsl_cdf_gumbel2_P"];
var _gsl_sf_log_1plusx_mx = Module["_gsl_sf_log_1plusx_mx"] = asm["_gsl_sf_log_1plusx_mx"];
var _gsl_sf_lambert_W0 = Module["_gsl_sf_lambert_W0"] = asm["_gsl_sf_lambert_W0"];
var _gsl_sf_conicalP_1_e = Module["_gsl_sf_conicalP_1_e"] = asm["_gsl_sf_conicalP_1_e"];
var _gsl_sf_bessel_i1_scaled_e = Module["_gsl_sf_bessel_i1_scaled_e"] = asm["_gsl_sf_bessel_i1_scaled_e"];
var _gsl_rng_uniform_int = Module["_gsl_rng_uniform_int"] = asm["_gsl_rng_uniform_int"];
var _gsl_sf_airy_Ai = Module["_gsl_sf_airy_Ai"] = asm["_gsl_sf_airy_Ai"];
var _gsl_sf_fermi_dirac_mhalf = Module["_gsl_sf_fermi_dirac_mhalf"] = asm["_gsl_sf_fermi_dirac_mhalf"];
var _gsl_sf_legendre_H3d_0 = Module["_gsl_sf_legendre_H3d_0"] = asm["_gsl_sf_legendre_H3d_0"];
var _gsl_sf_gamma = Module["_gsl_sf_gamma"] = asm["_gsl_sf_gamma"];
var _gsl_sf_bessel_j1 = Module["_gsl_sf_bessel_j1"] = asm["_gsl_sf_bessel_j1"];
var _gsl_sf_erf_e = Module["_gsl_sf_erf_e"] = asm["_gsl_sf_erf_e"];
var _gsl_sf_coulomb_CL_array = Module["_gsl_sf_coulomb_CL_array"] = asm["_gsl_sf_coulomb_CL_array"];
var _gsl_sf_dawson_e = Module["_gsl_sf_dawson_e"] = asm["_gsl_sf_dawson_e"];
var _gsl_sf_erfc_e = Module["_gsl_sf_erfc_e"] = asm["_gsl_sf_erfc_e"];
var _gsl_sf_erf_Q = Module["_gsl_sf_erf_Q"] = asm["_gsl_sf_erf_Q"];
var _gsl_sf_exp_mult_err_e = Module["_gsl_sf_exp_mult_err_e"] = asm["_gsl_sf_exp_mult_err_e"];
var _gsl_sf_bessel_Y1_e = Module["_gsl_sf_bessel_Y1_e"] = asm["_gsl_sf_bessel_Y1_e"];
var _gsl_sf_lngamma_sgn_e = Module["_gsl_sf_lngamma_sgn_e"] = asm["_gsl_sf_lngamma_sgn_e"];
var _gsl_sf_erf_Z = Module["_gsl_sf_erf_Z"] = asm["_gsl_sf_erf_Z"];
var _gsl_sf_bessel_I0_scaled_e = Module["_gsl_sf_bessel_I0_scaled_e"] = asm["_gsl_sf_bessel_I0_scaled_e"];
var _gsl_sf_psi_1 = Module["_gsl_sf_psi_1"] = asm["_gsl_sf_psi_1"];
var _gsl_sf_fermi_dirac_inc_0_e = Module["_gsl_sf_fermi_dirac_inc_0_e"] = asm["_gsl_sf_fermi_dirac_inc_0_e"];
var _gsl_ran_gamma = Module["_gsl_ran_gamma"] = asm["_gsl_ran_gamma"];
var _gsl_sf_mathieu_free = Module["_gsl_sf_mathieu_free"] = asm["_gsl_sf_mathieu_free"];
var _gsl_sf_lnsinh = Module["_gsl_sf_lnsinh"] = asm["_gsl_sf_lnsinh"];
var _gsl_sf_airy_Ai_scaled = Module["_gsl_sf_airy_Ai_scaled"] = asm["_gsl_sf_airy_Ai_scaled"];
var _gsl_sf_cos = Module["_gsl_sf_cos"] = asm["_gsl_sf_cos"];
var _gsl_sf_mathieu_ce = Module["_gsl_sf_mathieu_ce"] = asm["_gsl_sf_mathieu_ce"];
var _gsl_ran_exponential_pdf = Module["_gsl_ran_exponential_pdf"] = asm["_gsl_ran_exponential_pdf"];
var _gsl_sf_bessel_zero_J1_e = Module["_gsl_sf_bessel_zero_J1_e"] = asm["_gsl_sf_bessel_zero_J1_e"];
var _gsl_sf_lncosh = Module["_gsl_sf_lncosh"] = asm["_gsl_sf_lncosh"];
var _gsl_sf_bessel_Jn_array = Module["_gsl_sf_bessel_Jn_array"] = asm["_gsl_sf_bessel_Jn_array"];
var _gsl_sf_bessel_J0_e = Module["_gsl_sf_bessel_J0_e"] = asm["_gsl_sf_bessel_J0_e"];
var _gsl_sf_ellint_P = Module["_gsl_sf_ellint_P"] = asm["_gsl_sf_ellint_P"];
var _gsl_sf_psi_n = Module["_gsl_sf_psi_n"] = asm["_gsl_sf_psi_n"];
var _gsl_sf_bessel_Jn_e = Module["_gsl_sf_bessel_Jn_e"] = asm["_gsl_sf_bessel_Jn_e"];
var _gsl_sf_fermi_dirac_3half_e = Module["_gsl_sf_fermi_dirac_3half_e"] = asm["_gsl_sf_fermi_dirac_3half_e"];
var _gsl_sf_psi_e = Module["_gsl_sf_psi_e"] = asm["_gsl_sf_psi_e"];
var _gsl_sf_gammastar = Module["_gsl_sf_gammastar"] = asm["_gsl_sf_gammastar"];
var _gsl_sf_ellint_E = Module["_gsl_sf_ellint_E"] = asm["_gsl_sf_ellint_E"];
var _gsl_sf_ellint_D = Module["_gsl_sf_ellint_D"] = asm["_gsl_sf_ellint_D"];
var _gsl_sf_ellint_F = Module["_gsl_sf_ellint_F"] = asm["_gsl_sf_ellint_F"];
var _gsl_sf_bessel_y2 = Module["_gsl_sf_bessel_y2"] = asm["_gsl_sf_bessel_y2"];
var _gsl_sf_bessel_y1 = Module["_gsl_sf_bessel_y1"] = asm["_gsl_sf_bessel_y1"];
var _gsl_sf_bessel_y0 = Module["_gsl_sf_bessel_y0"] = asm["_gsl_sf_bessel_y0"];
var _gsl_sf_airy_Ai_deriv_e = Module["_gsl_sf_airy_Ai_deriv_e"] = asm["_gsl_sf_airy_Ai_deriv_e"];
var _gsl_sf_hyperg_0F1_e = Module["_gsl_sf_hyperg_0F1_e"] = asm["_gsl_sf_hyperg_0F1_e"];
var _gsl_sf_hyperg_U_int_e10_e = Module["_gsl_sf_hyperg_U_int_e10_e"] = asm["_gsl_sf_hyperg_U_int_e10_e"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}







